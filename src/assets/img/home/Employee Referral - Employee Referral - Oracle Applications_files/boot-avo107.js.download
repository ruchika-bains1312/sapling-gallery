var AdfCopyright = "Copyright (c) 2008, 2009, Oracle and/or its affiliates. All rights reserved.";
var AdfBootstrap = new Object;
Date.prototype.equals = function(otherDate) {
  var rtn = false;
  if(otherDate["getUTCDate"]) {
    rtn = this.valueOf() == otherDate.valueOf()
  }
  return rtn
};
AdfBootstrap._startTime = (new Date).getTime();

AdfStrings = new Object;
AdfStrings.COMMA = ",";
AdfStrings.START_CURLY_BRACKET = "{";
AdfStrings.CLOSE_CURLY_BRACKET = "}";
AdfStrings.EQUALS = "=";
AdfStrings.count = function(searchString, matchString) {
  AdfAssert.assertString(searchString);
  AdfAssert.assertNonEmptyString(matchString);
  var matchCount = 0;
  var currSearchIndex = 0;
  var searchSize = searchString.length;
  var matchSize = matchString.length;
  while(currSearchIndex < searchSize) {
    currSearchIndex = searchString.indexOf(matchString, currSearchIndex);
    if(currSearchIndex == -1) {
      break
    }else {
      matchCount++;
      currSearchIndex += matchSize
    }
  }
  return matchCount
};
AdfStrings.initUpperCase = function(inString) {
  if(!inString) {
    return inString
  }
  var firstChar = inString.charAt(0);
  var upperFirstChar = firstChar.toUpperCase();
  return firstChar == upperFirstChar ? inString : upperFirstChar + inString.substr(1)
};
AdfStrings.createConstantName = function(inString) {
  var constantString = inString.replace(AdfStrings._CONSTANT_REGEXP, AdfStrings._REPLACE_PATTERN);
  constantString = constantString.toUpperCase();
  return constantString
};
AdfStrings._CONSTANT_REGEXP = /([A-Z])/g;
AdfStrings._REPLACE_PATTERN = "_$1";

AdfAssert.FUNC_NAME_PROPERTY = "_funcName";
AdfAssert.CLASS_NAME_PROPERTY = "_className";
AdfAssert._MAX_STACK_DEPTH_LIMIT = 20;
AdfAssert.assert = function(condition, message) {
  if(AdfAssert.DEBUG && !condition) {
    if(arguments.length > 2) {
      message += "(";
      for(var i = 2;i < arguments.length;i++) {
        message += arguments[i]
      }
      message += ")"
    }
    AdfAssert.assertionFailed(message, 1)
  }
};
AdfAssert.failedInAbstractFunction = function() {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertionFailed("Abstract function called", 1)
  }
};
AdfAssert.assertPrototype = function(target, theConstructor, reason) {
  if(AdfAssert.DEBUG) {
    if(target != null) {
      AdfAssert.assertType(theConstructor, "function", null, 1, false);
      var thePrototype = theConstructor.prototype;
      if(!thePrototype.isPrototypeOf(target)) {
        if(!reason && typeof thePrototype.getTypeName == "function") {
          reason = thePrototype.getTypeName()
        }
        AdfAssert.assertionFailed("object '" + target + "' doesn't match prototype " + thePrototype, 1, reason)
      }
    }else {
      AdfAssert.assertionFailed("null object doesn't match prototype " + thePrototype, 1, reason)
    }
  }
};
AdfAssert.assertPrototypeOrNull = function(target, theConstructor, reason) {
  if(AdfAssert.DEBUG && target != null) {
    if(target != null) {
      AdfAssert.assertType(theConstructor, "function", null, 1, false);
      var thePrototype = theConstructor.prototype;
      if(!thePrototype.isPrototypeOf(target)) {
        AdfAssert.assertionFailed("object '" + target + "' doesn't match prototype " + thePrototype, 1, reason)
      }
    }else {
      AdfAssert.assertionFailed("null object doesn't match prototype " + thePrototype, 1, reason)
    }
  }
};
AdfAssert.assertPrototypes = function(target, instanceOne, instanceTwo, reason) {
  if(AdfAssert.DEBUG) {
    var thePrototype = instanceOne.prototype;
    var thePrototypeTwo = instanceTwo.prototype;
    if(!(thePrototype.isPrototypeOf(target) || thePrototypeTwo.isPrototypeOf(target))) {
      AdfAssert.assertionFailed("object '" + target + "' doesn't match prototype " + thePrototype + " or " + thePrototypeTwo, 1, reason)
    }
  }
};
AdfAssert.assertDomNodeOrNull = function(target, depth) {
  if(AdfAssert.DEBUG && target) {
    if(target["nodeType"] == undefined) {
      AdfAssert.assertionFailed(target + " is not a DOM Node", depth + 1)
    }
  }
};
AdfAssert.assertDomNode = function(target, depth) {
  if(AdfAssert.DEBUG) {
    if(!target || target["nodeType"] == undefined) {
      AdfAssert.assertionFailed(target + " is not a DOM Node", depth + 1)
    }
  }
};
AdfAssert.assertDomElement = function(target, nodeName) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertDomNode(target, 1);
    if(target.nodeType != 1) {
      AdfAssert.assertionFailed(target + " is not a DOM Element", 1)
    }else {
      if(nodeName && target.nodeName != nodeName) {
        AdfAssert.assertionFailed(target + " is not a " + nodeName + " Element", 1)
      }
    }
  }
};
AdfAssert.assertDomElementOrNull = function(target, nodeName) {
  if(AdfAssert.DEBUG && target != null) {
    AdfAssert.assertDomNode(target, 1);
    if(target.nodeType != 1) {
      AdfAssert.assertionFailed(target + " is not a DOM Element", 1)
    }else {
      if(nodeName && target.nodeName != nodeName) {
        AdfAssert.assertionFailed(target + " is not a " + nodeName + " Element", 1)
      }
    }
  }
};
AdfAssert.assertType = function(target, type, prefix, depth, nullOK) {
  if(AdfAssert.DEBUG) {
    if(!(target == null && nullOK || typeof target == type)) {
      var message = target + " is not of type " + type;
      if(prefix) {
        message = prefix + message
      }
      if(!depth) {
        depth = 0
      }
      AdfAssert.assertionFailed(message, depth + 1)
    }
  }
};
AdfAssert.assertObject = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "object", prefix, 1, false)
  }
};
AdfAssert.assertObjectOrNull = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "object", prefix, 1, true)
  }
};
AdfAssert.assertDate = function(target, prefix, nullOK) {
  if(AdfAssert.DEBUG) {
    if(!(target == null && nullOK || target instanceof Date)) {
      var message = target + " is not of type Date";
      if(prefix) {
        message = prefix + message
      }
      AdfAssert.assertionFailed(message)
    }
  }
};
AdfAssert.assertNonEmptyString = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "string", prefix, 1, false);
    AdfAssert.assert(target.length > 0, "empty string")
  }
};
AdfAssert.assertString = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "string", prefix, 1, false)
  }
};
AdfAssert.assertStringOrNull = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "string", prefix, 1, true)
  }
};
AdfAssert.assertFunction = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "function", prefix, 1, false)
  }
};
AdfAssert.assertFunctionOrNull = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "function", prefix, 1, true)
  }
};
AdfAssert.assertBoolean = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "boolean", prefix, 1, false)
  }
};
AdfAssert.assertBooleanOrNull = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "boolean", prefix, 1, true)
  }
};
AdfAssert.assertNumber = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "number", prefix, 1, false)
  }
};
AdfAssert.assertNumberOrNull = function(target, prefix) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertType(target, "number", prefix, 1, true)
  }
};
AdfAssert.assertArray = function(target, message) {
  if(AdfAssert.DEBUG) {
    if(!AdfCollections.isArray(target)) {
      if(message == undefined) {
        message = target + " is not an array"
      }
      AdfAssert.assertionFailed(message, 1)
    }
  }
};
AdfAssert.assertArrayOrNull = function(target, message) {
  if(AdfAssert.DEBUG && target != null) {
    if(!AdfCollections.isArray(target)) {
      if(message == undefined) {
        message = target + " is not an array"
      }
      AdfAssert.assertionFailed(message, 1)
    }
  }
};
AdfAssert.assertArrrayAndNotNull = function(target, message) {
  if(AdfAssert.DEBUG && (target == null || !AdfCollections.isArray(target))) {
    if(message == undefined) {
      message = target + " is not an array"
    }
    AdfAssert.assertionFailed(message, 1)
  }
};
AdfAssert.assertNonNumeric = function(target, message) {
  if(AdfAssert.DEBUG) {
    if(!isNaN(target)) {
      if(message == undefined) {
        message = target + " is convertible to a number"
      }
      AdfAssert.assertionFailed(message, 1)
    }
  }
};
AdfAssert.assertNumeric = function(target, message) {
  if(AdfAssert.DEBUG) {
    if(isNaN(target)) {
      if(message == undefined) {
        message = target + " is not convertible to a number"
      }
      AdfAssert.assertionFailed(message, 1)
    }
  }
};
AdfAssert.assertInSet = function(value, set, message) {
  if(value == null || set[value.toString()] == undefined) {
    if(message == undefined) {
      var keyString = " is not in set: {";
      for(var k in set) {
        keyString += k;
        keyString += ","
      }
      keyString += "}";
      message = value + keyString
    }
    AdfAssert.assertionFailed(message, 1)
  }
};
AdfAssert.assertionFailed = function(message, skipLevel, reason) {
  if(!skipLevel) {
    skipLevel = 0
  }
  var errorMessage = "Assertion";
  if(reason) {
    errorMessage += " (" + reason + ")"
  }
  errorMessage += " failed: ";
  if(message != undefined) {
    errorMessage += message
  }
  var stackTrace = AdfAssert._getStackTrace(skipLevel + 1);
  var stackTraceString = AdfAssert._getStackString(stackTrace);
  errorMessage += "\nStackTrace:\n" + stackTraceString;
  var error = new Error(errorMessage);
  alert(errorMessage);
  throw error;
};
AdfAssert.getFunctionName = function(func) {
  var funcName = func[AdfAssert.FUNC_NAME_PROPERTY];
  if(funcName == undefined) {
    var functionString = func.toString();
    var startFuncParamsIndex = functionString.indexOf("(");
    var startFuncNameIndex = functionString.lastIndexOf(" ", startFuncParamsIndex);
    funcName = functionString.substring(startFuncNameIndex + 1, startFuncParamsIndex);
    if(!funcName.length) {
      funcName = null
    }
    func[AdfAssert.FUNC_NAME_PROPERTY] = funcName
  }
  return funcName
};
AdfAssert.getStackString = function(depth) {
  if(depth == null) {
    depth = 1
  }
  return AdfAssert._getStackString(AdfAssert._getStackTrace(1))
};
AdfAssert._getStackTrace = function(skipLevel) {
  if(skipLevel == undefined) {
    skipLevel = 0
  }
  AdfAssert.assert(skipLevel >= 0);
  var stackTrace = new Array;
  try {
    var currCaller = AdfAssert._getStackTrace.caller;
    while(currCaller && stackTrace.length < AdfAssert._MAX_STACK_DEPTH_LIMIT) {
      if(!skipLevel) {
        stackTrace.push(currCaller)
      }else {
        skipLevel--
      }
      currCaller = currCaller.caller
    }
  }catch(e) {
  }
  return stackTrace
};
AdfAssert._getFuncParams = function(func) {
  var funcParams = func[AdfAssert._PARAMS_NAME_PROPERTY];
  if(funcParams == undefined) {
    var currFunctionString = func.toString();
    var startFuncParams = currFunctionString.indexOf("(");
    var endFuncParams = currFunctionString.indexOf(")", startFuncParams + 1);
    funcParams = currFunctionString.substring(startFuncParams, endFuncParams + 1);
    funcParams = funcParams.replace(/\s+/g, "");
    if(!funcParams.length) {
      funcParams = null
    }
    func[AdfAssert._PARAMS_NAME_PROPERTY] = funcParams
  }
  return funcParams
};
AdfAssert._getStackString = function(stackTrace) {
  if(!stackTrace) {
    return""
  }
  var functionCount = stackTrace.length;
  var stackStrings = new Array(functionCount);
  for(var stackIndex = 0;stackIndex < functionCount;stackIndex++) {
    var currFunction = stackTrace[stackIndex];
    var funcName = AdfAssert.getFunctionName(currFunction);
    if(!funcName) {
      funcName = "anonymous"
    }
    var className = currFunction[AdfAssert.CLASS_NAME_PROPERTY];
    if(className) {
      funcName = className + "." + funcName
    }
    var funcParams = AdfAssert._getFuncParams(currFunction);
    var functionArgs = currFunction.arguments;
    var argCount = functionArgs.length;
    var argsArray = null;
    if(argCount) {
      argsArray = new Array(argCount);
      for(var argIndex = 0;argIndex < argCount;argIndex++) {
        var currArg = functionArgs[argIndex];
        if(typeof currArg == "function") {
          var argFuncName = AdfAssert.getFunctionName(currArg);
          if(!argFuncName) {
            argFuncName = "anonymous"
          }
          var argFuncParams = AdfAssert._getFuncParams(currArg);
          currArg = "function " + argFuncName + argFuncParams
        }
        argsArray[argIndex] = currArg
      }
    }
    var stackStringArray = new Array;
    stackStringArray[0] = funcName;
    stackStringArray[1] = funcParams;
    if(argsArray) {
      stackStringArray[2] = "\n";
      stackStringArray[3] = "[";
      stackStringArray[4] = AdfAssert._safeJoin(argsArray, ",");
      stackStringArray[5] = "]"
    }
    stackStrings[stackIndex] = stackStringArray.join("")
  }
  return stackStrings.join("\n")
};
AdfAssert._safeJoin = function(arr, sep) {
  var length = arr.length;
  var joinedString = "";
  for(var i = 0;i < length;i++) {
    var ele = arr[i];
    var str = ele ? ele.toString ? ele.toString() : "Unknown" : "(empty)";
    joinedString += str;
    if(sep) {
      if(i < length - 1) {
        joinedString += sep
      }
    }
  }
  return joinedString
};
AdfAssert._PARAMS_NAME_PROPERTY = "_funcParams";

function AdfObject() {
  this.Init()
}
AdfObject.superclass = null;
AdfObject._GET_FUNCTION_NAME_REGEXP = /function\s+([\w\$][\w\$\d]*)\s*\(/;
AdfObject.prototype = new Object;
AdfObject.prototype.constructor = AdfObject;
AdfObject.createSubclass = function(extendingClass, baseClass, typeName, classInitializationState) {
  AdfAssert.assertFunction(extendingClass);
  AdfAssert.assertFunctionOrNull(baseClass);
  AdfAssert.assertStringOrNull(typeName);
  if(baseClass == undefined) {
    baseClass = AdfObject
  }
  AdfAssert.assert(extendingClass != baseClass, "Class can't extend itself");
  var tempConstructor = AdfObject._tempSubclassConstructor;
  tempConstructor.prototype = baseClass.prototype;
  extendingClass.prototype = new tempConstructor;
  extendingClass.prototype.constructor = extendingClass;
  extendingClass.superclass = baseClass.prototype;
  if(typeName) {
    extendingClass._typeName = typeName
  }
  if(classInitializationState !== undefined) {
    extendingClass._classInitializationState = classInitializationState
  }
};
AdfObject._tempSubclassConstructor = function() {
};
AdfObject.prototype.getClass = function(otherInstance) {
  if(otherInstance == undefined) {
    otherInstance = this
  }else {
    if(otherInstance == null) {
      return null
    }
  }
  return otherInstance["constructor"]
};
AdfObject.prototype.adopt = function(theRawObject) {
  AdfCollections.copyInto(this, theRawObject)
};
AdfObject.prototype.clone = function() {
  var clone = new this.constructor;
  AdfCollections.copyInto(clone, this);
  return clone
};
AdfObject.prototype.toString = function() {
  return this.toDebugString()
};
AdfObject.prototype.toDebugString = function() {
  return this.getTypeName() + " Object"
};
AdfObject.getTypeName = function(clazz) {
  AdfAssert.assertFunction(clazz);
  var typeName = clazz._typeName;
  if(typeName == null) {
    var constructorText = clazz.toString();
    var matches = AdfObject._GET_FUNCTION_NAME_REGEXP.exec(constructorText);
    typeName = matches[1];
    clazz._typeName = typeName
  }
  return typeName
};
AdfObject.prototype.getTypeName = function() {
  return AdfObject.getTypeName(this.constructor)
};
AdfObject.prototype.Init = function() {
  if(AdfAssert.DEBUG) {
    AdfAssert.assert(this["getTypeName"], "Not an AdfObject")
  }
  var currClass = this.constructor;
  if(!currClass._initialized) {
    AdfObject._initClasses(currClass)
  }
};
AdfObject.ensureClassInitialization = function(clazz) {
  AdfAssert.assertFunction(clazz);
  if(!clazz._initialized) {
    AdfObject._initClasses(clazz)
  }
};
AdfObject.prototype.GetLazyMapProperty = function(propName, createIfNonexistent, otherInstance) {
  if(otherInstance == undefined) {
    otherInstance = this
  }
  var property = otherInstance[propName];
  if(property == undefined && createIfNonexistent) {
    property = new Object;
    otherInstance[propName] = property
  }
  return property
};
AdfObject.prototype.GetLazyArrayProperty = function(propName, createIfNonexistent, otherInstance) {
  if(otherInstance == undefined) {
    otherInstance = this
  }
  var property = otherInstance[propName];
  if(property == undefined && createIfNonexistent) {
    property = new Array;
    otherInstance[propName] = property
  }
  return property
};
AdfObject.prototype.equals = function(object) {
  return this === object
};
AdfObject.prototype.createCallback = function(func) {
  AdfAssert.assertFunction(func);
  var funcName = func[AdfAssert.FUNC_NAME_PROPERTY];
  AdfAssert.assertString(funcName);
  var proxyFunction = new Function("var f=arguments.callee; return f._func.apply(f._owner, arguments);");
  proxyFunction._owner = this;
  proxyFunction._func = func;
  return proxyFunction
};
AdfObject.createInitializedObject = function() {
  var argCount = arguments.length;
  AdfAssert.assert(argCount % 2 == 0, "every key must have a value");
  var newObject = new Object;
  for(var i = 0;i < argCount;i++) {
    var currKey = arguments[i];
    AdfAssert.assertString(currKey);
    i++;
    newObject[currKey] = arguments[i]
  }
  return newObject
};
AdfObject._applyFunctionProperties = function(target, className) {
  var funcNameProperty = AdfAssert.FUNC_NAME_PROPERTY;
  var classNameProperty = AdfAssert.CLASS_NAME_PROPERTY;
  for(currPropName in target) {
    var currProp = target[currPropName];
    if(typeof currProp == "function") {
      if(!currProp.hasOwnProperty(funcNameProperty)) {
        currProp[funcNameProperty] = currPropName;
        currProp[classNameProperty] = className
      }
    }
  }
};
AdfObject._initClasses = function(currClass) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertFunction(currClass);
    AdfAssert.assert(!currClass._initialized)
  }
  currClass._initialized = true;
  var superclass = currClass.superclass;
  if(superclass) {
    var superclassConstructor = superclass.constructor;
    if(superclassConstructor && !superclassConstructor._initialized) {
      AdfObject._initClasses(superclassConstructor)
    }
  }
  var typeName = AdfObject.getTypeName(currClass);
  try {
    var InitClassFunc = currClass.InitClass;
    if(InitClassFunc) {
      var initializationState = currClass._classInitializationState;
      InitClassFunc.call(currClass, initializationState);
      if(initializationState !== undefined) {
        delete currClass._classInitializationState
      }
    }
  }finally {
    if(AdfAssert.DEBUG) {
      AdfObject._applyFunctionProperties(currClass.prototype, typeName);
      AdfObject._applyFunctionProperties(currClass, "static " + typeName)
    }
  }
};

if(window["AdfCheckpoint"] == undefined) {
  var constructorFunction = new Function("id", "group", "{}");
  constructorFunction.prototype.setDescription = function(desc) {
  };
  constructorFunction.prototype.getDescription = function() {
  };
  constructorFunction.prototype.start = function(callingMethod, params) {
  };
  constructorFunction.prototype.stop = function(uid) {
  };
  constructorFunction.getCheckpoint = function(id, group) {
    return new AdfCheckpoint(id, group)
  };
  window["AdfCheckpoint"] = constructorFunction
}
;
AdfLogRecord.LEVEL_FIELD = "level";
AdfLogRecord.MESSAGE_FIELD = "message";
AdfLogRecord.WHEN_FIELD = "when";
AdfLogRecord.ERROR_FIELD = "error";
function AdfLogRecord(level, message, error, when, responseId) {
  AdfAssert.assertNumeric(level);
  AdfAssert.assertStringOrNull(message);
  AdfAssert.assertPrototypeOrNull(when, Date);
  if(!when) {
    when = new Date
  }
  if(!responseId) {
    var adfPage = window["AdfPage"];
    if(adfPage && adfPage.PAGE) {
      responseId = adfPage.PAGE.getResponseIdentifier()
    }
  }
  if(!responseId) {
    responseId = "<Unknown>"
  }
  this.level = level;
  this.message = message;
  this.error = error;
  this.when = when;
  this.responseId = responseId
}
;
function AdfLogWriter() {
  this.Init()
}
AdfObject.createSubclass(AdfLogWriter);
AdfLogWriter.prototype.publish = function(record) {
  this.CheckIfClosed();
  AdfAssert.assert(record, "null logRecord");
  var filter = this._filter;
  if(filter && !filter(record)) {
    return
  }
  this.PublishImpl(record)
};
AdfLogWriter.prototype.flush = function() {
  this.CheckIfClosed()
};
AdfLogWriter.prototype.close = function() {
  this.flush();
  this._closed = true
};
AdfLogWriter.prototype.setFilter = function(newFilter) {
  AdfAssert.assertFunctionOrNull(newFilter);
  this._filter = newFilter
};
AdfLogWriter.prototype.getFilter = function() {
  return this._filter
};
AdfLogWriter.prototype.Init = function() {
  AdfLogWriter.superclass.Init.call(this);
  this._closed = false;
  this._filter = null
};
AdfLogWriter.prototype.PublishImpl = function(record) {
};
AdfLogWriter.prototype.CheckIfClosed = function() {
  if(AdfAssert.DEBUG) {
    AdfAssert.assert(!this._closed, this + " is already closed")
  }
};
AdfLogWriter.prototype.FormatMessage = function(message) {
  return message
};
AdfLogWriter.prototype.FormatLevel = function(level) {
  var severity = AdfLogger.__reverseMap[level];
  if(severity == null) {
    severity = "" + level
  }
  return severity
};
AdfLogWriter.prototype.FormatError = function(error) {
  if(error) {
    return AdfUIUtils.getPropertiesAsString(error, undefined, false, false)
  }else {
    return""
  }
};
AdfLogWriter.prototype.FormatWhen = function(when) {
  if(when) {
    var timeString = when.toTimeString();
    var lastOpenParen = timeString.indexOf(" ");
    if(lastOpenParen != -1) {
      timeString = timeString.substring(0, lastOpenParen)
    }
    return timeString
  }else {
    return null
  }
};
AdfLogWriter.prototype.FormatLogRecord = function(logRecord) {
  var formatted = "message='" + this.FormatMessage(logRecord[AdfLogRecord.MESSAGE_FIELD]);
  var severity = this.FormatLevel(logRecord[AdfLogRecord.LEVEL_FIELD]);
  formatted += "' level=" + severity;
  var error = this.FormatError(logRecord[AdfLogRecord.ERROR_FIELD]);
  if(error) {
    formatted += " error=" + error
  }
  formatted += " at " + this.FormatWhen(logRecord[AdfLogRecord.WHEN_FIELD]);
  return formatted
};

function AdfBufferedLogWriter() {
  this.Init()
}
AdfObject.createSubclass(AdfBufferedLogWriter, AdfLogWriter);
AdfBufferedLogWriter.prototype.getLogRecords = function() {
  return this._loggedMessages.concat()
};
AdfBufferedLogWriter.prototype.flush = function() {
  this.CheckIfClosed();
  if(this._loggedMessages.length) {
    this.Clear()
  }
};
AdfBufferedLogWriter.prototype.Init = function() {
  AdfBufferedLogWriter.superclass.Init.call(this);
  this._loggedMessages = new Array
};
AdfBufferedLogWriter.prototype.Clear = function() {
  this._loggedMessages = new Array
};
AdfBufferedLogWriter.prototype.PublishImpl = function(logRecord) {
  this.CheckIfClosed();
  AdfAssert.assert(logRecord, "null logRecord");
  this._loggedMessages.push(logRecord)
};

function AdfServerLogWriter() {
  this.Init()
}
AdfObject.createSubclass(AdfServerLogWriter, AdfLogWriter);
AdfServerLogWriter.prototype.flush = function() {
  this.CheckIfClosed();
  if(this._loggedMessages.length) {
    var json = window["JSON"];
    if(json) {
      var xmlHttp = AdfAgent.AGENT.createXMLHttpRequest();
      if(xmlHttp) {
        this._sendRequest(xmlHttp, this._loggedMessages)
      }
    }
    this._clear()
  }
};
AdfServerLogWriter._JSONStringifyRecord = function(logRecord) {
  try {
    return JSON.stringify(logRecord)
  }catch(stringifyError) {
    return null
  }
};
AdfServerLogWriter._RECORD_PROPERTIES = ["level", "message", "error", "when", "responseId"];
AdfServerLogWriter._jsonProperty = function(key, value) {
  if(value === undefined) {
    return null
  }
  var stringValue;
  switch(typeof value) {
    case "boolean":
    ;
    case "number":
      stringValue = "" + value;
      break;
    case "object":
    ;
    case "function":
    ;
    case "null":
    ;
    case "string":
    ;
    default:
      stringValue = '"' + value + '"';
      break
  }
  return'"' + key + '":' + stringValue
};
AdfServerLogWriter._shallowStringifyRecord = function(logRecord) {
  try {
    var recordProperties = AdfServerLogWriter._RECORD_PROPERTIES;
    var propertyCount = recordProperties.length;
    var properties = new Array(propertyCount);
    for(var i = 0;i < propertyCount;i++) {
      var propertyName = recordProperties[i];
      var propertyValue = logRecord[propertyName];
      var jsonProperty = AdfServerLogWriter._jsonProperty(propertyName, propertyValue);
      if(jsonProperty) {
        properties.push(jsonProperty)
      }
    }
    return"{" + properties.join(",") + "}"
  }catch(stringifyError) {
    return null
  }
};
AdfServerLogWriter.prototype._createJSONPayload = function(loggedMessages) {
  var mainStringifier = AdfServerLogWriter._JSONStringifyRecord;
  var backupStringifier = AdfServerLogWriter._shallowStringifyRecord;
  if(!window["JSON"]) {
    mainStringifier = backupStringifier;
    backupStringifier = null
  }
  var messageCount = loggedMessages.length;
  var jsonMessages = new Array(messageCount);
  for(var i = 0;i < messageCount;i++) {
    var logRecord = loggedMessages[i];
    var jsonMessage = mainStringifier(logRecord);
    if(!jsonMessage) {
      jsonMessage = backupStringifier(logRecord)
    }
    if(jsonMessage) {
      jsonMessages.push(jsonMessage)
    }
  }
  return"[" + jsonMessages.join(",") + "]"
};
AdfServerLogWriter.prototype._sendRequest = function(xmlHttp, loggedMessages) {
  var jsonMessages = JSON.stringify(loggedMessages);
  var content = "logRecords=" + encodeURIComponent(jsonMessages).replace(/\'/g, "%27").replace(/%20/g, "+");
  var endPointUrl = this._getLogEndPointUrl();
  xmlHttp.open("POST", endPointUrl, true);
  xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  xmlHttp.setRequestHeader("Adf-Rich-Log", "true");
  xmlHttp.send(content)
};
AdfServerLogWriter.prototype._getLogEndPointUrl = function() {
  var endPointUrl = null;
  var form = document.forms[0];
  if(form) {
    endPointUrl = form.action
  }
  if(!endPointUrl) {
    endPointUrl = document.location.href
  }
  return endPointUrl
};
AdfServerLogWriter.prototype.Init = function() {
  AdfServerLogWriter.superclass.Init.call(this);
  this._clear()
};
AdfServerLogWriter.prototype._clear = function() {
  this._loggedMessages = new Array
};
AdfServerLogWriter.prototype.PublishImpl = function(logRecord) {
  this.CheckIfClosed();
  AdfAssert.assert(logRecord, "null logRecord");
  this._loggedMessages.push(logRecord)
};

function AdfLogger(loggerName, logWriter, level) {
  this.Init(loggerName, logWriter, level)
}
AdfObject.createSubclass(AdfLogger);
AdfLogger.getLogger = function(loggerName) {
  if(!loggerName) {
    loggername = "global"
  }
  return AdfLogger._LOGGERS[loggerName]
};
AdfLogger.prototype.register = function() {
  var loggers = AdfLogger._LOGGERS;
  var loggerName = this.getName();
  var oldLogger = loggers[loggerName];
  if(this !== oldLogger) {
    if(oldLogger) {
      var oldLogWriter = oldLogger.getLogWriter();
      if(AdfBufferedLogWriter.prototype.isPrototypeOf(oldLogWriter)) {
        this.logRecords(oldLogWriter.getLogRecords())
      }
      oldLogWriter.close()
    }
    loggers[loggerName] = this
  }
  return oldLogger
};
AdfLogger.prototype.getName = function() {
  return this._loggerName
};
AdfLogger.prototype.setLevel = function(level) {
  AdfAssert.assertNumeric(level);
  this._level = level
};
AdfLogger.prototype.getLevel = function() {
  return this._level
};
AdfLogger.prototype.isLoggable = function(level) {
  return level >= this._level
};
AdfLogger.prototype.getName = function() {
  return this._loggerName
};
AdfLogger.prototype.getLogWriter = function() {
  return this._logWriter
};
AdfLogger.prototype.setFilter = function(newFilter) {
  AdfAssert.assertFunctionOrNull(newFilter);
  this._filter = newFilter
};
AdfLogger.prototype.getFilter = function() {
  return this._filter
};
AdfLogger.prototype.log = function(logRecord) {
  AdfAssert.assert(logRecord);
  var level = logRecord.level;
  if(level < this._level) {
    return
  }
  this.AddLogRecord(logRecord)
};
AdfLogger.prototype.logRecords = function(logRecords) {
  AdfAssert.assert(logRecords);
  var recordCount = logRecords.length;
  for(var i = 0;i < recordCount;i++) {
    this.log(logRecords[i])
  }
};
AdfLogger.prototype.logMessage = function(level, messages) {
  AdfAssert.assertNumeric(level);
  if(level < this._level) {
    return
  }
  this._calcMsg._skipArgs = 1;
  var message = this._calcMsg.apply(this, arguments);
  this.AddLogRecord(new AdfLogRecord(level, message))
};
AdfLogger.prototype.logError = function(error, level, message) {
  if(!level) {
    level = AdfLogger.INFO
  }
  AdfAssert.assertNumeric(level);
  if(level < this._level) {
    return
  }
  this._calcMsg._skipArgs = 2;
  message = this._calcMsg.apply(this, arguments);
  this.AddLogRecord(new AdfLogRecord(level, message, error))
};
AdfLogger.prototype.logErrorAsSevere = function(error, message) {
  var level = AdfLogger.SEVERE;
  if(level < this._level) {
    return
  }
  this._calcMsg._skipArgs = 1;
  message = this._calcMsg.apply(this, arguments);
  this.AddLogRecord(new AdfLogRecord(level, message, error))
};
AdfLogger.prototype.logErrorAsWarning = function(error, message) {
  var level = AdfLogger.WARNING;
  if(level < this._level) {
    return
  }
  this._calcMsg._skipArgs = 1;
  message = this._calcMsg.apply(this, arguments);
  this.AddLogRecord(new AdfLogRecord(level, message, error))
};
AdfLogger.prototype.logErrorAsInfo = function(error, message) {
  var level = AdfLogger.INFO;
  if(level < this._level) {
    return
  }
  this._calcMsg._skipArgs = 1;
  message = this._calcMsg.apply(this, arguments);
  this.AddLogRecord(new AdfLogRecord(level, message, error))
};
AdfLogger.prototype.logElapsedTime = function(startTime, message, level) {
  AdfAssert.assert(startTime);
  if(!level) {
    level = this.FINE
  }
  if(level < this._level) {
    return
  }
  var now = new Date;
  var elapsedSeconds = (now.getTime() - startTime.getTime()) / 1E3;
  message += elapsedSeconds + " seconds";
  this.AddLogRecord(new AdfLogRecord(level, message, null, now))
};
AdfLogger.InitClass = function() {
  this.RegisterLevels(AdfLogger, [{name:"OFF", severity:Number.MAX_VALUE}, {name:"SEVERE", severity:1E3}, {name:"WARNING", severity:900}, {name:"INFO", severity:800}, {name:"CONFIG", severity:700}, {name:"FINE", severity:500}, {name:"FINER", severity:400}, {name:"FINEST", severity:300}, {name:"ALL", severity:Number.MIN_VALUE}]);
  this.DEFAULT_LEVEL = this.WARNING;
  this._LOGGERS = {}
};
AdfLogger.RegisterLevels = function(ourClass, levelArr) {
  AdfAssert.assertFunction(ourClass);
  var ourPrototype = ourClass.prototype;
  ourClass.__reverseMap = new Object;
  var levelCount = levelArr.length;
  var funcArray = ["if (this.", null, "<this._level) return; this._calcMsg._skipArgs = 0; this.logMessage(this.", null, ",this._calcMsg.apply(this, arguments));"];
  for(var i = 0;i < levelCount;i++) {
    var currLevel = levelArr[i];
    var currLevelName = currLevel.name;
    var currLevelSeverity = currLevel.severity;
    ourClass.__reverseMap[currLevelSeverity] = currLevelName;
    ourClass[currLevelName] = currLevelSeverity;
    ourPrototype[currLevelName] = currLevelSeverity;
    if(currLevelSeverity != Number.MAX_VALUE && currLevelSeverity != Number.MIN_VALUE) {
      funcArray[1] = currLevelName;
      funcArray[3] = currLevelName;
      var funcBody = funcArray.join("");
      var functionName = currLevelName.toLowerCase();
      ourPrototype[functionName] = new Function("msg", funcBody)
    }
  }
};
AdfLogger.prototype._calcMsg = function(varArgs) {
  var startArgIndex = arguments.callee._skipArgs;
  var argCount = arguments.length;
  var firstArg = arguments[startArgIndex];
  if(argCount - startArgIndex == 1 && typeof firstArg == "string") {
    return firstArg
  }else {
    var message = "";
    for(var i = startArgIndex;i < argCount;i++) {
      var currValue = arguments[i];
      message += currValue
    }
    return message
  }
};
AdfLogger.prototype.Init = function(loggerName, logWriter, level) {
  AdfAssert.assert(loggerName, "loggerName required");
  AdfAssert.assert(logWriter, "logWriter required");
  AdfLogger.superclass.Init.call(this);
  this._logWriter = logWriter;
  this._loggerName = loggerName;
  this._level = level !== undefined ? level : AdfLogger.DEFAULT_LEVEL;
  this._filter = null
};
AdfLogger.prototype.toDebugString = function() {
  return this.getTypeName() + " [loggerName:'" + this._loggerName + "',level:" + this._level + ",logWriter:" + this._logWriter + "]"
};
AdfLogger.prototype.AddLogRecord = function(logRecord) {
  var filter = this._filter;
  if(filter && !filter(logRecord)) {
    return
  }
  this.getLogWriter().publish(logRecord)
};
AdfLogger.LOGGER = (new AdfLogger("global", new AdfBufferedLogWriter)).register();

function AdfAlertLogWriter(domWindow, backupLogWriter) {
  this.Init()
}
AdfObject.createSubclass(AdfAlertLogWriter, AdfBufferedLogWriter);
AdfAlertLogWriter.prototype.flush = function() {
  this.CheckIfClosed();
  var reversedArray = this.getLogRecords();
  if(reversedArray.length) {
    reversedArray.reverse();
    var logString = "Logged Messages:\n";
    var logCount = reversedArray.length;
    if(logCount > 0) {
      for(var i = 0;i < logCount;i++) {
        reversedArray[i] = this.FormatLogRecord(reversedArray[i])
      }
      logString += reversedArray.join("\n")
    }else {
      logString += "[No Messages]"
    }
    this.Clear();
    alert(logString)
  }
};

function AdfXmlLogWriter(domWindow, backupLogWriter) {
  this.Init(domWindow, backupLogWriter)
}
AdfObject.createSubclass(AdfXmlLogWriter, AdfBufferedLogWriter);
AdfXmlLogWriter.prototype.Init = function(domWindow, backupLogWriter) {
  AdfAssert.assertPrototype(backupLogWriter, AdfLogWriter);
  AdfXmlLogWriter.superclass.Init.call(this);
  this._backupLogWriter = backupLogWriter;
  this._window = domWindow
};
AdfXmlLogWriter.prototype.flush = function() {
  this.CheckIfClosed()
};
AdfClientFileLogWriter.prototype.closeRecord = function() {
};
AdfXmlLogWriter.prototype.GenerateHeaderXml = function() {
  return AdfXmlLogWriter._XML_FILE_HEADER + AdfXmlLogWriter.START_TAG + "\n" + AdfXmlLogWriter._PROFILER_VERSION + AdfXmlLogWriter._BROWSER_VERSION
};
AdfXmlLogWriter.prototype.GetWindow = function() {
  return this._window
};
AdfXmlLogWriter.prototype.GenerateRecordXml = function(date, ecid, page, path, logArray) {
  var logString = "";
  if(logArray.length) {
    logString = "<record>\n\t<header>\n\t\t<date>" + date.toUTCString() + "</date>\n\t\t<ecId>" + ecid + "</ecId>\n\t\t<page>" + page + "</page>\n\t\t<serverHost>" + this._window.location.host + "</serverHost>\n\t\t<path>" + path + "</path>\n\t</header>\n";
    for(var i = 0;i < logArray.length;i++) {
      logArray[i] = this.FormatLogRecord(logArray[i])
    }
    logString += logArray.join("\n");
    logString += "\n</record>\n"
  }
  return logString
};
AdfXmlLogWriter.prototype.FormatMessage = function(message) {
  var messageArray = message.split(";");
  var result = "";
  var arrayLength = messageArray.length;
  if(arrayLength < 2) {
    return result
  }
  if(messageArray[0]) {
    result += "\t\t\t<description><![CDATA[" + messageArray[0] + "]]\></description>\n"
  }
  if(messageArray[1]) {
    result += "\t\t\t<timestamp>" + messageArray[1] + "</timestamp>\n"
  }
  if(messageArray[2]) {
    result += "\t\t\t<timing>" + messageArray[2] + "</timing>\n"
  }
  for(i = 3;i < arrayLength;++i) {
    result += "\t\t\t" + messageArray[i] + "\n"
  }
  return result
};
AdfXmlLogWriter.prototype.FormatLogRecord = function(logRecord) {
  var severity = this.FormatLevel(logRecord[AdfLogRecord.LEVEL_FIELD]);
  var when = this.FormatWhen(logRecord[AdfLogRecord.WHEN_FIELD]);
  var formatted = "\t<entry>\n\t\t<time>" + when + "</time>\n";
  var error = this.FormatError(logRecord[AdfLogRecord.ERROR_FIELD]);
  if(error) {
    formatted += "\t\t<error>" + error + "</error>\n"
  }
  formatted += "\t\t<message>\n" + this.FormatMessage(logRecord[AdfLogRecord.MESSAGE_FIELD]) + "\t\t</message>\n\t</entry>";
  return formatted
};
AdfXmlLogWriter.prototype.FormatWhen = function(when) {
  if(!when) {
    when = new Date
  }
  return when.getUTCHours() + ":" + when.getUTCMinutes() + ":" + when.getUTCSeconds() + "." + when.getUTCMilliseconds()
};
AdfXmlLogWriter.prototype.LogToBackupLogWriter = function(message) {
  this._backupLogWriter.publish(new AdfLogRecord(AdfLogger.WARNING, message))
};
AdfXmlLogWriter._XML_FILE_HEADER = '<?xml version ="1.0" encoding="ISO-8859-1"?>\n';
AdfXmlLogWriter._PROFILER_VERSION = '<AdfRcProfiler version="4.0"/>\n';
AdfXmlLogWriter._BROWSER_VERSION = "<browser>" + navigator.appName + " " + navigator.appVersion + "</browser>\n";
AdfXmlLogWriter.START_TAG = "<log>";
AdfXmlLogWriter.END_TAG = "</log>";

function AdfClientFileLogWriter(domWindow, backupLogWriter) {
  this.Init(domWindow, backupLogWriter)
}
AdfObject.createSubclass(AdfClientFileLogWriter, AdfXmlLogWriter);
AdfClientFileLogWriter.prototype.Init = function(domWindow, backupLogWriter) {
  AdfAssert.assertPrototype(backupLogWriter, AdfLogWriter);
  AdfClientFileLogWriter.superclass.Init.call(this, domWindow, backupLogWriter);
  this._sessionId = null;
  var agent = AdfAgent.AGENT;
  this._document = agent.getDomDocument();
  agent.addBubbleEventListener(this.GetWindow(), "load", AdfClientFileLogWriter._createAppletTag)
};
AdfClientFileLogWriter._createAppletTag = function() {
  var baseURL = AdfPage.PAGE.getBaseResourceUrl();
  var domDocument = AdfAgent.AGENT.getDomDocument();
  var applet = domDocument.createElement("applet");
  applet.setAttribute("name", "AdfClientFileWriter");
  applet.setAttribute("archive", baseURL + "/afr/archives/AdfSignedClientFileWriterApplet.jar");
  applet.setAttribute("code", "oracle.adfinternal.view.resource.rich.AdfClientFileWriterApplet.class");
  applet.setAttribute("height", "1");
  applet.setAttribute("width", "1");
  var body = domDocument.getElementsByTagName("body")[0];
  body.appendChild(applet)
};
AdfClientFileLogWriter.prototype.getApplet = function() {
  var applet;
  var appletCount = this._document.applets.length;
  if(appletCount > 0) {
    var appletList = this._document.getElementsByTagName("applet");
    for(i = 0;i < appletCount;i++) {
      if(appletList[i].name == "AdfClientFileWriter") {
        applet = appletList[i];
        return applet
      }
    }
  }
  return applet
};
AdfClientFileLogWriter.prototype.close = function() {
  this.closeRecord();
  this._closed = true
};
AdfClientFileLogWriter.prototype.closeRecord = function() {
  var appletLogger = this.getApplet();
  if(!appletLogger) {
    this.LogToBackupLogWriter("The AdfClientFileWriter applet is undefined or unavailable.");
    this.Clear();
    return
  }
  this.CheckIfClosed();
  var logArray = this.getLogRecords();
  if(logArray.length) {
    var logString = this.GenerateRecordXml(new Date, AdfDhtmlPage._ECID, this._document.title, this.GetWindow().location.pathname, logArray);
    logString += AdfXmlLogWriter.END_TAG + "\n";
    var agentString = AdfAgent.AGENT.getPlatform();
    var uniqueString = null;
    if(AdfDhtmlPage._ADFRC_LOG_FILENAME != null) {
      uniqueString = AdfDhtmlPage._ADFRC_LOG_FILENAME
    }else {
      uniqueString = (new Date).getTime()
    }
    var fileName = agentString + "_" + uniqueString + ".xml";
    var status;
    try {
      if("false" == appletLogger.fileExists(fileName)) {
        logString = this.GenerateHeaderXml() + logString
      }
      status = appletLogger.log(fileName, logString, AdfXmlLogWriter.END_TAG)
    }catch(e) {
      status = "Error: " + e
    }
    if(status != "ok") {
      this.LogToBackupLogWriter(status)
    }
  }
  this.Clear()
};
AdfClientFileLogWriter.prototype.setSessionId = function(value) {
  if(value != null) {
    this._sessionId = value
  }else {
    this._sessionId = (new Date).getTime()
  }
};

function AdfIndexedDbLogWriter(domWindow, backupLogWriter) {
  this.Init(domWindow, backupLogWriter)
}
AdfObject.createSubclass(AdfIndexedDbLogWriter, AdfXmlLogWriter);
AdfIndexedDbLogWriter.prototype.Init = function(domWindow, backupLogWriter) {
  AdfAssert.assertPrototype(backupLogWriter, AdfLogWriter);
  AdfIndexedDbLogWriter.superclass.Init.call(this, domWindow, backupLogWriter);
  this._localStorage = domWindow.localStorage;
  this._document = AdfAgent.AGENT.getDomDocument();
  var indexedDB = this.GetWindow().indexedDB;
  if(!AdfIndexedDbLogWriter._sDb && indexedDB) {
    var that = this;
    var request = indexedDB.open("oracle.adf.view.rich.adfRcProfilerDb", 1);
    request.onupgradeneeded = function(event) {
      var db = event.target.result;
      var objectStore = db.createObjectStore("records", {autoIncrement:true});
      objectStore.createIndex("logDate", "logDate", {unique:false})
    };
    request.onsuccess = function(event) {
      var db = event.target.result;
      if(!AdfIndexedDbLogWriter._sDb) {
        AdfIndexedDbLogWriter._sDb = db
      }else {
        db.close()
      }
      that._checkLocalStorage()
    };
    request.onerror = function(event) {
      that.LogToBackupLogWriter("Error opening IndexedDB: " + event.target.error)
    }
  }
};
AdfIndexedDbLogWriter.prototype.close = function() {
  this.closeRecord(true);
  this._closed = true
};
AdfIndexedDbLogWriter.prototype.closeRecord = function(isClosingLog) {
  if(!AdfIndexedDbLogWriter._sDb) {
    this.LogToBackupLogWriter("IndexedDB is not available.");
    this.Clear();
    return
  }
  this.CheckIfClosed();
  var logRecords = this.getLogRecords();
  if(logRecords && logRecords.length > 0) {
    var record = {logDate:logRecords[0][AdfLogRecord.WHEN_FIELD].getTime(), writeDate:Date.now(), ecid:AdfDhtmlPage._ECID, page:this._document.title, path:this.GetWindow().location.pathname, logRecords:logRecords};
    if(!isClosingLog) {
      this._checkLocalStorage();
      this._writeRecord(record)
    }else {
      if(this._localStorage) {
        try {
          this._localStorage.setItem(AdfIndexedDbLogWriter._STORAGE_KEY, JSON.stringify(record))
        }catch(e) {
          this.LogToBackupLogWriter("Error setting localStorage: " + e)
        }
      }
    }
  }
  this.Clear()
};
AdfIndexedDbLogWriter.prototype._writeRecord = function(record) {
  var that = this;
  var transaction = AdfIndexedDbLogWriter._sDb.transaction("records", "readwrite");
  transaction.onerror = function(event) {
    that.LogToBackupLogWriter("Error: " + transaction.error)
  };
  var objectStore = transaction.objectStore("records");
  objectStore.add(record);
  objectStore.count().onsuccess = function(event) {
    var count = event.target.result - AdfIndexedDbLogWriter._MAX_STORED_RECORDS;
    if(count > 0) {
      objectStore.index("logDate").openCursor().onsuccess = function(event) {
        count--;
        var cursor = event.target.result;
        if(cursor) {
          cursor["delete"]();
          if(count > 0) {
            cursor["continue"]()
          }
        }
      }
    }
  }
};
AdfIndexedDbLogWriter.prototype._checkLocalStorage = function() {
  if(this._localStorage) {
    try {
      var record = this._localStorage.getItem(AdfIndexedDbLogWriter._STORAGE_KEY);
      if(record) {
        this._localStorage.removeItem(AdfIndexedDbLogWriter._STORAGE_KEY);
        record = JSON.parse(record);
        for(var i = 0;i < record.logRecords.length;i++) {
          if(record.logRecords[i][AdfLogRecord.WHEN_FIELD]) {
            record.logRecords[i][AdfLogRecord.WHEN_FIELD] = new Date(record.logRecords[i][AdfLogRecord.WHEN_FIELD])
          }
        }
        this._writeRecord(record)
      }
    }catch(e) {
      this.LogToBackupLogWriter("Error processing localStorage value: " + e)
    }
  }
};
AdfIndexedDbLogWriter.prototype._getLogData = function(callback, hideHeader) {
  var logString = "";
  if(!callback) {
    callback = AdfIndexedDbLogWriter._defaultCallback
  }
  if(!AdfIndexedDbLogWriter._sDb) {
    callback(logString);
    return
  }
  var that = this;
  var transactionDone = function(event) {
    var transaction = event.target;
    if(transaction.error) {
      that.LogToBackupLogWriter("Error: " + transaction.error);
      logString = "<error>" + transaction.error + "</error>\n" + logString
    }
    callback(logString)
  };
  try {
    var transaction = AdfIndexedDbLogWriter._sDb.transaction("records", "readwrite");
    transaction.onerror = transactionDone;
    transaction.onabort = transactionDone;
    transaction.oncomplete = transactionDone;
    if(!hideHeader) {
      logString = this.GenerateHeaderXml()
    }
    transaction.objectStore("records").index("logDate").openCursor().onsuccess = function(event) {
      var cursor = event.target.result;
      if(cursor) {
        var record = cursor.value;
        logString += that.GenerateRecordXml(new Date(record.writeDate), record.ecid, record.page, record.path, record.logRecords);
        cursor["delete"]();
        cursor["continue"]()
      }else {
        if(!hideHeader) {
          logString += AdfXmlLogWriter.END_TAG
        }
      }
    }
  }catch(e) {
    callback("<error>" + e + "</error>")
  }
};
AdfIndexedDbLogWriter.prototype._deleteLogData = function(timestamp) {
  if(!AdfIndexedDbLogWriter._sDb) {
    return
  }
  if(!timestamp) {
    timestamp = Number.MAX_VALUE
  }
  var that = this;
  var transaction = AdfIndexedDbLogWriter._sDb.transaction("records", "readwrite");
  transaction.onerror = function(event) {
    that.LogToBackupLogWriter("Error: " + transaction.error)
  };
  transaction.objectStore("records").openCursor().onsuccess = function(event) {
    var cursor = event.target.result;
    if(cursor) {
      if(cursor.value.logDate < timestamp) {
        cursor["delete"]()
      }
      cursor["continue"]()
    }
  }
};
AdfIndexedDbLogWriter._sDb = null;
AdfIndexedDbLogWriter._MAX_STORED_RECORDS = 100;
AdfIndexedDbLogWriter._STORAGE_KEY = "oracle.adf.view.rich.adfRcProfilerKey";
AdfIndexedDbLogWriter._getLogWriter = function() {
  var writer = null;
  if(AdfLogger.PROFILER_LOGGER) {
    writer = AdfLogger.PROFILER_LOGGER.getLogWriter();
    if(!AdfIndexedDbLogWriter.prototype.isPrototypeOf(writer)) {
      writer = null
    }
  }
  return writer
};
AdfIndexedDbLogWriter._defaultCallback = function(value) {
  console.log(value)
};
AdfIndexedDbLogWriter.getLogData = function(callback, hideHeader) {
  if(!callback) {
    callback = AdfIndexedDbLogWriter._defaultCallback
  }
  try {
    var writer = AdfIndexedDbLogWriter._getLogWriter();
    if(writer) {
      writer._getLogData(callback, hideHeader)
    }else {
      callback("<AdfIndexedDbLogWriterNotFound/>")
    }
  }catch(e) {
    callback("<error>" + e + "</error>")
  }
};
AdfIndexedDbLogWriter.deleteLogData = function(timestamp) {
  var writer = AdfIndexedDbLogWriter._getLogWriter();
  if(writer) {
    writer._deleteLogData(timestamp)
  }
};
AdfIndexedDbLogWriter.isEnabled = function() {
  return AdfIndexedDbLogWriter._getLogWriter() != null
};

function AdfStatusLogWriter() {
  this.Init()
}
AdfObject.createSubclass(AdfStatusLogWriter, AdfLogWriter);
AdfStatusLogWriter.prototype.PublishImpl = function(logRecord) {
  this.CheckIfClosed();
  AdfAssert.assert(logRecord, "null logRecord");
  top.status = this.FormatLogRecord(logRecord)
};

function AdfConsoleLogWriter(parentWindow, backupLogWriter) {
  this.Init(parentWindow, backupLogWriter)
}
AdfObject.createSubclass(AdfConsoleLogWriter, AdfLogWriter);
AdfConsoleLogWriter.prototype.Init = function(parentWindow, backupLogWriter) {
  AdfAssert.assertObject(parentWindow);
  AdfAssert.assertPrototype(backupLogWriter, AdfLogWriter);
  AdfConsoleLogWriter.superclass.Init.call(this);
  this._parentWindow = parentWindow;
  this._backupLogWriter = backupLogWriter;
  this._loggedMessages = new Array;
  this._columns = [AdfLogRecord.LEVEL_FIELD, AdfLogRecord.MESSAGE_FIELD, AdfLogRecord.WHEN_FIELD, AdfLogRecord.ERROR_FIELD];
  var formatters = new Object;
  formatters[AdfLogRecord.LEVEL_FIELD] = "FormatLevel";
  formatters[AdfLogRecord.MESSAGE_FIELD] = "FormatMessage";
  formatters[AdfLogRecord.WHEN_FIELD] = "FormatWhen";
  formatters[AdfLogRecord.ERROR_FIELD] = "FormatError";
  this._formatters = formatters;
  this._consoleWindow = null
};
AdfConsoleLogWriter.prototype.publish = function(logRecord) {
  this.CheckIfClosed();
  AdfAssert.assert(logRecord, "null logRecord");
  this._loggedMessages.push(logRecord);
  var filter = this.getFilter();
  try {
    if(filter && !filter(logRecord)) {
      return
    }
    if(!this._busy) {
      this._busy = true;
      try {
        this._showMessage(logRecord)
      }finally {
        this._busy = false
      }
    }
  }catch(e) {
    this._logInternalError(e, "Error publishing AdfLogRecord")
  }
};
AdfConsoleLogWriter.prototype.close = function() {
  AdfConsoleLogWriter.superclass.close.call(this);
  if(this._consoleWindow) {
    try {
      this._consoleWindow.document.body.onunload = null
    }catch(problem) {
    }
    this._consoleWindow.close();
    this._consoleWindow = null
  }
};
AdfConsoleLogWriter.prototype.setFilter = function(filter) {
  var oldFilter = this.getFilter();
  if(filter != oldFilter) {
    AdfConsoleLogWriter.superclass.setFilter.call(this, filter);
    this._updateRecords()
  }
};
AdfConsoleLogWriter.prototype.clear = function() {
  this._loggedMessages = new Array;
  this._clearDisplayedRecords()
};
AdfConsoleLogWriter.prototype.updateFilter = function(filterValue) {
  filterValue = AdfUIUtils.trim(filterValue);
  if(filterValue.length) {
    this.setFilter(new Function("record", "return (" + filterValue + ");"))
  }else {
    this.setFilter(null)
  }
};
AdfConsoleLogWriter.prototype.FormatMessage = function(message) {
  message = message.replace(/</g, "&lt;");
  message = message.replace(/>/g, "&gt;");
  message = message.replace(/\n/g, "<br>");
  return message
};
AdfConsoleLogWriter.prototype.FormatError = function(error) {
  if(!error) {
    return""
  }
  var formatText = "";
  var isFirstProp = true;
  for(var currPropName in error) {
    if(currPropName == currPropName.toUpperCase()) {
      continue
    }
    try {
      var currPropValue = error[currPropName];
      if(typeof currPropValue == "function") {
        continue
      }
      var formattedValue = currPropValue;
      if(currPropName == "stack" && "string" == typeof currPropValue) {
        formattedValue = "<ol>";
        var matchRegExp = AdfConsoleLogWriter._GECKO_STACK_RE;
        var results;
        while(results = currPropValue.match(matchRegExp)) {
          formattedValue += "<li>";
          var funcInfo = results[0];
          var hrefStartIndex = -1;
          var hrefEndIndex = funcInfo.lastIndexOf(":");
          if(hrefEndIndex != -1) {
            var hrefStartIndex = funcInfo.lastIndexOf("@")
          }
          if(hrefStartIndex != -1) {
            hrefStartIndex++;
            formattedValue += funcInfo.substring(0, hrefStartIndex);
            var url = funcInfo.substring(hrefStartIndex, hrefEndIndex);
            var fileName = url;
            var fileNameStartIndex = url.lastIndexOf("/");
            if(fileNameStartIndex != -1) {
              fileName = url.substring(fileNameStartIndex + 1)
            }
            var target = "target='_blank'";
            var lineNumber = "?";
            if(hrefEndIndex != -1) {
              lineNumber = funcInfo.substring(hrefEndIndex + 1);
              if(url.length > 0 && AdfConsoleLogWriter._LINK_TRACE_TO_LINE_NUMBERS && navigator.userAgent.toLowerCase().indexOf("gecko") != -1) {
                target = "";
                url = "javascript:viewSource('" + url + "','" + fileName + "'," + lineNumber + ")"
              }
            }
            formattedValue += "<a " + target + ' href="' + url + '">';
            formattedValue += fileName + "</a> Line: " + lineNumber
          }else {
            formattedValue += funcInfo
          }
          formattedValue += "</li>";
          currPropValue = currPropValue.substring(funcInfo.length)
        }
        formattedValue += "</ol>"
      }
      if(!isFirstProp) {
        formatText += "<br><b>"
      }else {
        formatText += "<b>";
        isFirstProp = false
      }
      formatText += currPropName + ":</b>" + formattedValue
    }catch(e) {
    }
  }
  return formatText
};
AdfConsoleLogWriter.prototype._addDisplayedRecords = function() {
  var document = this._getDocument();
  var consoleLogRecords = document.getElementById("consoleLogRecords");
  var loggedRecords = this._loggedMessages;
  var filter = this.getFilter();
  var recordCount = loggedRecords.length;
  for(var i = recordCount - 1;i >= 0;i--) {
    var currRecord = loggedRecords[i];
    try {
      if(!filter || filter(currRecord)) {
        var messageRow = this._createRow(currRecord);
        consoleLogRecords.appendChild(messageRow)
      }
    }catch(e) {
      this._logInternalError(e, "Error displaying AdfLogRecord")
    }
  }
};
AdfConsoleLogWriter.prototype._updateRecords = function() {
  this._clearDisplayedRecords();
  this._addDisplayedRecords()
};
AdfConsoleLogWriter.prototype._clearDisplayedRecords = function() {
  var document = this._getDocument();
  AdfAssert.assert(document);
  var consoleLogRecords = document.getElementById("consoleLogRecords");
  AdfAssert.assertDomElement(consoleLogRecords);
  var tbodyParent = consoleLogRecords.parentNode;
  var tbodyBefore = consoleLogRecords.nextSibling;
  tbodyParent.removeChild(consoleLogRecords);
  var newTBody = document.createElement("tbody");
  newTBody.id = "consoleLogRecords";
  tbodyParent.insertBefore(newTBody, tbodyBefore)
};
AdfConsoleLogWriter.prototype._createHeaders = function() {
  var document = this._getDocument();
  var row = document.createElement("tr");
  var columns = this._columns;
  var columnCount = columns.length;
  for(var i = 0;i < columnCount;i++) {
    var currKey = columns[i];
    var currCell = document.createElement("th");
    currCell.innerHTML = currKey;
    row.appendChild(currCell)
  }
  return row
};
AdfConsoleLogWriter.prototype._updateHeaders = function() {
  var document = this._getDocument();
  var headers = document.getElementById("columnHeaders");
  var currChild = headers.firstChild;
  if(currChild) {
    headers.removeChild(currChild)
  }
  headers.appendChild(this._createHeaders())
};
AdfConsoleLogWriter.prototype._createRow = function(logRecord) {
  var document = this._getDocument();
  var row = document.createElement("tr");
  var formatters = this._formatters;
  var columns = this._columns;
  var columnCount = columns.length;
  for(var i = 0;i < columnCount;i++) {
    var currKey = columns[i];
    var currValue = logRecord[currKey];
    var currCell = document.createElement("td");
    currCell.vAlign = "top";
    if(currValue) {
      var formatter = formatters[currKey];
      if(formatter) {
        currValue = this[formatter](currValue)
      }else {
        currValue = "" + currValue
      }
      if(currValue) {
        currCell.innerHTML = currValue
      }
    }
    row.appendChild(currCell)
  }
  return row
};
AdfConsoleLogWriter.prototype._showMessage = function(logRecord) {
  var consoleWindow = this._consoleWindow;
  if(!consoleWindow) {
    consoleWindow = this._openConsoleWindow();
    this._consoleWindow = consoleWindow;
    this._updateHeaders();
    this.HandleOnLoad()
  }else {
    var messageRow = this._createRow(logRecord);
    var consoleLogRecords = consoleWindow.document.getElementById("consoleLogRecords");
    consoleLogRecords.insertBefore(messageRow, consoleLogRecords.firstChild)
  }
};
AdfConsoleLogWriter.prototype._getDocument = function() {
  var consoleWindow = this._consoleWindow;
  if(consoleWindow) {
    return consoleWindow.document
  }else {
    return null
  }
};
AdfConsoleLogWriter.prototype._getRecordDiv = function() {
  return this._getDocument().getElementById("recordDiv")
};
AdfConsoleLogWriter.prototype._openConsoleWindow = function() {
  var consoleWindow;
  try {
    consoleWindow = window.open("about:blank", "Console", "width=700,height=250,resizable=1,scrollbars=1,dependent=1");
    AdfLogger.LOGGER.getLogWriter()._windowUnloaded()
  }catch(e) {
    this._logInternalError(e, "Error opening ConsoleWindow")
  }
  if(!consoleWindow) {
    this._logInternalError(e, "Popup blocker prevented opening of ConsoleWindow");
    return
  }
  var consoleDocument = consoleWindow.document;
  consoleDocument.open();
  consoleDocument.write("<html>   <head>     <title>Console Log</title>     <style>       label,button,th,td,input {font-size:10pt;font-family:Arial;}       .resultsTable {position:relative; width:100%; margin:0px}       .resultsTable th {border:solid black 1px; background-color:silver; margin:0px}       .resultsTable td {border:solid black 1px; margin:0px}     </style>     <script>     function viewSource(url, fileName, lineNumber)     {       var windowName = fileName.split(\".\")[0];       window.lineNumber = lineNumber;       window.windowName = windowName;       window.viewerWindow = window.open(url, windowName);       window.viewerWindow.onload = sourceLoaded;       return;     }     function sourceLoaded()     {       try       {         var windowName = window.windowName;         var lineNumber = window.lineNumber;         var viewerDoc = window.viewerWindow.document;         viewerDoc.title = windowName + \" @ \" + lineNumber;        var viewerMarginTop = 10;         var viewerSrc = viewerDoc.body.firstChild;         viewerSrc.style.position = \"absolute\";         viewerSrc.style.zIndex = \"2\";         viewerSrc.style.top = \"0px\";         viewerSrc.style.marginTop = viewerMarginTop + \"px\";         viewerSrc.style.lineHeight = \"16px;\";         var samplePre = viewerDoc.createElement(\"pre\");         samplePre.style.width = viewerSrc.offsetWidth + \"px\";         samplePre.style.position = \"absolute\";         samplePre.style.zIndex = \"1\";         samplePre.style.top = \"0px\";         samplePre.style.marginTop = \"0px\";         samplePre.style.marginBottom = \"0px\";         samplePre.style.lineHeight = \"16px;\";         samplePre.appendChild(document.createTextNode(\" \"));         viewerDoc.body.appendChild(samplePre);         var lineHeight = samplePre.offsetHeight;         /* sometimes Gecko needs -1 and sometimes -2, unsure why right now */         var targetLineTop = lineHeight * (lineNumber - 1);         /* doubling the height since it could be either of the two lines */         samplePre.style.lineHeight = \"32px;\";         samplePre.style.marginTop = viewerMarginTop + \"px\";         samplePre.style.top = targetLineTop + \"px\";         samplePre.style.backgroundColor = \"#EFEFEF\";         var anchorName = \"line\" + lineNumber;         var anchor = viewerDoc.createElement(\"a\");         anchor.name = anchorName;         anchor.style.position = \"absolute\";         anchor.style.zIndex = \"0\";         anchor.style.top = Math.max(0, targetLineTop - 150) + \"px\";         viewerDoc.body.appendChild(anchor);         window.viewerWindow.location = \"#\" + anchorName;       }       catch (problem)       {         /* do nothing */;       }     }     <\/script>   </head>   <body style='width:100%;height:100%;padding:0px;margin:0px;overflow:hidden' onunload='window.logWriter._windowUnloaded()' onresize='window.logWriter._windowResized()'>     <button onclick='window.logWriter.clear();return false;'>Clear</button>    <br>    <table width='100%'><tbody><tr><td align='right'><label for='evalInput'>Eval:</label></td><td width='100%'><input id='evalInput' type='text' onkeypress='if (event.keyCode==13){window.logWriter._handleEvaluate(this.value);}' style='position:relative; width:100%'></input></td></tr>     <tr><td align='right' valign='top'><label for='filterInput'>Filter:</td><td width='100%'><textarea id='filterInput' rows='2' style='position:relative; width:100%' onchange='window.logWriter.updateFilter(this.value)'></textarea></label></td></tr></tbody></table>     <div id='recordDiv' style='position:relative; width:100%; height:200px; overflow:scroll;'>       <table class='resultsTable'>         <thead id='columnHeaders'>         </thead>         <tbody id='consoleLogRecords'>         <tbody>         <tfoot><tr><td style='height:100%'></td></tr></tfoot>       </table>     </div>   </body> </html>");
  consoleDocument.close();
  consoleWindow.logWriter = this;
  return consoleWindow
};
AdfConsoleLogWriter.prototype._logInternalError = function(ex, message) {
  AdfAssert.assertPrototype(ex, Error);
  this._backupLogWriter.publish(new AdfLogRecord(AdfLogger.WARNING, message, ex))
};
AdfConsoleLogWriter.prototype._handleEvaluate = function(evalString) {
  var parentWindow = this._parentWindow;
  if(!(typeof parentWindow.execScript == "function")) {
    parentWindow.execScript = new Function("evalString", "return eval(evalString);")
  }
  var resultRecord;
  try {
    var result = parentWindow.execScript(evalString);
    resultRecord = new AdfLogRecord(AdfLogger.INFO, evalString + "=" + result)
  }catch(e) {
    resultRecord = new AdfLogRecord(AdfLogger.INFO, "Error evaulating:" + evalString, e)
  }
  this.publish(resultRecord)
};
AdfConsoleLogWriter.prototype._windowUnloaded = function() {
  var consoleWindow = this._consoleWindow;
  if(consoleWindow) {
    consoleWindow.logWriter = null;
    this._consoleWindow = null
  }
};
AdfConsoleLogWriter.prototype._windowResized = function() {
  var document = this._getDocument();
  var recordDiv = this._getRecordDiv();
  AdfAssert.assertDomElement(recordDiv);
  var documentElement = document.documentElement;
  AdfAssert.assertDomElement(documentElement);
  var documentElementHeight = documentElement.clientHeight;
  if(documentElementHeight == 0) {
    documentElementHeight = documentElement.offsetHeight
  }
  var tableHeight = documentElementHeight - recordDiv.offsetTop;
  if(tableHeight >= 0) {
    recordDiv.style.height = tableHeight + "px"
  }
};
AdfConsoleLogWriter.prototype.HandleOnLoad = function() {
  this._getDocument().getElementById("evalInput").focus();
  this._addDisplayedRecords();
  this._windowResized()
};
AdfConsoleLogWriter._GECKO_STACK_RE = /\w*\([^\)]*\)@[^\s]*:\d+\s/;
AdfConsoleLogWriter._LINK_TRACE_TO_LINE_NUMBERS = true;

function AdfBaseEvent() {
}
AdfObject.createSubclass(AdfBaseEvent);
AdfBaseEvent.CAPTURING_PHASE = 0;
AdfBaseEvent.AT_TARGET_PHASE = 1;
AdfBaseEvent.BUBBLING_PHASE = 2;
AdfBaseEvent.prototype.Init = function(source, busy) {
  this._noResponse = AdfPage.PAGE.isAttachmentMode()
};
AdfBaseEvent.prototype.getType = function() {
  return this._type
};
AdfBaseEvent.prototype.getSource = function() {
  return this._source
};
AdfBaseEvent.prototype.setSource = function(source) {
  this._source = source
};
AdfBaseEvent.prototype.getCurrentTarget = function() {
  return this.getSource()
};
AdfBaseEvent.prototype.getEventPhase = function() {
  return AdfBaseEvent.AT_TARGET
};
AdfBaseEvent.prototype.getDoesBubbles = function() {
  return false
};
AdfBaseEvent.prototype.stopBubbling = function() {
  this._bubbleStopped = true
};
AdfBaseEvent.prototype.isBubblingStopped = function() {
  return this._bubbleStopped == true
};
AdfBaseEvent.prototype.propagatesToServer = function() {
  return false
};
AdfBaseEvent.prototype.isValidationNeeded = function() {
  return false
};
AdfBaseEvent.prototype.isImmediate = function() {
  return false
};
AdfBaseEvent.prototype.getRoot = function() {
  return this._root
};
AdfBaseEvent.prototype.setRoot = function(root) {
  this._root = root
};
AdfBaseEvent.prototype.isCancelable = function() {
  return true
};
AdfBaseEvent.prototype.isCanceled = function() {
  return this._canceled == true
};
AdfBaseEvent.prototype.isPartial = function() {
  return this._partial == true
};
AdfBaseEvent.prototype.setPartial = function(partial) {
  this._partial = partial
};
AdfBaseEvent.prototype.isFullSubmitForced = function() {
  return this._fullSubmitForced == true
};
AdfBaseEvent.prototype.forceFullSubmit = function() {
  this._fullSubmitForced = true
};
AdfBaseEvent.prototype.isResponseExpected = function() {
  return!(this._noResponse == true)
};
AdfBaseEvent.prototype.noResponseExpected = function() {
  this._noResponse = true
};
AdfBaseEvent.prototype.isResponseAnnounced = function() {
  return true
};
AdfBaseEvent.prototype.cancel = function() {
  if(this.isCancelable()) {
    this._canceled = true
  }
};
AdfBaseEvent.prototype.getProperties = function() {
  var eventProps = {};
  this.AddMarshalledProperties(eventProps);
  if(!this.getClearMessages()) {
    eventProps.suppressMessageClear = "true"
  }
  if(!this.getShowMessages()) {
    eventProps.suppressMessageShow = "true"
  }
  eventProps.type = this._type;
  return eventProps
};
AdfBaseEvent.prototype.getShowMessages = function() {
  return true
};
AdfBaseEvent.prototype.getClearMessages = function() {
  return this.propagatesToServer()
};
AdfBaseEvent.prototype.AddMarshalledProperties = function(properties) {
};
AdfBaseEvent.prototype.toDebugString = function() {
  var debugString = this.getTypeName() + " [type=" + this.getType() + ", source=" + this.getSource();
  if(this.isCanceled()) {
    debugString += ", canceled"
  }
  return debugString + "]"
};
AdfBaseEvent.prototype.Init = function(source, type) {
  AdfAssert.assertString(type);
  AdfBaseEvent.superclass.Init.call(this);
  AdfAssert.assertObject(source, "source must be specified");
  this._source = source;
  this._type = type
};
AdfBaseEvent.prototype.preventUserInput = function() {
  if(this.propagatesToServer()) {
    this._userInputPrevented = true
  }else {
    AdfLogger.LOGGER.logMessage(AdfLogger.WARNING, "Ignoring UI blocking request because the event does not propagate to the server.")
  }
};
AdfBaseEvent.prototype.IsUserInputPrevented = function() {
  return this._userInputPrevented == true
};
AdfBaseEvent.prototype.IsDeleveryDiscrete = function() {
  return false
};
AdfBaseEvent.prototype.isDeliveryDiscrete = function() {
  return this.IsDeleveryDiscrete()
};
AdfBaseEvent.prototype.getMaxTimeBeforePropagation = function() {
  if(!this.propagatesToServer()) {
    return-1
  }
  return 0
};

function AdfPhasedEvent(source, type) {
}
AdfObject.createSubclass(AdfPhasedEvent, AdfBaseEvent);
AdfPhasedEvent.prototype.setCurrentTarget = function(newTarget) {
  AdfAssert.assert(newTarget, "newTarget must exist");
  this._currTarget = newTarget
};
AdfPhasedEvent.prototype.getCurrentTarget = function() {
  return this._currTarget
};
AdfPhasedEvent.prototype.nextEventPhase = function() {
  var currEventPhase = this.getEventPhase();
  AdfAssert.assertNumeric(currEventPhase, "eventPhase doesn't exist");
  this._eventPhase = currEventPhase == AdfBaseEvent.CAPTURING_PHASE ? AdfBaseEvent.AT_TARGET_PHASE : currEventPhase == AdfBaseEvent.AT_TARGET_PHASE ? AdfBaseEvent.BUBBLING_PHASE : undefined
};
AdfPhasedEvent.prototype.getEventPhase = function() {
  return this._eventPhase
};
AdfPhasedEvent.prototype.getDoesBubbles = function() {
  return true
};
AdfPhasedEvent.prototype.isCancelable = function() {
  return true
};
AdfPhasedEvent.prototype.toDebugString = function() {
  var superString = AdfPhasedEvent.superclass.toDebugString.call(this);
  var eventPhase = this.getEventPhase();
  var phaseString = eventPhase == AdfBaseEvent.CAPTURING_PHASE ? "CAPTURING_PHASE" : eventPhase == AdfBaseEvent.AT_TARGET_PHASE ? "AT_TARGET_PHASE" : eventPhase == AdfBaseEvent.BUBBLING_PHASE ? "BUBBLING_PHASE" : "<invalid phase>";
  return superString.substring(0, superString.length - 1) + ", phase=" + phaseString + "]"
};
AdfPhasedEvent.prototype.Init = function(source, type) {
  AdfPhasedEvent.superclass.Init.call(this, source, type);
  this._currTarget = null;
  this._eventPhase = AdfBaseEvent.CAPTURING_PHASE
};

function AdfComponentEvent(source, type) {
  if(arguments.length) {
    AdfAssert.assertPrototype(source, AdfUIComponent);
    this.Init(source, type)
  }
}
AdfComponentEvent.FOCUS_EVENT_TYPE = "focus";
AdfComponentEvent.BLUR_EVENT_TYPE = "blur";
AdfComponentEvent.CONTEXT_MENU_EVENT_TYPE = "contextMenu";
AdfObject.createSubclass(AdfComponentEvent, AdfPhasedEvent);
AdfComponentEvent.prototype.queue = function(isPartial) {
  if(isPartial !== undefined) {
    AdfAssert.assertBoolean(isPartial);
    this.setPartial(isPartial)
  }
  this.getSource().queueEvent(this)
};

function AdfDomComponentEvent(sourceComponent, type, event) {
  if(arguments.length) {
    this.Init(sourceComponent, type, event)
  }
}
AdfObject.createSubclass(AdfDomComponentEvent, AdfComponentEvent);
AdfDomComponentEvent.prototype.getNativeEvent = function() {
  return this.Event
};
AdfDomComponentEvent.prototype.GetSourceDomElement = function() {
  return AdfRichUIPeer.getDomElementForComponent(this.getSource())
};
AdfDomComponentEvent.prototype.getNativeEventTarget = function() {
  var theEvent = this.Event;
  if(theEvent) {
    return AdfAgent.AGENT.getEventTarget(theEvent)
  }else {
    return this.GetSourceDomElement()
  }
};
AdfDomComponentEvent.prototype.clone = function() {
  var clonedNative = AdfAgent.AGENT.cloneEvent(this.Event);
  return new this.constructor(this.getSource(), this.getType(), clonedNative)
};
AdfDomComponentEvent.prototype.Init = function(source, type, event) {
  AdfAssert.assert(event, "Native event must be specified");
  AdfDomComponentEvent.superclass.Init.call(this, source, type);
  this.Event = event
};

AdfObject.createSubclass(AdfComponentFocusEvent, AdfComponentEvent);
function AdfComponentFocusEvent(prevComponent, sourceComponent, type) {
  if(arguments.length) {
    this.Init(prevComponent, sourceComponent, type)
  }
}
AdfComponentFocusEvent.prototype.getPreviousComponent = function() {
  return this.PrevComponent
};
AdfComponentFocusEvent.prototype.getNextComponent = function() {
  return this.getSource()
};
AdfComponentFocusEvent.prototype.Init = function(prevComponent, sourceComponent, type) {
  AdfAssert.assertPrototypeOrNull(prevComponent, AdfUIComponent);
  AdfAssert.assertPrototypeOrNull(sourceComponent, AdfUIComponent);
  AdfComponentFocusEvent.superclass.Init.call(this, sourceComponent, type);
  this.PrevComponent = prevComponent
};

AdfObject.createSubclass(AdfDomComponentFocusEvent, AdfComponentFocusEvent);
function AdfDomComponentFocusEvent(prevComponent, sourceComponent, type, event) {
  if(arguments.length) {
    this.Init(prevComponent, sourceComponent, type, event)
  }
}
AdfDomComponentFocusEvent.prototype.Init = function(prevComponent, sourceComponent, type, event) {
  AdfAssert.assert(event, "Native event must be specified");
  AdfDomComponentFocusEvent.superclass.Init.call(this, prevComponent, sourceComponent, type);
  this.Event = event
};
AdfDomComponentFocusEvent.prototype.getNativeEvent = AdfDomComponentEvent.prototype.getNativeEvent;
AdfDomComponentFocusEvent.prototype.getNativeEventTarget = AdfDomComponentEvent.prototype.getNativeEventTarget;
AdfDomComponentFocusEvent.prototype.clone = AdfDomComponentEvent.prototype.clone;

function AdfUIInputEvent() {
}
AdfObject.createSubclass(AdfUIInputEvent, AdfComponentEvent);
AdfUIInputEvent.CLICK_EVENT_TYPE = "click";
AdfUIInputEvent.DOUBLE_CLICK_EVENT_TYPE = "dblClick";
AdfUIInputEvent.MOUSE_DOWN_EVENT_TYPE = "mouseDown";
AdfUIInputEvent.MOUSE_UP_EVENT_TYPE = "mouseUp";
AdfUIInputEvent.MOUSE_MOVE_EVENT_TYPE = "mouseMove";
AdfUIInputEvent.MOUSE_IN_EVENT_TYPE = "mouseOver";
AdfUIInputEvent.MOUSE_OUT_EVENT_TYPE = "mouseOut";
AdfUIInputEvent.KEY_DOWN_EVENT_TYPE = "keyDown";
AdfUIInputEvent.KEY_UP_EVENT_TYPE = "keyUp";
AdfUIInputEvent.KEY_PRESS_EVENT_TYPE = "keyPress";
AdfUIInputEvent.FOCUS_EVENT_TYPE = "focus";
AdfUIInputEvent.BLUR_EVENT_TYPE = "blur";
AdfUIInputEvent.CONTEXT_MENU_EVENT_TYPE = AdfComponentEvent.CONTEXT_MENU_EVENT_TYPE;
AdfUIInputEvent.LEFT_BUTTON_FLAG = 1;
AdfUIInputEvent.RIGHT_BUTTON_FLAG = 2;
AdfUIInputEvent.MIDDLE_BUTTON_FLAG = 4;
AdfUIInputEvent.prototype.getOffsetX = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getOffsetY = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getClientX = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getClientY = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getPageX = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getPageY = function() {
};
AdfUIInputEvent.prototype.getScreenX = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getScreenY = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getButtons = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.isLeftButtonPressed = function() {
  return(this.getButtons() & AdfUIInputEvent.LEFT_BUTTON_FLAG) != 0
};
AdfUIInputEvent.prototype.isRightButtonPressed = function() {
  return(this.getButtons() & AdfUIInputEvent.RIGHT_BUTTON_FLAG) != 0
};
AdfUIInputEvent.prototype.getKeyCode = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getKeyModifiers = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIInputEvent.prototype.getKeyStroke = function() {
  var keyCode = this.getKeyCode();
  if(keyCode) {
    return AdfKeyStroke.getKeyStroke(keyCode, this.getKeyModifiers())
  }else {
    return null
  }
};

function AdfDomUIInputEvent(sourceComponent, type, event) {
  if(arguments.length) {
    this.Init(sourceComponent, type, event)
  }
}
AdfObject.createSubclass(AdfDomUIInputEvent, AdfUIInputEvent);
AdfDomUIInputEvent.prototype.getDoesBubbles = function() {
  return this.getType() != AdfUIInputEvent.MOUSE_MOVE_EVENT_TYPE
};
AdfDomUIInputEvent.prototype.getOffsetX = function() {
  var eventTarget = AdfDomUtils.getElement(this.getNativeEventTarget());
  return this.getClientX() - AdfAgent.AGENT.getElementLeft(eventTarget)
};
AdfDomUIInputEvent.prototype.getOffsetY = function() {
  var eventTarget = AdfDomUtils.getElement(this.getNativeEventTarget());
  return this.getClientY() - AdfAgent.AGENT.getElementTop(eventTarget)
};
AdfDomUIInputEvent.prototype.getClientX = function() {
  return this.Event.clientX
};
AdfDomUIInputEvent.prototype.getClientY = function() {
  return this.Event.clientY
};
AdfDomUIInputEvent.prototype.getPageX = function() {
  return this.Event.clientX
};
AdfDomUIInputEvent.prototype.getPageY = function() {
  return this.Event.clientY
};
AdfDomUIInputEvent.prototype.getScreenX = function() {
  return this.Event.screenX
};
AdfDomUIInputEvent.prototype.getScreenY = function() {
  return this.Event.screenY
};
AdfDomUIInputEvent.prototype.getButtons = function() {
  var button = this.Event.button;
  switch(button) {
    case 0:
      return AdfUIInputEvent.LEFT_BUTTON_FLAG;
    case 1:
      return AdfUIInputEvent.MIDDLE_BUTTON_FLAG;
    case 2:
      return AdfUIInputEvent.RIGHT_BUTTON_FLAG;
    default:
      return 0
  }
};
AdfDomUIInputEvent.prototype.getKeyCode = function() {
  return this.Event.keyCode
};
AdfDomUIInputEvent.prototype.getKeyModifiers = function() {
  var nativeEvent = this.Event;
  var modifiers = nativeEvent.shiftKey * AdfKeyStroke.SHIFT_MASK | nativeEvent.ctrlKey * AdfKeyStroke.CTRL_MASK | nativeEvent.altKey * AdfKeyStroke.ALT_MASK;
  if(nativeEvent.metaKey) {
    modifiers |= AdfKeyStroke.META_MASK
  }
  return modifiers
};
AdfDomUIInputEvent.prototype.getNativeEvent = function() {
  return this.Event
};
AdfDomUIInputEvent.prototype.getNativeEventTarget = function() {
  var theEvent = this.Event;
  if(theEvent) {
    return AdfAgent.AGENT.getEventTarget(theEvent)
  }else {
    return this.GetSourceDomElement()
  }
};
AdfDomUIInputEvent.prototype.clone = function() {
  var clonedNative = AdfAgent.AGENT.cloneEvent(this.Event);
  return new this.constructor(this.getSource(), this.getType(), clonedNative)
};
AdfDomUIInputEvent.prototype.cancel = function() {
  AdfDomUIInputEvent.superclass.cancel.call(this);
  AdfAgent.AGENT.preventDefault(this.Event)
};
AdfDomUIInputEvent.prototype.toDebugString = function() {
  var superString = AdfDomUIInputEvent.superclass.toDebugString.call(this);
  return superString.substring(0, superString.length - 1) + ", nativeEvent=" + this.getNativeEvent() + ", native target=" + this.getNativeEventTarget() + "]"
};
AdfDomUIInputEvent.prototype.Init = function(source, type, event) {
  AdfAssert.assert(event, "Native event must be specified");
  AdfDomUIInputEvent.superclass.Init.call(this, source, type);
  this.Event = event
};
AdfDomUIInputEvent.prototype.GetSourceDomElement = function() {
  return AdfRichUIPeer.getDomElementForComponent(this.getSource())
};

function AdfComponentTouchEvent(source, type, event) {
  AdfAssert.assertPrototype(source, AdfUIComponent);
  AdfAssert.assertString(type);
  AdfComponentTouchEvent.superclass.Init.call(this, source, type, event)
}
AdfComponentTouchEvent.TOUCH_START_EVENT_TYPE = "touchStart";
AdfComponentTouchEvent.TOUCH_MOVE_EVENT_TYPE = "touchMove";
AdfComponentTouchEvent.TOUCH_END_EVENT_TYPE = "touchEnd";
AdfComponentTouchEvent.TOUCH_CANCEL_EVENT_TYPE = "touchCancel";
AdfObject.createSubclass(AdfComponentTouchEvent, AdfDomUIInputEvent);
AdfComponentTouchEvent.prototype.getDoesBubbles = function() {
  return this.getType() != AdfComponentTouchEvent.TOUCH_MOVE_EVENT_TYPE
};
AdfComponentTouchEvent.prototype.getClientX = function() {
  return this._getFirstTouch().clientX
};
AdfComponentTouchEvent.prototype.getClientY = function() {
  return this._getFirstTouch().clientY
};
AdfComponentTouchEvent.prototype.getPageX = function() {
  return this._getFirstTouch().pageX
};
AdfComponentTouchEvent.prototype.getPageY = function() {
  return this._getFirstTouch().pageY
};
AdfComponentTouchEvent.prototype.getScreenX = function() {
  return this._getFirstTouch().screenX
};
AdfComponentTouchEvent.prototype.getScreenY = function() {
  return this._getFirstTouch().screenY
};
AdfComponentTouchEvent.prototype.getButtons = function() {
  return AdfUIInputEvent.LEFT_BUTTON_FLAG
};
AdfComponentTouchEvent.prototype.getKeyCode = function() {
  return 0
};
AdfComponentTouchEvent.prototype.getCurrentTarget = function() {
  return this.getDoesBubbles() ? AdfComponentTouchEvent.superclass.getCurrentTarget.call(this) : this.getSource()
};
AdfComponentTouchEvent.__getFirstTouch = function(evt) {
  if(evt.changedTouches && evt.changedTouches.length) {
    return evt.changedTouches[0]
  }else {
    if(evt.targetTouches && evt.targetTouches.length) {
      return evt.targetTouches[0]
    }else {
      if(evt.touches && evt.touches.length) {
        return evt.touches[0]
      }
    }
  }
  return null
};
AdfComponentTouchEvent.prototype._getFirstTouch = function() {
  return AdfComponentTouchEvent.__getFirstTouch(this.Event)
};
AdfComponentTouchEvent.prototype.getTouchCount = function() {
  var count = this.Event.touches.length;
  if(this.getType() == AdfComponentTouchEvent.TOUCH_END_EVENT_TYPE) {
    count += this.Event.changedTouches.length
  }
  return count
};
AdfComponentTouchEvent.deriveContextMenuEvent = function(componentEvent) {
  var ret = null;
  if(componentEvent.getType() == AdfComponentTouchEvent.TOUCH_END_EVENT_TYPE || componentEvent.getType() == AdfComponentTouchEvent.TOUCH_START_EVENT_TYPE) {
    ret = new AdfTouchShowContextMenuEvent(componentEvent.getSource(), AdfComponentEvent.CONTEXT_MENU_EVENT_TYPE, componentEvent.getNativeEvent())
  }
  return ret
};
AdfComponentTouchEvent.prototype.cancel = function() {
  AdfComponentTouchEvent.superclass.cancel.call(this);
  AdfAgent.AGENT.preventDefault(this.Event)
};

function AdfDomReplacedEvent(source, clientIds) {
  this.Init(source, clientIds)
}
AdfObject.createSubclass(AdfDomReplacedEvent, AdfBaseEvent);
AdfDomReplacedEvent.EVENT_TYPE = "domReplaced";
AdfDomReplacedEvent.prototype.Init = function(source, clientIds) {
  AdfDomReplacedEvent.superclass.Init.call(this, source, AdfDomReplacedEvent.EVENT_TYPE);
  this._clientIds = AdfCollections.cloneArray(clientIds)
};
AdfDomReplacedEvent.prototype.getClientIds = function() {
  return AdfCollections.cloneArray(this._clientIds)
};
AdfDomReplacedEvent.prototype.containsClientId = function(clientId) {
  var retVal = false;
  var clientIdsMap = this._clientIdsMap;
  if(!clientIdsMap) {
    var clientIds = this._clientIds;
    var clientIdsCount = clientIds.length;
    clientIdsMap = new Object;
    for(var i = 0;i < clientIdsCount;i++) {
      clientIdsMap[clientIds[i]] = true
    }
    this._clientIdsMap = clientIdsMap
  }
  return clientId in clientIdsMap
};

function AdfKeyStroke(keyCode, modifiers, stringForm) {
  this.Init(keyCode, modifiers, stringForm)
}
AdfObject.createSubclass(AdfKeyStroke);
AdfKeyStroke.SHIFT_MASK = 1 << 0;
AdfKeyStroke.CTRL_MASK = 1 << 1;
AdfKeyStroke.META_MASK = 1 << 2;
AdfKeyStroke.ALT_MASK = 1 << 3;
AdfKeyStroke.BACKSPACE_KEY = 8;
AdfKeyStroke.TAB_KEY = 9;
AdfKeyStroke.SHIFT_KEY = 16;
AdfKeyStroke.CTRL_KEY = 17;
AdfKeyStroke.ALT_KEY = 18;
AdfKeyStroke.ARROWDOWN_KEY = 40;
AdfKeyStroke.ARROWUP_KEY = 38;
AdfKeyStroke.ARROWRIGHT_KEY = 39;
AdfKeyStroke.ARROWLEFT_KEY = 37;
AdfKeyStroke.ESC_KEY = 27;
AdfKeyStroke.ENTER_KEY = 13;
AdfKeyStroke.SPACE_KEY = 32;
AdfKeyStroke.PAGEUP_KEY = 33;
AdfKeyStroke.PAGEDOWN_KEY = 34;
AdfKeyStroke.END_KEY = 35;
AdfKeyStroke.HOME_KEY = 36;
AdfKeyStroke.INSERT_KEY = 45;
AdfKeyStroke.DELETE_KEY = 46;
AdfKeyStroke.A_KEY = 65;
AdfKeyStroke.C_KEY = 67;
AdfKeyStroke.M_KEY = 77;
AdfKeyStroke.P_KEY = 80;
AdfKeyStroke.R_KEY = 82;
AdfKeyStroke.V_KEY = 86;
AdfKeyStroke.W_KEY = 87;
AdfKeyStroke.X_KEY = 88;
AdfKeyStroke.F1_KEY = 112;
AdfKeyStroke.F2_KEY = 113;
AdfKeyStroke.F3_KEY = 114;
AdfKeyStroke.F4_KEY = 115;
AdfKeyStroke.F5_KEY = 116;
AdfKeyStroke.F6_KEY = 117;
AdfKeyStroke.F7_KEY = 118;
AdfKeyStroke.F8_KEY = 119;
AdfKeyStroke.F9_KEY = 120;
AdfKeyStroke.F10_KEY = 121;
AdfKeyStroke.F11_KEY = 122;
AdfKeyStroke.F12_KEY = 123;
AdfKeyStroke.InitClass = function() {
  this._MODIFIER_STRINGS = new Array(16);
  this._MODIFIER_DISPLAY_STRINGS = new Array(16);
  this._CACHE = new Object;
  var keyCodeToNameList = ["BACK_SPACE", AdfKeyStroke.BACKSPACE_KEY, "CLEAR", 12, "SHIFT", AdfKeyStroke.SHIFT_KEY, "CONTROL", AdfKeyStroke.CTRL_KEY, "ALT", 18, "CAPS_LOCK", 20, "TAB", AdfKeyStroke.TAB_KEY, "DOWN", AdfKeyStroke.ARROWDOWN_KEY, "UP", AdfKeyStroke.ARROWUP_KEY, "RIGHT", AdfKeyStroke.ARROWRIGHT_KEY, "LEFT", AdfKeyStroke.ARROWLEFT_KEY, "ESCAPE", AdfKeyStroke.ESC_KEY, "ENTER", AdfKeyStroke.ENTER_KEY, "SPACE", AdfKeyStroke.SPACE_KEY, "PAGE_UP", AdfKeyStroke.PAGEUP_KEY, "PAGE_DOWN", AdfKeyStroke.PAGEDOWN_KEY, 
  "END", AdfKeyStroke.END_KEY, "HOME", AdfKeyStroke.HOME_KEY, "INSERT", AdfKeyStroke.INSERT_KEY, "DELETE", AdfKeyStroke.DELETE_KEY, "F1", AdfKeyStroke.F1_KEY, "F2", AdfKeyStroke.F2_KEY, "F3", AdfKeyStroke.F3_KEY, "F4", AdfKeyStroke.F4_KEY, "F5", AdfKeyStroke.F5_KEY, "F6", AdfKeyStroke.F6_KEY, "F7", AdfKeyStroke.F7_KEY, "F8", AdfKeyStroke.F8_KEY, "F9", AdfKeyStroke.F9_KEY, "F10", AdfKeyStroke.F10_KEY, "F11", AdfKeyStroke.F11_KEY, "F12", AdfKeyStroke.F12_KEY];
  var keyCodeMappings = new Array;
  for(var i = keyCodeToNameList.length - 1;i >= 0;i--) {
    var currKeyCode = keyCodeToNameList[i];
    i--;
    var currKeyName = keyCodeToNameList[i];
    keyCodeMappings[currKeyCode] = currKeyName;
    keyCodeMappings[currKeyName] = currKeyCode
  }
  this._KEYCODE_MAPPINGS = keyCodeMappings;
  this._SHIFT_MODIFIER = "shift";
  this._CTRL_MODIFIER = "ctrl";
  this._META_MODIFIER = "meta";
  this._ALT_MODIFIER = "alt";
  var modifierNameToFlag = new Object;
  modifierNameToFlag[this._SHIFT_MODIFIER] = this.SHIFT_MASK;
  modifierNameToFlag[this._CTRL_MODIFIER] = this.CTRL_MASK;
  modifierNameToFlag[this._META_MODIFIER] = this.META_MASK;
  modifierNameToFlag[this._ALT_MODIFIER] = this.ALT_MASK;
  this._MODIFIER_NAME_TO_FLAG = modifierNameToFlag
};
AdfKeyStroke.prototype.Init = function(keyCode, modifiers, stringForm) {
  AdfAssert.assertNumber(keyCode);
  AdfAssert.assertNumber(modifiers);
  AdfAssert.assertString(stringForm);
  AdfKeyStroke.superclass.Init.call(this);
  this._keyCode = keyCode;
  this._modifiers = modifiers;
  this._stringForm = stringForm
};
AdfKeyStroke.prototype.getKeyCode = function() {
  return this._keyCode
};
AdfKeyStroke.prototype.getModifiers = function() {
  return this._modifiers
};
AdfKeyStroke._getModifierString = function(modifiers) {
  AdfAssert.assertNumber(modifiers);
  var modifierStrings = AdfKeyStroke._MODIFIER_STRINGS;
  var modifierString = modifierStrings[modifiers];
  if(modifierString == null) {
    var buffer = new Array;
    if((modifiers & AdfKeyStroke.SHIFT_MASK) != 0) {
      buffer.push(AdfKeyStroke._SHIFT_MODIFIER)
    }
    if((modifiers & AdfKeyStroke.CTRL_MASK) != 0) {
      buffer.push(AdfKeyStroke._CTRL_MODIFIER)
    }
    if((modifiers & AdfKeyStroke.META_MASK) != 0) {
      buffer.push(AdfKeyStroke._META_MODIFIER)
    }
    if((modifiers & AdfKeyStroke.ALT_MASK) != 0) {
      buffer.push(AdfKeyStroke._ALT_MODIFIER)
    }
    modifierString = buffer.join(" ");
    modifierStrings[modifiers] = modifierString
  }
  return modifierString
};
AdfKeyStroke._getModifierDisplayString = function(modifiers) {
  AdfAssert.assertNumber(modifiers);
  var modifierDisplayStrings = AdfKeyStroke._MODIFIER_DISPLAY_STRINGS;
  var modifierDisplayString = modifierDisplayStrings[modifiers];
  if(modifierDisplayString == null) {
    var agent = AdfAgent.AGENT;
    var buffer = new Array(4);
    if((modifiers & AdfKeyStroke.SHIFT_MASK) != 0) {
      buffer.push(agent.getModifierDisplayName(AdfKeyStroke.SHIFT_MASK))
    }
    if((modifiers & AdfKeyStroke.CTRL_MASK) != 0) {
      buffer.push(agent.getModifierDisplayName(AdfKeyStroke.CTRL_MASK))
    }
    if((modifiers & AdfKeyStroke.META_MASK) != 0) {
      buffer.push(agent.getModifierDisplayName(AdfKeyStroke.META_MASK))
    }
    if((modifiers & AdfKeyStroke.ALT_MASK) != 0) {
      buffer.push(agent.getModifierDisplayName(AdfKeyStroke.ALT_MASK))
    }
    modifierDisplayString = buffer.join(" ");
    modifierDisplayStrings[modifiers] = modifierDisplayString
  }
  return modifierDisplayString
};
AdfKeyStroke._getStringForm = function(keyCode, modifiers) {
  var modifierString = AdfKeyStroke._getModifierString(modifiers);
  var keyValue = AdfKeyStroke._getNameFromKeyCode(keyCode);
  if(modifierString.length == 0) {
    return keyValue
  }else {
    return modifierString + " " + keyValue
  }
};
AdfKeyStroke.prototype.toString = function() {
  return AdfKeyStroke.superclass.toString.call(this) + " " + this._stringForm
};
AdfKeyStroke.prototype.toMarshalledString = function() {
  return this._stringForm
};
AdfKeyStroke.getKeyStroke = function(keyCode, modifiers) {
  AdfAssert.assertNumber(keyCode);
  AdfAssert.assertNumber(modifiers);
  AdfObject.ensureClassInitialization(AdfKeyStroke);
  var stringForm = AdfKeyStroke._getStringForm(keyCode, modifiers);
  var keyCache = AdfKeyStroke._CACHE;
  var keyStroke = keyCache[stringForm];
  if(keyStroke == null) {
    keyStroke = new AdfKeyStroke(keyCode, modifiers, stringForm);
    keyCache[stringForm] = keyStroke
  }
  return keyStroke
};
AdfKeyStroke.getKeyStrokeFromMarshalledString = function(keyString) {
  AdfAssert.assertString(keyString);
  AdfObject.ensureClassInitialization(AdfKeyStroke);
  var cache = AdfKeyStroke._CACHE;
  var keyStroke = cache[keyString];
  if(keyStroke == null) {
    var tokens = keyString.split(" ");
    var lastTokenIndex = tokens.length - 1;
    AdfAssert.assert(lastTokenIndex >= 0);
    var keyValue = tokens[lastTokenIndex];
    var keyCode = AdfKeyStroke._KEYCODE_MAPPINGS[keyValue];
    if(keyCode === undefined) {
      keyCode = keyValue.charCodeAt(0)
    }
    var modifierNameToFlag = AdfKeyStroke._MODIFIER_NAME_TO_FLAG;
    var modifiers = 0;
    var needsNormalization = false;
    for(var i = 0;i < lastTokenIndex;i++) {
      var newModifier = modifierNameToFlag[tokens[i]];
      if(newModifier == undefined) {
        newModifier = 0
      }
      if(newModifier <= modifiers) {
        needsNormalization = true
      }
      modifiers |= newModifier
    }
    if(needsNormalization) {
      keyStroke = AdfKeyStroke.getKeyStroke(keyCode, modifiers)
    }else {
      keyStroke = new AdfKeyStroke(keyCode, modifiers, keyString);
      cache[keyString] = keyStroke
    }
  }
  return keyStroke
};
AdfKeyStroke._getNameFromKeyCode = function(keyCode) {
  var keyName = AdfKeyStroke._KEYCODE_MAPPINGS[keyCode];
  if(keyName == null) {
    keyName = String.fromCharCode(keyCode)
  }
  return keyName
};

function AdfAgent(version, domWindow) {
  this.Init(AdfAgent.UNKNOWN_PLATFORM, AdfAgent.guessOS(), version, domWindow)
}
AdfObject.createSubclass(AdfAgent);
AdfAgent.IE_PLATFORM = "ie";
AdfAgent.GECKO_PLATFORM = "gecko";
AdfAgent.WEBKIT_PLATFORM = "webkit";
AdfAgent.OPERA_PLATFORM = "opera";
AdfAgent.EDGE_PLATFORM = "edge";
AdfAgent.UNKNOWN_PLATFORM = "unknown";
AdfAgent.WINDOWS_OS = "Windows";
AdfAgent.SOLARIS_OS = "Solaris";
AdfAgent.MAC_OS = "Mac";
AdfAgent.UNKNOWN_OS = "Unknown";
AdfAgent.ANDROID_OS = "Android";
AdfAgent.CAP_TOUCH_SCREEN = "touchScreen";
AdfAgent.CAP_TOUCH_SCREEN_NONE = "none";
AdfAgent.CAP_TOUCH_SCREEN_SINGLE = "single";
AdfAgent.CAP_TOUCH_SCREEN_MULTIPLE = "multiple";
AdfAgent._MIN_IE_VERSION = 10;
AdfAgent._MIN_CHROME_VERSION = 37;
AdfAgent._MIN_SAFARI_VERSION = 7;
AdfAgent.getAgent = function(domWindow) {
  if(domWindow != null) {
    AdfAgent._agent = null
  }
  if(!AdfAgent._agent) {
    AdfAssert.assert(domWindow != null);
    var version;
    try {
      var userAgent = navigator.userAgent;
      var agentClassName = AdfAgent.getAgentClassNameFromAgentString(userAgent);
      var agentClass = window[agentClassName];
      if(agentClass == null) {
        AdfLogger.LOGGER.severe(AdfAgent._AGENT_CLASS_NAME_NOT_FOUND, agentClassName);
        agentClass = this
      }
      version = agentClass.__getAgentVersion(userAgent);
      var supported = agentClass.__getSupported(userAgent, version);
      if(checkAgentSupport && !supported) {
        alert(AdfAgent._UNSUPPORTED_BROWSER_ALERT)
      }
      var specificAgentClassName = agentClass.__getSpecificAgentClassName(userAgent, version);
      var specificAgentClass = window[specificAgentClassName];
      if(specificAgentClass == null) {
        AdfLogger.LOGGER.severe(AdfAgent._AGENT_CLASS_NAME_NOT_FOUND, specificAgentClassName);
        AdfAgent._agent = new AdfAgent(version, domWindow)
      }else {
        AdfAgent._agent = new specificAgentClass(version, domWindow)
      }
    }catch(e) {
      AdfAgent._agent = new AdfAgent(version, domWindow);
      AdfLogger.LOGGER.logError(e, AdfLogger.SEVERE, "Unable to initialize specific AdfAgent")
    }
  }
  return AdfAgent._agent
};
AdfAgent.getAgentClassNameFromAgentString = function(userAgent) {
  var name = "AdfAgent";
  if(userAgent.indexOf("Opera") != -1) {
    name = "AdfOperaAgent"
  }else {
    if(userAgent.indexOf("Trident") != -1) {
      name = "AdfIEAgent"
    }else {
      if(userAgent.indexOf("MSIE") != -1) {
        name = "AdfIEAgent"
      }else {
        if(userAgent.indexOf("Edge") != -1) {
          name = "AdfEdgeAgent"
        }else {
          if(userAgent.indexOf("AppleWebKit") != -1 || userAgent.indexOf("Safari") != -1) {
            name = "AdfSafariAgent"
          }else {
            if(userAgent.indexOf("Gecko/") != -1) {
              name = "AdfGeckoAgent"
            }
          }
        }
      }
    }
  }
  return name
};
AdfAgent.guessOS = function() {
  var agentName = navigator.userAgent.toLowerCase();
  if(agentName.indexOf("win") != -1) {
    return AdfAgent.WINDOWS_OS
  }else {
    if(agentName.indexOf("mac") != -1) {
      return AdfAgent.MAC_OS
    }else {
      if(agentName.indexOf("sunos") != -1) {
        return AdfAgent.SOLARIS_OS
      }else {
        if(agentName.indexOf("android") != -1) {
          return AdfAgent.ANDROID_OS
        }
      }
    }
  }
};
AdfAgent.guessVersion = function() {
  return parseFloat(navigator.appVersion)
};
AdfAgent.InitClass = function() {
  AdfAgent._agent = null;
  var keyEvents = AdfAgent.KEY_EVENTS;
  for(var eventIndex = 0;eventIndex < keyEvents.length;eventIndex++) {
    keyEvents[keyEvents[eventIndex]] = eventIndex
  }
  var modifierDisplayStrings = new Array;
  modifierDisplayStrings[AdfKeyStroke.CTRL_MASK] = "Ctrl";
  modifierDisplayStrings[AdfKeyStroke.SHIFT_MASK] = "Shift";
  modifierDisplayStrings[AdfKeyStroke.ALT_MASK] = "Alt";
  modifierDisplayStrings[AdfKeyStroke.META_MASK] = "Meta";
  this._MODIFIER_DISPLAY_NAMES = modifierDisplayStrings;
  this._SETTABLE_STYLE_PROPS = null
};
AdfAgent.prototype.Init = function(platform, os, version, domWindow) {
  AdfAgent.superclass.Init.call(this);
  if(!platform) {
    platform = AdfAgent.UNKNOWN_PLATFORM
  }
  if(!os) {
    os = AdfAgent.UNKNOWN_OS
  }
  this._platform = platform;
  this._os = os;
  this._version = version;
  this._window = domWindow;
  this._document = domWindow.document;
  this._oldBodyCursor = null;
  this._busyCursorShown = false;
  var c = this._capabilities = {};
  c[AdfAgent.CAP_TOUCH_SCREEN] = this.GetTouchCapability()
};
AdfAgent.prototype.GetTouchCapability = function() {
  var touchCapability = AdfAgent.CAP_TOUCH_SCREEN_NONE;
  if(navigator.maxTouchPoints) {
    touchCapability = navigator.maxTouchPoints > 1 ? AdfAgent.CAP_TOUCH_SCREEN_MULTIPLE : AdfAgent.CAP_TOUCH_SCREEN_SINGLE
  }
  return touchCapability
};
AdfAgent.prototype.createXMLHttpRequest = function() {
  if(window.XMLHttpRequest) {
    return new XMLHttpRequest
  }else {
    return null
  }
};
AdfAgent.prototype.isInlineDialogRepositioningOnScroll = function() {
  if(AdfPage.PAGE.isPortlet()) {
    return false
  }
  return true
};
AdfAgent.prototype.addResizeListener = function(id, listener) {
  AdfAssert.assertString(id);
  AdfAssert.assertFunction(listener);
  var domElement = this.getElementById(id);
  AdfAssert.assertDomNode(domElement);
  var resizeEventMap = this._resizeEventMap;
  if(!resizeEventMap) {
    resizeEventMap = this._resizeEventMap = {}
  }
  var resizeTracker;
  if(!resizeEventMap[id]) {
    resizeTracker = new AdfResizeTrackManager(domElement);
    resizeTracker.start();
    resizeEventMap[id] = {resizeTracker:resizeTracker}
  }else {
    resizeTracker = resizeEventMap[id].resizeTracker
  }
  resizeTracker.addListener(listener)
};
AdfAgent.prototype.removeResizeListener = function(id, listener) {
  AdfAssert.assertString(id);
  AdfAssert.assertFunction(listener);
  var domElement = this.getElementById(id);
  AdfAssert.assertDomNode(domElement);
  var resizeEventMap = this._resizeEventMap;
  if(!resizeEventMap) {
    resizeEventMap = this._resizeEventMap = {}
  }
  if(resizeEventMap[id]) {
    var resizeTracker = resizeEventMap[id].resizeTracker;
    resizeTracker.removeListener(listener);
    if(resizeTracker.isEmpty()) {
      resizeTracker.stop();
      delete resizeEventMap[id]
    }
  }
};
AdfAgent.prototype.getPlatform = function() {
  return this._platform
};
AdfAgent.prototype.getOS = function() {
  return this._os
};
AdfAgent.prototype.getVersion = function() {
  return this._version
};
AdfAgent.prototype.getDomWindow = function() {
  return this._window
};
AdfAgent.prototype.getDomDocument = function() {
  return this._document
};
AdfAgent.prototype.atLeast = function(platform, version) {
  return(!platform || platform == this.getPlatform()) && (!version || version <= this.getVersion())
};
AdfAgent.prototype.getElementById = function(id) {
  return this._document.getElementById(id)
};
AdfAgent.prototype.getElementsByName = function(name) {
  return this._document.getElementsByName(name)
};
AdfAgent.prototype.getOrigin = function() {
  var location = document.location;
  var origin = location.origin;
  if(!origin) {
    var currentHref = location.href;
    origin = currentHref.slice(0, currentHref.length - (location.pathname.length + location.search.length + location.hash.length))
  }
  return origin
};
AdfAgent.prototype.elementsRemoved = function(element) {
};
AdfAgent.prototype.allElementsRemoved = function() {
};
AdfAgent.prototype.isSessionStorageEnabled = function(propKey) {
  if(this._isSessionStorageEnabled === undefined) {
    try {
      sessionStorage.setItem("_adfTestKey", "on");
      sessionStorage.removeItem("_adfTestKey");
      this._isSessionStorageEnabled = true
    }catch(e) {
      AdfLogger.LOGGER.fine("Access to sessionStorage failed for some unexpected reason. As " + "a result user activity monitoring has been disabled. Name: " + e.name + ", Message: " + e.message);
      this._isSessionStorageEnabled = false
    }
  }
  return this._isSessionStorageEnabled
};
AdfAgent.prototype.getSessionStorageProperty = function(propKey) {
  AdfAssert.assertString(propKey);
  try {
    return sessionStorage.getItem(propKey)
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsInfo(e, "An error occurred trying to access DOM sessionStorage.");
    throw e;
  }
};
AdfAgent.prototype.removeSessionStorageProperty = function(propKey) {
  AdfAssert.assertString(propKey);
  try {
    sessionStorage.removeItem(propKey)
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsInfo(e, "An error occurred trying to access DOM sessionStorage.");
    throw e;
  }
};
AdfAgent.prototype.setSessionStorageProperty = function(propKey, propValue) {
  AdfAssert.assertString(propKey);
  AdfAssert.assertString(propValue);
  try {
    sessionStorage.setItem(propKey, propValue)
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsInfo(e, "An error occurred trying to access DOM sessionStorage.");
    throw e;
  }
};
AdfAgent.prototype.elementsAdded = function(element) {
};
AdfAgent.prototype.getDescendantComponentsForNode = function(node, children) {
  if(!children) {
    children = new Array
  }
  if(node.firstChild) {
    var page = AdfPage.PAGE;
    var idNodes = this.getDomDocument().evaluate(".//*[@id]", node, null, XPathResult.ANY_TYPE, null);
    var currNode = idNodes.iterateNext();
    while(currNode) {
      var comp = page.findComponent(currNode.id);
      if(comp) {
        children.push(comp)
      }
      currNode = idNodes.iterateNext()
    }
  }
  return children
};
AdfAgent.prototype.setTextContent = function(node, newText) {
  AdfAssert.assertDomNode(node);
  if(newText === null) {
    newText = ""
  }
  node.textContent = newText
};
AdfAgent.prototype.getTextContent = function(node) {
  return node.textContent
};
AdfAgent.prototype.setButtonTextContent = function(node, newText) {
  this.setTextContent(node, newText)
};
AdfAgent.prototype.getWindowHeight = function() {
  return this._window.innerHeight
};
AdfAgent.prototype.getWindowWidth = function() {
  return this._window.innerWidth
};
AdfAgent.prototype.getElementLeft = function(element) {
  AdfAssert.assertDomElement(element);
  var boundingRect = element.getBoundingClientRect();
  var elemLeft = boundingRect["left"];
  var docElement = element.ownerDocument.documentElement;
  elemLeft -= docElement.clientLeft - this.getBrowserViewportScrollLeft();
  return elemLeft
};
AdfAgent.prototype.getElementTop = function(element) {
  AdfAssert.assertDomElement(element);
  var boundingRect = element.getBoundingClientRect();
  var elemTop = boundingRect["top"];
  var docElement = element.ownerDocument.documentElement;
  elemTop -= docElement.clientTop - this.getBrowserViewportScrollTop();
  return elemTop
};
AdfAgent.prototype.getElementPageBounds = function(domElement) {
  AdfAssert.assertDomElement(domElement);
  var boundingRect = domElement.getBoundingClientRect();
  var docElement = domElement.ownerDocument.documentElement;
  deltaX = docElement.clientLeft - this.getBrowserViewportScrollLeft();
  deltaY = docElement.clientTop - this.getBrowserViewportScrollTop();
  return{"top":boundingRect.top - deltaY, "left":boundingRect.left - deltaX, "bottom":boundingRect.bottom - deltaY, "right":boundingRect.right - deltaX}
};
AdfAgent.prototype.pointInElementBounds = function(element, pageX, pageY) {
  var pageTop = this.getElementTop(element);
  if(pageY >= pageTop) {
    var pageLeft = this.getElementLeft(element);
    if(pageX >= pageLeft) {
      return pageY <= pageTop + element.offsetHeight && pageX <= pageLeft + element.offsetWidth
    }
  }
  return false
};
AdfAgent.prototype.pointInElementOrChildBounds = function(element, pageX, pageY) {
  return this.pointInElementBounds(element, pageX, pageY)
};
AdfAgent.getCSSLengthAsInt = function(cssLength) {
  if(typeof cssLength === "number") {
    return cssLength
  }
  if(cssLength.length > 0 && cssLength != "auto") {
    var intLength = parseInt(cssLength);
    if(isNaN(intLength)) {
      intLength = 0
    }
    return intLength
  }else {
    return 0
  }
};
AdfAgent.prototype.getBoxSizing = function(element, currentStyle) {
  if(!currentStyle) {
    currentStyle = this.getComputedStyle(element)
  }
  return currentStyle.boxSizing
};
AdfAgent.prototype.getOuterWidth = function(element, innerWidth, currentStyle) {
  if(!currentStyle) {
    currentStyle = this.getComputedStyle(element)
  }
  if(this.getBoxSizing(element, currentStyle) == "border-box") {
    return innerWidth
  }
  var cssLengthAsInt = AdfAgent.getCSSLengthAsInt;
  var width = innerWidth + cssLengthAsInt(currentStyle.paddingLeft) + cssLengthAsInt(currentStyle.paddingRight) + cssLengthAsInt(currentStyle.marginLeft) + cssLengthAsInt(currentStyle.marginRight);
  if(element.tagName.toUpperCase() != "TABLE") {
    width += cssLengthAsInt(currentStyle.borderLeftWidth) + cssLengthAsInt(currentStyle.borderRightWidth)
  }
  return width
};
AdfAgent.prototype.getOuterHeight = function(element, innerHeight, currentStyle) {
  if(!currentStyle) {
    currentStyle = this.getComputedStyle(element)
  }
  if(this.getBoxSizing(element, currentStyle) == "border-box") {
    return innerHeight
  }
  var cssLengthAsInt = AdfAgent.getCSSLengthAsInt;
  var height = innerHeight - cssLengthAsInt(currentStyle.paddingTop) + cssLengthAsInt(currentStyle.paddingBottom) + cssLengthAsInt(currentStyle.marginTop) + cssLengthAsInt(currentStyle.marginBottom);
  if(element.tagName.toUpperCase() != "TABLE") {
    height += cssLengthAsInt(currentStyle.borderTopWidth) + cssLengthAsInt(currentStyle.borderBottomWidth)
  }
  return height
};
AdfAgent.prototype.setOuterWidth = function(element, outerWidth) {
  var currentStyle = this.getComputedStyle(element);
  if(this.getBoxSizing(element, currentStyle) == "border-box") {
    element.style.width = outerWidth + "px";
    return
  }
  var width = this._getOuterWidth(element, outerWidth, currentStyle);
  element.style.width = width + "px"
};
AdfAgent.prototype.setOuterMaxWidth = function(element, outerMaxWidth) {
  var currentStyle = this.getComputedStyle(element);
  if(this.getBoxSizing(element, currentStyle) == "border-box") {
    element.style.maxWidth = outerMaxWidth + "px";
    return
  }
  var maxWidth = this._getOuterWidth(element, outerMaxWidth, currentStyle);
  element.style.maxWidth = maxWidth + "px"
};
AdfAgent.prototype._getOuterWidth = function(element, outerWidth, currentStyle) {
  var cssLengthAsInt = AdfAgent.getCSSLengthAsInt;
  var width = outerWidth - cssLengthAsInt(currentStyle.paddingLeft) - cssLengthAsInt(currentStyle.paddingRight) - cssLengthAsInt(currentStyle.marginLeft) - cssLengthAsInt(currentStyle.marginRight);
  if(element.tagName.toUpperCase() != "TABLE") {
    width -= cssLengthAsInt(currentStyle.borderLeftWidth) + cssLengthAsInt(currentStyle.borderRightWidth)
  }
  if(width < 0) {
    width = 0
  }
  return width
};
AdfAgent.prototype.getDomForCSSPropertyName = function(cssPropertyName) {
  var cssToDomPropertyNameMap = this.GetCssToDomPropertyNameMap();
  var domPropertyName = cssToDomPropertyNameMap[cssPropertyName];
  if(domPropertyName) {
    return domPropertyName
  }
  var words = cssPropertyName.split("-");
  len = words.length;
  var camelCasedStyle = words[0];
  for(var j = 1;j < len;j++) {
    camelCasedStyle += words[j].charAt(0).toUpperCase() + words[j].substring(1)
  }
  return camelCasedStyle
};
AdfAgent.prototype.GetCssToDomPropertyNameMap = function() {
  return AdfAgent._CSS_TO_DOM_MAP
};
AdfAgent.prototype.getStyleProperty = function(style, propertyName) {
  return style.getPropertyValue(propertyName)
};
AdfAgent.prototype.setOuterHeight = function(element, outerHeight) {
  var currentStyle = this.getComputedStyle(element);
  if(this.getBoxSizing(element, currentStyle) == "border-box") {
    element.style.height = outerHeight + "px";
    return
  }
  var height = this._getOuterHeight(element, outerHeight, currentStyle);
  element.style.height = height + "px"
};
AdfAgent.prototype.setOuterMaxHeight = function(element, outerHeight) {
  var currentStyle = this.getComputedStyle(element);
  if(this.getBoxSizing(element, currentStyle) == "border-box") {
    element.style.maxHeight = outerHeight + "px";
    return
  }
  var maxHeight = this._getOuterHeight(element, outerHeight, currentStyle);
  element.style.maxHeight = maxHeight + "px"
};
AdfAgent.prototype._getOuterHeight = function(element, outerHeight, currentStyle) {
  var cssLengthAsInt = AdfAgent.getCSSLengthAsInt;
  var height = outerHeight - cssLengthAsInt(currentStyle.paddingTop) - cssLengthAsInt(currentStyle.paddingBottom) - cssLengthAsInt(currentStyle.marginTop) - cssLengthAsInt(currentStyle.marginBottom);
  if(element.tagName.toUpperCase() != "TABLE") {
    height -= cssLengthAsInt(currentStyle.borderTopWidth) + cssLengthAsInt(currentStyle.borderBottomWidth)
  }
  if(height < 0) {
    height = 0
  }
  return height
};
AdfAgent.prototype.getWindowClientWidth = function(domWindow) {
  return domWindow.document.documentElement.clientWidth
};
AdfAgent.prototype.getWindowClientHeight = function(domWindow) {
  return domWindow.document.documentElement.clientHeight
};
AdfAgent.prototype.getWindowScrollWidth = function(domWindow) {
  return domWindow.document.documentElement.scrollWidth
};
AdfAgent.prototype.getWindowScrollHeight = function(domWindow) {
  return domWindow.document.documentElement.scrollHeight
};
AdfAgent.prototype.getBrowserViewportScrollTop = function() {
  var domDoc = this.getDomDocument();
  var docElement = domDoc.documentElement;
  return docElement.scrollTop
};
AdfAgent.prototype.getBrowserViewportScrollLeft = function() {
  var domDoc = this.getDomDocument();
  var docElement = domDoc.documentElement;
  return docElement.scrollLeft
};
AdfAgent.prototype.getOverrideStyle = function(element) {
  var mutableStyle = element.style;
  if(!mutableStyle) {
    element.setAttribute("style", "");
    mutableStyle = element.getAttribute("style")
  }
  return mutableStyle
};
AdfAgent.prototype.getComputedStyle = function(element) {
  return element.ownerDocument.defaultView.getComputedStyle(element, null)
};
AdfAgent.prototype.copyStyle = function(sourceElement, targetElement) {
  AdfAssert.assertDomElement(targetElement);
  AdfAssert.assertDomElement(sourceElement);
  var targetStyle = targetElement.style;
  var sourceStyle = this.getComputedStyle(sourceElement);
  var settableStyleProps = AdfAgent._SETTABLE_STYLE_PROPS;
  if(settableStyleProps == null) {
    settableStyleProps = new Array;
    var regexFilter = /^[^0-9]/;
    for(var styleProp in sourceStyle) {
      var styleValue = sourceStyle[styleProp];
      if(styleProp != "cssText" && typeof styleValue != "function" && regexFilter.test(styleProp)) {
        try {
          if(styleValue != null && styleValue.length > 0) {
            targetStyle[styleProp] = styleValue
          }
        }catch(e) {
          continue
        }
        settableStyleProps.push(styleProp)
      }
    }
    AdfAgent._SETTABLE_STYLE_PROPS = settableStyleProps
  }else {
    var propCount = settableStyleProps.length;
    for(var i = 0;i < propCount;i++) {
      var currProp = settableStyleProps[i];
      if(sourceStyle[currProp] != null && sourceStyle[currProp].length > 0) {
        targetStyle[currProp] = sourceStyle[currProp]
      }
    }
  }
};
AdfAgent.prototype.addBubbleEventListener = function(nodeOrWindow, eventType, listener) {
  AdfAssert.assertString(eventType);
  AdfAssert.assertFunction(listener);
  nodeOrWindow.addEventListener(eventType, listener, false)
};
AdfAgent.prototype.removeBubbleEventListener = function(nodeOrWindow, eventType, listener) {
  AdfAssert.assertString(eventType);
  AdfAssert.assertFunction(listener);
  nodeOrWindow.removeEventListener(eventType, listener, false)
};
AdfAgent.prototype.addEventCaptures = function(node, listener) {
  AdfAssert.assertDomNode(node);
  AdfAssert.assertFunction(listener);
  var events = AdfAgent.REDISTRIBUTE_EVENTS;
  var eventCount = events.length;
  for(var eventIndex = 0;eventIndex < eventCount;eventIndex++) {
    node.addEventListener(events[eventIndex], listener, true)
  }
};
AdfAgent.prototype.removeEventCaptures = function(node, listener) {
  AdfAssert.assertDomNode(node);
  AdfAssert.assertFunction(listener);
  var events = AdfAgent.REDISTRIBUTE_EVENTS;
  var eventCount = events.length;
  for(var eventIndex = 0;eventIndex < eventCount;eventIndex++) {
    node.removeEventListener(events[eventIndex], listener, true)
  }
};
AdfAgent.prototype.addEventBubbles = function(node, listener) {
  AdfAgent._addEventListeners(node, AdfAgent.REDISTRIBUTE_EVENTS, listener, false);
  AdfAgent._addEventListeners(node, AdfAgent._REDISTRIBUTE_CAPTURE_EVENTS, listener, true);
  if(this._capabilities[AdfAgent.CAP_TOUCH_SCREEN] != AdfAgent.CAP_TOUCH_SCREEN_NONE) {
    AdfAgent._addEventListeners(node, AdfAgent._REDISTRIBUTE_TOUCH_EVENTS, listener, false)
  }
};
AdfAgent.prototype.removeEventBubbles = function(node, listener) {
  AdfAgent._removeEventListeners(node, AdfAgent.REDISTRIBUTE_EVENTS, listener, false);
  AdfAgent._removeEventListeners(node, AdfAgent._REDISTRIBUTE_CAPTURE_EVENTS, listener, true);
  if(this._capabilities[AdfAgent.CAP_TOUCH_SCREEN] != AdfAgent.CAP_TOUCH_SCREEN_NONE) {
    AdfAgent._removeEventListeners(node, AdfAgent._REDISTRIBUTE_TOUCH_EVENTS, listener, false)
  }
};
AdfAgent.prototype.addKeyEventListener = function(element, listener) {
  element.addEventListener("keydown", listener, false)
};
AdfAgent.prototype.removeKeyEventListener = function(element, listener) {
  element.removeEventListener("keydown", listener, false)
};
AdfAgent.prototype.startDocumentKeyEventCapture = function(listenerMap, focusProxy) {
  AdfAssert.assert(listenerMap);
  AdfAssert.assertDomElement(focusProxy);
  var ownerDoc = focusProxy.ownerDocument;
  var keyEvents = AdfAgent.KEY_EVENTS;
  var eventCount = keyEvents.length;
  for(var eventIndex = 0;eventIndex < eventCount;eventIndex++) {
    var currEventName = keyEvents[eventIndex];
    var currListener = listenerMap[currEventName];
    if(currListener) {
      AdfAssert.assertFunction(currListener);
      ownerDoc.addEventListener(currEventName, currListener, true)
    }
  }
  return null
};
AdfAgent.prototype.endDocumentKeyEventCapture = function(listenerMap, focusProxy) {
  AdfAssert.assert(listenerMap);
  AdfAssert.assertDomElement(focusProxy);
  var ownerDoc = focusProxy.ownerDocument;
  var keyEvents = AdfAgent.KEY_EVENTS;
  var eventCount = keyEvents.length;
  for(var eventIndex = 0;eventIndex < eventCount;eventIndex++) {
    var currEventName = keyEvents[eventIndex];
    ownerDoc.removeEventListener(currEventName, listenerMap[currEventName], true)
  }
};
AdfAgent.prototype.getKeyCode = function(keyEvent) {
  return keyEvent.keyCode
};
AdfAgent.prototype.isFunctionKey = function(keyEvent) {
  return keyEvent.charCode == 0
};
AdfAgent.prototype.getModifierDisplayName = function(modifier) {
  return AdfAgent._MODIFIER_DISPLAY_NAMES[modifier]
};
AdfAgent.prototype.getEventTarget = function(event) {
  return event.target
};
AdfAgent.prototype._getEventRelatedTarget = function(nativeEvent) {
  var relatedTarget = nativeEvent.relatedTarget;
  try {
    if(relatedTarget && relatedTarget.nodeType) {
      return relatedTarget
    }
  }catch(e) {
    relatedTarget = null
  }
  return relatedTarget
};
AdfAgent.prototype.getEventToElement = function(nativeEvent) {
  var domEventType = nativeEvent.type;
  if(domEventType == "mouseover") {
    return this.getEventTarget()
  }else {
    if(domEventType == "mouseout") {
      return this._getEventRelatedTarget(nativeEvent)
    }
  }
  return null
};
AdfAgent.prototype.getEventFromElement = function(nativeEvent) {
  var domEventType = nativeEvent.type;
  if(domEventType == "mouseover") {
    return this._getEventRelatedTarget(nativeEvent)
  }else {
    if(domEventType == "mouseout") {
      return this.getEventTarget()
    }
  }
  return null
};
AdfAgent.prototype.getComponentEvent = function(component, nativeEvent, prevComponent) {
  var type = nativeEvent.type;
  if(!AdfAgent._isCustomEvent(this._window, nativeEvent)) {
    type = this.mapNativeToComponentEventType(nativeEvent.type)
  }
  if(type) {
    if(type == AdfComponentEvent.FOCUS_EVENT_TYPE) {
      if(prevComponent === undefined) {
        return new AdfDomComponentEvent(component, type, nativeEvent)
      }
      return new AdfDomComponentFocusEvent(prevComponent, component, type, nativeEvent)
    }else {
      if(type == AdfComponentEvent.BLUR_EVENT_TYPE) {
        return new AdfDomComponentEvent(component, type, nativeEvent)
      }else {
        if(type == AdfComponentEvent.CONTEXT_MENU_EVENT_TYPE) {
          return new AdfDomShowContextMenuEvent(component, type, nativeEvent)
        }else {
          if(AdfAgent._NATIVE_TOUCH_TO_COMPONENT_MAPPINGS[nativeEvent.type] != undefined) {
            return new AdfComponentTouchEvent(component, type, nativeEvent)
          }else {
            return this.CreateUIInputEvent(component, type, nativeEvent)
          }
        }
      }
    }
  }else {
    AdfLogger.LOGGER.warning("unmapped event:", AdfUIUtils.getPropertiesAsString(nativeEvent));
    return null
  }
};
AdfAgent.prototype.CreateUIInputEvent = function(component, type, nativeEvent) {
  return new AdfDomUIInputEvent(component, type, nativeEvent)
};
AdfAgent.prototype.elementFromPagePoint = function(pageX, pageY, hintElement, exclusionContext, exclusionCallback) {
  AdfAssert.assertNumber(pageX);
  AdfAssert.assertNumber(pageY);
  AdfAssert.assertFunctionOrNull(exclusionCallback);
  var theDocument = this._document;
  var bodyElement = theDocument.body;
  var excludeChild = null;
  if(hintElement) {
    if(hintElement.parentNode != theDocument.documentElement) {
      var checkElement = hintElement;
      hintElement = null;
      do {
        if(this.pointInElementBounds(checkElement, pageX, pageY)) {
          if(!hintElement) {
            hintElement = checkElement
          }else {
            if(this.pointInElementChrome(checkElement, pageX, pageY)) {
              hintElement = checkElement
            }
          }
        }else {
          hintElement = null;
          excludeChild = checkElement
        }
        checkElement = checkElement.parentNode
      }while(checkElement != bodyElement)
    }else {
      hintElement = null
    }
  }
  if(hintElement) {
    if(this.pointInElementChrome(hintElement, pageX, pageY)) {
      return hintElement
    }
  }
  var data = {target:hintElement, zIndex:0, done:false};
  this._elementFromPagePointImpl(hintElement ? hintElement : bodyElement, pageX, pageY, data, false, excludeChild, exclusionContext, exclusionCallback);
  var elementAtPoint = data.target;
  if(!elementAtPoint) {
    data.zIndex = 0;
    this._elementFromPagePointImpl(bodyElement, pageX, pageY, data, true, null, exclusionContext, exclusionCallback);
    elementAtPoint = data.target
  }
  return elementAtPoint
};
AdfAgent.prototype._elementFromPagePointImpl = function(fromElem, x, y, data, ignoreParentBounds, excludeChild, exclusionContext, exclusionCallback) {
  var currChild = fromElem.firstChild;
  while(currChild && !data.done) {
    if(currChild.nodeType == 1 && currChild != excludeChild && (exclusionCallback == null || !exclusionCallback.call(exclusionContext, currChild))) {
      var childStyle = this.getComputedStyle(currChild);
      if(childStyle && childStyle.display != "none") {
        var childZIndex = childStyle.zIndex;
        if(childZIndex == "auto") {
          childZIndex = null
        }
        if(childStyle.visibility != "hidden" && (childZIndex && childZIndex >= data.zIndex || !childZIndex && data.zIndex < 1)) {
          var checkChildren = ignoreParentBounds;
          var targetIsSet = false;
          var top = this.getElementTop(currChild);
          if(top <= y) {
            var offsetHeight = currChild.offsetHeight;
            var zeroHeight = offsetHeight == 0;
            if(zeroHeight || top + offsetHeight >= y) {
              var left = this.getElementLeft(currChild);
              if(left <= x) {
                var offsetWidth = currChild.offsetWidth;
                var zeroWidth = offsetWidth == 0;
                if(zeroWidth || left + offsetWidth >= x) {
                  checkChildren = true;
                  targetIsSet = !zeroWidth && !zeroHeight;
                  if(this.pointInElementChrome(currChild, x, y)) {
                    targetIsSet = true;
                    data.done = true
                  }
                  if(targetIsSet) {
                    data.target = currChild
                  }
                }
              }
            }
          }
          if(checkChildren && !data.done) {
            var oldZIndex;
            var oldTarget;
            if(!targetIsSet) {
              oldTarget = data.target;
              oldZIndex = data.zIndex
            }
            if(childZIndex) {
              data.zIndex = childZIndex
            }
            this._elementFromPagePointImpl(currChild, x, y, data, ignoreParentBounds, null, exclusionContext, exclusionCallback);
            if(!targetIsSet && oldTarget == data.target) {
              data.zIndex = oldZIndex
            }
          }
        }
      }
    }
    currChild = currChild.nextSibling
  }
};
AdfAgent.prototype.getNodeName = function(element) {
  return element.nodeName
};
AdfAgent.prototype.getLocalName = function(element) {
  return element.localName
};
AdfAgent.prototype.getNodeXml = function(node) {
  var serializer = new XMLSerializer;
  var xmlString = serializer.serializeToString(node);
  return xmlString
};
AdfAgent.prototype.getPrefix = function(element) {
  return element.prefix
};
AdfAgent.prototype.isElementHTML = function(element) {
  AdfAssert.assertDomNode(element);
  return true
};
AdfAgent.prototype.setCssFloat = function(element, value) {
  element.style.cssFloat = value
};
AdfAgent.prototype.getAttributeName = function(attr) {
  return attr.name
};
AdfAgent.prototype.getAttribute = function(node, attrName) {
  return node.getAttribute(attrName)
};
AdfAgent.prototype.hasAttribute = function(element, attribute) {
  AdfAssert.assertDomElement(element);
  return element.hasAttribute(attribute.name)
};
AdfAgent.prototype.isAttributeSpecified = function(attribute) {
  return attribute.specified
};
AdfAgent.prototype.replaceNode = function(sourceNode, targetNode) {
  return targetNode.parentNode.replaceChild(sourceNode, targetNode)
};
AdfAgent.prototype.setAttribute = function(element, attrName, attrValue) {
  var propValue = element[attrName];
  if(propValue == undefined || typeof propValue != "boolean" || attrValue != "false") {
    element.setAttribute(attrName, attrValue)
  }
};
AdfAgent.prototype.getIntAttribute = function(element, attrName, defaultValue) {
  AdfAssert.assertDomElement(element);
  if(defaultValue == undefined) {
    defaultValue = null
  }
  if(element.hasAttribute(attrName)) {
    var value = element.getAttribute(attrName);
    value = parseInt(value);
    if(isNaN(value)) {
      value = defaultValue;
      AdfLogger.LOGGER.warning("The value of attribute named ", attrName, " cannot be converted into an integer.")
    }
  }else {
    value = defaultValue
  }
  return value
};
AdfAgent.prototype.getBooleanAttribute = function(element, attrName, defaultValue) {
  AdfAssert.assert(element);
  if(defaultValue == undefined) {
    defaultValue = null
  }
  var value = element.getAttribute(attrName);
  if(value == null) {
    value = defaultValue
  }else {
    if(value == "true") {
      value = true
    }else {
      if(value == "false") {
        value = false
      }else {
        value = defaultValue;
        AdfLogger.LOGGER.warning("The value of attribute named ", attrName, " cannot be converted into a boolean.")
      }
    }
  }
  return value
};
AdfAgent.prototype.enableUserSelect = function(element) {
};
AdfAgent.prototype.disableUserSelect = function(element) {
};
AdfAgent.prototype.createTouchMoveManager = function(element, handlerCallback, touchCount) {
  return new AdfTouchMoveManager(element, handlerCallback, touchCount)
};
AdfAgent.prototype.stopPropagation = function(evt) {
  evt.stopPropagation()
};
AdfAgent.prototype.preventDefault = function(evt) {
  evt.preventDefault()
};
AdfAgent.prototype.isDefaultPrevented = function(evt) {
  return evt.defaultPrevented
};
AdfAgent.prototype.eatEvent = function(evt) {
  this.stopPropagation(evt);
  this.preventDefault(evt)
};
AdfAgent.prototype.getMousePosition = function(evt) {
  if((evt.type == "touchstart" || evt.type == "touchmove") && evt.targetTouches && evt.targetTouches.length > 0) {
    var touchEvt = evt.targetTouches[0];
    return{x:touchEvt.pageX, y:touchEvt.pageY}
  }
  if(evt.type == "touchend" && evt.changedTouches && evt.changedTouches.length > 0) {
    var touchEvt = evt.changedTouches[0];
    return{x:touchEvt.pageX, y:touchEvt.pageY}
  }
  return{x:evt.pageX, y:evt.pageY}
};
AdfAgent.prototype.isEventInElement = function(event, element) {
  var mousePosition = this.getMousePosition(event);
  var elementPosition = this.getElementPosition(element);
  var mouseX = mousePosition.x;
  var elementX = elementPosition.x;
  if(mouseX >= elementX && mouseX <= elementX + element.offsetWidth) {
    var mouseY = mousePosition.y;
    var elementY = elementPosition.y;
    if(mouseY >= elementY && mouseY <= elementY + element.offsetHeight) {
      return true
    }
  }
  return false
};
AdfAgent.prototype.getElementPosition = function(element) {
  AdfAssert.assertDomElement(element);
  var boundingRect = element.getBoundingClientRect();
  var elemTop = boundingRect["top"];
  var elemLeft = boundingRect["left"];
  var docElement = element.ownerDocument.documentElement;
  elemLeft -= docElement.clientLeft - this.getBrowserViewportScrollLeft();
  elemTop -= docElement.clientTop - this.getBrowserViewportScrollTop();
  return{"x":elemLeft, "y":elemTop}
};
AdfAgent.prototype.isMouseEvent = function(event) {
  return AdfAgent._MOUSE_EVENTS[event.type] != undefined
};
AdfAgent.prototype.isKeyboardEvent = function(event) {
  if(event != null) {
    return AdfAgent._KEYBOARD_EVENTS[event.type] != undefined
  }
  return false
};
AdfAgent.prototype.isChromeEvent = function(domEvent) {
  return false
};
AdfAgent.prototype.pointInElementChrome = function(element, pageX, pageY) {
  return false
};
AdfAgent.prototype.cloneEvent = function(event, newTarget) {
  if(this.isMouseEvent(event) || this.isKeyboardEvent(event)) {
    var eventType = event.type;
    var newEvent;
    if(this.isMouseEvent(event)) {
      newEvent = this._copyMouseEvent(event, eventType, newTarget)
    }else {
      if(this.isKeyboardEvent(event)) {
        newEvent = this._copyKeyboardEvent(event, eventType, newTarget)
      }
    }
    var targetNode = newTarget ? newTarget : event.target;
    var targetDocument = targetNode.ownerDocument;
    targetDocument.addEventListener(eventType, this.stopPropagation, true);
    try {
      targetNode.dispatchEvent(newEvent)
    }finally {
      targetDocument.removeEventListener(eventType, this.stopPropagation, true)
    }
    return newEvent
  }else {
    return event
  }
};
AdfAgent.prototype.copyEvent = function(event) {
  if(this.isMouseEvent(event) || event.type == "contextmenu") {
    var eventType = event.type;
    newEvent = this._copyMouseEvent(event, eventType);
    return newEvent
  }else {
    return event
  }
};
AdfAgent.prototype._copyMouseEvent = function(event, eventType, newTarget) {
  var targetNode = newTarget ? newTarget : event.target;
  var targetDocument = targetNode.ownerDocument;
  var newEvent = targetDocument.createEvent("MouseEvents");
  newEvent.initMouseEvent(eventType, event.bubbles, event.cancelable, targetDocument.contentWindow, event.detail, event.screenX, event.screenY, event.clientX, event.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, event.button, event.relatedTarget);
  return newEvent
};
AdfAgent.prototype._copyKeyboardEvent = function(event, eventType, newTarget) {
  var targetNode = newTarget ? newTarget : event.target;
  var targetDocument = targetNode.ownerDocument;
  var newEvent = targetDocument.createEvent("Event");
  newEvent.initEvent(eventType, true, true);
  newEvent.altGraphKey = event.altGraphKey;
  newEvent.altKey = event.altKey;
  newEvent.ctrlKey = event.ctrlKey;
  newEvent.keyCode = event.keyCode;
  newEvent.keyIdentifier = event.keyIdentifier;
  newEvent.keyLocation = event.keyLocation;
  newEvent.shiftKey = event.shiftKey;
  newEvent.view = event.view;
  newEvent.which = event.which;
  return newEvent
};
AdfAgent.prototype.dispatchEvent = function(targetElement, event) {
  return targetElement.dispatchEvent(event)
};
AdfAgent.prototype.checkMouseOutEvent = function(element, evt) {
  var inside = false;
  var pos = this.getElementPosition(element);
  var mousePos = this.getMousePosition(evt);
  inside = mousePos.x > pos.x && mousePos.x < pos.x + element.offsetWidth && mousePos.y > pos.y && mousePos.y < pos.y + element.offsetHeight;
  return!inside
};
AdfAgent.prototype.isLeftButton = function(evt) {
  return evt.button == 0
};
AdfAgent.prototype.isSelectionToggle = function(evt) {
  var isToggle = false;
  var isMac = AdfAgent.MAC_OS == this.getOS();
  if(isMac && evt.metaKey) {
    isToggle = true
  }else {
    if(!isMac && evt.ctrlKey) {
      isToggle = true
    }
  }
  return isToggle
};
AdfAgent.prototype.disableSelectionToggleOnEditableCell = function() {
  return false
};
AdfAgent.prototype.isLeftButtonClick = function(evt) {
  return evt.type == "click"
};
AdfAgent.prototype.startMouseEventCapture = function(listenerMap) {
  for(type in listenerMap) {
    if(!(type in AdfAgent.KEY_EVENTS)) {
      this._document.addEventListener(type, listenerMap[type], true)
    }
  }
};
AdfAgent.prototype.stopMouseEventCapture = function(listenerMap) {
  for(type in listenerMap) {
    if(!(type in AdfAgent.KEY_EVENTS)) {
      this._document.removeEventListener(type, listenerMap[type], true)
    }
  }
};
AdfAgent.prototype.mapNativeToComponentEventType = function(eventType) {
  var baseEvent = AdfAgent._NATIVE_TO_COMPONENT_MAPPINGS[eventType];
  if(baseEvent) {
    return baseEvent
  }
  if(this._capabilities[AdfAgent.CAP_TOUCH_SCREEN] != AdfAgent.CAP_TOUCH_SCREEN_NONE) {
    return AdfAgent._NATIVE_TOUCH_TO_COMPONENT_MAPPINGS[eventType]
  }
};
AdfAgent.prototype.createDefaultLogWriter = function() {
  var nativeLogWriter = this.CreateNativeLogWriter();
  var logWritersString = AdfAgent._LOG_WRITERS;
  var domWindow = this._window;
  var logWriterCtor = domWindow[logWritersString];
  if(typeof logWriterCtor == "function" && AdfLogWriter.prototype.isPrototypeOf(logWriterCtor.prototype)) {
    return new logWriterCtor(domWindow, nativeLogWriter)
  }else {
    if(logWritersString != "NativeLogWriter") {
      AdfLogger.LOGGER.warning('"', AdfAgent.logWritersString, '", is an undefined LogWriter or is not a subclass of AdfLogWriter. ', "Now using the native log writer. Set the Log Writer parameter in the ", "web.xml file to use a specific LogWriter.")
    }
    return this.CreateDefaultLogWriter(nativeLogWriter)
  }
};
AdfAgent.prototype.CreateDefaultLogWriter = function(nativeLogWriter) {
  if(AdfAssert.DEBUG) {
    return new AdfConsoleLogWriter(this._window, nativeLogWriter)
  }else {
    return nativeLogWriter
  }
};
AdfAgent.prototype.CreateNativeLogWriter = function() {
  return new AdfAlertLogWriter
};
AdfAgent.prototype.setImageSource = function(img, src) {
  img.src = src
};
AdfAgent.prototype.setImageTooltip = function(img, tooltip) {
  img.alt = tooltip
};
AdfAgent.prototype.createXmlDocument = function() {
  return this.getDomDocument().implementation.createDocument("", "", null)
};
AdfAgent.prototype.getFormElement = function(form, elementName) {
  return form.elements[elementName]
};
AdfAgent.prototype.showBusyCursor = function(ownerDocument, show) {
  AdfAssert.assertBoolean(show);
  if(show) {
    if(this._busyCursorShown) {
      return
    }
    this._oldBodyCursor = ownerDocument.body.style.cursor;
    this._busyCursorShown = true;
    ownerDocument.body.style.cursor = "wait"
  }else {
    this._busyCursorShown = false;
    if(ownerDocument.body.style.cursor == "wait") {
      if(!this._oldBodyCursor) {
        this._oldBodyCursor = "auto"
      }
      ownerDocument.body.style.cursor = this._oldBodyCursor
    }
  }
};
AdfAgent.prototype.forceCursorChange = function(ownerDocument) {
};
AdfAgent.prototype.setCursor = function(domElement, cursor, onTargetElement) {
  AdfAssert.assertDomElement(domElement);
  AdfAssert.assertString(cursor);
  domElement.style.cursor = cursor
};
AdfAgent.eatEventCallback = function(event) {
  var agent = AdfAgent.AGENT;
  var targetEvent = event != null ? event : agent.getDomWindow().event;
  if(targetEvent) {
    agent.eatEvent(targetEvent)
  }
  return false
};
AdfAgent.preventDefaultCallback = function(event) {
  var event = event != null ? event : this._window.event;
  AdfAgent.AGENT.preventDefault(event);
  return false
};
AdfAgent.prototype.installKeyboardBlocker = function(ownerDocument, install) {
  if(install) {
    ownerDocument.addEventListener("keypress", AdfAgent.eatEventCallback, true);
    ownerDocument.addEventListener("keyup", AdfAgent.eatEventCallback, true);
    ownerDocument.addEventListener("keydown", AdfAgent.eatEventCallback, true)
  }else {
    ownerDocument.removeEventListener("keypress", AdfAgent.eatEventCallback, true);
    ownerDocument.removeEventListener("keyup", AdfAgent.eatEventCallback, true);
    ownerDocument.removeEventListener("keydown", AdfAgent.eatEventCallback, true)
  }
};
AdfAgent.prototype.setOpacity = function(element, opacityPercent) {
  element.style.opacity = opacityPercent / 100
};
AdfAgent.prototype.disableBrowserContextMenu = function(ownerDocument, disable) {
  if(disable) {
    this.addBubbleEventListener(ownerDocument, "contextmenu", this.preventDefault)
  }else {
    this.removeBubbleEventListener(ownerDocument, "contextmenu", this.preventDefault)
  }
};
AdfAgent.prototype.execScript = function(ownerWindow, scriptText) {
  ownerWindow.eval(scriptText)
};
AdfAgent.prototype.createStyle = function(content) {
  var style = document.createElement("style");
  style.setAttribute("type", "text/css");
  style.appendChild(document.createTextNode(content));
  var head = AdfDomUtils.getFirstDescendentElement(AdfAgent.AGENT.getDomDocument().documentElement, "HEAD");
  head.appendChild(style);
  return style
};
AdfAgent.prototype.setExpandoProperty = function(element, propertyName, propertyValue) {
  AdfAssert.assertDomElement(element);
  AdfAssert.assertString(propertyName);
  element[propertyName] = propertyValue;
  AdfAssert.assert(this.getExpandoProperty(element, propertyName) == propertyValue)
};
AdfAgent.prototype.getExpandoProperty = function(element, propertyName, defaultValue) {
  AdfAssert.assertDomElement(element);
  AdfAssert.assertString(propertyName);
  var value = element[propertyName];
  if(value != undefined) {
    return value
  }else {
    return defaultValue
  }
};
AdfAgent.prototype.getCursor = function(cursorName) {
  return cursorName
};
AdfAgent.getCSS2Cursor = function(cursorName) {
  return AdfAgent._CSS3_TO_CSS2_MAP[cursorName]
};
AdfAgent.prototype.scrollToPos = function(element, posX, posY) {
  if(posY != null) {
    element.scrollTop = posY
  }
  if(posX != null) {
    element.scrollLeft = posX
  }
};
AdfAgent.prototype.isClipped = function(element) {
  if(element.scrollWidth > element.offsetWidth || element.scrollHeight > element.offsetHeight) {
    return true
  }
  var body = this._document.body;
  if(element == body || element == this._document) {
    return false
  }
  var currParent = element.offsetParent;
  var currLeft = element.offsetLeft;
  var currTop = element.offsetTop;
  var outerWidth = element.offsetWidth;
  var outerHeight = element.offsetHeight;
  var computedStyle = this.getComputedStyle(element);
  var paddingLeft = AdfAgent.getCSSLengthAsInt(computedStyle.paddingLeft);
  var paddingRight = AdfAgent.getCSSLengthAsInt(computedStyle.paddingRight);
  var paddingTop = AdfAgent.getCSSLengthAsInt(computedStyle.paddingTop);
  var paddingBottom = AdfAgent.getCSSLengthAsInt(computedStyle.paddingBottom);
  currTop += paddingTop;
  currLeft += paddingLeft;
  outerHeight -= paddingTop + paddingBottom;
  outerWidth -= paddingLeft + paddingRight;
  var clippingMargin = 2;
  var checkElement = element;
  var isAbsolutePositioned = computedStyle.position == "absolute";
  while(currParent && currParent != body) {
    if(currParent.clientHeight > 0 && currParent.clientWidth > 0) {
      if(currLeft + clippingMargin < currParent.scrollLeft || currTop + clippingMargin < currParent.scrollTop) {
        return true
      }
      if(currLeft + outerWidth - clippingMargin > currParent.scrollLeft + currParent.clientWidth || currTop + outerHeight - clippingMargin > currParent.scrollTop + currParent.clientHeight) {
        if(!isAbsolutePositioned || this.getComputedStyle(currParent).overflow != "visible") {
          return true
        }
      }
    }
    checkElement = currParent;
    var offsetLeft;
    var offsetTop;
    computedStyle = this.getComputedStyle(checkElement);
    if(computedStyle.position == "absolute") {
      offsetLeft = AdfAgent.getCSSLengthAsInt(computedStyle.left);
      offsetTop = AdfAgent.getCSSLengthAsInt(computedStyle.top);
      isAbsolutePositioned = true
    }else {
      offsetLeft = checkElement.offsetLeft;
      offsetTop = checkElement.offsetTop;
      isAbsolutePositioned = false
    }
    currLeft += offsetLeft - checkElement.scrollLeft;
    currTop += offsetTop - checkElement.scrollTop;
    currParent = currParent.offsetParent
  }
  return false
};
AdfAgent.prototype.getPreferredKeyEventForRepetition = function() {
  return AdfUIInputEvent.KEY_DOWN_EVENT_TYPE
};
AdfAgent.prototype.isDisabledOptionSupported = function() {
  return true
};
AdfAgent.prototype.resizeStretchedChild = function(childElement, parentPadding) {
};
AdfAgent.prototype.resizeStretchedElement = function(element, width, height) {
};
AdfAgent.prototype.prepareStretchedChild = function(childElement, parentPadding) {
  AdfAssert.assert(parentPadding != null, "parent padding not specified");
  var childStyle = childElement.style;
  childStyle.position = "absolute";
  childStyle.width = "auto";
  childStyle.height = "auto";
  childStyle.left = parentPadding;
  childStyle.top = parentPadding;
  childStyle.bottom = parentPadding;
  childStyle.right = parentPadding
};
AdfAgent.prototype.repositionStretchedElement = function(element, topPixels, bottomPixels, leftPixels, rightPixels) {
  if(element) {
    var style = element.style;
    if(topPixels) {
      style.top = topPixels
    }
    if(leftPixels) {
      style.left = leftPixels
    }
    if(bottomPixels) {
      style.height = "auto";
      style.bottom = bottomPixels
    }
    if(rightPixels) {
      style.width = "auto";
      style.right = rightPixels
    }
  }
};
AdfAgent.prototype.isEqualIcon = function(firstIcon, secondIcon) {
  return firstIcon.parentNode.innerHTML == secondIcon.parentNode.innerHTML
};
AdfAgent.prototype.addOption = function(element, label, value, selected, disabled, description, index) {
  var optionElement = this._document.createElement("option");
  element.options.add(optionElement, index);
  if(value != null) {
    optionElement.value = value
  }
  if(label) {
    AdfAgent.AGENT.setTextContent(optionElement, label)
  }
  optionElement.selected = selected;
  optionElement.disabled = disabled;
  if(description) {
    optionElement.title = description
  }
};
AdfAgent.prototype.removeIdsFromDomSubTree = function(subTreeRoot) {
  var rootId = subTreeRoot.id;
  if(rootId != null && rootId != "") {
    subTreeRoot.id = ""
  }
  var rawNodes = subTreeRoot.childNodes;
  for(var nodeIndex in rawNodes) {
    var node = rawNodes[nodeIndex];
    if(node.nodeType == 1) {
      this.removeIdsFromDomSubTree(node)
    }
  }
};
AdfAgent.prototype.modifyIdsInDomSubTree = function(subTreeRoot, prepend, idString) {
  var rootId = subTreeRoot.id;
  if(rootId != null && rootId != "") {
    subTreeRoot.id = prepend ? idString + "::" + rootId : rootId + "::" + idString
  }
  var rawNodes = subTreeRoot.childNodes;
  for(var nodeIndex in rawNodes) {
    var node = rawNodes[nodeIndex];
    if(node.nodeType == 1) {
      this.modifyIdsInDomSubTree(node, prepend, idString)
    }
  }
};
AdfAgent.prototype.removeStyleProperty = function(element, styleProperty) {
  element.style.removeProperty(styleProperty)
};
AdfAgent.prototype.setTableRowHeight = function(row, height) {
  row.style.height = height + "px"
};
AdfAgent.prototype.autoCompleteForm = function(htmlForm) {
};
AdfAgent.prototype.getTableRows = function(tableElement) {
  return tableElement.rows
};
AdfAgent.prototype.getTableRowCells = function(tableRow) {
  return tableRow.cells
};
AdfAgent.prototype.getTableRow = function(tableElement, rowIndex) {
  return tableElement.rows[rowIndex]
};
AdfAgent.prototype.parseXML = function(xmlString) {
  var doc = null;
  if(xmlString && xmlString.length) {
    var parser = new DOMParser;
    try {
      doc = parser.parseFromString(xmlString, "text/xml")
    }catch(e) {
    }
  }
  return doc
};
AdfAgent.prototype.cloneNode = function(domNode) {
  return domNode.cloneNode(true)
};
AdfAgent.prototype.clearSubtreeIds = function(element) {
  if(element.id) {
    element.id = ""
  }
  if(element.name) {
    element.name = ""
  }
  var currChild = element.firstChild;
  while(currChild) {
    if(currChild.nodeType == 1) {
      this.clearSubtreeIds(currChild)
    }
    currChild = currChild.nextSibling
  }
};
AdfAgent.prototype.getCapabilities = function() {
  return this._capabilities
};
AdfAgent.prototype.isDragPrepEvent = function(componentEvent) {
  if(componentEvent instanceof AdfUIInputEvent) {
    var eventType = componentEvent.getType();
    if(eventType == AdfUIInputEvent.MOUSE_DOWN_EVENT_TYPE) {
      return componentEvent.isLeftButtonPressed()
    }
    if(eventType == AdfComponentTouchEvent.TOUCH_START_EVENT_TYPE) {
      return componentEvent.getTouchCount() == 1
    }
  }
  return false
};
AdfAgent.prototype.createDraggableNode = function(domNode) {
  var dragContent = this.cloneNode(domNode);
  if(dragContent.nodeType == 1) {
    this.clearSubtreeIds(dragContent)
  }
  AdfDomUtils.addCSSClassName(domNode, AdfAgent.DRAG_GHOST_STYLECLASS);
  this.copyStyle(domNode, dragContent);
  AdfDomUtils.removeCSSClassName(domNode, AdfAgent.DRAG_GHOST_STYLECLASS);
  if(dragContent.nodeType == 1) {
    var ownerDocument = domNode.ownerDocument;
    var sourceTable;
    var localContent;
    if(dragContent.nodeName == "TD" || dragContent.nodeName == "TH") {
      sourceTable = domNode.parentNode.parentNode.parentNode;
      localContent = ownerDocument.createElement("TR");
      localContent.appendChild(dragContent);
      dragContent = localContent
    }
    if(dragContent.nodeName == "TR") {
      if(domNode.nodeName == "TR") {
        sourceTable = domNode.parentNode.parentNode;
        var sourceCells = this.getTableRowCells(domNode);
        var dragCells = this.getTableRowCells(dragContent);
        var ce1lCount = sourceCells.length;
        var useOffsetWidth = this.IsComputedWidthAuto();
        for(var i = 0;i < ce1lCount;i++) {
          if(useOffsetWidth) {
            dragCells[i].width = sourceCells[i].offsetWidth
          }else {
            dragCells[i].style.width = this.getComputedStyle(sourceCells[i]).width
          }
          dragCells[i].noWrap = true
        }
      }
      localContent = ownerDocument.createElement("TBODY");
      localContent.appendChild(dragContent);
      dragContent = localContent
    }
    if(dragContent.nodeName == "TBODY" || dragContent.nodeName == "THEAD" || dragContent.nodeName == "TFOOT") {
      if(!sourceTable) {
        sourceTable = domNode.parentNode
      }
      localContent = ownerDocument.createElement("TABLE");
      localContent.cellSpacing = sourceTable.cellSpacing;
      localContent.cellPadding = sourceTable.cellPadding;
      localContent.border = sourceTable.border;
      this.copyStyle(sourceTable, localContent);
      localContent.appendChild(dragContent);
      dragContent = localContent
    }
  }
  this.CopyDragSize(domNode, dragContent);
  return dragContent
};
AdfAgent.prototype.CopyDragSize = function(sourceElement, clonedElement) {
  var cloneStyle = clonedElement.style;
  cloneStyle.position = "absolute";
  cloneStyle.width = sourceElement.offsetWidth + "px";
  cloneStyle.height = sourceElement.offsetHeight + "px";
  cloneStyle.top = "auto";
  cloneStyle.left = "auto";
  cloneStyle.right = "auto";
  cloneStyle.bottom = "auto";
  if(cloneStyle.margin == "auto") {
    cloneStyle.margin = ""
  }
};
AdfAgent.prototype.IsComputedWidthAuto = function() {
  return false
};
AdfAgent.prototype.createContextMenuEventGenerator = function() {
  return new AdfTouchContextMenuManager
};
AdfAgent.prototype.showTooltip = function(componentEvent) {
};
AdfAgent.prototype.slice = function(file, startByte, stopByte) {
  if(typeof Blob === "undefined" || typeof Blob.prototype.slice === "undefined") {
    return undefined
  }
  if(file == null) {
    return null
  }
  if(file.slice) {
    return file.slice(startByte, stopByte)
  }
  return undefined
};
AdfAgent.prototype.supportsTransientStyleClasses = function() {
  return true
};
AdfAgent.prototype.getScrollLeft = function(element) {
  AdfAssert.assertDomNode(element);
  if(AdfPage.PAGE.getLocaleContext().isRightToLeft()) {
    return element.scrollWidth - element.scrollLeft - element.clientWidth
  }
  return element.scrollLeft
};
AdfAgent.prototype.setScrollLeft = function(element, value) {
  AdfAssert.assertDomNode(element);
  if(AdfPage.PAGE.getLocaleContext().isRightToLeft()) {
    value = element.scrollWidth - value - element.clientWidth
  }
  element.scrollLeft = value
};
AdfAgent.prototype.toISOString = function(date) {
  AdfAssert.assert(date != null);
  return date.toISOString()
};
AdfAgent.prototype.getMaxConnectionsPerDomain = function() {
  return 2
};
AdfAgent.prototype.isTouchFirstDevice = function() {
  return false
};
AdfAgent.__getAgentVersion = function(userAgent) {
  return AdfAgent.__parseFloatVersion(userAgent, /Mozilla\/(\d+([.]\d+)*)/)
};
AdfAgent.__getSupported = function(userAgent, version) {
  return false
};
AdfAgent.__getSpecificAgentClassName = function(userAgent, version) {
  return"AdfAgent"
};
AdfAgent.__parseFloatVersion = function(agentName, versionNumberPattern) {
  var matches = agentName.match(versionNumberPattern);
  if(matches) {
    var versionString = matches[1];
    if(versionString) {
      return parseFloat(versionString)
    }
  }
  return undefined
};
AdfAgent._addEventListeners = function(node, eventTypes, listener, capture) {
  AdfAssert.assertDomNode(node);
  AdfAssert.assertArray(eventTypes);
  AdfAssert.assertFunction(listener);
  AdfAssert.assertBoolean(capture);
  var typeCount = eventTypes.length;
  for(var typeIndex = 0;typeIndex < typeCount;typeIndex++) {
    node.addEventListener(eventTypes[typeIndex], listener, capture)
  }
};
AdfAgent._removeEventListeners = function(node, eventTypes, listener, capture) {
  AdfAssert.assertDomNode(node);
  AdfAssert.assertArray(eventTypes);
  AdfAssert.assertFunction(listener);
  AdfAssert.assertBoolean(capture);
  var typeCount = eventTypes.length;
  for(var typeIndex = 0;typeIndex < typeCount;typeIndex++) {
    node.removeEventListener(eventTypes[typeIndex], listener, capture)
  }
};
AdfAgent._isCustomEvent = function(domWindow, evt) {
  return domWindow && domWindow["CustomEvent"] && evt instanceof CustomEvent
};
AdfAgent._NATIVE_TO_COMPONENT_MAPPINGS = {"blur":AdfComponentEvent.BLUR_EVENT_TYPE, "focus":AdfComponentEvent.FOCUS_EVENT_TYPE, "focusin":AdfComponentEvent.FOCUS_EVENT_TYPE, "focusout":AdfComponentEvent.BLUR_EVENT_TYPE, "click":AdfUIInputEvent.CLICK_EVENT_TYPE, "dblclick":AdfUIInputEvent.DOUBLE_CLICK_EVENT_TYPE, "mousedown":AdfUIInputEvent.MOUSE_DOWN_EVENT_TYPE, "mouseup":AdfUIInputEvent.MOUSE_UP_EVENT_TYPE, "mousemove":AdfUIInputEvent.MOUSE_MOVE_EVENT_TYPE, "mouseover":AdfUIInputEvent.MOUSE_IN_EVENT_TYPE, 
"mouseout":AdfUIInputEvent.MOUSE_OUT_EVENT_TYPE, "keydown":AdfUIInputEvent.KEY_DOWN_EVENT_TYPE, "keyup":AdfUIInputEvent.KEY_UP_EVENT_TYPE, "keypress":AdfUIInputEvent.KEY_PRESS_EVENT_TYPE, "contextmenu":AdfComponentEvent.CONTEXT_MENU_EVENT_TYPE};
AdfAgent._NATIVE_TOUCH_TO_COMPONENT_MAPPINGS = {"touchstart":AdfComponentTouchEvent.TOUCH_START_EVENT_TYPE, "touchmove":AdfComponentTouchEvent.TOUCH_MOVE_EVENT_TYPE, "touchend":AdfComponentTouchEvent.TOUCH_END_EVENT_TYPE, "touchcancel":AdfComponentTouchEvent.TOUCH_CANCEL_EVENT_TYPE};
AdfAgent.REDISTRIBUTE_EVENTS = ["click", "dblclick", "keydown", "keypress", "keyup", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "contextmenu"];
AdfAgent._REDISTRIBUTE_TOUCH_EVENTS = ["touchstart", "touchmove", "touchend", "touchcancel"];
AdfAgent._REDISTRIBUTE_CAPTURE_EVENTS = ["focus", "blur"];
AdfAgent.KEY_EVENTS = ["keydown", "keypress", "keyup"];
AdfAgent._MOUSE_EVENTS = {click:1, mousedown:1, mouseup:1, mouseover:1, mousemove:1, mouseout:1};
AdfAgent._KEYBOARD_EVENTS = {keydown:1, keyup:1, keypress:1};
AdfAgent._CSS3_TO_CSS2_MAP = {"auto":"auto", "default":"default", "none":"default", "context-menu":"default", "help":"help", "pointer":"pointer", "progress":"wait", "wait":"wait", "cell":"crosshair", "crosshair":"crosshair", "text":"text", "vertical-text":"text", "alias":"crosshair", "copy":"crosshair", "move":"move", "no-drop":"move", "not-allowed":"move ", "e-resize":"e-resize", "n-resize":"n-resize", "ne-resize":"ne-resize", "nw-resize":"nw-resize", "s-resize":"s-resize", "se-resize":"se-resize", 
"sw-resize":"sw-resize", "w-resize":"w-resize", "ew-resize":"e-resize", "ns-resize":"s-resize", "nesw-resize":"move", "col-resize":"e-resize", "row-resize":"s-resize", "all-scroll":"move", "inherit":"inherit"};
AdfAgent._CSS_TO_DOM_MAP = {};
AdfAgent.DRAG_GHOST_STYLECLASS = "p_AFDragGhost";
AdfAgent._AGENT_CLASS_NAME_NOT_FOUND = "Falling back to AdfAgent, didn't find agent class name: ";

function AdfResizeTrackManager(element) {
  this.Init(element)
}
AdfObject.createSubclass(AdfResizeTrackManager);
AdfResizeTrackManager.prototype.Init = function(element) {
  AdfResizeTrackManager.superclass.Init.call(this);
  this._listeners = [];
  this._element = element;
  this._RETRY_MAX_COUNT = 2;
  this._retrySetScroll = 0;
  this._invokeId = null;
  this._oldWidth = null;
  this._oldHeight = null;
  this._detectExpansion = null;
  this._detectContraction = null;
  this._resizeListener = null;
  this._scrollListener = null;
  this._onResizeTimeout = null
};
AdfResizeTrackManager.prototype.addListener = function(listener) {
  this._listeners.push(listener)
};
AdfResizeTrackManager.prototype.removeListener = function(listener) {
  var index = this._listeners.indexOf(listener);
  if(index >= 0) {
    this._listeners.splice(index, 1)
  }
};
AdfResizeTrackManager.prototype.isEmpty = function() {
  return this._listeners.length == 0
};
AdfResizeTrackManager.prototype.start = function() {
  this._scrollListener = AdfResizeTrackManager._handleScroll.bind(this);
  if(this._element.attachEvent) {
    this._resizeListener = AdfResizeTrackManager._handleResize.bind(this);
    this._element.attachEvent("onresize", this._resizeListener)
  }else {
    var firstChild = this._element.childNodes[0];
    this._detectExpansion = document.createElement("div");
    var cssText = "position:absolute; overflow:hidden; visibility:hidden; top:0; left:0; right:0; bottom:0; direction:ltr;";
    AdfDomUtils.addInlineStyle(this._detectExpansion, cssText);
    this._detectExpansion.className = "AFDetectExpansion";
    var expansionChild = document.createElement("div");
    this._detectExpansion.appendChild(expansionChild);
    if(firstChild != null) {
      this._element.insertBefore(this._detectExpansion, firstChild)
    }else {
      this._element.appendChild(this._detectExpansion)
    }
    this._detectExpansion.addEventListener("scroll", this._scrollListener, false);
    this._detectContraction = document.createElement("div");
    this._detectContraction.className = "AFDetectContraction";
    AdfDomUtils.addInlineStyle(this._detectContraction, cssText);
    var contractionChild = document.createElement("div");
    contractionChild.style.width = "200%";
    contractionChild.style.height = "200%";
    this._detectContraction.appendChild(contractionChild);
    this._element.insertBefore(this._detectContraction, this._detectExpansion);
    this._detectContraction.addEventListener("scroll", this._scrollListener, false);
    this.initializeElements(false)
  }
};
AdfResizeTrackManager.prototype.stop = function() {
  if(this._invokeId != null) {
    AdfResizeTrackManager._cancelInvokeAfterPaint(this._invokeId);
    this._invokeId = null
  }
  if(this._detectExpansion != null) {
    this._detectExpansion.removeEventListener("scroll", this._scrollListener);
    this._detectContraction.removeEventListener("scroll", this._scrollListener);
    this._element.removeChild(this._detectExpansion);
    this._element.removeChild(this._detectContraction)
  }else {
    this._element.detachEvent("onresize", this._resizeListener)
  }
};
AdfResizeTrackManager.prototype.initializeElements = function(isFixup) {
  var adjusted = this._checkSize(isFixup);
  if(isFixup && !adjusted && this._detectExpansion.offsetParent != null) {
    this._adjust(this._oldWidth, this._oldHeight)
  }
};
AdfResizeTrackManager.prototype._checkSize = function(fireEvent) {
  var adjusted = false;
  if(this._detectExpansion.offsetParent != null) {
    var newWidth = this._detectExpansion.offsetWidth;
    var newHeight = this._detectExpansion.offsetHeight;
    if(this._oldWidth !== newWidth || this._oldHeight !== newHeight) {
      this._retrySetScroll = this._RETRY_MAX_COUNT;
      this._adjust(newWidth, newHeight);
      adjusted = true;
      if(fireEvent) {
        this._notifyListeners(true)
      }
    }
  }
  return adjusted
};
AdfResizeTrackManager.prototype._notifyListeners = function(useAfterPaint) {
  if(this._listeners.length > 0) {
    if(!useAfterPaint) {
      for(var i = 0;i < this._listeners.length;i++) {
        this._listeners[i]()
      }
    }else {
      if(this._invokeId !== null) {
        AdfResizeTrackManager._cancelInvokeAfterPaint(this._invokeId)
      }
      var myself = this;
      this._invokeId = AdfResizeTrackManager._invokeAfterPaint(function() {
        myself._invokeId = null;
        for(var j = 0;j < myself._listeners.length;j++) {
          myself._listeners[j]()
        }
      })
    }
  }
};
AdfResizeTrackManager._handleScroll = function(evt) {
  evt.stopPropagation();
  if(!this._onResizeTimeout) {
    var page = AdfPage.PAGE;
    this._onResizeTimeout = page.scheduleTimer(this, AdfResizeTrackManager._onResizeHandlerTimeout, {}, 100)
  }
};
AdfResizeTrackManager._onResizeHandlerTimeout = function() {
  if(!this._checkSize(true)) {
    if(this._retrySetScroll > 0 && this._detectExpansion.offsetParent != null && (this._detectExpansion.scrollLeft == 0 || this._detectExpansion.scrollTop == 0)) {
      this._retrySetScroll--;
      this._adjust(this._oldWidth, this._oldHeight)
    }
  }
  this._onResizeTimeout = null
};
AdfResizeTrackManager._handleResize = function() {
  this._notifyListeners(false)
};
AdfResizeTrackManager.prototype._adjust = function(width, height) {
  this._oldWidth = width;
  this._oldHeight = height;
  var expansionChildStyle = this._detectExpansion.firstChild.style;
  var delta = 1;
  do {
    expansionChildStyle.width = width + delta + "px";
    expansionChildStyle.height = height + delta + "px";
    this._detectExpansion.scrollLeft = this._detectExpansion.scrollTop = delta;
    delta++
  }while((this._detectExpansion.scrollTop == 0 || this._detectExpansion.scrollLeft == 0) && delta <= 5);
  this._detectContraction.scrollLeft = width;
  this._detectContraction.scrollTop = height
};
AdfResizeTrackManager._invokeAfterPaint = function(callback) {
  var agent = AdfAgent.AGENT;
  if(agent.getDomWindow()["requestAnimationFrame"]) {
    return agent.getDomWindow()["requestAnimationFrame"](callback)
  }else {
    if(agent.getDomWindow()["mozRequestAnimationFrame"]) {
      return agent.getDomWindow()["mozRequestAnimationFrame"](callback)
    }else {
      if(agent.getDomWindow()["webkitRequestAnimationFrame"]) {
        return agent.getDomWindow()["webkitRequestAnimationFrame"](callback)
      }else {
        return agent.getDomWindow().setTimeout(callback, 0)
      }
    }
  }
};
AdfResizeTrackManager._cancelInvokeAfterPaint = function(id) {
  var agent = AdfAgent.AGENT;
  if(agent.getDomWindow()["cancelAnimationFrame"]) {
    return agent.getDomWindow()["cancelAnimationFrame"](id)
  }else {
    if(agent.getDomWindow()["mozCancelAnimationFrame"]) {
      return agent.getDomWindow()["mozCancelAnimationFrame"](id)
    }else {
      if(agent.getDomWindow()["webkitCancelAnimationFrame"]) {
        return agent.getDomWindow()["webkitCancelAnimationFrame"](id)
      }else {
        return agent.getDomWindow().clearTimeout(id)
      }
    }
  }
};

function AdfTouchContextMenuManager() {
  this.Init()
}
AdfObject.createSubclass(AdfTouchContextMenuManager);
AdfTouchContextMenuManager.prototype.Init = function() {
  AdfTouchContextMenuManager.superclass.Init.call(this)
};
AdfTouchContextMenuManager.prototype.dispose = function() {
};
AdfTouchContextMenuManager.prototype.deriveContextMenuEvent = function(componentEvent) {
  return null
};

function AdfTouchMoveManager(element, handlerCallback, touchCount) {
  this.Init(element, handlerCallback, touchCount)
}
AdfObject.createSubclass(AdfTouchMoveManager);
AdfTouchMoveManager.prototype.Init = function(element, handlerCallback, touchCount) {
  AdfTouchMoveManager.superclass.Init.call(this)
};
AdfTouchMoveManager.prototype.unregister = function() {
};

function AdfDomShowContextMenuEvent(sourceComponent, type, event) {
  AdfDomShowContextMenuEvent.superclass.Init.call(this, sourceComponent, type, event)
}
AdfObject.createSubclass(AdfDomShowContextMenuEvent, AdfDomComponentEvent);
AdfDomShowContextMenuEvent.prototype.isPositionalRequest = function() {
  var buttons = AdfDomUIInputEvent.prototype.getButtons.apply(this);
  return buttons & AdfUIInputEvent.RIGHT_BUTTON_FLAG
};
AdfDomShowContextMenuEvent.prototype.cancel = function() {
  AdfDomShowContextMenuEvent.superclass.cancel.call(this);
  AdfAgent.AGENT.preventDefault(this.getNativeEvent())
};

function AdfNavigationHistoryAgent() {
  this.Init()
}
AdfObject.createSubclass(AdfNavigationHistoryAgent);
AdfNavigationHistoryAgent.InitClass = function() {
  this._STATE_SEPARATOR = "@";
  this._STATE_MARKER = "!";
  this._STATE_MARKER_LENGTH = this._STATE_MARKER.length
};
AdfNavigationHistoryAgent.prototype.Init = function() {
  AdfNavigationHistoryAgent.superclass.Init.call(this);
  this._loadCounter = 0
};
AdfNavigationHistoryAgent.getInstance = function() {
  if(AdfNavigationHistoryAgent._instance == undefined) {
    var agent = AdfAgent.AGENT;
    var platform = agent.getPlatform();
    switch(platform) {
      case AdfAgent.GECKO_PLATFORM:
        if(agent.getVersion() >= 4) {
          AdfNavigationHistoryAgent._instance = new AdfHtml5NavigationHistoryAgent
        }else {
          AdfNavigationHistoryAgent._instance = new AdfGeckoNavigationHistoryAgent
        }
        break;
      case AdfAgent.IE_PLATFORM:
        AdfNavigationHistoryAgent._instance = new AdfIE8NavigationHistoryAgent;
        break;
      default:
        AdfNavigationHistoryAgent._instance = new AdfHtml5NavigationHistoryAgent;
        break
    }
  }
  return AdfNavigationHistoryAgent._instance
};
AdfNavigationHistoryAgent.prototype.initialize = function(defaultViewId, queryParams) {
  this._defaultViewId = defaultViewId;
  this._currentViewId = defaultViewId;
  this._initialized = true;
  this._currentParams = this._defaultParams = this._getDefaultQueryParams();
  if(queryParams) {
    this._currentParams = queryParams
  }
};
AdfNavigationHistoryAgent.prototype.isInitialized = function() {
  return true == this._initialized
};
AdfNavigationHistoryAgent.prototype.setFacesPath = function(path) {
  this._facesPath = path
};
AdfNavigationHistoryAgent.prototype.GetFacesPath = function() {
  return this._facesPath
};
AdfNavigationHistoryAgent.prototype.setCurrentPage = function(viewId, queryParams, loadId) {
  this._currentViewId = viewId;
  if(queryParams == undefined) {
    queryParams = null
  }
  this._currentParams = queryParams;
  this._currentAnchor = null;
  if(loadId != undefined && loadId != null && loadId == this._pendingLoadId) {
    this.setQueryString(queryParams, true);
    this._pendingViewId = null;
    this._pendingParams = null;
    this._pendingLoadId = null;
    var info = this.GetViewInfoFromBrowserURI();
    if(info.anchor != null) {
      this._navigateToSavedAnchor(info)
    }
  }
  if(!loadId) {
    this.AddHistoryEntry(viewId, queryParams)
  }
};
AdfNavigationHistoryAgent.prototype.setQueryString = function(queryParams, noHistory) {
  if(queryParams == undefined) {
    queryParams = null
  }
  var info = this.GetViewInfoFromBrowserURI();
  var id = info.id;
  if(info.params != queryParams) {
    this._currentParams = queryParams;
    this.SetQueryStringImpl(id, queryParams, info.anchor, noHistory)
  }
};
AdfNavigationHistoryAgent.prototype.startTrackingURI = function(callbackObj) {
  this._callbackObj = callbackObj;
  var info = this.GetViewInfoFromBrowserURI();
  if(info.simpleAnchor) {
    this.GetDomWindow().setTimeout(AdfNavigationHistoryAgent._delayedStartTrackingURI, 100)
  }else {
    this.StartTrackingUriImpl(info)
  }
};
AdfNavigationHistoryAgent.prototype.dispose = function() {
};
AdfNavigationHistoryAgent.prototype.SetViewIdOnURI = function(id, queryParams) {
  var info = this.GetViewInfoFromBrowserURI();
  if(info.id != id || info.params != queryParams) {
    this._updateHash(id, queryParams, null, false);
    return true
  }else {
    return false
  }
};
AdfNavigationHistoryAgent.prototype.AddHistoryEntry = function(id, queryParams) {
  return this.SetViewIdOnURI(id, queryParams)
};
AdfNavigationHistoryAgent.prototype.ValidateCurrentView = function(browserId, queryParams) {
  var params = null;
  var anchorNavigation = this._handleAnchorNavigation();
  if(!anchorNavigation) {
    var info = this.GetViewInfoFromBrowserURI();
    if(!browserId) {
      browserId = info.id;
      queryParams = info.params
    }
    if(browserId != this._currentViewId || queryParams != this._currentParams) {
      params = this._loadView(browserId, queryParams)
    }
    if(params == null) {
      if(info.anchor != this._currentAnchor) {
        this._navigateToSavedAnchor(info)
      }
    }
  }
  return params
};
AdfNavigationHistoryAgent.prototype.GetViewInfoFromBrowserURI = function() {
  var w = this.GetDomWindow();
  var info = new Object;
  info.params = this._defaultParams;
  info.id = this._defaultViewId;
  var href = w.location.href;
  var hashIndex = href.indexOf("#");
  if(hashIndex >= 0) {
    var stateIndex = href.indexOf(AdfNavigationHistoryAgent._STATE_MARKER, hashIndex + 1);
    if(stateIndex == hashIndex + 1) {
      var hash = href.substring(stateIndex + AdfNavigationHistoryAgent._STATE_MARKER_LENGTH);
      if(hash.length > 0) {
        hash = decodeURIComponent(hash);
        var state = hash.split(AdfNavigationHistoryAgent._STATE_SEPARATOR);
        var len = state.length;
        if(len >= 1 && state[0] !== "") {
          info.pageId = state[0]
        }
        if(len >= 2 && state[1] !== "") {
          info.id = state[1]
        }
        if(len >= 3 && state[2] !== "") {
          info.params = state[2]
        }
        if(len >= 4 && state[3] !== "") {
          info.anchor = state[3]
        }
      }
    }else {
      info.anchor = decodeURIComponent(href.substring(hashIndex + 1));
      info.simpleAnchor = true
    }
  }
  return info
};
AdfNavigationHistoryAgent.prototype.GetDomWindow = function() {
  return AdfPage.PAGE.getDomWindow()
};
AdfNavigationHistoryAgent.prototype.GetDomDocument = function() {
  return AdfPage.PAGE.getDomDocument()
};
AdfNavigationHistoryAgent.prototype.SetQueryStringImpl = function(id, queryParams, anchor, noHistory) {
  this._updateHash(id, queryParams, anchor, noHistory)
};
AdfNavigationHistoryAgent.prototype._getDefaultQueryParams = function() {
  var w = this.GetDomWindow();
  var params = null;
  var search = w.location.search;
  if(search && search.length > 0) {
    params = search
  }
  return params
};
AdfNavigationHistoryAgent.prototype._updateHash = function(id, queryParams, anchor, noHistory) {
  if(id == this._defaultViewId) {
    id = undefined
  }
  if(queryParams == this._defaultParams) {
    queryParams = undefined
  }
  var paramArray = [null, id, queryParams, anchor];
  var hash = "";
  var allSeps = false;
  for(var i = paramArray.length - 1;i >= 0;i--) {
    if(paramArray[i] != null) {
      hash = paramArray[i] + hash;
      allSeps = true
    }
    if(allSeps && i != 0) {
      hash = AdfNavigationHistoryAgent._STATE_SEPARATOR + hash
    }
  }
  hash = "#" + AdfNavigationHistoryAgent._STATE_MARKER + encodeURIComponent(hash);
  if(!noHistory) {
    this.GetDomWindow().location.hash = hash
  }else {
    this.GetDomWindow().location.replace(hash)
  }
};
AdfNavigationHistoryAgent.prototype._loadView = function(id, params) {
  if(!this._callbackObj || id == this._pendingViewId && params == this._pendingParams) {
    return null
  }
  this._pendingViewId = id;
  this._pendingParams = params;
  if(id == this._defaultViewId && params == this._defaultParams) {
    id = null
  }
  this._pendingLoadId = this._loadCounter++;
  this._callbackObj.loadView(id, params, this._pendingLoadId);
  return{id:this._pendingViewId, params:this._pendingParams}
};
AdfNavigationHistoryAgent.prototype._navigateToSavedAnchor = function(info) {
  this._currentAnchor = info.anchor;
  var hash = "#";
  hash += encodeURIComponent(info.anchor);
  this.GetDomWindow().location.replace(hash);
  this._updateHash(this._currentViewId, this._currentParams, this._currentAnchor, true)
};
AdfNavigationHistoryAgent.prototype._handleAnchorNavigation = function() {
  var anchorNavigation = false;
  var url = this.GetDomWindow().location.href;
  var hashIndex = url.indexOf("#");
  if(hashIndex >= 0) {
    if(url.indexOf(AdfNavigationHistoryAgent._STATE_MARKER, hashIndex + 1) != hashIndex + 1) {
      this._currentAnchor = decodeURIComponent(url.substring(hashIndex + 1));
      this._updateHash(this._currentViewId, this._currentParams, this._currentAnchor, true);
      anchorNavigation = true
    }
  }
  return anchorNavigation
};
AdfNavigationHistoryAgent._delayedStartTrackingURI = function() {
  AdfNavigationHistoryAgent.getInstance().StartTrackingUriImpl(null)
};
AdfNavigationHistoryAgent.prototype.StartTrackingUriImpl = function(info) {
  if(info == null) {
    info = this.GetViewInfoFromBrowserURI()
  }
  this._currentAnchor = info.anchor;
  this._recordCurrentTrackedValues();
  if(!info.simpleAnchor) {
    this._currentAnchor = undefined
  }
  this.ValidateCurrentView()
};
AdfNavigationHistoryAgent.prototype._recordCurrentTrackedValues = function() {
  this._updateHash(this._currentViewId, this._currentParams, this._currentAnchor, true)
};
AdfNavigationHistoryAgent.prototype.isWaitingForServer = function() {
  this.ValidateCurrentView();
  return this._pendingViewId != null
};

function AdfHtml5NavigationHistoryAgent() {
  this.Init()
}
AdfObject.createSubclass(AdfHtml5NavigationHistoryAgent, AdfNavigationHistoryAgent);
AdfHtml5NavigationHistoryAgent.InitClass = function() {
  this._POP_STATE_EVENT = "popstate";
  this._HASH_CHANGE_EVENT = "hashchange"
};
AdfHtml5NavigationHistoryAgent.prototype.dispose = function() {
  if(this._listenerAdded) {
    AdfAgent.AGENT.removeBubbleEventListener(this.GetDomWindow(), AdfHtml5NavigationHistoryAgent._POP_STATE_EVENT, AdfHtml5NavigationHistoryAgent._checkURI);
    AdfAgent.AGENT.removeBubbleEventListener(this.GetDomWindow(), AdfHtml5NavigationHistoryAgent._HASH_CHANGE_EVENT, AdfHtml5NavigationHistoryAgent._checkURI)
  }
};
AdfHtml5NavigationHistoryAgent.prototype.SetQueryStringImpl = function(pageId, id, queryParams, anchor, noHistory) {
  var href = this._replaceViewIdAndQuery(null, null, queryParams, noHistory);
  var h = this.GetDomWindow().history;
  if(noHistory) {
    h.replaceState(h.state, null, href)
  }else {
    h.pushState(null, null, href)
  }
};
AdfHtml5NavigationHistoryAgent.prototype.StartTrackingUriImpl = function(info) {
  this._viewIdStartIndex = -1;
  if(this.isInitialized()) {
    var href = this.GetDomWindow().location.href;
    var facesPath = this.GetFacesPath();
    if(facesPath == null || facesPath === "") {
      this._viewIdStartIndex = href.lastIndexOf("/")
    }else {
      this._viewIdStartIndex = href.indexOf(facesPath) + facesPath.length
    }
    AdfAssert.assert(this._viewIdStartIndex >= 0)
  }
  AdfHtml5NavigationHistoryAgent.superclass.StartTrackingUriImpl.call(this, info);
  var agent = AdfAgent.AGENT;
  agent.addBubbleEventListener(this.GetDomWindow(), AdfHtml5NavigationHistoryAgent._POP_STATE_EVENT, AdfHtml5NavigationHistoryAgent._checkURI);
  agent.addBubbleEventListener(this.GetDomWindow(), AdfHtml5NavigationHistoryAgent._HASH_CHANGE_EVENT, AdfHtml5NavigationHistoryAgent._checkURI);
  this._listenerAdded = true
};
AdfHtml5NavigationHistoryAgent.prototype.AddHistoryEntry = function(id, queryParams) {
  var info = this.GetViewInfoFromBrowserURI();
  queryParams = queryParams == "?" ? null : queryParams;
  if(info.id != id || info.params != queryParams) {
    var href = this._replaceViewIdAndQuery(info.id, id, queryParams, false);
    this.GetDomWindow().history.pushState(null, null, href)
  }
};
AdfHtml5NavigationHistoryAgent.prototype.GetViewInfoFromBrowserURI = function() {
  var info = AdfHtml5NavigationHistoryAgent.superclass.GetViewInfoFromBrowserURI.call(this);
  var win = this.GetDomWindow();
  if(info.pageId === undefined) {
    var state = null;
    try {
      state = win.history.state
    }catch(e) {
    }
    if(state != null) {
      info.pageId = state._afrPage
    }
  }
  info.id = info.params = undefined;
  if(this.isInitialized()) {
    var href = win.location.href;
    var hashIndex = href.indexOf("#");
    if(hashIndex >= 0) {
      href = href.substring(0, hashIndex)
    }
    var queryIndex = href.indexOf("?");
    var params = "";
    var id;
    if(queryIndex >= 0) {
      params = href.substring(queryIndex);
      if(params.length > 1) {
        info.params = params
      }
      id = href.substring(this._viewIdStartIndex, queryIndex)
    }else {
      id = href.substring(this._viewIdStartIndex)
    }
    var scIndex = id.indexOf(";");
    info.id = scIndex >= 0 ? id.substring(0, scIndex) : id
  }
  return info
};
AdfHtml5NavigationHistoryAgent.prototype.UpdateInitialValues = function(pageId, viewId, queryParams, anchor) {
  var href;
  if(this.isInitialized()) {
    var info = this.GetViewInfoFromBrowserURI();
    href = this._replaceViewIdAndQuery(info.id, viewId, queryParams, false)
  }else {
    href = this.GetDomWindow().location.href
  }
  this._updatePageIdAndAnchor(href, pageId, anchor)
};
AdfHtml5NavigationHistoryAgent.prototype.NavigateToSavedAnchorImpl = function(info, anchor) {
  var hash = "#";
  if(anchor != null) {
    hash += encodeURIComponent(anchor)
  }
  var w = this.GetDomWindow();
  var state = w.history.state;
  w.location.replace(hash);
  if(!info.simpleAnchor && info.pageId != null) {
    this.UpdateHash(info.pageId, undefined, undefined, anchor, true)
  }
  if(state != null) {
    w.history.replaceState(state, null)
  }
};
AdfHtml5NavigationHistoryAgent.prototype.RestoreValuesAfterAnchorNavigation = function(pageId, viewId, queryParams, anchor) {
  var href = this.GetDomWindow().location.href;
  this._updatePageIdAndAnchor(href, pageId, anchor)
};
AdfHtml5NavigationHistoryAgent.prototype.UsesHashForTrackingNavigation = function() {
  return false
};
AdfHtml5NavigationHistoryAgent.prototype._updatePageIdAndAnchor = function(href, pageId, anchor) {
  var hashIndex = href.indexOf("#");
  if(hashIndex >= 0) {
    href = href.substring(0, hashIndex)
  }
  var state = null;
  if(pageId != null) {
    state = new Object;
    state._afrPage = pageId
  }
  var h = this.GetDomWindow().history;
  h.replaceState(state, null, href);
  if(pageId != null && h.state == null) {
    this.UpdateHash(pageId, undefined, undefined, anchor, true)
  }else {
    if(anchor != null) {
      h.replaceState(state, null, href + "#" + encodeURIComponent(anchor))
    }
  }
};
AdfHtml5NavigationHistoryAgent.prototype._replaceViewIdAndQuery = function(oldViewId, viewId, query, preserveHash) {
  var href = this.GetDomWindow().location.href;
  var hash = "";
  var hashIndex = href.indexOf("#");
  if(hashIndex >= 0) {
    hash = href.substring(hashIndex);
    href = href.substring(0, hashIndex)
  }
  var queryIndex = href.indexOf("?");
  if(queryIndex >= 0) {
    href = href.substring(0, queryIndex)
  }
  if(viewId != null && oldViewId !== viewId) {
    href = href.substring(0, this._viewIdStartIndex) + viewId + href.substring(this._viewIdStartIndex + oldViewId.length)
  }
  if(query != null && query != "?") {
    href += query
  }
  if(preserveHash) {
    href += hash
  }
  return href
};
AdfHtml5NavigationHistoryAgent._checkURI = function() {
  AdfNavigationHistoryAgent.getInstance().ValidateCurrentView()
};

function AdfOperaLogWriter() {
  this.Init()
}
AdfObject.createSubclass(AdfOperaLogWriter, AdfLogWriter);
AdfOperaLogWriter.prototype.PublishImpl = function(logRecord) {
  this.CheckIfClosed();
  AdfAssert.assert(logRecord, "null logRecord");
  opera.postError(this.FormatLogRecord(logRecord) + "\n\n")
};

function AdfOperaAgent(version, domWindow) {
  this.Init(version, domWindow)
}
AdfObject.createSubclass(AdfOperaAgent, AdfAgent);
AdfOperaAgent.prototype.Init = function(version, domWindow) {
  AdfOperaAgent.superclass.Init.call(this, AdfAgent.OPERA_PLATFORM, AdfAgent.guessOS(), version, domWindow)
};
AdfOperaAgent.prototype.CreateUIInputEvent = function(component, type, nativeEvent) {
  return new AdfIEUIInputEvent(component, type, nativeEvent)
};
AdfOperaAgent.prototype.isLeftButton = function(evt) {
  return this.getDomWindow().event.button == 1
};
AdfOperaAgent.prototype.preventDefault = function(evt) {
  evt.returnValue = false
};
AdfOperaAgent.__getAgentVersion = function(userAgent) {
  var versionSubstrings = userAgent.match(/^Opera\s*\/?\s*(\d+\.\d+)/);
  var agentVersion = 7.54;
  if(versionSubstrings && versionSubstrings.length >= 2) {
    agentVersion = parseFloat(versionSubstrings[1])
  }
  return agentVersion
};
AdfOperaAgent.__getSupported = function(userAgent, version) {
  return false
};
AdfOperaAgent.__getSpecificAgentClassName = function(userAgent) {
  return"AdfOperaAgent"
};
AdfOperaAgent.prototype.CreateNativeLogWriter = function() {
  return new AdfOperaLogWriter
};

function AdfSafariLogWriter(parentWindow, backupLogWriter) {
  AdfAssert.assert(window.console && window.console.log, "Safari console logger not installed");
  AdfSafariLogWriter._originalAssertionFailed = AdfAssert.assertionFailed;
  AdfAssert.assertionFailed = AdfSafariLogWriter._assertionHook;
  this.Init(parentWindow, backupLogWriter)
}
AdfObject.createSubclass(AdfSafariLogWriter, AdfLogWriter);
AdfSafariLogWriter.prototype.Init = function(parentWindow, backupLogWriter) {
  AdfSafariLogWriter.superclass.Init.call(this, parentWindow, backupLogWriter);
  this._errorLogWriter = AdfSafariLogWriter.WRITE_ERRORS_TO_CONSOLE ? new AdfConsoleLogWriter(parentWindow, backupLogWriter) : false;
  this._mobile = navigator.userAgent.toLowerCase().indexOf("mobile") != -1
};
AdfSafariLogWriter.prototype.PublishImpl = function(logRecord) {
  this.CheckIfClosed();
  AdfAssert.assert(logRecord, "null logRecord");
  var errorLogWriter = this._errorLogWriter;
  var error = logRecord[AdfLogRecord.ERROR_FIELD];
  if(error && errorLogWriter) {
    errorLogWriter.publish(logRecord);
    return
  }
  var browserConsole = window.console;
  var severity = logRecord[AdfLogRecord.LEVEL_FIELD];
  var logFunc = severity >= AdfLogger.SEVERE ? browserConsole.error ? browserConsole.error : browserConsole.log : severity >= AdfLogger.WARNING ? browserConsole.warn ? browserConsole.warn : browserConsole.log : severity >= AdfLogger.INFO ? browserConsole.info ? browserConsole.info : browserConsole.log : browserConsole.debug ? browserConsole.debug : browserConsole.log;
  var formattedMessage = logRecord[AdfLogRecord.MESSAGE_FIELD];
  var when = logRecord[AdfLogRecord.WHEN_FIELD];
  if(AdfAgent.AGENT.getVersion() >= 527 && !this._mobile && AdfAgent.ANDROID_OS != AdfAgent.guessOS()) {
    if(error) {
      logFunc.call(browserConsole, "Message: %s\nError: %o\nWhen: %o", formattedMessage, error, when)
    }else {
      logFunc.call(browserConsole, "Message: %s\nWhen: %o", formattedMessage, when)
    }
  }else {
    var concatenatedMessage;
    if(error) {
      concatenatedMessage = "Message: " + formattedMessage + "\nError: " + error + "\nWhen: " + when
    }else {
      concatenatedMessage = "Message: " + formattedMessage + "\nWhen: " + when
    }
    if(this._mobile) {
      var rawLines = concatenatedMessage.split("\n");
      var consoleLines = [];
      var maxLineLength = 35;
      for(var r = 0;r < rawLines.length;r++) {
        var rawLine = rawLines[r];
        if(rawLine.length > maxLineLength) {
          var pieces = Math.ceil(rawLine.length / maxLineLength);
          for(var p = 0;p < pieces;p++) {
            var start = p * maxLineLength;
            consoleLines.push(rawLine.substring(start, start + maxLineLength))
          }
        }else {
          consoleLines.push(rawLine)
        }
      }
      var consoleLineCount = consoleLines.length;
      if(consoleLineCount > 1) {
        var messageCount = Math.ceil(consoleLineCount / 2);
        var messageNumber = 0;
        for(var i = 0;i < consoleLineCount;i += 2) {
          var consoleMessage = ++messageNumber + " of " + messageCount + ": " + consoleLines[i];
          if(i + 1 < consoleLineCount) {
            consoleMessage += "\n" + consoleLines[1 + i]
          }
          logFunc.call(browserConsole, consoleMessage)
        }
      }else {
        logFunc.call(browserConsole, consoleLines[0])
      }
    }else {
      logFunc.call(browserConsole, concatenatedMessage)
    }
  }
};
AdfSafariLogWriter.prototype.flush = function() {
  AdfSafariLogWriter.superclass.flush.call(this);
  var errorLogWriter = this._errorLogWriter;
  if(errorLogWriter) {
    errorLogWriter.flush()
  }
};
AdfSafariLogWriter.prototype.close = function() {
  AdfSafariLogWriter.superclass.close.call(this);
  var errorLogWriter = this._errorLogWriter;
  if(errorLogWriter) {
    errorLogWriter.close()
  }
};
AdfSafariLogWriter._assertionHook = function(message, skipLevel, reason) {
  AdfSafariLogWriter._originalAssertionFailed(message, skipLevel + 1, reason)
};
AdfSafariLogWriter.WRITE_ERRORS_TO_CONSOLE = true;

function AdfSafariAgent(version, domWindow) {
  this.Init(version, domWindow)
}
AdfObject.createSubclass(AdfSafariAgent, AdfAgent);
AdfSafariAgent.prototype.Init = function(version, domWindow) {
  AdfSafariAgent.superclass.Init.call(this, AdfAgent.WEBKIT_PLATFORM, AdfAgent.guessOS(), version, domWindow)
};
AdfSafariAgent.prototype.getWindowScrollWidth = function(domWindow) {
  var theDocument = domWindow.document;
  var sizeTarget = theDocument.body;
  return sizeTarget.scrollWidth
};
AdfSafariAgent.prototype.getWindowScrollHeight = function(domWindow) {
  var theDocument = domWindow.document;
  var sizeTarget = theDocument.body;
  return sizeTarget.scrollHeight
};
AdfSafariAgent.prototype.getBrowserViewportScrollTop = function() {
  var agentName = navigator.userAgent;
  var domDoc = this.getDomDocument();
  if(agentName.indexOf("Chrome") != -1 && AdfSafariAgent.__getAgentVersion(agentName) >= 61) {
    return domDoc.documentElement.scrollTop
  }else {
    return domDoc.body.scrollTop
  }
};
AdfSafariAgent.prototype.getBrowserViewportScrollLeft = function() {
  var agentName = navigator.userAgent;
  var domDoc = this.getDomDocument();
  if(agentName.indexOf("Chrome") != -1 && AdfSafariAgent.__getAgentVersion(agentName) >= 61) {
    return domDoc.documentElement.scrollLeft
  }else {
    return domDoc.body.scrollLeft
  }
};
AdfSafariAgent.prototype.InitClass = function() {
  var modifierDisplayStrings = new Array;
  modifierDisplayStrings[AdfKeyStroke.CTRL_MASK] = "Ctrl";
  modifierDisplayStrings[AdfKeyStroke.SHIFT_MASK] = "Shift";
  modifierDisplayStrings[AdfKeyStroke.ALT_MASK] = "Option";
  modifierDisplayStrings[AdfKeyStroke.META_MASK] = "Cmd";
  this._MODIFIER_DISPLAY_NAMES = modifierDisplayStrings
};
AdfSafariAgent.prototype.CreateDefaultLogWriter = function(nativeLogWriter) {
  return new AdfSafariLogWriter(this._window, nativeLogWriter)
};
AdfSafariAgent.prototype.execScript = function(ownerWindow, scriptText) {
  var document = ownerWindow.document;
  var scriptParent = document.body;
  if(scriptParent == null) {
    with(ownerWindow) {
      ownerWindow.eval(scriptText)
    }
    return
  }
  var scriptElem = document.createElement("script");
  scriptElem.setAttribute("type", "text/javascript");
  scriptElem.appendChild(document.createTextNode(scriptText));
  scriptParent.appendChild(scriptElem);
  scriptParent.removeChild(scriptElem)
};
AdfSafariAgent.prototype.disableUserSelect = function(element) {
  element.style.setProperty("-webkit-user-select", "none")
};
AdfSafariAgent.prototype.enableUserSelect = function(element) {
  element.style.setProperty("-webkit-user-select", "")
};
AdfSafariAgent.prototype.getBoxSizing = function(element, currentStyle) {
  if(!currentStyle) {
    currentStyle = this.getComputedStyle(element)
  }
  return currentStyle.getPropertyValue("-webkit-box-sizing")
};
AdfSafariAgent.prototype.getModifierDisplayName = function(modifier) {
  if(this.getOs() != AdfAgent.MAC_OS) {
    return AdfSafariAgent.superclass.getModifierDisplayName.call(this, modifier)
  }
  return AdfSafariAgent._MODIFIER_DISPLAY_NAMES[modifier]
};
AdfSafariAgent.prototype.isSessionStorageEnabled = function() {
  if(this._isSessionStorageEnabled === undefined) {
    try {
      sessionStorage.setItem("_adfTestKey", "on");
      sessionStorage.removeItem("_adfTestKey");
      this._isSessionStorageEnabled = true
    }catch(e) {
      if(e.name === "QUOTA_EXCEEDED_ERR" && e.code == 22) {
        AdfLogger.LOGGER.logErrorAsInfo(e, "Access to sessionStorage has been disabled because 'private browsing' " + "is enabled. As a result user activity monitoring has been disabled.")
      }else {
        AdfLogger.LOGGER.logErrorAsInfo(e, "Access to sessionStorage failed for some unexpected reason. As " + "a result user activity monitoring has been disabled.")
      }
      this._isSessionStorageEnabled = false
    }
  }
  return this._isSessionStorageEnabled
};
AdfSafariAgent.prototype.CreateUIInputEvent = function(component, type, nativeEvent) {
  return new AdfSafariUIInputEvent(component, type, nativeEvent)
};
AdfSafariAgent.prototype.cloneEvent = function(event, newTarget) {
  var eventType = event.type;
  if(eventType == "load") {
    var agentName = navigator.userAgent.toLowerCase();
    if(agentName.indexOf("chrome") == -1) {
      return AdfSafariAgent.superclass.cloneEvent.call(this, event, newTarget)
    }
    var targetNode = newTarget ? newTarget : event.target;
    var targetDocument = targetNode.ownerDocument;
    var newEvent = targetDocument.createEvent("Event");
    newEvent.initEvent("click", false, false);
    targetDocument.addEventListener(eventType, this.stopPropagation, true);
    targetNode.dispatchEvent(newEvent);
    targetDocument.removeEventListener(eventType, this.stopPropagation, true);
    return newEvent
  }else {
    return AdfSafariAgent.superclass.cloneEvent.call(this, event, newTarget)
  }
};
AdfSafariAgent.prototype.slice = function(file, startByte, stopByte) {
  if(typeof Blob === "undefined" || typeof Blob.prototype.slice === "undefined" && typeof Blob.prototype.webkitSlice === "undefined") {
    return undefined
  }
  if(file == null) {
    return null
  }
  if(file.slice) {
    return file.slice(startByte, stopByte)
  }else {
    if(file.webkitSlice) {
      return file.webkitSlice(startByte, stopByte)
    }
  }
  return undefined
};
AdfSafariAgent.prototype.getMaxConnectionsPerDomain = function() {
  return 6
};
AdfSafariAgent.__getAgentVersion = function(userAgent) {
  var version;
  if(userAgent.indexOf("Chrome/") != -1) {
    version = AdfAgent.__parseFloatVersion(userAgent, /Chrome\/(\d+([.]\d+)*)/)
  }else {
    if(userAgent.indexOf("Version/") != -1) {
      version = AdfAgent.__parseFloatVersion(userAgent, /Version\/(\d+([.]\d+)*)/)
    }
  }
  return version
};
AdfSafariAgent.__getSupported = function(userAgent, version) {
  var supported = true;
  if(userAgent.indexOf("Chrome/") != -1) {
    if(version < AdfAgent._MIN_CHROME_VERSION) {
      supported = false
    }
  }else {
    if(userAgent.indexOf("Version/") != -1) {
      if(version < AdfAgent._MIN_SAFARI_VERSION) {
        supported = false
      }
    }
  }
  return supported
};
AdfSafariAgent.__getSpecificAgentClassName = function(userAgent, version) {
  if(userAgent.indexOf("Mobile") == -1 && userAgent.indexOf("Android") == -1 && userAgent.indexOf("iPhone") == -1) {
    return"AdfSafariAgent"
  }else {
    return"AdfSafariMobileAgent"
  }
};

function AdfSafariNavigationHistoryAgent() {
  this.Init()
}
AdfObject.createSubclass(AdfSafariNavigationHistoryAgent, AdfNavigationHistoryAgent);
AdfSafariNavigationHistoryAgent.InitClass = function() {
  this._TIMER_INTERVAL = 300
};
AdfSafariNavigationHistoryAgent.prototype.startTrackingURI = function(callbackObj) {
  AdfSafariNavigationHistoryAgent.superclass.startTrackingURI.call(this, callbackObj);
  this._timerId = this.GetDomWindow().setInterval(AdfSafariNavigationHistoryAgent._checkURI, AdfSafariNavigationHistoryAgent._TIMER_INTERVAL)
};
AdfSafariNavigationHistoryAgent.prototype.dispose = function() {
  if(this._timerId) {
    this.GetDomWindow().clearInterval(this._timerId)
  }
};
AdfSafariNavigationHistoryAgent._checkURI = function() {
  AdfNavigationHistoryAgent.getInstance().ValidateCurrentView()
};

function AdfPage() {
}
AdfPage._NEW_WINDOW_NAME = "RichPageMain";
AdfPage.CREATE_VIEW_PHASE = "createViewPhase";
AdfPage.UPDATE_VIEW_PHASE = "updateViewPhase";
AdfPage.DELIVER_EVENTS_PHASE = "deliverEventsPhase";
AdfPage.WAITING_FOR_USER_INPUT_PHASE = "waitingForUserInputPhase";
AdfPage._FOR_CONTAINER_PREFIX = "afr::msgFor";
AdfPage.EDITABLE_SUBTREE_PROPERTY = "editableSubtree";
AdfPage.SELECTED_EDITING_COMPONENTS_PROPERTY = "selectedEditingComponents";
AdfPage.EDITED_COMPONENT_PROPERTY = "editedComponent";
AdfPage.ACTIVE_COMPONENT_PROPERTY = "activeComponent";
AdfPage.PAGE = null;
AdfObject.createSubclass(AdfPage);
AdfPage.prototype.setPageProperty = function(propertyName, propertyValue) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getPageProperty = function(propertyName) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.setDefaultMessageHandlerComponentId = function(id, slaveId) {
};
AdfPage.prototype.getDefaultMessageHandlerComponentId = function() {
};
AdfPage.prototype.getMessageHandlerSlaveComponentId = function() {
};
AdfPage.prototype.getPhase = function() {
  return this._phase
};
AdfPage.prototype.addPartialTargets = function(components) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.findComponent = function(clientId) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.findComponentByAbsoluteId = function(absoluteId) {
  AdfAssert.assertNonEmptyString(absoluteId);
  return AdfUIComponent.__findComponent(":" + absoluteId)
};
AdfPage.prototype.findComponentByAbsoluteLocator = function(absoluteLocator) {
  AdfAssert.assertNonEmptyString(absoluteLocator);
  return AdfUIComponent.__findComponentByLocator(absoluteLocator)
};
AdfPage.prototype.findComponentWithBackup = function(locator, backupInfo) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.findComponentByComplexLocator = function(locator, backupInfo) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.findComponentsByComplexLocator = function(locator, backupInfo) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getComponentsByType = function(componentType) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.matchComponents = function(filterFunction, context) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.reduceMatchedComponents = function(components, filterFunction, context) {
  AdfAssert.assertFunction(filterFunction);
  var reducedComponents = [];
  if(!components) {
    return reducedComponents
  }
  if(context === undefined) {
    context = this
  }
  var componentCount = components.length;
  for(var i = 0;i < componentCount;i++) {
    var currComponent = components[i];
    if(currComponent) {
      var result = filterFunction.call(context, currComponent);
      if(result & 1) {
        reducedComponents.push(currComponent)
      }
      if(result & 2) {
        break
      }
    }
  }
  return reducedComponents
};
AdfPage.prototype.getViewId = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.GetChangedComponents = function() {
  if(this._changedComponentCount > 0) {
    return this._changedComponents
  }else {
    return null
  }
};
AdfPage.prototype.addChangedComponent = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  var changedComponents = this._changedComponents;
  var clientId = component.getClientId();
  if(!(clientId in changedComponents)) {
    this._changedComponentCount++
  }
  changedComponents[clientId] = component
};
AdfPage.prototype.removeChangedComponent = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  var changedComponents = this._changedComponents;
  var clientId = component.getClientId();
  if(clientId in changedComponents) {
    delete changedComponents[clientId];
    this._changedComponentCount--
  }
};
AdfPage.prototype.ClearChangesList = function() {
  if(this._changedComponentCount > 0) {
    var changedComponents = this._changedComponents;
    for(var item in changedComponents) {
      changedComponents[item].clearChanges()
    }
    this._changedComponents = new Object;
    this._changedComponentCount = 0
  }
};
AdfPage.prototype.getLookAndFeel = function() {
  return this._lookAndFeel
};
AdfPage.prototype.getActiveComponent = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.addComponents = function(components) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getBaseResourceUrl = function() {
  return this._baseResourceUrl
};
AdfPage.prototype.setBaseResourceUrl = function(baseResourceUrl) {
  this._baseResourceUrl = baseResourceUrl
};
AdfPage.prototype.getTwoDigitYearStart = function() {
  return this._twoDigitYearStart
};
AdfPage.prototype.setTwoDigitYearStart = function(twoDigitYearStart) {
  this._twoDigitYearStart = twoDigitYearStart
};
AdfPage.prototype.getTzOffsetMinutes = function() {
  return this._tzOffsetMinutes
};
AdfPage.prototype.setTzOffsetMinutes = function(tzOffsetMinutes) {
  this._tzOffsetMinutes = tzOffsetMinutes
};
AdfPage.prototype.getFailedConnectionText = function() {
  return this._failedConnectionText
};
AdfPage.prototype.setFailedConnectionText = function(text) {
  this._failedConnectionText = text
};
AdfPage.prototype.registerLoadingComponent = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.unregisterLoadingComponent = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.showPageProcessingIndicator = function(show) {
};
AdfPage.prototype.Init = function(lookAndFeel) {
  AdfAssert.assertPrototype(lookAndFeel, AdfLookAndFeel);
  AdfPage.superclass.Init.call(this);
  this._lookAndFeel = lookAndFeel;
  this._phase = AdfPage.CREATE_VIEW_PHASE;
  this._changedComponents = new Object;
  this._changedComponentCount = 0;
  var newLogWriter = AdfAgent.AGENT.createDefaultLogWriter();
  var oldLogger = AdfLogger.LOGGER;
  var newLogger = new AdfLogger(oldLogger.getName(), newLogWriter, oldLogger.getLevel());
  newLogger.register();
  AdfLogger.LOGGER = newLogger;
  this._localeContext = new AdfLocaleContext
};
AdfPage.prototype.SetPhase = function(phase) {
  AdfAssert.assertString(phase);
  this._phase = phase
};
AdfPage.prototype.getLocaleContext = function() {
  return this._localeContext
};
AdfPage.prototype.getDnDContext = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.queueEventToServer = function(event) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getActiveComponentId = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.addPropertyChangeListener = function(instance, listener) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.removePropertyChangeListener = function(instance, listener) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getSelectedEditingComponents = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.setSelectedEditingComponents = function(newSelection) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getEditableSubtree = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.setEditableSubtree = function(newEditableSubtree) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.setEditableSubtreeFilter = function(callback, context) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getEditedComponent = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.setEditedComponent = function(newEditedComponent, event) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getResourceURL = function(path) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.Dispose = function() {
  AdfLogger.LOGGER.getLogWriter().close();
  AdfPage.PAGE = null
};
AdfPage.prototype.addMessage = function(componentId, facesMessage, toBeRemoved) {
};
AdfPage.prototype.showMessages = function(componentId) {
};
AdfPage.prototype.getMessages = function(componentId) {
};
AdfPage.prototype.getAllMessages = function() {
};
AdfPage.prototype.getClientIdsWithMessages = function(rootId) {
};
AdfPage.prototype.clearMessages = function(componentId) {
};
AdfPage.prototype.clearAllMessages = function() {
};
AdfPage.prototype.hasMessages = function(componentId) {
};
AdfPage.prototype.addBusyStateListener = function(instance, listener) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.removeBusyStateListener = function(instance, listener) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.registerResizeNotifyComponent = function(component) {
};
AdfPage.prototype.unregisterResizeNotifyComponent = function(component) {
};
AdfPage.prototype.doResizeNotify = function(component) {
};
AdfPage.prototype.isScreenReaderMode = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.isSynchronizedWithServer = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.whyIsNotSynchronizedWithServer = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.isAutomationEnabled = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getAsynchronousUpdatesState = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.areCssSelectorsUncompressed = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.isAnimationEnabled = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.isPortlet = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.setHelpWindowName = function(windowName) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.launchHelpWindow = function(url) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.localNavigate = function(uri) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.checkUncommittedData = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getSessionIdentifier = function() {
  return null
};
AdfPage.prototype.shouldShowHintInNoteTip = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.getResponseIdentifier = function() {
  return null
};
AdfPage.prototype.shouldTracePPRRequestId = function() {
  return false
};
AdfPage.prototype.announceToAssistiveTechnology = function(message, onlyIfChanged) {
  AdfAssert.failedInAbstractFunction()
};
AdfPage.prototype.simulateMouse = function(locator, mouseEvent) {
  AdfAssert.failedInAbstractFunction()
};

function AdfLookAndFeel() {
  this.Init()
}
AdfObject.createSubclass(AdfLookAndFeel);
AdfLookAndFeel.prototype.getPeer = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfLookAndFeel.prototype.getTranslatedString = function(key) {
  AdfAssert.failedInAbstractFunction()
};
AdfLookAndFeel.prototype.getSkinProperty = function(key) {
  AdfAssert.failedInAbstractFunction()
};
AdfLookAndFeel.prototype.getIcon = function(key) {
  AdfAssert.failedInAbstractFunction()
};
AdfLookAndFeel.prototype.createPage = function() {
  return new AdfPage
};
AdfLookAndFeel.prototype.registerPeerConstructor = function(componentType, peerConstructorName) {
  AdfAssert.failedInAbstractFunction()
};

function AdfLocaleContext() {
  this.Init()
}
AdfObject.createSubclass(AdfLocaleContext);
AdfLocaleContext.prototype.getLocale = function() {
  return this._locale
};
AdfLocaleContext.prototype.isRightToLeft = function() {
  return this._rightToLeft
};
AdfLocaleContext.prototype.getAlignBegin = function() {
  return this._alignBegin
};
AdfLocaleContext.prototype.getAlignEnd = function() {
  return this._alignEnd
};
AdfLocaleContext.prototype.Init = function() {
  AdfLocaleContext.superclass.Init.call(this);
  var domDocument = AdfAgent.AGENT.getDomDocument();
  this._locale = domDocument.documentElement.lang;
  this._rightToLeft = domDocument.documentElement.dir == "rtl";
  if(this._rightToLeft) {
    this._alignBegin = "right";
    this._alignEnd = "left"
  }else {
    this._alignBegin = "left";
    this._alignEnd = "right"
  }
};

var AdfInputFileUtils = new Object;
AdfInputFileUtils.addUploadErrorMessage = function(componentId) {
  AdfInputFileUtils.addUploadErrorMessageKey(componentId, null, "af_inputFile.MSG_UPLOAD_ERROR", "af_inputFile.MSG_UPLOAD_ERROR_DETAIL")
};
AdfInputFileUtils.addUploadErrorMessageKey = function(componentId, component, summaryKey, detailKey) {
  var page = AdfPage.PAGE;
  var laf = page.getLookAndFeel();
  var summary = laf.getTranslatedString(summaryKey);
  var detail = laf.getTranslatedString(detailKey);
  var message = new AdfFacesMessage(AdfFacesMessage.TYPE_ERROR, summary, detail);
  AdfInputFileUtils.addUploadErrorFacesMessage(componentId, component, message)
};
AdfInputFileUtils.addUploadErrorFacesMessage = function(componentId, component, facesMessage) {
  var page = AdfPage.PAGE;
  page.clearMessages(componentId);
  page.addMessage(componentId, facesMessage);
  if(component) {
    component.focus()
  }
};

function AdfDhtmlLookAndFeel(domWindow) {
  this.Init(domWindow)
}
AdfObject.createSubclass(AdfDhtmlLookAndFeel, AdfLookAndFeel);
AdfDhtmlLookAndFeel.InitClass = function() {
  var eventNames = ["blur", "focus", "focusIn", "focusOut", "click", "dblClick", "mouseDown", "mouseUp", "mouseMove", "mouseOver", "mouseOut", "keyDown", "keyUp", "keyPress", "contextMenu", "change", "scroll", "drop"];
  var constantSuffix = "_EVENT_TYPE";
  var attributePrefix = "on";
  var eventTypeToAttributeMap = new Object;
  var eventTypeToCamelCaseMap = new Object;
  var eventCount = eventNames.length;
  for(var eventIndex = 0;eventIndex < eventCount;eventIndex++) {
    var eventName = eventNames[eventIndex];
    var lowerCaseName = eventName.toLowerCase();
    eventTypeToCamelCaseMap[lowerCaseName] = eventName;
    var constantName = AdfStrings.createConstantName(eventName) + constantSuffix;
    this[constantName] = lowerCaseName;
    eventTypeToAttributeMap[lowerCaseName] = attributePrefix + lowerCaseName
  }
  this.EVENT_TYPE_TO_ATTRIBUTE_MAP = eventTypeToAttributeMap;
  this.EVENT_TYPE_TO_CAMEL_CASE_MAP = eventTypeToCamelCaseMap
};
AdfDhtmlLookAndFeel.prototype.Init = function(domWindow) {
  AdfDhtmlLookAndFeel.superclass.Init.call(this);
  this._window = domWindow
};
AdfDhtmlLookAndFeel.prototype.registerPeerConstructor = function(componentType, peerConstructorName) {
  AdfAssert.assertString(componentType);
  AdfAssert.assertString(peerConstructorName);
  AdfAssert.assert(AdfDhtmlLookAndFeel._COMPONENT_TO_PEER_NAME[componentType] == null, "Peer already registered for this componentType");
  AdfDhtmlLookAndFeel._COMPONENT_TO_PEER_NAME[componentType] = peerConstructorName
};
AdfDhtmlLookAndFeel.prototype.getPeer = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  var componentConstructor = component.constructor;
  var peerConstructor = componentConstructor._PEER_CONSTRUCTOR;
  if(peerConstructor == null) {
    var componentType = component.getComponentType();
    var constructorName = AdfDhtmlLookAndFeel._COMPONENT_TO_PEER_NAME[componentType];
    constructorName = this._overrideConstructorName(component, constructorName);
    if(!constructorName) {
      AdfLogger.LOGGER.warning("No peer for:", componentType);
      peerConstructor = AdfRichUIPeer
    }else {
      peerConstructor = window[constructorName];
      AdfAssert.assertFunction(peerConstructor)
    }
    componentConstructor._PEER_CONSTRUCTOR = peerConstructor
  }
  var peer = peerConstructor._PEER;
  if(peer == null) {
    peer = new peerConstructor(component);
    if(peerConstructor.STATELESS) {
      peerConstructor._PEER = peer
    }
  }
  return peer
};
AdfDhtmlLookAndFeel._COMPONENT_TO_PEER_NAME = {"oracle.adf.RichPanelWindow":"AdfDhtmlPanelWindowPeer", "oracle.adf.RichDialog":"AdfDhtmlDialogPeer", "oracle.adf.RichNoteWindow":"AdfDhtmlNoteWindowPeer", "oracle.adf.RichBreadCrumbs":"AdfDhtmlBreadCrumbsPeer", "oracle.adf.RichCarousel":"AdfDhtmlCarouselPeer", "oracle.adf.RichCarouselItem":"AdfDhtmlCarouselItemPeer", "oracle.adf.RichChooseColor":"AdfDhtmlChooseColorPeer", "oracle.adf.RichCommandButton":"AdfDhtmlButtonPeer", "oracle.adf.RichCustomElement":"AdfDhtmlCustomElementPeer", 
"oracle.adf.RichDecorativeBox":"AdfDhtmlDecorativeBoxPeer", "oracle.adf.RichResetButton":"AdfDhtmlResetButtonPeer", "oracle.adf.RichCalendar":"AdfDhtmlCalendarPeer", "oracle.adf.RichColumn":"AdfDhtmlColumnPeer", "oracle.adf.RichChooseDate":"AdfDhtmlChooseDatePeer", "oracle.adf.RichCommandImageLink":"AdfDhtmlCommandImageLinkPeer", "oracle.adf.RichCommandLink":"AdfDhtmlCommandLinkPeer", "oracle.adf.RichCommandMenuItem":"AdfDhtmlCommandMenuItemPeer", "oracle.adf.RichCommandNavigationItem":"AdfDhtmlCommandNavigationItemPeer", 
"oracle.adf.RichCommandToolbarButton":"AdfDhtmlCommandToolbarButtonPeer", "oracle.adf.RichCommandTrainStop":"AdfDhtmlCommandTrainStopPeer", "oracle.adf.RichContextInfo":"AdfDhtmlContextInfoPeer", "oracle.adf.RichConveyorBelt":"AdfDhtmlConveyorBeltPeer", "oracle.adf.RichPanelCollection":"AdfDhtmlPanelCollectionPeer", "oracle.adf.RichDocument":"AdfDhtmlDocumentPeer", "oracle.adf.RichForm":"AdfDhtmlFormPeer", "oracle.adf.RichSubform":"AdfDhtmlSubformPeer", "oracle.adf.RichGoImageLink":"AdfDhtmlGoImageLinkPeer", 
"oracle.adf.RichGoLink":"AdfDhtmlGoLinkPeer", "oracle.adf.RichGoMenuItem":"AdfDhtmlGoMenuItemPeer", "oracle.adf.RichGoButton":"AdfDhtmlGoButtonPeer", "oracle.adf.RichJet":"AdfDhtmlJetPeer", "oracle.adf.RichPanelGridLayout":"AdfDhtmlPanelGridLayoutPeer", "oracle.adf.RichStreaming":"AdfDhtmlStreamingPeer", "oracle.adf.RichInlineFrame":"AdfDhtmlInlineFramePeer", "oracle.adf.RichInputColor":"AdfDhtmlInputColorPeer", "oracle.adf.RichTextEditor":"AdfDhtmlRichTextEditorPeer", "oracle.adf.RichTextCKEditor":"AdfDhtmlRichTextCKEditorPeer", 
"oracle.adf.RichCodeEditor":"AdfDhtmlCodeEditorPeer", "oracle.adf.RichInputText":"AdfDhtmlInputTextPeer", "oracle.adf.RichInputListOfValues":"AdfDhtmlInputListOfValuesPeer", "oracle.adf.RichInputComboboxListOfValues":"AdfDhtmlInputComboboxListOfValuesPeer", "oracle.adf.RichInputDate":"AdfDhtmlInputDatePeer", "oracle.adf.RichInputFile":"AdfDhtmlInputFilePeer", "oracle.adf.RichInputNumberSlider":"AdfDhtmlInputNumberSliderPeer", "oracle.adf.RichInputRangeSlider":"AdfDhtmlInputRangeSliderPeer", "oracle.adf.RichInputNumberSpinbox":"AdfDhtmlInputNumberSpinboxPeer", 
"oracle.adf.RichInputSearch":"AdfDhtmlInputSearchPeer", "oracle.adf.RichListView":"AdfDhtmlListViewPeer", "oracle.adf.RichListItem":"AdfDhtmlListItemPeer", "oracle.adf.RichMasonryLayout":"AdfDhtmlMasonryLayoutPeer", "oracle.adf.RichMessage":"AdfDhtmlMessagePeer", "oracle.adf.RichMessages":"AdfDhtmlMessagesPeer", "oracle.adf.RichSeparator":"AdfDhtmlSeparatorPeer", "oracle.adf.RichSpacer":"AdfDhtmlSpacerPeer", "oracle.adf.RichIcon":"AdfDhtmlIconPeer", "oracle.adf.RichImage":"AdfDhtmlImagePeer", "oracle.adf.RichMedia":"AdfDhtmlMediaPeer", 
"oracle.adf.RichNavigationPane":"AdfDhtmlNavigationPanePeer", "oracle.adf.RichOutputFormatted":"AdfDhtmlOutputFormattedPeer", "oracle.adf.RichOutputLabel":"AdfDhtmlOutputLabelPeer", "oracle.adf.RichOutputText":"AdfDhtmlTextPeer", "oracle.adf.RichPanelAccordion":"AdfDhtmlPanelAccordionPeer", "oracle.adf.RichDeck":"AdfDhtmlDeckPeer", "oracle.adf.RichPanelBorderLayout":"AdfDhtmlPanelBorderLayoutPeer", "oracle.adf.RichPanelBox":"AdfDhtmlPanelBoxPeer", "oracle.adf.RichPanelChoice":"AdfDhtmlPanelChoicePeer", 
"oracle.adf.RichPanelDashboard":"AdfDhtmlPanelDashboardPeer", "oracle.adf.RichPanelFormLayout":"AdfDhtmlPanelFormLayoutPeer", "oracle.adf.RichPanelGroupLayout":"AdfDhtmlPanelGroupLayoutPeer", "oracle.adf.RichQuickQuery":"AdfDhtmlQuickQueryPeer", "oracle.adf.RichPanelHorizontalLayout":"AdfDhtmlPanelHorizontalLayoutPeer", "oracle.adf.RichPanelLabelAndMessage":"AdfDhtmlPanelLabelAndMessagePeer", "oracle.adf.RichPanelList":"AdfDhtmlPanelListPeer", "oracle.adf.RichPanelRadio":"AdfDhtmlPanelRadioPeer", 
"oracle.adf.RichPanelSplitter":"AdfDhtmlPanelSplitterPeer", "oracle.adf.RichPanelStretchLayout":"AdfDhtmlPanelStretchLayoutPeer", "oracle.adf.RichPoll":"AdfDhtmlPollPeer", "oracle.adf.RichPopup":"AdfDhtmlPopupPeer", "oracle.adf.RichRegion":"AdfDhtmlRegionPeer", "oracle.adf.RichStatusIndicator":"AdfDhtmlStatusIndicatorPeer", "oracle.adf.RichProgressIndicator":"AdfDhtmlProgressIndicatorPeer", "oracle.adf.RichToolbar":"AdfDhtmlToolbarPeer", "oracle.adf.RichToolbox":"AdfDhtmlToolboxPeer", "oracle.adf.RichPanelHeader":"AdfDhtmlPanelHeaderPeer", 
"oracle.adf.RichShowDetail":"AdfDhtmlShowDetailPeer", "oracle.adf.RichQuery":"AdfDhtmlQueryPeer", "oracle.adf.RichShowDetailHeader":"AdfDhtmlShowDetailHeaderPeer", "oracle.adf.RichTable":"AdfDhtmlTablePeer", "oracle.adf.RichTreeTable":"AdfDhtmlTreeTablePeer", "oracle.adf.RichTree":"AdfDhtmlTreePeer", "oracle.adf.RichMenuBar":"AdfDhtmlMenuBarPeer", "oracle.adf.RichMenu":"AdfDhtmlMenuPeer", "oracle.adf.RichTrain":"AdfDhtmlTrainPeer", "oracle.adf.RichTrainButtonBar":"AdfDhtmlTrainButtonBarPeer", "oracle.adf.RichSearchSection":"AdfDhtmlSearchSectionPeer", 
"oracle.adf.RichSuggestionsSection":"AdfDhtmlSuggestionsSectionPeer", "oracle.adf.RichSelectItem":"AdfRichUIPeer", "oracle.adf.RichSelectBooleanCheckbox":"AdfDhtmlSelectBooleanCheckboxPeer", "oracle.adf.RichSelectBooleanRadio":"AdfDhtmlSelectBooleanRadioPeer", "oracle.adf.RichSelectOneChoice":"AdfDhtmlSelectOneChoicePeer", "oracle.adf.RichSelectOneListbox":"AdfDhtmlSelectOneListboxPeer", "oracle.adf.RichSelectOneRadio":"AdfDhtmlSelectOneRadioPeer", "oracle.adf.RichSelectManyListbox":"AdfDhtmlSelectManyListboxPeer", 
"oracle.adf.RichSelectOrderShuttle":"AdfDhtmlSelectManyShuttlePeer", "oracle.adf.RichSelectManyShuttle":"AdfDhtmlSelectManyShuttlePeer", "oracle.adf.RichSelectManyCheckbox":"AdfDhtmlSelectManyCheckboxPeer", "oracle.adf.RichSelectManyChoice":"AdfDhtmlSelectManyChoicePeer", "oracle.adf.RichShowDetailItem":"AdfDhtmlShowDetailItemPeer", "oracle.adf.RichPanelSpringboard":"AdfDhtmlPanelSpringboardPeer", "oracle.adf.RichPanelTabbed":"AdfDhtmlPanelTabbedPeer", "oracle.adf.RichPanelDrawer":"AdfDhtmlPanelDrawerPeer", 
"oracle.adf.AdfClientDomTracker":"AdfDhtmlClientDomTrackerPeer", "javax.faces.ViewRoot":"AdfDhtmlPagePeer", "oracle.adf.RichRootPage":"AdfDhtmlPagePeer", "oracle.adf.RichDeclarativeComponent":"AdfDhtmlDeclarativeComponentPeer", "oracle.adf.RichDynamicDeclarativeComponent":"AdfDhtmlDeclarativeComponentPeer", "oracle.adfinternal.RichChooseNumberSpinwheel":"AdfDhtmlChooseNumberSpinwheelPeer"};
AdfDhtmlLookAndFeel.prototype.getTranslatedString = function(key, params) {
  if(!key) {
    return null
  }
  var translations = AdfDhtmlLookAndFeel.__TRANSLATIONS;
  if(!translations) {
    return null
  }
  var formatString = translations[key];
  if(!params) {
    return formatString
  }
  if(arguments.length > 2) {
    var assembledArguments = [formatString];
    for(var i = 1;i < arguments.length;i++) {
      assembledArguments.push(arguments[i])
    }
    return TrFastMessageFormatUtils.format.apply(this, assembledArguments)
  }else {
    return TrFastMessageFormatUtils.format(formatString, params)
  }
};
AdfDhtmlLookAndFeel.prototype.getSkinProperty = function(key) {
  if(key == null || !AdfDhtmlLookAndFeel._RICH_SKIN_PROPERTIES) {
    return undefined
  }else {
    return AdfDhtmlLookAndFeel._RICH_SKIN_PROPERTIES[key]
  }
};
AdfDhtmlLookAndFeel.prototype.getStyleClass = function(styleClass) {
  var parsed = this.getSkinProperty(styleClass);
  if(!parsed) {
    return styleClass
  }
  return parsed
};
AdfDhtmlLookAndFeel.prototype.getIcon = function(key) {
  var icon = this.getRawIcon(key);
  return icon != null ? icon.cloneNode(true) : null
};
AdfDhtmlLookAndFeel.prototype.getRawIcon = function(key) {
  if(key == null) {
    return null
  }else {
    key = key.replace("|", "_");
    var iconSpan = AdfAgent.AGENT.getElementById(key);
    if(!iconSpan) {
      AdfLogger.LOGGER.warning("Icon ", key, " is not available on the client");
      return null
    }
    return iconSpan.firstChild
  }
};
AdfDhtmlLookAndFeel.prototype.createPage = function() {
  var domWindow = this._window;
  AdfAssert.assert(domWindow != null);
  this._domWindow = null;
  return new AdfDhtmlPage(this, domWindow)
};
AdfDhtmlLookAndFeel.addSkinProperties = function(props) {
  AdfAssert.assertObject(props);
  if(AdfDhtmlLookAndFeel._RICH_SKIN_PROPERTIES) {
    AdfCollections.copyInto(AdfDhtmlLookAndFeel._RICH_SKIN_PROPERTIES, props)
  }else {
    AdfDhtmlLookAndFeel._RICH_SKIN_PROPERTIES = props
  }
};
AdfDhtmlLookAndFeel.prototype._overrideConstructorName = function(component, constructorName) {
  var componentType = component.getComponentType();
  var skinProperty = this.getSkinProperty(AdfDhtmlLookAndFeel._TRAIN_NEW_RESPONSIVE_SKINNING_KEY);
  if(componentType == "oracle.adf.RichTrain" && skinProperty == AdfDhtmlLookAndFeel._TR_RENDERING_MODE_ALTA_V1_1) {
    return"AdfDhtmlTrainV2Peer"
  }else {
    if(componentType == "oracle.adf.RichCommandTrainStop" && skinProperty == AdfDhtmlLookAndFeel._TR_RENDERING_MODE_ALTA_V1_1) {
      return"AdfDhtmlCommandTrainV2StopPeer"
    }else {
      if(componentType == "oracle.adf.RichTextEditor") {
        var rteMode = component.getProperty("rteMode");
        if(rteMode && rteMode == "ckeditor") {
          return AdfDhtmlLookAndFeel._COMPONENT_TO_PEER_NAME["oracle.adf.RichTextCKEditor"]
        }
      }
    }
  }
  return constructorName
};
AdfDhtmlLookAndFeel._DEFAULT_CONSTRUCTOR_KEY = "$default";
AdfDhtmlLookAndFeel._TRAIN_NEW_RESPONSIVE_SKINNING_KEY = "af|train-tr-rendering-mode";
AdfDhtmlLookAndFeel._TR_RENDERING_MODE_ALTA_V1_1 = "alta-v1.1";

function AdfServerEventQueue() {
  this.Init()
}
AdfObject.createSubclass(AdfServerEventQueue);
AdfServerEventQueue.prototype.Init = function() {
  AdfServerEventQueue.superclass.Init.call(this);
  this._serverEventQueue = new Array
};
AdfServerEventQueue.prototype.push = function(event) {
  var timeout = event.getMaxTimeBeforePropagation();
  var targetTime = timeout < 0 ? -1 : (new Date).getTime() + timeout;
  if(timeout > 0) {
    AdfPage.PAGE.__queueEventTimerIfNeeded(timeout)
  }
  this._serverEventQueue.push({event:event, targetTime:targetTime})
};
AdfServerEventQueue.prototype.hasEventsToDeliver = function() {
  return this.getWaitingTimeout() == 0
};
AdfServerEventQueue.prototype.shiftEvents = function(hasNonEventPayload, hasDeltas) {
  var events = [];
  while(this._serverEventQueue.length > 0) {
    var event = this._serverEventQueue[0].event;
    var noResponse = !event.isResponseExpected();
    var discrete = noResponse || event.isDeliveryDiscrete();
    if(discrete && (events.length > 0 || hasNonEventPayload)) {
      break
    }
    if(noResponse && hasDeltas) {
      break
    }
    this._serverEventQueue.shift();
    events.push(event);
    if(discrete) {
      break
    }
  }
  return events
};
AdfServerEventQueue.prototype.getWaitingTimeout = function() {
  var timeout = -1;
  var len = this._serverEventQueue.length;
  if(len > 0) {
    var currentTime = (new Date).getTime();
    for(var i = 0;i < len;i++) {
      var targetTime = this._serverEventQueue[i].targetTime;
      if(targetTime >= 0) {
        var newTimeout = targetTime - currentTime;
        timeout = timeout < 0 ? newTimeout : Math.min(timeout, newTimeout);
        timeout = Math.max(0, timeout)
      }
    }
  }
  return timeout
};
AdfServerEventQueue.prototype.validate = function() {
  AdfServerEventQueue._scrubEvents(this._serverEventQueue)
};
AdfServerEventQueue._scrubEvents = function(eventQueue) {
  var page = AdfPage.PAGE;
  for(var i = 0;i < eventQueue.length;i++) {
    var event = eventQueue[i].event;
    var component = event.getSource();
    if(!component.getPeer()) {
      if(!(component = page.findComponent(component.getClientId()))) {
        eventQueue.splice(i--, 1)
      }else {
        event.setSource(component)
      }
    }
  }
};

function AdfDhtmlPage(lookAndFeel, domWindow) {
  this.Init(lookAndFeel, domWindow)
}
AdfObject.createSubclass(AdfDhtmlPage, AdfPage);
AdfDhtmlPage.SCREEN_READER_ACCESSIBILITY_MODE = "screenReader";
AdfDhtmlPage.DEFAULT_ACCESSIBILITY_MODE = "default";
AdfDhtmlPage.INACCESSIBLE_ACCESSIBILITY_MODE = "inaccessible";
AdfDhtmlPage.OUPUTMODE_ATTACHMENT = "attachment";
AdfDhtmlPage.COLOR_CONTRAST_STANDARD = "STANDARD";
AdfDhtmlPage.COLOR_CONTRAST_HIGH = "HIGH";
AdfDhtmlPage._LOAD_CHECKPOINT = AdfCheckpoint.getCheckpoint("onload total", "startup");
AdfDhtmlPage._LOAD_CHECKPOINT.setDescription("Total time spent in onLoad");
AdfDhtmlPage._CALLBACK_CHECKPOINT = AdfCheckpoint.getCheckpoint("onload callback", "startup");
AdfDhtmlPage._CALLBACK_CHECKPOINT.setDescription("Time spent in onload callback plus post-callback layout");
AdfDhtmlPage._POSTBACK_CHECKPOINT = AdfCheckpoint.getCheckpoint("postaback total", "postback");
AdfDhtmlPage._POSTBACK_CHECKPOINT.setDescription("Total time spent in postback");
AdfDhtmlPage._BROWSER_RESIZE_CHECKPOINT = AdfCheckpoint.getCheckpoint("browser resize", "resize");
AdfDhtmlPage._BROWSER_RESIZE_CHECKPOINT.setDescription("Time spent in resize notify during browser resize");
AdfDhtmlPage._CUSTOM_PPR_URL_EXPANDO = "_adfCustomPPRUrlExpando";
AdfDhtmlPage.ACTIVE_DOM_ELEMENT_PROPERTY = "activeDomElement";
AdfDhtmlPage._INCOMPLETE_IMAGE_CLASS_NAME = "_afrImageNotLoadedInTime";
AdfDhtmlPage._ECID = "_afrECID";
AdfDhtmlPage._PRINTABLE_STATE = "p_AFPrintable";
AdfDhtmlPage._PRINTABLE_WINDOW_NAME = "_new";
AdfDhtmlPage._TIMER_IS_SYNCHRONIZED = "isSynchronized";
AdfDhtmlPage._TIMER_CALLBACK = "callback";
AdfDhtmlPage._TIMER_CONTEXT = "context";
AdfDhtmlPage._TIMER_STATE = "state";
AdfDhtmlPage._TIMER_ID = "timerId";
AdfDhtmlPage._TIMER_DOM_ID = "domTimerId";
AdfDhtmlPage.PROTECTED_SEARCH_TOKENIZED_QUERY_PARAMETER = "oracle.adf.view.rich.TOKENIZED_QUERY";
AdfDhtmlPage.PROTECTED_KEY_ATTRIBUTE = "protectionKey";
AdfDhtmlPage._IME_ECHO_KEY_EVENTS = ["keydown", "keyup", "compositionend"];
AdfDhtmlPage.InitClass = function() {
  var keyStrokeOverrides = new Object;
  var overrideList = [AdfKeyStroke.getKeyStroke(AdfKeyStroke.A_KEY, AdfKeyStroke.CTRL_MASK), AdfKeyStroke.getKeyStroke(AdfKeyStroke.C_KEY, AdfKeyStroke.CTRL_MASK), AdfKeyStroke.getKeyStroke(AdfKeyStroke.V_KEY, AdfKeyStroke.CTRL_MASK), AdfKeyStroke.getKeyStroke(AdfKeyStroke.X_KEY, AdfKeyStroke.CTRL_MASK), AdfKeyStroke.getKeyStroke(AdfKeyStroke.DELETE_KEY, 0)];
  for(var i = overrideList.length - 1;i >= 0;i--) {
    keyStrokeOverrides[overrideList[i].toMarshalledString()] = true
  }
  this._KEYSTROKE_OVERRIDES = keyStrokeOverrides;
  this._EDITABLE_STYLE = "p_AFInlineEditable";
  this._SELECTABLE_STYLE = "p_AFInlineSelectable";
  this._STATE_PARAM_NAME = "javax.faces.ViewState";
  this._STREAMING_IDS_PARAM = "oracle.adf.view.rich.STREAM";
  this._REMOVED_STREAMING_IDS_PARAM = "oracle.adf.view.rich.NOSTREAM";
  this._STREAMING_REQUEST_SENT = 0;
  this._STREAMING_STARTED = 1;
  this._STREAMING_COMPLETE = 2;
  this._LAZY_FETCH_ID_PARAM = "oracle.adf.view.rich.LAZY_FETCH";
  this._RICH_UPDATE_FLAG = "oracle.adf.view.faces.RICH_UPDATE";
  this._NAVIGATION_WRAPPER_ID = "afr::DocWrapper";
  this._NAVIGATION_VIEW_ROOT = "_afrNavViewRoot";
  this._NAVIGATION_QUERY_PARAMS = "_afrNavParams";
  this._DELAYED_RESIZE_TIMEOUT = 150;
  var keyCode = AdfKeyStroke.R_KEY;
  var modifiers = AdfKeyStroke.ALT_MASK | AdfKeyStroke.CTRL_MASK;
  this._ACTIVE_DATA_HOT_KEY = AdfKeyStroke.getKeyStroke(keyCode, modifiers);
  this._ACTIVE_DATA_HOT_KEY_TEXT = "Ctrl+Alt+R";
  this._DOCUMENT_STYLE_HOLDER = "_afrStyleHolder";
  this.PPR_NAVIGATION_ON = 1;
  this.PPR_NAVIGATION_FORCE_PPR = 2;
  this._MSG_RESET_CLIENT_AND_SERVER = 0;
  this._MSG_RESET_SERVER = 1;
  this._HINT_DISPLAY_AUTO = "AUTO";
  this._HINT_DISPLAY_NONE = "NONE";
  this._PARSER_DIV_ID = "_afrParserDiv";
  this._BLOCKING_DIV_ID = "_afBlockingDiv";
  this._BLOCKING_OPACITY = 0
};
AdfDhtmlPage.prototype.Init = function(lookAndFeel, domWindow) {
  AdfAssert.assertPrototype(lookAndFeel, AdfLookAndFeel);
  AdfDhtmlPage.superclass.Init.call(this, lookAndFeel);
  this._preloadImages = false;
  this._window = domWindow;
  this._document = domWindow.document;
  this._clientIdToComponentMap = new Object;
  var logger = AdfLogger.LOGGER.getLogWriter();
  if(AdfClientFileLogWriter.prototype.isPrototypeOf(logger)) {
    logger.setSessionId(AdfDhtmlPage._getCookie(this._document, "JSESSIONID"))
  }
  AdfDhtmlPage.PARTIAL_TARGETS_PARAM = "oracle.adf.view.rich.RENDER";
  this._eventQueue = new Array;
  this._serverQueue = new AdfServerEventQueue;
  this._busyCounts = {};
  this._accessibilityMode = AdfDhtmlPage.DEFAULT_ACCESSIBILITY_MODE;
  this._colorContrast = AdfDhtmlPage.COLOR_CONTRAST_STANDARD;
  this._portlet = false;
  this._automationEnabled = false;
  this._cssSelectorsUncompressed = false;
  this._animationEnabled = true;
  this._validateEmptyFields = false;
  this._componentHintDisplayMode = AdfDhtmlPage._HINT_DISPLAY_AUTO;
  this._activeDomNode = null;
  this._inLayout = false;
  domWindow.onunload = this.createCallback(this.Dispose);
  domWindow.onresize = this.createCallback(this._handleResize);
  var domDocument = this.getDomDocument();
  domDocument.ondragstart = AdfAgent.eatEventCallback;
  domDocument.onselectstart = this.createCallback(this._onSelectStart);
  this._dragStartX = 0;
  this._dragStartY = 0;
  this._dragLastX = 0;
  this._dragLastY = 0;
  var dragMouseMoveCallback = this.createCallback(this._dragMouseMove);
  var dragMouseUpCallback = this.createCallback(this._dragMouseUp);
  var dragKeyDownCallback = this.createCallback(this._dragKeyDown);
  if(AdfAgent.AGENT.isTouchFirstDevice()) {
    this._dragDropCallbacks = {"touchmove":dragMouseMoveCallback, "touchend":dragMouseUpCallback, "touchcancel":dragKeyDownCallback}
  }else {
    this._dragDropCallbacks = {"mousemove":dragMouseMoveCallback, "mouseup":dragMouseUpCallback, "keydown":dragKeyDownCallback, "touchmove":dragMouseMoveCallback, "touchend":dragMouseUpCallback, "touchcancel":dragKeyDownCallback}
  }
  this._resizeNotifyTree = new Object;
  this._resizeNotifyMap = new Object;
  this._descendantResizeNotifyList = new Array;
  this._keyStrokeToCallbackMap = new Object;
  this._keyStrokeToCallbackContextMap = new Object;
  this._pageProperties = new Object;
  AdfDhtmlPage._timers = new Object;
  AdfDhtmlPage._nextTimerId = 1;
  this._selectedEditingComponents = null;
  this._editableSubtreeId = null;
  this._editedComponentId = null;
  this._inlineEditor = null;
  this._editableCallback = null;
  this._editableCallbackContext = null;
  this._notifyOfUnload = false;
  this._activeComponents = new Object;
  this._autoPPRComponents = new Object;
  this._startADSClientIds = new Object;
  this._startADSClientIdCount = 0;
  this._stopADSClientIds = new Array;
  this._canReceiveActiveDataCount = 1;
  this._stopGlobalActiveData();
  this._defaultMessageKey = "____GLOBAL_MESSAGES";
  this._messages = {};
  this._delayedMessages = {};
  this._globalMessagesResetStrategy = AdfDhtmlPage._MSG_RESET_CLIENT_AND_SERVER;
  this._serverTimeDifference = 0;
  this._isWindowClosing = false;
  this._lastPollTime = null;
  this._lastActiveDataActivityTime = 0;
  this._reconnectRetries = 0;
  this._restartInterval = AdfDhtmlPage._DEFAULT_ACTIVEDATA_CONFIG.restartInterval;
  this._maxReconnectionRetries = AdfDhtmlPage._DEFAULT_ACTIVEDATA_CONFIG.maxReconnectionRetries;
  this._reconnectWaitTime = AdfDhtmlPage._DEFAULT_ACTIVEDATA_CONFIG.reconnectWaitTime;
  this._latencyThreshold = AdfDhtmlPage._DEFAULT_ACTIVEDATA_CONFIG.latencyThreshold;
  this._transport = AdfDhtmlPage._DEFAULT_ACTIVEDATA_CONFIG.transport;
  this._pollingInterval = AdfDhtmlPage._DEFAULT_ACTIVEDATA_CONFIG.pollingInterval;
  this._keepAliveInterval = AdfDhtmlPage._DEFAULT_ACTIVEDATA_CONFIG.keepAliveInterval;
  this._pollingTimer = null;
  this._pendingStreamingIDs = new Object;
  this._documentClientId = null;
  this.__shouldTracePPRRequestId = false;
  this._perfProfileEnabled = domWindow._afrTimingPreLoadStart ? true : false;
  this._perfProfileTimingEnabled = domWindow._afrTimingPreLoadTimingStart ? true : false;
  this._positionBlockingGlassPaneCallback = this.createCallback(this._positionBlockingGlassPane);
  if(this._perfProfileEnabled || this._perfProfileTimingEnabled) {
    var profilerLogger = new AdfLogger("profiler", AdfAgent.AGENT.createDefaultLogWriter());
    if(profilerLogger.getLevel() > AdfLogger.INFO) {
      profilerLogger.setLevel(AdfLogger.INFO)
    }
    AdfLogger.PROFILER_LOGGER = profilerLogger;
    AdfLogger.PROFILER_LOGGER.register()
  }
  this._haveOutstandingPPRRequest = false;
  this._perfProfileLogClosed = true;
  this._loadingComponents = [];
  this._dirtyDataComponents = [];
  this._componentsUpdatedByPollEvent = null;
  this._poppedUpComponentInfo = {};
  this._loadedLibraries = {};
  this._compositionEventTarget = null
};
AdfDhtmlPage.prototype.isPageFullyLoaded = function() {
  return this.isSynchronizedWithServer()
};
AdfDhtmlPage.prototype.isPageOnloadCalled = function() {
  return this._initializationComplete
};
AdfDhtmlPage.prototype.isSynchronizedWithServer = function() {
  this._throwSavedErrors();
  return this.whyIsNotSynchronizedWithServer() == null
};
AdfDhtmlPage.prototype.whyIsNotSynchronizedWithServer = function() {
  var dts;
  var why;
  try {
    why = this.getPhase() != AdfPage.WAITING_FOR_USER_INPUT_PHASE ? "WAITING_FOR_USER_INPUT_PHASE" : this._eventQueue.length != 0 ? "Event queue is not empty" : AdfDhtmlRichDialogService.isBusy() ? "Dialog service is busy" : !(dts = this.getDataTransferService()) || dts.getDTSState() != AdfDataTransferService.STATE_READY || dts.streamingResponsesOutstanding() ? "DTS is not ready" : this.isAttachmentMode() ? !this._initializationComplete ? "Page is not loaded" : null : !this._initializationComplete ? 
    "Page is not loaded" : this._partialTargets != null ? "Partial targets are updating" : this._startADSClientIdCount != 0 ? "Outstanding active data" : this._windowEventHeaderMap != null ? "Window events being delivered" : this._partialRequestRedirect ? "Redirect request" : this._inDeliverQueuedServerEvents ? "Processing server EventQueue  " : this._inDeliverQueuedEvents ? "Processing client eventQueue" : this._waitingForDocumentUnload ? "Waiting for document unload" : !this._areComponentsLoaded() ? 
    "Components aren't ready" : this._serverQueue.hasEventsToDeliver() ? "There are server events to deliver" : AdfNavigationHistoryAgent.getInstance().isWaitingForServer() ? "Waiting for navigation to complete" : this.getRestDataService() && this.getRestDataService().isBusy() ? "A REST service call is in progress" : this._waitingForAnimation() ? "Waiting for animations to complete" : !this._areSynchronousTimersCleared() ? "Waiting for synchronous timers to clear" : null
  }catch(e) {
    why = "Error: " + e
  }
  return why
};
AdfDhtmlPage.prototype.registerLoadingComponent = function(component) {
  var clientId = component.getClientId();
  AdfAssert.assert(AdfCollections.indexOf(this._loadingComponents, clientId) == -1, "Component already registered");
  this._loadingComponents.push(clientId)
};
AdfDhtmlPage.prototype.unregisterLoadingComponent = function(component) {
  AdfCollections.removeArrayValue(this._loadingComponents, component.getClientId())
};
AdfDhtmlPage.prototype._areComponentsLoaded = function() {
  var loadingComponents = this._loadingComponents;
  var loadingCount = loadingComponents.length;
  for(var i = 0;i < loadingCount;i++) {
    var loadingComponent = this.findComponent(loadingComponents[i]);
    if(loadingComponent.getReadyState() != AdfUIComponent.STATE_COMPLETE) {
      return false
    }
  }
  return true
};
AdfDhtmlPage.prototype.isPerformingFullSubmit = function() {
  return this._inAppNavigationFlag
};
AdfDhtmlPage.prototype._resetPerformingFullSubmit = function() {
  this._inAppNavigationFlag = false
};
AdfDhtmlPage.prototype.getFailedConnectionText = function() {
  var text = AdfDhtmlPage.superclass.getFailedConnectionText.call(this);
  if(text == null) {
    var laf = this.getLookAndFeel();
    text = laf.getTranslatedString("af_document.MSG_FAILED_CONNECTION")
  }
  return text
};
AdfDhtmlPage.prototype.getAccessibilityMode = function() {
  return this._accessibilityMode
};
AdfDhtmlPage.prototype.setAccessibilityInfo = function(info) {
  var mode = info["mode"];
  AdfAssert.assert(mode == AdfDhtmlPage.SCREEN_READER_ACCESSIBILITY_MODE || mode == AdfDhtmlPage.DEFAULT_ACCESSIBILITY_MODE || mode == AdfDhtmlPage.INACCESSIBLE_ACCESSIBILITY_MODE, "invalid accessibility mode: ", mode);
  this._accessibilityMode = mode;
  var colorContast = info["colorContrast"];
  AdfAssert.assert(colorContast === AdfDhtmlPage.COLOR_CONTRAST_STANDARD || colorContast === AdfDhtmlPage.COLOR_CONTRAST_HIGH);
  this._colorContrast = colorContast
};
AdfDhtmlPage.prototype.isScreenReaderMode = function() {
  return this._accessibilityMode == AdfDhtmlPage.SCREEN_READER_ACCESSIBILITY_MODE
};
AdfDhtmlPage.prototype.isHighContrast = function() {
  return this._colorContrast === AdfDhtmlPage.COLOR_CONTRAST_HIGH
};
AdfDhtmlPage.prototype.isAttachmentMode = function() {
  return this._outputMode === AdfDhtmlPage.OUPUTMODE_ATTACHMENT
};
AdfDhtmlPage.prototype.isUserActivityMonitoringOn = function() {
  if(this._userActivityMonitoring === undefined) {
    this._userActivityMonitoring = true;
    var domWindow = this.getDomWindow();
    var sessionStorageEnabledOnAgent = AdfAgent.AGENT.isSessionStorageEnabled();
    var userActivityFeatureOn = domWindow.AdfUserActivityInfo != null;
    if(!sessionStorageEnabledOnAgent || !userActivityFeatureOn) {
      this._userActivityMonitoring = false;
      AdfLogger.LOGGER.fine("User Activity Monitoring has been disabled either because the feature" + " is disabled or it's enabled but its resources are missing. Please check your app configuration.")
    }
  }
  return this._userActivityMonitoring
};
AdfDhtmlPage.prototype.setPortlet = function(flag) {
  this._portlet = flag
};
AdfDhtmlPage.prototype.isPortlet = function() {
  return this._portlet
};
AdfDhtmlPage.prototype.setHelpWindowName = function(windowName) {
  AdfDomUtils._setHelpWindowName(windowName)
};
AdfDhtmlPage.prototype.launchHelpWindow = function(url) {
  AdfDomUtils.launchHelpWindow(url)
};
AdfDhtmlPage.prototype.localNavigate = function(uri) {
  if(!this.checkUncommittedData()) {
    return
  }
  if(0 != (this.getPPRNavigationOptions() & AdfDhtmlPage.PPR_NAVIGATION_ON)) {
    this._blockUI(true);
    var hasNoActiveComponents = AdfCollections.isEmpty(this._getClientStateMap());
    var params = {};
    if(this.isUserActivityMonitoringOn() && hasNoActiveComponents) {
      var userActivityInfo = AdfUserActivityInfo.getInstance(AdfUserActivityInfo.PRIMARY);
      var currStartTime = (new Date).getTime().toString();
      userActivityInfo.setClientStartTime(currStartTime);
      params["oracle.adf.view.rich.monitoring.UserActivityInfo"] = AdfUserActivityInfo.getMarshaledObject()
    }
    var content = this._getPostbackContent(null, params, null);
    this.getDataTransferService().sendRequest(null, uri, null, content, [this])
  }else {
    this.getDomWindow().location.href = uri
  }
};
AdfDhtmlPage.prototype.checkUncommittedData = function() {
  var proceed = true;
  if(this._warnUncommitted && (this._dataDirty || this._hasLocalUncommitted)) {
    proceed = this._displayUncommittedDataWarning()
  }
  return proceed
};
AdfDhtmlPage.prototype.__setAutomationEnabled = function(enabled) {
  AdfAssert.assertBoolean(enabled);
  this._automationEnabled = enabled
};
AdfDhtmlPage.prototype.__setAsynchronousUpdatesState = function(state) {
  AdfAssert.assertString(state);
  this._asynchronousUpdatesState = state
};
AdfDhtmlPage.prototype.isAutomationEnabled = function() {
  return this._automationEnabled
};
AdfDhtmlPage.prototype.getAsynchronousUpdatesState = function() {
  return this._asynchronousUpdatesState
};
AdfDhtmlPage.prototype.__setCssSelectorsUncompressed = function(disabled) {
  AdfAssert.assertBoolean(disabled);
  this._cssSelectorsUncompressed = disabled
};
AdfDhtmlPage.prototype.areCssSelectorsUncompressed = function() {
  return this._cssSelectorsUncompressed
};
AdfDhtmlPage.prototype.setAnimationEnabled = function(enabled) {
  AdfAssert.assertBoolean(enabled);
  this._animationEnabled = enabled
};
AdfDhtmlPage.prototype.isAnimationEnabled = function() {
  return this._animationEnabled
};
AdfDhtmlPage.prototype.getSessionIdentifier = function() {
  return this._sessionId
};
AdfDhtmlPage.prototype.__setSessionIdentifier = function(sessionId) {
  this._sessionId = sessionId;
  return this
};
AdfDhtmlPage.prototype.shouldValidateEmptyFields = function() {
  return this._validateEmptyFields
};
AdfDhtmlPage.prototype.__setShouldValidateEmptyFields = function(validateEmptyFields) {
  this._validateEmptyFields = validateEmptyFields
};
AdfDhtmlPage.prototype.getResponseIdentifier = function() {
  return this._responseId
};
AdfDhtmlPage.prototype.__setResponseIdentifier = function(responseId) {
  this._responseId = responseId;
  return this
};
AdfDhtmlPage.prototype.__setOutputMode = function(outputMode) {
  this._outputMode = outputMode;
  return this
};
AdfDhtmlPage.prototype.getOutputMode = function() {
  return this._outputMode
};
AdfDhtmlPage.prototype.__notifyReturnFromDialog = function() {
  this._dataDirty = false;
  this._resetUncommittedIds()
};
AdfDhtmlPage.prototype.shouldTracePPRRequestId = function() {
  return this.__shouldTracePPRRequestId
};
AdfDhtmlPage.prototype.__setShouldTracePPRRequestId = function(tracePPRRequestId) {
  this.__shouldTracePPRRequestId = tracePPRRequestId
};
AdfDhtmlPage.prototype.setPageProperty = function(propertyName, propertyValue) {
  AdfAssert.assertString(propertyName);
  this._pageProperties[propertyName] = propertyValue
};
AdfDhtmlPage.prototype.getPageProperty = function(propertyName) {
  AdfAssert.assertString(propertyName);
  return this._pageProperties[propertyName]
};
AdfDhtmlPage.prototype.findComponent = function(clientId) {
  return this._clientIdToComponentMap[clientId]
};
AdfDhtmlPage.prototype.getClientIdToComponentMap = function() {
  return this._clientIdToComponentMap
};
AdfDhtmlPage.prototype.findComponentByAbsoluteLocator = function(absoluteLocator) {
  if(window.AdfLocators) {
    return AdfLocators.findComponentByAbsoluteLocator(this, absoluteLocator)
  }
  throw new Error("Automation must be enabled to call findComponentByAbsoluteLocator()");
};
AdfDhtmlPage.prototype.shouldShowHintInNoteTip = function() {
  return this._componentHintDisplayMode == null || this._componentHintDisplayMode == AdfDhtmlPage._HINT_DISPLAY_AUTO
};
AdfDhtmlPage.prototype.__setHintPresentationMode = function(hintMode) {
  this._componentHintDisplayMode = hintMode
};
AdfDhtmlPage.prototype.findComponentWithBackup = function(locator, backupInfo) {
  if(window.AdfLocators) {
    return AdfLocators.findComponentWithBackup(this, locator, backupInfo)
  }
  throw new Error("Automation must be enabled to call findComponentWithBackup()");
};
AdfDhtmlPage.prototype.findComponentByComplexLocator = function(locator, backupInfo) {
  if(window.AdfLocators) {
    return AdfLocators.findComponentByComplexLocator(this, locator, backupInfo)
  }
  throw new Error("Automation must be enabled to call findComponentByComplexLocator()");
};
AdfDhtmlPage.prototype.findComponentsByComplexLocator = function(locator, backupInfo) {
  if(window.AdfLocators) {
    return AdfLocators.findComponentsByComplexLocator(this, locator, backupInfo)
  }
  throw new Error("Automation must be enabled to call findComponentsByComplexLocator()");
};
AdfDhtmlPage.prototype.getComponentsByType = function(componentType) {
  AdfAssert.assertNonEmptyString(componentType);
  var componentsByType = new Array;
  for(var currClientId in this._clientIdToComponentMap) {
    var currComponent = this._clientIdToComponentMap[currClientId];
    if(currComponent && currComponent.getComponentType() == componentType) {
      componentsByType.push(currComponent)
    }
  }
  return componentsByType
};
AdfDhtmlPage.prototype.matchComponents = function(filterFunction, context) {
  AdfAssert.assertFunction(filterFunction);
  if(context === undefined) {
    context = this
  }
  var matchingComponents = [];
  for(var currClientId in this._clientIdToComponentMap) {
    var currComponent = this._clientIdToComponentMap[currClientId];
    var result = filterFunction.call(context, currComponent);
    if(result & 1) {
      matchingComponents.push(currComponent)
    }
    if(result & 2) {
      break
    }
  }
  return matchingComponents
};
AdfDhtmlPage.prototype.getViewId = function() {
  return this._viewId != undefined ? this._viewId : ""
};
AdfDhtmlPage.prototype.__setViewId = function(viewId) {
  this._viewId = viewId
};
AdfDhtmlPage.prototype.unmapComponent = function(clientId) {
  if(clientId in this._activeComponents) {
    this._stopActiveData(clientId)
  }
  if(clientId in this._autoPPRComponents) {
    this._stopAutoPPR(clientId)
  }
  delete this._clientIdToComponentMap[clientId]
};
AdfDhtmlPage.prototype.mapComponent = function(clientId, component) {
  this._clientIdToComponentMap[clientId] = component
};
AdfDhtmlPage.prototype.addResource = function(type, value) {
  switch(type) {
    case "javascript":
      this._loadScript(value);
      break;
    case "css":
      var element = this._loadCss(value);
      element.setAttribute("afrres", "true");
      break;
    case "style":
      var element = this._createStyle(value);
      element.setAttribute("afrres", "true");
      break
  }
};
AdfDhtmlPage.prototype.Dispose = function() {
  this.getDataTransferService().pageUnloading();
  if(AdfLogger.PROFILER_LOGGER != null) {
    AdfLogger.PROFILER_LOGGER.getLogWriter().close()
  }
  if(this._beforeUnloadDelayed) {
    this._onBeforeUnload()
  }
  AdfDhtmlRichDialogService.getInstance().cancelAll();
  var autoDismissalManager = this._autoDismissalManager;
  if(autoDismissalManager) {
    autoDismissalManager.dispose();
    this._autoDismissalManager = null
  }
  var modalityManager = this._modalityManage;
  if(modalityManager) {
    modalityManager.dispose();
    this._modalityManager = null
  }
  var positionManager = this._positionManager;
  if(positionManager) {
    positionManager.dispose();
    this._positionManager = null
  }
  var zOrderManager = this._zOrderManager;
  if(zOrderManager) {
    zOrderManager.dispose();
    this._zOrderManager = null
  }
  var navAgent = AdfNavigationHistoryAgent.getInstance();
  if(navAgent) {
    navAgent.dispose()
  }
  this.setEditableSubtree(null);
  var agent = AdfAgent.AGENT;
  var domDocument = this.getDomDocument();
  var domWindow = this.getDomWindow();
  var touchContextMenuManager = this._touchContextMenuManager;
  if(touchContextMenuManager) {
    touchContextMenuManager.dispose()
  }
  this._disposeTimers();
  var redistributeCallback = this._redistributeEventsCallback;
  if(redistributeCallback) {
    agent.removeEventBubbles(domDocument, redistributeCallback);
    this._redistributeEventsCallback = null
  }
  if(this._onBeforeUnloadCallback) {
    agent.removeBubbleEventListener(domWindow, "beforeunload", this._onBeforeUnloadCallback);
    this._onBeforeUnloadCallback = null
  }
  this._unregisterImeEnterKeyHandler(domDocument);
  var keyCallback = this._keyEventCallback;
  if(keyCallback) {
    agent.removeKeyEventListener(domDocument, keyCallback);
    this._keyEventCallback = null
  }
  domWindow.onload = null;
  domWindow.onunload = null;
  domWindow.onresize = null;
  var dataTransferService = this._dataTransferService;
  if(dataTransferService) {
    dataTransferService.dispose();
    this._dataTransferService = null
  }
  delete this._lastFocusedElement;
  this._pageProcessingIndicator = null;
  this._uiBlockingDiv = null;
  this._glassPane = null;
  this._uiMaskingFrame = null;
  this._activeElementBeforeBlocking = null;
  this._keyCaptureState = null;
  this._window = null;
  this._document = null;
  this._delayedResizeCallback = null;
  this._dragDropCallbacks = null;
  this._touchContextMenuManager = null;
  AdfDhtmlPage._disposeIFrames(domDocument);
  AdfDhtmlPage.superclass.Dispose.call(this);
  if(this.isScreenReaderMode()) {
    this.unregisterKeyStroke(AdfDhtmlPage._ACTIVE_DATA_HOT_KEY)
  }
};
AdfDhtmlPage.prototype._handleImeEchoKey = function(event) {
  var agent = AdfAgent.AGENT;
  if(event instanceof CompositionEvent) {
    if(event.type == "compositionend") {
      this._compositionEventTarget = event.target
    }
    agent.eatEvent(event);
    return
  }
  if(this._compositionEventTarget && event instanceof KeyboardEvent) {
    if(event.type == "keyup" && event.keyCode == AdfKeyStroke.ENTER_KEY && event.target == this._compositionEventTarget) {
      agent.eatEvent(event)
    }
    this._compositionEventTarget = null
  }
};
AdfDhtmlPage._imeEchoKeyEventCallback = function(event) {
  AdfPage.PAGE._handleImeEchoKey(event)
};
AdfDhtmlPage.prototype._registerImeEnterKeyHandler = function(domDocument) {
  var eventTypes = AdfDhtmlPage._IME_ECHO_KEY_EVENTS;
  for(var typeIndex = 0;typeIndex < eventTypes.length;typeIndex++) {
    domDocument.addEventListener(eventTypes[typeIndex], AdfDhtmlPage._imeEchoKeyEventCallback, true)
  }
};
AdfDhtmlPage.prototype._unregisterImeEnterKeyHandler = function(domDocument) {
  var imeEchoKeyCallback = this._imeEchoKeyEventCallback;
  if(imeEchoKeyCallback) {
    var eventTypes = AdfDhtmlPage._IME_ECHO_KEY_EVENTS;
    for(var typeIndex = 0;typeIndex < eventTypes.length;typeIndex++) {
      domDocument.removeEventListener(eventTypes[typeIndex], imeEchoKeyCallback, true)
    }
    this._imeEchoKeyEventCallback = null
  }
};
AdfDhtmlPage.prototype.addPartialTargets = function(components) {
  var componentCount = arguments.length;
  if(componentCount > 0) {
    var partialTargets = this._partialTargets;
    if(partialTargets == null) {
      partialTargets = new Array;
      this._partialTargets = partialTargets
    }
    for(var i = 0;i < componentCount;i++) {
      var currComponent = arguments[i];
      AdfAssert.assertPrototype(currComponent, AdfUIComponent);
      var clientId = currComponent.getClientId();
      if(!(clientId in partialTargets)) {
        partialTargets[clientId] = true;
        partialTargets.push(clientId)
      }
    }
    this.__queueEventTimerIfNeeded()
  }
};
AdfDhtmlPage.prototype._scrubPartialTargets = function(oldPartialTargets) {
  var newPartialTargets = null;
  if(oldPartialTargets) {
    newPartialTargets = new Array;
    var oldCount = oldPartialTargets.length;
    for(var i = 0;i < oldCount;i++) {
      var oldClientId = oldPartialTargets[i];
      if(this.findComponent(oldClientId)) {
        newPartialTargets.push(oldClientId)
      }
    }
    if(!newPartialTargets.length) {
      newPartialTargets = null
    }
  }
  return newPartialTargets
};
AdfDhtmlPage.prototype.addComponents = function(components) {
  var domWindow = this.getDomWindow();
  if(this._perfProfileEnabled) {
    domWindow._afrTimingAddComponentsStart = (new Date).getTime()
  }
  var componentCount = arguments.length;
  for(var i = 0;i < componentCount;i++) {
    AdfAssert.assertPrototype(arguments[i], AdfUIComponent);
    arguments[i].AddNotify()
  }
  if(this._perfProfileEnabled) {
    domWindow._afrTimingAddComponentsEnd = (new Date).getTime()
  }
};
AdfDhtmlPage.prototype.addBusyStateListener = function(instance, listener) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assertObjectOrNull(instance);
  this._busyStateListeners = AdfEventUtils.addListener(this._busyStateListeners, instance, listener)
};
AdfDhtmlPage.prototype.removeBusyStateListener = function(instance, listener) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assertObjectOrNull(instance);
  this._busyStateListeners = AdfEventUtils.removeListener(this._busyStateListeners, listener)
};
AdfDhtmlPage.prototype._broadcastBusyStateEvent = function(newBusyState) {
  var oldBusyState = this._busyState;
  if(oldBusyState == newBusyState) {
    AdfLogger.LOGGER.finest("busy state event broadcast called without a change in state");
    return
  }
  this._busyState = newBusyState;
  if(this._busyStateListeners) {
    AdfEventUtils.deliverEventToListeners(this._busyStateListeners, new AdfBusyStateEvent(this, newBusyState))
  }
};
AdfDhtmlPage.prototype.__registerDescendantResizeNotifyComponent = function(component) {
  var componentList = this._descendantResizeNotifyList;
  var componentListSize = componentList.length;
  for(var i = 0;i < componentListSize;i++) {
    if(componentList[i].component == component) {
      return
    }
  }
  var componentNode = {component:component, depth:AdfDomUtils.getElementDepth(AdfRichUIPeer.getDomElementForComponent(component))};
  componentList.push(componentNode);
  if(componentList.length > 1) {
    this._descendantResizeNotifyListDirty = true
  }
  this._descendantResizeNotifyList = componentList
};
AdfDhtmlPage.prototype.__unregisterDescendantResizeNotifyComponent = function(component) {
  var componentList = this._descendantResizeNotifyList;
  var componentListSize = componentList.length;
  for(var i = 0;i < componentListSize;i++) {
    if(componentList[i].component == component) {
      componentList.splice(i, 1);
      return
    }
  }
};
AdfDhtmlPage.prototype.__queueDescendantResizeNotifySource = function(component) {
  var queue = this._descendantResizeNotifyQueue;
  var clientId = component.getClientId();
  if(queue == null) {
    queue = this._descendantResizeNotifyQueue = []
  }else {
    if(AdfCollections.indexOf(queue, clientId) != -1) {
      return
    }
  }
  queue.push(clientId)
};
AdfDhtmlPage.prototype.__doDescendantResizeNotify = function() {
  if(!this._descendantResizeNotifyQueue) {
    return
  }
  if(this._inDescendentResizeNotify) {
    return
  }
  this._inDescendentResizeNotify = true;
  try {
    while(this._descendantResizeNotifyQueue.length > 0) {
      this._doDescendantResizeNotifyOnQueue(this._descendantResizeNotifyQueue.splice(0, this._descendantResizeNotifyQueue.length))
    }
  }finally {
    delete this._inDescendentResizeNotify;
    delete this._descendantResizeNotifyQueue
  }
};
AdfDhtmlPage.prototype._doDescendantResizeNotifyOnQueue = function(descendantResizeNotifyQueue) {
  var queueSize = descendantResizeNotifyQueue.length;
  var componentList = this._descendantResizeNotifyList;
  var componentListSize = componentList.length;
  if(this._descendantResizeNotifyListDirty) {
    if(componentList.length > 1) {
      componentList.sort(AdfDhtmlPage._descendantResizeNotifyListComparator)
    }
    this._descendantResizeNotifyListDirty = false
  }
  for(var i = 0;i < componentListSize;i++) {
    var component = componentList[i].component;
    for(var j = 0;j < queueSize;j++) {
      var queuedComponent = this.findComponent(descendantResizeNotifyQueue[j]);
      if(queuedComponent && (queuedComponent == component || queuedComponent.isDescendant(component))) {
        this.doResizeNotify(component);
        break
      }
    }
  }
};
AdfDhtmlPage._descendantResizeNotifyListComparator = function(itemA, itemB) {
  var depthA = itemA.depth;
  var depthB = itemB.depth;
  if(depthA > depthB) {
    return-1
  }else {
    if(depthA < depthB) {
      return 1
    }
  }
  return 0
};
AdfDhtmlPage.prototype.registerResizeNotifyComponent = function(component) {
  var componentNode = {"component":component};
  var clientId = component.getClientId();
  var componentMap = this._resizeNotifyMap;
  componentMap[clientId] = componentNode;
  var parentComponentNode;
  var domNode = AdfRichUIPeer.getDomElementForComponent(component);
  AdfAssert.assertDomElement(domNode);
  if(domNode) {
    domNode = domNode.parentNode;
    while(domNode) {
      if(domNode.nodeType == 1) {
        var domId = domNode.id;
        parentComponentNode = componentMap[domId];
        if(parentComponentNode) {
          break
        }
      }
      domNode = domNode.parentNode
    }
    if(parentComponentNode == null) {
      parentComponentNode = this._resizeNotifyTree
    }
    if(parentComponentNode.children == null) {
      parentComponentNode.children = new Array
    }
    parentComponentNode.children.push(componentNode);
    componentNode.parent = parentComponentNode
  }
};
AdfDhtmlPage.prototype.unregisterResizeNotifyComponent = function(component) {
  var clientId = component.getClientId();
  var resizeNotifyMap = this._resizeNotifyMap;
  var resizeNotifyNode = resizeNotifyMap[clientId];
  if(resizeNotifyNode) {
    delete resizeNotifyMap[clientId];
    var parentResizeNotifyNode = resizeNotifyNode.parent;
    if(parentResizeNotifyNode) {
      AdfCollections.removeArrayValue(parentResizeNotifyNode.children, resizeNotifyNode)
    }
    delete resizeNotifyNode.parent;
    var children = resizeNotifyNode.children;
    if(children) {
      AdfAssert.assert(children.length == 0, "Unexpected number of children: " + children.length);
      delete resizeNotifyNode.children
    }
  }
};
AdfDhtmlPage.prototype.doResizeNotify = function(component) {
  var resizeNotifyNode;
  if(component == null) {
    resizeNotifyNode = this._resizeNotifyTree
  }else {
    var clientId = component.getClientId();
    resizeNotifyNode = this._resizeNotifyMap[clientId];
    AdfAssert.assert(resizeNotifyNode != null, "No resizeNotifyNode in map for:" + clientId)
  }
  AdfDhtmlPage._doResizeNotify(resizeNotifyNode, true)
};
AdfDhtmlPage.prototype.doResizeNotifyDom = function(domNode, forceResize) {
  var resizeNotifyMap = this._resizeNotifyMap;
  var resizeNotifyNode = resizeNotifyMap[domNode.id];
  if(resizeNotifyNode) {
    AdfDhtmlPage._doResizeNotify(resizeNotifyNode, forceResize);
    return
  }
  var parentNode = domNode.parentNode;
  while(parentNode) {
    resizeNotifyNode = resizeNotifyMap[parentNode.id];
    if(resizeNotifyNode) {
      break
    }
    parentNode = parentNode.parentNode
  }
  var checkDescendents = false;
  var zOrderManager;
  if(!resizeNotifyNode) {
    zOrderManager = this.getZOrderManager();
    if(zOrderManager) {
      checkDescendents = zOrderManager.containsElement(domNode)
    }
    resizeNotifyNode = this._resizeNotifyTree
  }
  this._doResizeNotifyDomChildren(domNode, resizeNotifyNode, checkDescendents);
  var positionManager = this.getPositionManager();
  if(checkDescendents && positionManager) {
    positionManager.resizeFloatingElement(domNode)
  }
};
AdfDhtmlPage.prototype._doResizeNotifyDomChildren = function(domNode, resizeNotifyNode, checkDescendents) {
  var agent = AdfAgent.AGENT;
  var children = resizeNotifyNode.children;
  if(children) {
    var rootDomNode = resizeNotifyNode.component ? AdfRichUIPeer.getDomElementForComponent(resizeNotifyNode.component) : null;
    var length = children.length;
    for(var i = 0;i < length;i++) {
      var child = children[i];
      var childId = child.component.getClientId();
      var childDomNode = agent.getElementById(childId);
      if(AdfDhtmlPage._isAncestorForResize(domNode, childDomNode, rootDomNode)) {
        AdfDhtmlPage._doResizeNotify(child, false)
      }else {
        if(checkDescendents) {
          this._doResizeNotifyDomChildren(domNode, child, true)
        }
      }
    }
  }
};
AdfDhtmlPage._isAncestorForResize = function(ancestorNode, node, rootNode) {
  AdfAssert.assertDomNode(node);
  AdfAssert.assertDomNode(ancestorNode);
  AdfAssert.assertDomNodeOrNull(rootNode);
  var parentNode = node.parentNode;
  while(parentNode) {
    if(parentNode == ancestorNode) {
      return true
    }
    if(parentNode == rootNode) {
      return false
    }
    if(AdfDhtmlPopupWindow.isPopupWindow(parentNode)) {
      return false
    }
    parentNode = parentNode.parentNode
  }
  return false
};
AdfDhtmlPage.prototype.addPropertyChangeListener = function(instance, listener) {
  AdfAssert.assertFunction(listener);
  this._propertyChangeListeners = AdfEventUtils.addListener(this._propertyChangeListeners, instance, listener)
};
AdfDhtmlPage.prototype.removePropertyChangeListener = function(instance, listener) {
  AdfAssert.assertFunction(listener);
  this._propertyChangeListeners = AdfEventUtils.removeListener(this._propertyChangeListeners, listener)
};
AdfDhtmlPage.prototype.__addPopupInfo = function(component, popupInfo) {
  var clientId = component.getClientId();
  var popupId = popupInfo.popupId;
  var popupInfos = this._poppedUpComponentInfo[clientId];
  if(!popupInfos) {
    this._poppedUpComponentInfo[clientId] = popupInfos = {}
  }
  popupInfos[popupId] = popupInfo;
  var editableSubtree = this.getEditableSubtree();
  if(editableSubtree) {
    var agent = AdfAgent.AGENT;
    var editableElement = agent.getElementById(editableSubtree.getClientId());
    var anchorElement = agent.getElementById(popupInfo.anchorId);
    if(anchorElement && AdfDhtmlPopupWindow.isAncestorOrSelf(editableElement, anchorElement)) {
      popupInfo.madeEditable = true;
      var popupContent = popupInfo.contentDom;
      this._filterEditableSubtree(popupContent, this._editableCallback, this._editableCallbackContext);
      AdfAgent.AGENT.addEventCaptures(popupContent, AdfDhtmlPage._inlineSelectionStub);
      AdfDomUtils.addCSSClassName(popupContent, "p_AFActiveInlineEditableContainer");
      AdfAgent.AGENT.setOpacity(popupContent, 100)
    }
  }
};
AdfDhtmlPage.prototype.__removePopupInfo = function(component, popupId) {
  var clientId = component.getClientId();
  var poppedUpComponentInfo = this._poppedUpComponentInfo;
  var popupInfos = poppedUpComponentInfo[clientId];
  var popupInfo = popupInfos[popupId];
  if(popupInfo.madeEditable) {
    var popupContent = popupInfo.contentDom;
    if(popupContent) {
      AdfAgent.AGENT.removeEventCaptures(popupContent, AdfDhtmlPage._inlineSelectionStub);
      AdfDomUtils.removeCSSClassName(popupContent, "p_AFActiveInlineEditableContainer")
    }
  }
  delete popupInfos[popupId];
  if(AdfCollections.isEmpty(popupInfos)) {
    delete poppedUpComponentInfo[clientId]
  }
};
AdfDhtmlPage.prototype.getSelectedEditingComponents = function() {
  var selectedClientIds = this._selectedEditingComponents;
  var selectedComponents = null;
  if(selectedClientIds) {
    selectedComponents = [];
    var selectionCount = selectedClientIds.length;
    for(var selectionIndex = 0;selectionIndex < selectionCount;selectionIndex++) {
      var selectedClientId = selectedClientIds[selectionIndex];
      var selectedComponent = this.findComponent(selectedClientId);
      if(selectedComponent) {
        selectedComponents.push(selectedComponent)
      }
    }
  }
  return selectedComponents
};
AdfDhtmlPage.prototype.setSelectedEditingComponents = function(newSelection) {
  AdfAssert.assertArrayOrNull(newSelection);
  var editableSubtrees = this._getEditableSubtrees(this._editableSubtreeId, false);
  var validSelection = [];
  for(var i = 0;i < editableSubtrees.length;i++) {
    var editableSubtreeDom = editableSubtrees[i];
    var currIntersectedSelection = this._intersectSelectionWithEditableSubtreeDom(editableSubtreeDom, newSelection);
    if(currIntersectedSelection) {
      var intersectedItemCount = currIntersectedSelection.length;
      for(var itemIndex = 0;itemIndex < intersectedItemCount;itemIndex++) {
        validSelection.push(currIntersectedSelection[itemIndex])
      }
    }
  }
  this._setSelectedEditingComponents(validSelection)
};
AdfDhtmlPage.prototype.getEditableSubtree = function() {
  var editableSubtreeId = this._editableSubtreeId;
  return editableSubtreeId != null ? this.findComponent(editableSubtreeId) : null
};
AdfDhtmlPage.prototype.setEditableSubtreeFilter = function(callback, context) {
  AdfAssert.assertFunctionOrNull(callback);
  this._editableCallback = callback;
  this._editableCallbackContext = context;
  var editableSubtreeId = this._editableSubtreeId;
  if(editableSubtreeId != null) {
    var editableSubtrees = this._getEditableSubtrees(editableSubtreeId, true);
    for(var i = 0;i < editableSubtrees.length;i++) {
      var editableSubtreeDom = editableSubtrees[i];
      this._unfilterEditableSubtree(editableSubtreeDom);
      this._filterEditableSubtree(editableSubtreeDom, callback, context)
    }
  }
};
AdfDhtmlPage.prototype._getEditableSubtrees = function(subtreeId, returnAnchors) {
  var subtrees = [];
  var agent = AdfAgent.AGENT;
  var subtreeDom = agent.getElementById(subtreeId);
  if(subtreeDom) {
    subtrees.push(subtreeDom);
    var poppedUpComponentInfo = this._poppedUpComponentInfo;
    for(var componentId in poppedUpComponentInfo) {
      var popupInfos = poppedUpComponentInfo[componentId];
      for(var popupId in popupInfos) {
        var currPopupInfo = popupInfos[popupId];
        var anchorId = currPopupInfo.anchorId;
        var anchorDom = agent.getElementById(anchorId);
        if(anchorDom && AdfDhtmlPopupWindow.isAncestorOrSelf(subtreeDom, anchorDom)) {
          var pushedPopup = returnAnchors ? anchorDom : currPopupInfo.contentDom;
          subtrees.push(pushedPopup)
        }
      }
    }
  }
  return subtrees
};
AdfDhtmlPage.prototype._unfilterEditableSubtree = function(subtree) {
  AdfAssert.assertDomElement(subtree);
  var subtreeId = subtree.id;
  if(subtreeId && this.findComponent(subtreeId)) {
    AdfDomUtils.removeCSSClassName(subtree, AdfDhtmlPage._SELECTABLE_STYLE);
    AdfDomUtils.removeCSSClassName(subtree, AdfDhtmlPage._EDITABLE_STYLE)
  }
  var currChild = subtree.firstChild;
  while(currChild) {
    if(currChild.nodeType == 1) {
      this._unfilterEditableSubtree(currChild)
    }
    currChild = currChild.nextSibling
  }
};
AdfDhtmlPage.prototype._getFilterResult = function(component, filterFunction, filterContext) {
  if(component.satisfiesUsage(AdfUIComponent.USAGE_PRIVATE_CHILD)) {
    return AdfRichInlineEditor.FILTER_UNSELECTABLE
  }else {
    if(filterFunction) {
      return filterFunction.call(filterContext, component)
    }else {
      return AdfRichInlineEditor.FILTER_EDITABLE
    }
  }
};
AdfDhtmlPage.prototype._filterComponent = function(component, domElement, filterFunction, filterContext) {
  var filterResult = this._getFilterResult(component, filterFunction, filterContext);
  if(filterResult) {
    var styleClass = AdfDhtmlPage._SELECTABLE_STYLE;
    if(filterResult == AdfRichInlineEditor.FILTER_EDITABLE) {
      var inlineEditor = component.getPeer().getInlineEditor(component, null);
      if(inlineEditor && inlineEditor.preEdit(component)) {
        styleClass = AdfDhtmlPage._EDITABLE_STYLE
      }
    }
    AdfDomUtils.addCSSClassName(domElement, styleClass)
  }
};
AdfDhtmlPage.prototype._getClientIdFromComment = function(comment) {
  var commentText = comment.nodeValue;
  if("compS|" == commentText.substring(0, 6)) {
    return commentText.substr(6)
  }else {
    return null
  }
};
AdfDhtmlPage.prototype._getComponentFromComment = function(comment) {
  var clientId = this._getClientIdFromComment(comment);
  if(clientId) {
    return this.findComponent(clientId)
  }else {
    return null
  }
};
AdfDhtmlPage.prototype._filterEditableSubtree = function(subtree, filterFunction, filterContext) {
  AdfAssert.assertDomElement(subtree);
  var subtreeId = subtree.id;
  if(subtreeId) {
    var component = this.findComponent(subtreeId);
    if(component) {
      this._filterComponent(component, subtree, filterFunction, filterContext)
    }
  }
  var currChild = subtree.firstChild;
  while(currChild) {
    var nodeType = currChild.nodeType;
    if(nodeType == 1) {
      this._filterEditableSubtreeWithElement(currChild, filterFunction, filterContext)
    }else {
      if(nodeType == 8) {
        this._filterEditableSubtreeWithComment(currChild, filterFunction, filterContext)
      }
    }
    currChild = currChild.nextSibling
  }
};
AdfDhtmlPage.prototype._filterEditableSubtreeWithElement = function(element, filterFunction, filterContext) {
  if(element.tagName === "NOSCRIPT") {
    var nextSibling = element.nextSibling;
    while(nextSibling && nextSibling.nodeType != 1) {
      nextSibling = nextSibling.nextSibling
    }
    if(nextSibling) {
      this._filterComponent(component, nextSibling, filterFunction, filterContext)
    }
  }else {
    this._filterEditableSubtree(element, filterFunction, filterContext)
  }
};
AdfDhtmlPage.prototype._filterEditableSubtreeWithComment = function(commentNode, filterFunction, filterContext) {
  var nonElementComponent = this._getComponentFromComment(commentNode);
  if(nonElementComponent) {
    var nextElement = commentNode.nextSibling;
    while(nextElement && nextElement.nodeType != 1) {
      nextElement = nextElement.nextSibling
    }
    if(nextElement) {
      this._filterComponent(nonElementComponent, nextElement, filterFunction, filterContext)
    }
  }
};
AdfDhtmlPage.prototype.setEditableSubtree = function(newEditableSubtree) {
  AdfAssert.assertPrototypeOrNull(newEditableSubtree, AdfUIComponent);
  var oldEditableSubtreeId = this._editableSubtreeId;
  var newEditableSubtreeId = newEditableSubtree ? newEditableSubtree.getClientId() : null;
  if(newEditableSubtreeId != oldEditableSubtreeId) {
    var oldEditableSubtree;
    var oldEditableSubtrees = this._getEditableSubtrees(oldEditableSubtreeId, true);
    var oldEditableSubtreeCount = oldEditableSubtrees.length;
    if(oldEditableSubtreeCount) {
      oldEditableSubtree = oldEditableSubtrees[0];
      for(var i = 0;i < oldEditableSubtreeCount;i++) {
        var oldSubtreeDom = oldEditableSubtrees[i];
        AdfAgent.AGENT.removeEventCaptures(oldSubtreeDom, AdfDhtmlPage._inlineSelectionStub);
        AdfDomUtils.removeCSSClassName(oldSubtreeDom, "p_AFActiveInlineEditableContainer");
        this._unfilterEditableSubtree(oldSubtreeDom)
      }
    }
    this._editableSubtreeId = newEditableSubtreeId;
    var newEditableSubtrees = this._getEditableSubtrees(newEditableSubtreeId, true);
    var editableSubtreeCount = newEditableSubtrees.length;
    var newSelection;
    if(editableSubtreeCount) {
      newSelection = this._intersectSelectionWithEditableSubtree(newEditableSubtree, this._selectedEditingComponents);
      for(i = 0;i < editableSubtreeCount;i++) {
        var newSubtreeDom = newEditableSubtrees[i];
        if(newSubtreeDom) {
          this._filterEditableSubtree(newSubtreeDom, this._editableCallback, this._editableCallbackContext);
          AdfAgent.AGENT.addEventCaptures(newSubtreeDom, AdfDhtmlPage._inlineSelectionStub);
          AdfDomUtils.addCSSClassName(newSubtreeDom, "p_AFActiveInlineEditableContainer")
        }
      }
    }
    this._setSelectedEditingComponents(newSelection);
    AdfEventUtils.firePropertyChangeEvent(this._propertyChangeListeners, this, AdfPage.EDITABLE_SUBTREE_PROPERTY, oldEditableSubtree, newEditableSubtree)
  }
};
AdfDhtmlPage.prototype.getEditedComponent = function() {
  var editedComponentId = this._editedComponentId;
  return editedComponentId != null ? this.findComponent(editedComponentId) : null
};
AdfDhtmlPage.prototype.setEditedComponent = function(newEditedComponent, event) {
  AdfAssert.assertPrototypeOrNull(newEditedComponent, AdfUIComponent);
  var newEditedComponentId;
  if(newEditedComponent != null) {
    newEditedComponentId = newEditedComponent.getClientId();
    var newEditedComponentElement = AdfRichUIPeer.getDomContentElementForComponent(newEditedComponent);
    if(!AdfDomUtils.containsCSSClassName(newEditedComponentElement, AdfDhtmlPage._EDITABLE_STYLE)) {
      newEditedComponentId = null;
      if(!AdfDomUtils.containsCSSClassName(newEditedComponentElement, AdfDhtmlPage._SELECTABLE_STYLE)) {
        newEditedComponent = null
      }
    }
  }else {
    newEditedComponentId = null
  }
  var newInlineEditor = null;
  if(newEditedComponentId != null) {
    newInlineEditor = newEditedComponent.getPeer().getInlineEditor(newEditedComponent, event);
    if(newInlineEditor == null) {
      newEditedComponentId = null;
      newEditedComponent = null
    }
  }
  var oldEditedComponentId = this._editedComponentId;
  var oldEditedComponent;
  if(oldEditedComponentId != newEditedComponentId) {
    oldEditedComponent = this.getEditedComponent();
    var oldInlineEditor = this._inlineEditor;
    if(oldInlineEditor != null) {
      oldInlineEditor.stopEdit()
    }
    this._editedComponentId = newEditedComponentId;
    this._inlineEditor = newInlineEditor
  }else {
    oldEditedComponent = newEditedComponent
  }
  if(newEditedComponent) {
    this.setSelectedEditingComponents([newEditedComponent])
  }
  if(oldEditedComponent != newEditedComponent) {
    if(newInlineEditor != null) {
      newInlineEditor.startEdit(newEditedComponent, event)
    }
    AdfEventUtils.firePropertyChangeEvent(this._propertyChangeListeners, this, AdfPage.EDITED_COMPONENT_PROPERTY, oldEditedComponent, newEditedComponent)
  }
};
AdfDhtmlPage.prototype.getDataTransferService = function(noCreate, adsDTS, uploadDTS) {
  var dts;
  if(adsDTS) {
    dts = this._adsDataTransferService
  }else {
    if(uploadDTS) {
      dts = this._uploadDataTransferService
    }else {
      dts = this._dataTransferService
    }
  }
  if(dts == null) {
    if(noCreate) {
      return null
    }
    if(this.isAttachmentMode()) {
      dts = new AdfOfflineDataTransferService(domWindow)
    }else {
      var domWindow = this.getDomWindow();
      dts = new AdfXmlHttpDataTransferService(domWindow)
    }
    if(adsDTS) {
      this._adsDataTransferService = dts
    }else {
      if(uploadDTS) {
        this._uploadDataTransferService = dts
      }else {
        this._dataTransferService = dts
      }
    }
    dts.addStateChangeListener(this._dtsStateChanged, this)
  }
  return dts
};
AdfDhtmlPage.prototype.getRestDataService = function() {
  if(!this._restDataService && window.AdfRestDataService) {
    this._restDataService = new AdfRestDataService
  }
  return this._restDataService
};
AdfDhtmlPage.prototype.getAutoDismissalManager = function() {
  var autoDismissalManager = this._autoDismissalManager;
  if(autoDismissalManager == null) {
    this._autoDismissalManager = autoDismissalManager = new AdfAutoDismissalManager
  }
  return autoDismissalManager
};
AdfDhtmlPage.prototype.getModalityManager = function() {
  var modalityManager = this._modalityManager;
  if(modalityManager == null) {
    this._modalityManager = modalityManager = new AdfDhtmlModalityManager
  }
  return modalityManager
};
AdfDhtmlPage.prototype.getPositionManager = function() {
  var positionManager = this._positionManager;
  if(positionManager == null) {
    this._positionManager = positionManager = new AdfDhtmlPositionManager
  }
  return positionManager
};
AdfDhtmlPage.prototype.getZOrderManager = function() {
  var zOrderManager = this._zOrderManager;
  if(zOrderManager == null) {
    this._zOrderManager = zOrderManager = new AdfDhtmlZOrderManager
  }
  return zOrderManager
};
AdfDhtmlPage.prototype.scheduleTimer = function(context, callback, state, delay, options) {
  AdfAssert.assertFunction(callback);
  AdfAssert.assertNumber(delay);
  var timers = AdfDhtmlPage._timers;
  var timerId = AdfDhtmlPage._nextTimerId++;
  var timerRecord = new Object;
  timerRecord[AdfDhtmlPage._TIMER_CONTEXT] = context;
  timerRecord[AdfDhtmlPage._TIMER_STATE] = state;
  timerRecord[AdfDhtmlPage._TIMER_CALLBACK] = callback;
  timerRecord[AdfDhtmlPage._TIMER_ID] = timerId;
  if(options && options[AdfDhtmlPage._TIMER_IS_SYNCHRONIZED] && (options[AdfDhtmlPage._TIMER_IS_SYNCHRONIZED] === "true" || options[AdfDhtmlPage._TIMER_IS_SYNCHRONIZED] === true)) {
    timerRecord[AdfDhtmlPage._TIMER_IS_SYNCHRONIZED] = true
  }
  timers[timerId] = timerRecord;
  timerRecord[AdfDhtmlPage._TIMER_DOM_ID] = this.getDomWindow().setTimeout("AdfDhtmlPage.__callTimerCallback(" + timerId + ");", delay);
  return timerId
};
AdfDhtmlPage.prototype.rescheduleTimer = function(timerId, delay) {
  AdfAssert.assertNumeric(timerId);
  AdfAssert.assertNumber(delay);
  timerId = timerId.valueOf();
  var timerRecord = AdfDhtmlPage._timers[timerId];
  if(timerRecord != null) {
    window.clearTimeout(timerRecord[AdfDhtmlPage._TIMER_DOM_ID]);
    timerRecord[AdfDhtmlPage._TIMER_DOM_ID] = this.getDomWindow().setTimeout("AdfDhtmlPage.__callTimerCallback(" + timerId + ");", delay)
  }else {
    AdfLogger.LOGGER.warning("Attempt to reschedule unknown timerId:", timerId)
  }
};
AdfDhtmlPage.prototype.cancelTimer = function(timerId) {
  AdfAssert.assertNumeric(timerId);
  timerId = timerId.valueOf();
  var timers = AdfDhtmlPage._timers;
  var timerRecord = timers[timerId];
  if(timerRecord != null) {
    this.getDomWindow().clearTimeout(timerRecord[AdfDhtmlPage._TIMER_DOM_ID]);
    delete timers[timerId]
  }else {
    AdfLogger.LOGGER.warning("Attempt to cancel unknown timerId:", timerId)
  }
};
AdfDhtmlPage.prototype._disposeTimers = function() {
  var timers = AdfDhtmlPage._timers;
  AdfDhtmlPage._timers = null;
  var theWindow = this.getDomWindow();
  for(var timerId in timers) {
    var timerRecord = timers[timerId];
    if(timerRecord != null) {
      try {
        theWindow.clearTimeout(timerRecord[AdfDhtmlPage._TIMER_DOM_ID])
      }catch(e) {
      }
    }
  }
};
AdfDhtmlPage.prototype._areSynchronousTimersCleared = function() {
  var timers = AdfDhtmlPage._timers;
  for(var timerId in timers) {
    var timerRecord = timers[timerId];
    if(timerRecord != null && timerRecord[AdfDhtmlPage._TIMER_IS_SYNCHRONIZED]) {
      return false
    }
  }
  return true
};
AdfDhtmlPage.__callTimerCallback = function(timerId) {
  AdfAssert.assertNumber(timerId);
  var timers = AdfDhtmlPage._timers;
  if(timers == null) {
    return
  }
  var timerRecord = timers[timerId];
  if(timerRecord == null) {
    return
  }
  var nextDelay;
  try {
    nextDelay = timerRecord[AdfDhtmlPage._TIMER_CALLBACK].call(timerRecord[AdfDhtmlPage._TIMER_CONTEXT], timerRecord[AdfDhtmlPage._TIMER_STATE])
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsWarning(e, " when calling timer callback")
  }
  AdfAssert.assertNumberOrNull(nextDelay);
  if(nextDelay == undefined || nextDelay < 0) {
    delete timers[timerId]
  }else {
    timerRecord[AdfDhtmlPage._TIMER_DOM_ID] = AdfPage.PAGE.getDomWindow().setTimeout("AdfDhtmlPage.__callTimerCallback(" + timerId + ");", nextDelay)
  }
};
AdfDhtmlPage.prototype._getAndClearDeltas = function(doClear) {
  var changedComponents = this.GetChangedComponents();
  if(changedComponents == null) {
    return null
  }
  var encodedChanges = new Array(50);
  var hasStartMap = false;
  var commaString = AdfStrings.COMMA;
  var equalsString = AdfStrings.EQUALS;
  var startCurlyBracketString = AdfStrings.START_CURLY_BRACKET;
  var closeCurlyBracketString = AdfStrings.CLOSE_CURLY_BRACKET;
  var equalsStartCurlyBracketString = "={";
  for(var key in changedComponents) {
    var component = changedComponents[key];
    var hasChanges = false;
    var propChanges = component.GetChanges();
    for(var propName in propChanges) {
      if(!hasChanges) {
        if(!hasStartMap) {
          encodedChanges.push(startCurlyBracketString);
          hasStartMap = true
        }else {
          encodedChanges.push(commaString)
        }
        encodedChanges.push(component.getClientId());
        encodedChanges.push(equalsStartCurlyBracketString);
        hasChanges = true
      }else {
        encodedChanges.push(commaString)
      }
      var propValue = propChanges[propName];
      var propName1 = propName;
      var suffixPosition = propName.length - 2;
      if(propName.lastIndexOf(AdfUIComponent._FLAG_PERSISTENCE) == suffixPosition) {
        propName1 = propName.substr(0, suffixPosition)
      }
      if(null != propValue) {
        if(propValue instanceof Date) {
          propValue = AdfAgent.AGENT.toISOString(propValue)
        }else {
          propValue = propValue.toString().replace(/\{/g, "%7B").replace(/\}/g, "%7D").replace(/\,/g, "%2C").replace(/\=/g, "%3D")
        }
      }
      encodedChanges.push(propName);
      encodedChanges.push(equalsString);
      encodedChanges.push(propValue)
    }
    if(hasChanges) {
      encodedChanges.push(closeCurlyBracketString)
    }
  }
  if(hasStartMap) {
    encodedChanges.push(closeCurlyBracketString)
  }
  if(doClear) {
    this.ClearChangesList()
  }
  return encodedChanges.join("")
};
AdfDhtmlPage.prototype.getResourceURL = function(path) {
  if(path.substring(0, 2) == "//") {
    return path.substring(1)
  }else {
    if(path.charAt(0) == "/") {
      return this._baseResourceUrl + path
    }else {
      return path
    }
  }
};
AdfDhtmlPage.prototype.removeResourceURL = function(resourcePath) {
  var baseResourceURL = this._baseResourceUrl;
  var startIndex = resourcePath.indexOf(baseResourceURL);
  if(startIndex >= 0) {
    return resourcePath.substr(startIndex + baseResourceURL.length)
  }else {
    if(resourcePath.charAt(0) == "/") {
      return"/" + resourcePath
    }else {
      return resourcePath
    }
  }
};
AdfDhtmlPage.prototype.getPPRContext = function() {
  return this._pprContext
};
AdfDhtmlPage.prototype.isCustomElementPostbackExcluded = function() {
  return this._excludeCustomPostback
};
AdfDhtmlPage.prototype.excludeCustomElementPostback = function() {
  this._excludeCustomPostback = true
};
AdfDhtmlPage._disposeIFrames = function(domDocument) {
  var iFrames = domDocument.getElementsByTagName("iframe");
  for(var f = iFrames.length - 1;f >= 0;f--) {
    var iFrame = iFrames[f];
    iFrame.parentNode.removeChild(iFrame)
  }
};
AdfDhtmlPage._forceGC = function(count) {
  var theArray = new Array(count);
  for(var i = 0;i < count;i++) {
    var innerCount = 1E4;
    var innerArray = new Array(innerCount);
    for(var j = 0;j < innerCount;j++) {
      innerArray[j] = j
    }
    theArray[i] = innerArray
  }
};
AdfDhtmlPage.prototype._onSelectStart = function() {
  if(this.isDragging()) {
    return false
  }
  var dndContext = this.getDnDContext();
  return!(dndContext && dndContext.isDragging())
};
AdfDhtmlPage.prototype._handleResize = function() {
  if(AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM) {
    if(!this._resizePending) {
      this._resizePending = true;
      setTimeout(this._getDelayedResizeCallback(), AdfDhtmlPage._DELAYED_RESIZE_TIMEOUT)
    }
  }else {
    this._onResize()
  }
};
AdfDhtmlPage.prototype._getDelayedResizeCallback = function() {
  if(!this._delayedResizeCallback) {
    this._delayedResizeCallback = this.createCallback(this._delayedOnResize)
  }
  return this._delayedResizeCallback
};
AdfDhtmlPage.prototype._delayedOnResize = function() {
  this._resizePending = false;
  this._onResize()
};
AdfDhtmlPage.prototype._onResize = function() {
  if(this.getPhase() != AdfPage.CREATE_VIEW_PHASE) {
    this._positionGlassPane(false);
    var resizeId = AdfDhtmlPage._BROWSER_RESIZE_CHECKPOINT.start();
    AdfDhtmlPage._doResizeNotify(this._resizeNotifyTree, false);
    AdfDhtmlPage._BROWSER_RESIZE_CHECKPOINT.stop(resizeId)
  }
};
AdfDhtmlPage.prototype.startDrag = function(evt, moveCallback, dropCallback, abortCallback, showGlassPane) {
  var agent = AdfAgent.AGENT;
  var pos = agent.getMousePosition(evt);
  this._dragStartX = pos.x;
  this._dragStartY = pos.y;
  this._dragLastX = this._dragStartX;
  this._dragLastY = this._dragStartY;
  this._moveCallback = moveCallback;
  this._dropCallback = dropCallback;
  this._abortCallback = abortCallback;
  this._dragHideGlassPane = showGlassPane;
  if(showGlassPane) {
    this.showGlassPane(this._dragDropCallbacks, "auto")
  }else {
    var callbacks = this._dragDropCallbacks;
    agent.startMouseEventCapture(callbacks);
    agent.startDocumentKeyEventCapture(callbacks, this._document.documentElement)
  }
};
AdfDhtmlPage.prototype._dragMouseMove = function(evt) {
  var moveCallback = this._moveCallback;
  var pos = AdfAgent.AGENT.getMousePosition(evt);
  if(moveCallback) {
    moveCallback(evt, pos.x - this._dragLastX, pos.y - this._dragLastY)
  }
  this._dragLastX = pos.x;
  this._dragLastY = pos.y
};
AdfDhtmlPage.prototype._dragMouseUp = function(evt) {
  var dropCallback = this._dropCallback;
  var pos = AdfAgent.AGENT.getMousePosition(evt);
  this.stopDrag();
  if(dropCallback) {
    dropCallback(evt, pos.x - this._dragStartX, pos.y - this._dragStartY)
  }
  this._dragLastX = pos.x;
  this._dragLastY = pos.y
};
AdfDhtmlPage.prototype._dragKeyDown = function(evt) {
  if(evt.keyCode == AdfKeyStroke.ESC_KEY) {
    var abortCallback = this._abortCallback;
    if(abortCallback) {
      this.stopDrag();
      abortCallback();
      AdfAgent.AGENT.eatEvent(evt);
      return false
    }
  }
};
AdfDhtmlPage.prototype.stopDrag = function() {
  if(this._dragHideGlassPane) {
    this.hideGlassPane(this._dragDropCallbacks)
  }else {
    var agent = AdfAgent.AGENT;
    var callbacks = this._dragDropCallbacks;
    agent.stopMouseEventCapture(callbacks);
    agent.endDocumentKeyEventCapture(callbacks, this._document.documentElement)
  }
  this._moveCallback = null;
  this._dropCallback = null;
  this._abortCallback = null
};
AdfDhtmlPage.prototype.isDragging = function() {
  return this._moveCallback ? true : false
};
AdfDhtmlPage.prototype.setOnLoadCallback = function(onLoadCallback) {
  this._onLoadCallback = onLoadCallback
};
AdfDhtmlPage.prototype.preloadImages = function() {
  this._preloadImages = true
};
AdfDhtmlPage.prototype.setExpectedWindowId = function(windowId) {
  this._expectedWindowId = windowId
};
AdfDhtmlPage.prototype.getActiveComponentId = function() {
  return this._activeComponentId
};
AdfDhtmlPage.prototype.getPreviouslyActiveComponentId = function() {
  return this._previouslyActiveComponentId
};
AdfDhtmlPage.prototype._setActiveComponentId = function(clientId) {
  var domElement = clientId != null ? AdfAgent.AGENT.getElementById(clientId) : null;
  this.__setActiveDomNodeInfo(domElement, clientId)
};
AdfDhtmlPage.prototype.getActiveDomElement = function() {
  return this._activeDomNode
};
AdfDhtmlPage.prototype.getActiveComponent = function() {
  var activeComponentId = this._activeComponentId;
  return activeComponentId != null ? this.findComponent(activeComponentId) : null
};
AdfDhtmlPage.prototype.__setActiveDomNodeInfo = function(domNode, clientId) {
  AdfAssert.assertDomNodeOrNull(domNode);
  AdfAssert.assertStringOrNull(clientId);
  if(domNode === undefined) {
    domNode = null
  }
  var oldActiveComponent = this.getActiveComponent();
  var oldActiveNode = this._activeDomNode;
  if(AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM && oldActiveNode && domNode && domNode.tagName == "BODY") {
    var zOrderManager = this.getZOrderManager();
    if(zOrderManager.containsElement(oldActiveNode)) {
      AdfFocusUtils.focusElementDelayed(oldActiveNode, 1);
      return false
    }
  }
  this._previouslyActiveComponentId = this._activeComponentId;
  this._activeDomNode = domNode;
  this._activeComponentId = clientId;
  AdfEventUtils.firePropertyChangeEvent(this._propertyChangeListeners, this, AdfDhtmlPage.ACTIVE_DOM_ELEMENT_PROPERTY, oldActiveNode, domNode);
  AdfEventUtils.firePropertyChangeEvent(this._propertyChangeListeners, this, AdfPage.ACTIVE_COMPONENT_PROPERTY, oldActiveComponent, this.getActiveComponent());
  return true
};
AdfDhtmlPage.prototype.queueEvent = function(event) {
  if(event) {
    AdfAssert.assertPrototype(event, AdfBaseEvent);
    if(this._partialRequestRedirect == true && AdfRedirectEvent.REDIRECT_EVENT_TYPE != event.getType()) {
      AdfLogger.LOGGER.info("Redirect in progress... refusing to queue event : ", event);
      return
    }
    if(this._isTrackingDirtyData() && AdfValueChangeEvent.VALUE_CHANGE_TYPE == event.getType()) {
      this._hasLocalUncommitted = true;
      this._uncommittedIds[event.getSource().getClientId()] = true
    }
    if(event.propagatesToServer() == true) {
      if(this._haveOutstandingPPRRequest !== undefined && this._haveOutstandingPPRRequest == true) {
        this.__perfTimings(false, false, true, "user click event : ", event)
      }else {
        this.__perfTimings(true, true, true, "user click event: ", event)
      }
    }
    if(AdfDhtmlPage._MSG_RESET_CLIENT_AND_SERVER === this._globalMessagesResetStrategy && event.getClearMessages()) {
      AdfLogger.LOGGER.fine("Page level messages cleared by the following event: ", event);
      var globalMessageKey = this._resolveMessageComponentId(null, false);
      AdfPage.PAGE.clearMessages(globalMessageKey)
    }
    if(event.isValidationNeeded()) {
      AdfLogger.LOGGER.fine("Client validation triggered by the following event: ", event);
      var sourceComponent = event.getSource();
      var isImmediate = event.isImmediate();
      if(!this._processValidators(sourceComponent, event.getRoot(), isImmediate)) {
        event.cancel();
        this.showMessages();
        AdfLogger.LOGGER.info("Client validation failed. The following event that triggered the validation was not queued as a result: ", event);
        return
      }
    }
    this._eventQueue.push(event);
    if(this.getPhase() != AdfPage.DELIVER_EVENTS_PHASE) {
      this.__queueEventTimerIfNeeded()
    }
  }
};
AdfDhtmlPage.prototype.__queueEventTimerIfNeeded = function(timeout) {
  this._updateDeliveryTimer(timeout)
};
AdfDhtmlPage.prototype.queueEventToServer = function(event) {
  AdfAssert.assert(!this._inDeliverQueuedServerEvents);
  if(event) {
    AdfAssert.assertPrototype(event, AdfBaseEvent);
    if(this._partialRequestRedirect == true && AdfRedirectEvent.REDIRECT_EVENT_TYPE != event.getType()) {
      AdfLogger.LOGGER.info("Redirect in progress... refusing to queue event : ", event);
      return
    }
    if(event.isResponseExpected() && event.getMaxTimeBeforePropagation() == 0) {
      var sourceComponent = event.getSource();
      var clientId = sourceComponent.getClientId();
      var busyCounts = this._busyCounts;
      var currBusyCount = busyCounts[clientId];
      if(!currBusyCount) {
        currBusyCount = 0;
        if(sourceComponent.getPeer()) {
          sourceComponent.getPeer().setBusy(sourceComponent, true)
        }
      }
      busyCounts[clientId] = currBusyCount + 1
    }
    this._serverQueue.push(event);
    if(this.getPhase() != AdfPage.DELIVER_EVENTS_PHASE) {
      this.__queueEventTimerIfNeeded()
    }
  }
};
AdfDhtmlPage.__setNonHtmlResponse = function(event) {
  event.forceFullSubmit();
  event.noResponseExpected()
};
AdfDhtmlPage.__setNonHtmlResponsePartialSubmit = function(event) {
  event.setPartial(true);
  event.noResponseExpected()
};
AdfDhtmlPage.__scrollComponentIntoView = function(clientId, focus) {
  AdfPage.PAGE.scheduleTimer(AdfPage.PAGE, AdfDhtmlPage._scrollComponentIntoView, {clientId:clientId, focus:focus}, 100)
};
AdfDhtmlPage._scrollComponentIntoView = function(argObj) {
  AdfPage.PAGE.findComponent(argObj.clientId).scrollIntoView(argObj.focus)
};
AdfDhtmlPage.prototype._processValidators = function(sourceComponent, rootComponent, onlyImmediate) {
  if(!rootComponent) {
    rootComponent = sourceComponent;
    while(true) {
      rootComponent = rootComponent.getParent();
      if(!rootComponent) {
        AdfLogger.LOGGER.severe("AdfDhtmlPage._processValidators: No form found");
        return true
      }
      if(rootComponent instanceof AdfRichForm || rootComponent.isEventRoot()) {
        break
      }
    }
  }
  var children = new Array(rootComponent);
  children = rootComponent.getDescendantComponents(children);
  var id = sourceComponent.getClientId();
  var colonIndex = id.lastIndexOf(":");
  var eventSourceSubformIds = new Array;
  while(colonIndex > 0) {
    id = id.substring(0, colonIndex);
    var ancestor = this.findComponent(id);
    if(ancestor != null && ancestor instanceof AdfRichSubform) {
      eventSourceSubformIds.push(id)
    }
    colonIndex = id.lastIndexOf(":")
  }
  var isValid = true;
  for(var index = 0;children && index < children.length;index++) {
    var currComponent = children[index];
    if(currComponent != null && currComponent instanceof AdfUIEditableValue) {
      if(onlyImmediate && !currComponent.getImmediate()) {
        continue
      }
      var tempSubformId = currComponent.getClientId();
      colonIndex = tempSubformId.lastIndexOf(":");
      var currCompSubformId = null;
      while(colonIndex > 0) {
        tempSubformId = tempSubformId.substring(0, colonIndex);
        var ancestor = this.findComponent(tempSubformId);
        if(ancestor != null && ancestor instanceof AdfRichSubform) {
          currCompSubformId = tempSubformId;
          break
        }
        colonIndex = tempSubformId.lastIndexOf(":")
      }
      var shouldValidate = true;
      if(currCompSubformId != null) {
        var numSubforms = eventSourceSubformIds.length;
        if(numSubforms > 0) {
          for(subformIdIndex = 0;subformIdIndex < numSubforms;subformIdIndex++) {
            if(currCompSubformId == eventSourceSubformIds[subformIdIndex]) {
              break
            }else {
              if(subformIdIndex == numSubforms - 1) {
                shouldValidate = false
              }
            }
          }
        }else {
          if(this.findComponent(currCompSubformId).getDefault() == false) {
            shouldValidate = false
          }
        }
      }
      if(shouldValidate) {
        if(currComponent.getValid() == true) {
          if(currComponent.getRequired()) {
            var currDomElement = AdfRichUIPeer.getDomElementForComponent(currComponent);
            if(AdfDomUtils.isInVisibleSubtree(currDomElement)) {
              currComponent.validate();
              if(currComponent.getValid() == false) {
                isValid = false
              }
            }
          }
        }else {
          var currDomElement = AdfRichUIPeer.getDomElementForComponent(currComponent);
          if(AdfDomUtils.isInVisibleSubtree(currDomElement)) {
            var currClientId = currComponent.getClientId();
            if(this.hasMessages(currClientId)) {
              isValid = false
            }else {
              currComponent.validate();
              if(!currComponent.getValid()) {
                if(this.hasMessages(currClientId)) {
                  isValid = false
                }else {
                  AdfLogger.LOGGER.severe("AdfDhtmlPage._processValidators: Ignoring that the component with the id '" + currClientId + "' is invalid because there are no messages to show the user.")
                }
              }
            }
          }
        }
      }
    }
  }
  return isValid
};
AdfDhtmlPage._timerDeliverEvents = function() {
  var instance = AdfPage.PAGE;
  instance._eventDispatcherID = undefined;
  instance._eventDispatcherTargetTime = undefined;
  instance._deliverAllQueuedEvents();
  var timeout = instance._serverQueue.getWaitingTimeout();
  if(timeout >= 0) {
    instance._updateDeliveryTimer(timeout)
  }
};
AdfDhtmlPage.prototype._updateDeliveryTimer = function(timeout) {
  if(timeout === undefined || timeout < 50) {
    timeout = 50
  }
  var alreadySet = false;
  var targetTime = (new Date).getTime() + timeout;
  if(this._eventDispatcherID !== undefined) {
    AdfAssert.assert(this._eventDispatcherTargetTime !== undefined);
    if(this._eventDispatcherTargetTime > targetTime) {
      this.cancelTimer(this._eventDispatcherID)
    }else {
      alreadySet = true
    }
  }
  if(!alreadySet) {
    this._eventDispatcherTargetTime = targetTime;
    var options = {};
    if(timeout <= 15E3) {
      options = {"isSynchronized":"true"}
    }
    this._eventDispatcherID = this.scheduleTimer(this, AdfDhtmlPage._timerDeliverEvents, null, timeout, options)
  }
};
AdfDhtmlPage.prototype._eventLoopDeliverEvents = function() {
  this._deliverAllQueuedEvents();
  var timeout = this._serverQueue.getWaitingTimeout();
  if(timeout >= 0) {
    this._updateDeliveryTimer(timeout)
  }else {
    if(this._eventDispatcherID !== undefined) {
      this.cancelTimer(this._eventDispatcherID);
      this._eventDispatcherID = undefined;
      this._eventDispatcherTargetTime = undefined
    }
  }
};
AdfDhtmlPage.prototype._deliverAllQueuedEvents = function() {
  this._deliverQueuedEvents();
  var dts = this.getDataTransferService();
  if(dts.getDTSState() == AdfDataTransferService.STATE_READY) {
    this._deliverQueuedServerEvents()
  }
};
AdfDhtmlPage.prototype._deliverQueuedEvents = function() {
  if(this._inDeliverQueuedEvents) {
    return
  }
  var eventQueue = this._eventQueue;
  try {
    this._inDeliverQueuedEvents = true;
    do {
      var event = eventQueue.shift();
      if(!event) {
        break
      }
      if(!(event instanceof AdfUIInputEvent)) {
        AdfLogger.LOGGER.fine("Broadcasting:", event)
      }
      event.getSource().broadcast(event)
    }while(true)
  }finally {
    this._inDeliverQueuedEvents = false
  }
};
AdfDhtmlPage.prototype._findFirstAdfForm = function() {
  var forms = this.getDomDocument().forms;
  var n = forms.length;
  for(var i = 0;i < n;i++) {
    var fe = forms[i];
    var feId = fe.id;
    if(feId && this.findComponent(feId)) {
      return fe
    }
  }
  return null
};
AdfDhtmlPage.prototype._deliverQueuedServerEvents = function(checkEventAndDelta, pageUnloading) {
  if(this.isAttachmentMode()) {
    return
  }
  if(this._partialRequestRedirect) {
    return
  }
  if(this.isPerformingFullSubmit()) {
    return
  }
  if(this._inDeliverQueuedServerEvents == true) {
    return
  }
  this._inDeliverQueuedServerEvents = true;
  var partialTargets = this._scrubPartialTargets(this._partialTargets);
  var hasActiveDataStart = this._startADSClientIdCount > 0 && this._canReceiveActiveDataCount > 0;
  var stopADSClientIds = this._stopADSClientIds;
  var hasActiveDataStartStop = hasActiveDataStart || stopADSClientIds.length > 0;
  var hasNoActiveComponents = AdfCollections.isEmpty(this._getClientStateMap());
  var windowEventHeaderMap = this._windowEventHeaderMap;
  var hasWindowEvent = windowEventHeaderMap != null;
  if(pageUnloading) {
    if(!hasWindowEvent) {
      windowEventHeaderMap = this._windowEventHeaderMap = {}
    }
    windowEventHeaderMap["Adf-Property-Delta-Sync"] = "true"
  }
  this._serverQueue.validate();
  var hasEvents = this._serverQueue.hasEventsToDeliver();
  var hasNonEventPayload = partialTargets != null || hasActiveDataStartStop || hasWindowEvent;
  var responseAnnounced = false;
  if(!hasEvents && !hasNonEventPayload && !checkEventAndDelta) {
    this._inDeliverQueuedServerEvents = false;
    return
  }
  var params = {};
  var eventProperties = {};
  var doPartialSubmit = true;
  var formElement = null;
  var formElementFunc = AdfDhtmlPage._getFormElement;
  var commaString = ",";
  var forcePprForActions = 0 != (this.getPPRNavigationOptions() & AdfDhtmlPage.PPR_NAVIGATION_FORCE_PPR);
  var fullSubmitChanged = false;
  if(this.isUserActivityMonitoringOn() && hasNoActiveComponents) {
    var userActivityInfo = AdfUserActivityInfo.getInstance(AdfUserActivityInfo.PRIMARY)
  }
  if(partialTargets != null) {
    var partialTargetsString = partialTargets.join(commaString);
    params[AdfDhtmlPage.PARTIAL_TARGETS_PARAM] = partialTargetsString;
    if(this.isUserActivityMonitoringOn() && hasNoActiveComponents) {
      userActivityInfo.setPprTargets(partialTargetsString)
    }
    formElement = formElementFunc(this.findComponent(partialTargets[0]));
    this._partialTargets = null
  }
  var shouldClearDelta = hasEvents || params[AdfDhtmlPage.PARTIAL_TARGETS_PARAM] != null;
  var deltas = this._getAndClearDeltas(shouldClearDelta);
  if(deltas) {
    params["oracle.adf.view.rich.DELTAS"] = deltas
  }else {
    if(!hasEvents && !hasNonEventPayload || pageUnloading) {
      this._inDeliverQueuedServerEvents = false;
      return
    }
  }
  var isUserInputPrevented = false;
  var clientEventsSet = new Object;
  var eventQueue = this._serverQueue.shiftEvents(hasNonEventPayload, deltas);
  var noResponseEvent = null;
  var eventCount = eventQueue.length;
  if(eventCount == 1) {
    var evt = eventQueue[0];
    if(!evt.isResponseExpected()) {
      noResponseEvent = evt
    }
  }
  var eventTargets = [];
  var onlyProcess = [];
  var isUserActivityInfoEventSet = false;
  for(var c = eventCount - 1;c >= 0;c--) {
    var currEvent = eventQueue[c];
    var type = currEvent.getType();
    clientEventsSet[type] = type;
    var eventComponent = currEvent.getSource();
    var clientId = eventComponent.getClientId();
    if(!responseAnnounced) {
      responseAnnounced = currEvent.isResponseAnnounced()
    }
    var currFormElement = formElementFunc(eventComponent);
    if(formElement == null) {
      formElement = currFormElement
    }
    if(formElement == currFormElement) {
      if(clientId) {
        if(!(clientId in eventProperties)) {
          eventTargets.push(clientId)
        }
        var eventProps = currEvent.getProperties();
        var list = eventProperties[clientId];
        if(!list) {
          list = [];
          eventProperties[clientId] = list
        }else {
          if(list[type]) {
            continue
          }
        }
        list[type] = true;
        var extraServerParams = currEvent["_adfServerParams"];
        if(extraServerParams) {
          params = AdfCollections.copyInto(extraServerParams, params)
        }
        list.unshift(eventProps);
        if(this.isUserActivityMonitoringOn() && hasNoActiveComponents && !isUserActivityInfoEventSet) {
          userActivityInfo.setEventInfo(currEvent.getType(), clientId, eventComponent.getComponentType(), eventComponent.getAccessibleName())
        }
      }else {
        AdfLogger.LOGGER.severe("Can not post events for ", component, " because it has no clientId")
      }
      var currPartial = currEvent.isPartial() && !currEvent.isFullSubmitForced();
      isUserInputPrevented = isUserInputPrevented || currEvent.IsUserInputPrevented();
      if(forcePprForActions && !currPartial && type == AdfActionEvent.ACTION_EVENT_TYPE && !currEvent.isFullSubmitForced()) {
        currPartial = true;
        fullSubmitChanged = true
      }
      doPartialSubmit &= currPartial
    }else {
      AdfLogger.LOGGER.severe("Only submits to a single form are currently supported")
    }
    var currEventRoot = currEvent.getRoot();
    if(currEventRoot) {
      if(!(onlyProcess === null)) {
        onlyProcess.push(currEventRoot.getClientId())
      }
    }else {
      onlyProcess = null
    }
    if(this.isUserActivityMonitoringOn() && hasNoActiveComponents && !isUserActivityInfoEventSet) {
      var currStartTime = (new Date).getTime().toString();
      userActivityInfo.setClientStartTime(currStartTime);
      AdfUserActivityInfo.saveToSessionStorageByType(AdfUserActivityInfo.PRIMARY);
      params["oracle.adf.view.rich.monitoring.UserActivityInfo"] = AdfUserActivityInfo.getMarshaledObject();
      isUserActivityInfoEventSet = true
    }
  }
  params["event"] = eventTargets.join(commaString);
  for(var id in eventProperties) {
    params["event." + id] = this._marshallMultipleEventParameters(eventProperties[id])
  }
  var headerParams = null;
  if(hasActiveDataStartStop) {
    if(hasActiveDataStart) {
      var startADSClientIds = this._startADSClientIds;
      this._startADSClientIds = new Object;
      this._startADSClientIdCount = 0;
      var startActiveDataArray = new Array;
      var startActiveDataEventIdArray = new Array;
      var activeComponents = this._activeComponents;
      for(currClientId in startADSClientIds) {
        if(formElement == null) {
          formElement = formElementFunc(this.findComponent(currClientId))
        }
        startActiveDataArray.push(currClientId);
        startActiveDataEventIdArray.push(activeComponents[currClientId].changeCount)
      }
      params["oracle.adf.view.rich.START_ACTIVE_DATA"] = startActiveDataArray.join(commaString);
      params["oracle.adf.view.rich.START_ACTIVE_DATA_EVENT_IDS"] = startActiveDataEventIdArray.join(commaString)
    }
    if(stopADSClientIds.length > 0) {
      this._stopADSClientIds = new Array;
      params["oracle.adf.view.rich.STOP_ACTIVE_DATA"] = stopADSClientIds.join(commaString);
      if(!hasEvents) {
        this.__perfTimings(false, false, true, "user click event: ", "oracle.adf.view.rich.STOP_ACTIVE_DATA")
      }
    }
  }
  if(formElement == null) {
    formElement = this._findFirstAdfForm();
    if(!formElement) {
      this._inDeliverQueuedServerEvents = false;
      return
    }
  }
  AdfAssert.assert(formElement, "No form found;  cannot postback");
  if(hasWindowEvent || pageUnloading) {
    if(!headerParams) {
      headerParams = new Object
    }
    headerParams = AdfCollections.copyInto(headerParams, this._windowEventHeaderMap);
    delete this._windowEventHeaderMap;
    if(formElement && headerParams["Adf-Window-Opened"] == "true") {
      formElement.action = this.getDomWindow().location.href
    }
  }
  headerParams = this._addPageId(headerParams);
  var isMultipartForm = AdfDomUtils.getMultiPartForm(formElement) != null;
  if(isMultipartForm) {
    if(pageUnloading) {
      formElement.setAttribute("enctype", "application/x-www-form-urlencoded")
    }
  }
  if(this.isPortlet() && isMultipartForm) {
    doPartialSubmit = false
  }
  var processParam = null;
  if(noResponseEvent != null) {
    processParam = noResponseEvent.getSource().getClientId()
  }else {
    if(doPartialSubmit && onlyProcess && onlyProcess.length) {
      processParam = onlyProcess.join(commaString)
    }
  }
  if(processParam != null) {
    params["oracle.adf.view.rich.PROCESS"] = processParam
  }
  if(doPartialSubmit && fullSubmitChanged) {
    params["oracle.adf.view.rich.PPR_FORCED"] = "true"
  }
  var context = new Object;
  context._responseAnnounced = responseAnnounced;
  context._clientEventsSet = clientEventsSet;
  if(noResponseEvent != null) {
    isUserInputPrevented = false;
    context._noResponseExpected = true
  }else {
    if(this._serverQueue.hasEventsToDeliver()) {
      isUserInputPrevented = true
    }
  }
  if(doPartialSubmit) {
    this._doRichPostback(formElement, params, headerParams, isUserInputPrevented, context, eventTargets);
    this.__perfTimings(false, false, true, "deliver PPR request. Event: ", params.event);
    this._haveOutstandingPPRRequest = true
  }else {
    this._waitingForDocumentUnload = noResponseEvent == null;
    this.__perfTimings(false, false, true, "deliver full postback request. Event: ", params.event);
    this._notifyOfUnload = false;
    this._doFullPostback(formElement, params, isUserInputPrevented)
  }
  this._inDeliverQueuedServerEvents = false
};
AdfDhtmlPage.prototype._sendRichPayload = function(params, context) {
  AdfAssert.assert(params, "Attempting to send null payload");
  var formElement = this.getDomDocument().forms[0];
  AdfAssert.assert(formElement, "No form found;  cannot postback");
  var headerParams = this._addPageId(null);
  AdfDhtmlPage._addStateParameter(formElement, params);
  this._doRichPostback(formElement, params, headerParams, false, context, null, null)
};
AdfDhtmlPage.prototype._addPageId = function(headerParams) {
  if(!headerParams) {
    headerParams = new Object
  }
  if(this._getPageId() != null) {
    headerParams["Adf-Ads-Page-Id"] = this._getPageId()
  }
  return headerParams
};
AdfDhtmlPage.__addServerParamsToEvent = function(event, params) {
  if(params) {
    event["_adfServerParams"] = params
  }
};
AdfDhtmlPage.prototype.deliverEventToNewWindow = function(event) {
  var eventComponent = event.getSource();
  var clientId = eventComponent.getClientId();
  var params = {event:clientId};
  params["event." + clientId] = this._marshallMultipleEventParameters(new Array(event.getProperties()));
  var deltas = this._getAndClearDeltas(false);
  if(deltas) {
    params["oracle.adf.view.rich.DELTAS"] = deltas
  }
  var formElement = AdfDhtmlPage._getFormElement(eventComponent);
  var oldTarget = formElement.hasAttribute("target") ? formElement.getAttribute("target") : "";
  formElement.setAttribute("target", AdfDhtmlPage._PRINTABLE_WINDOW_NAME);
  this._doFullPostback(formElement, params, false);
  formElement.setAttribute("target", oldTarget)
};
AdfDhtmlPage.prototype._marshallMultipleEventParameters = function(paramList) {
  var agent = AdfAgent.AGENT;
  var doc = agent.createXmlDocument();
  var parentNode = doc.createElement("TEMP");
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM) {
    doc.documentElement = parentNode
  }else {
    doc.appendChild(parentNode)
  }
  var params;
  if(paramList.length > 1) {
    params = paramList
  }else {
    params = paramList[0]
  }
  var node = AdfMarshalingService.getDefault().marshal(parentNode, params, null);
  return agent.getNodeXml(node)
};
AdfDhtmlPage.prototype.removeComponentsInSubtree = function(targetDomNode) {
  try {
    if(targetDomNode.nodeType == 1 && targetDomNode.id == AdfDhtmlPage._NAVIGATION_WRAPPER_ID) {
      this.clearAllMessages();
      for(var currClientId in this._clientIdToComponentMap) {
        var currComponent = this._clientIdToComponentMap[currClientId];
        if(currComponent != null) {
          currComponent.RemoveNotify()
        }
      }
    }else {
      var depthArrays = new Array;
      this._postOrderPopulate(targetDomNode, 0, depthArrays, false);
      for(var currDepth = depthArrays.length - 1;currDepth >= 0;currDepth--) {
        var currDepthArray = depthArrays[currDepth];
        if(currDepthArray != null) {
          var removeCount = currDepthArray.length;
          for(var removeIndex = 0;removeIndex < removeCount;removeIndex++) {
            var currClientId = currDepthArray[removeIndex];
            var currComponent = this.findComponent(currClientId);
            if(currComponent != null) {
              currComponent.RemoveNotify()
            }
          }
        }
      }
    }
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsSevere(e, "remove components in subtree")
  }
};
AdfDhtmlPage.prototype.ComponentsInSubtreeCallback = function(targetDomElement, callback, callbackParameters) {
  var depthArrays = new Array;
  this._postOrderPopulate(targetDomElement, 0, depthArrays, false);
  for(var currDepth = depthArrays.length - 1;currDepth >= 0;currDepth--) {
    var currDepthArray = depthArrays[currDepth];
    if(currDepthArray != null) {
      var count = currDepthArray.length;
      for(var index = 0;index < count;index++) {
        var currClientId = currDepthArray[index];
        var currComponent = this.findComponent(currClientId);
        if(currComponent != null) {
          callback(currComponent, callbackParameters)
        }
      }
    }
  }
};
AdfDhtmlPage.cancelAllPopupsCallback = function(currComponent, callbackParameters) {
  var peer = currComponent.getPeer();
  if(peer) {
    peer.cancelAllPopups(currComponent, true)
  }
};
AdfDhtmlPage.prototype._postOrderPopulatePopupContent = function(clientId, depth, depthArrays, ignoreHidden) {
  var popupList = this._poppedUpComponentInfo[clientId];
  if(popupList) {
    for(var popupId in popupList) {
      var popupInfo = popupList[popupId];
      var contentDom = popupInfo.contentDom;
      var child = contentDom.firstChild;
      while(child) {
        this._postOrderPopulate(child, depth + 1, depthArrays, ignoreHidden);
        child = child.nextSibling
      }
    }
  }
};
AdfDhtmlPage.prototype._postOrderPopulateComponent = function(clientId, depth, depthArrays, ignoreHidden) {
  if(!clientId) {
    return
  }
  var component = this.findComponent(clientId);
  if(!component) {
    return
  }
  this._postOrderPopulatePopupContent(clientId, depth, depthArrays, ignoreHidden);
  var ourArray = depthArrays[depth];
  if(ourArray == null) {
    ourArray = new Array(clientId);
    depthArrays[depth] = ourArray
  }else {
    ourArray.push(clientId)
  }
};
AdfDhtmlPage.prototype._postOrderPopulate = function(targetNode, depth, depthArrays, ignoreHidden) {
  AdfAssert.assertDomNode(targetNode);
  var nodeType = targetNode.nodeType;
  if(nodeType == 8) {
    var clientId = this._getClientIdFromComment(targetNode);
    if(clientId) {
      this._postOrderPopulateComponent(clientId, depth, depthArrays, ignoreHidden)
    }
  }else {
    if(nodeType == 1 && (!ignoreHidden || AdfDomUtils.isVisible(targetNode))) {
      var currChild = targetNode.firstChild;
      if(currChild != null) {
        var childDepth = depth + 1;
        do {
          switch(currChild.nodeType) {
            case 1:
            ;
            case 8:
              this._postOrderPopulate(currChild, childDepth, depthArrays, ignoreHidden);
              break
          }
          currChild = currChild.nextSibling
        }while(currChild != null)
      }
      this._postOrderPopulateComponent(targetNode.id, depth, depthArrays, ignoreHidden)
    }
  }
};
AdfDhtmlPage.prototype.__checkRichResponseDirty = function() {
  var pprDirty = this._isRichResponseDirty();
  if(pprDirty) {
    this.getDomWindow().location.reload(true);
    return true
  }
  return false
};
AdfDhtmlPage._removeFrameBusting = function() {
  var styleNode = document.getElementById("adfFrameBustStyle");
  if(styleNode) {
    styleNode.parentNode.removeChild(styleNode)
  }
};
AdfDhtmlPage._handleMessage = function(event) {
  if("_adfShowBody" === event.data) {
    var origin = event.origin;
    var page = AdfPage.PAGE;
    var allowedOrigins = page._allowedOrigins;
    var originCount = allowedOrigins.length;
    for(var i = 0;i < originCount;i++) {
      var originMatcher = allowedOrigins[i];
      if(originMatcher.test(origin)) {
        AdfDhtmlPage._removeFrameBusting();
        AdfDhtmlPage._doResizeNotify(page._resizeNotifyTree);
        break
      }
    }
  }
};
AdfDhtmlPage.prototype.__setUpFrameBusting = function(whiteListPatterns) {
  if(self == top) {
    AdfDhtmlPage._removeFrameBusting()
  }else {
    if(whiteListPatterns) {
      window.addEventListener("message", AdfDhtmlPage._handleMessage);
      var patternCount = whiteListPatterns.length;
      var whiteListRegExps = new Array;
      for(var i = 0;i < patternCount;i++) {
        whiteListRegExps[i] = new RegExp(whiteListPatterns[i], "i")
      }
      this._allowedOrigins = whiteListRegExps
    }
  }
};
AdfDhtmlPage.prototype.__onLoad = function() {
  var domWindow = this.getDomWindow();
  var agent = AdfAgent.AGENT;
  try {
    if(this._perfProfileEnabled) {
      domWindow._afrTimingOnLoadEnd = (new Date).getTime()
    }
    var loadId = AdfDhtmlPage._LOAD_CHECKPOINT.start();
    var domDocument = this.getDomDocument();
    this._registerImeEnterKeyHandler(domDocument);
    var redistributeEvents = this.createCallback(this._redistribute);
    agent.addEventBubbles(domDocument, redistributeEvents);
    this._redistributeEventsCallback = redistributeEvents;
    this._touchContextMenuManager = agent.createContextMenuEventGenerator();
    agent.addKeyEventListener(domDocument, AdfDhtmlPage._keyEventCallback);
    this._onBeforeUnloadCallback = this.createCallback(this._handleBeforeUnload);
    agent.addBubbleEventListener(domWindow, "beforeunload", this._onBeforeUnloadCallback);
    if(this._perfProfileEnabled) {
      domWindow._afrTimingResizeStart = (new Date).getTime()
    }
    AdfDhtmlPage._doResizeNotify(this._resizeNotifyTree);
    if(this._perfProfileEnabled) {
      domWindow._afrTimingResizeEnd = (new Date).getTime()
    }
    this._loadedLibraries = this._collectLoadedLibraries();
    this._loadedCss = this._collectCss();
    if(!(this._expectedWindowId === undefined)) {
      if(!domWindow.name || domWindow.name == "" || domWindow.name == "_adfvdlg") {
        var isDialog = false;
        if(domWindow.name && domWindow.name == "_adfvdlg" || domWindow.location.href && domWindow.location.href.indexOf("__ADFvDlg__")) {
          isDialog = true
        }
        this._stopGlobalActiveData();
        this._notifyWindowOpened(isDialog)
      }
    }
    if(this._preloadImages) {
      this._forcePreloadOfAllImages()
    }
    var onLoadCallback = this._onLoadCallback;
    if(onLoadCallback) {
      var callbackId = AdfDhtmlPage._CALLBACK_CHECKPOINT.start();
      onLoadCallback();
      AdfDhtmlPage._CALLBACK_CHECKPOINT.stop(callbackId)
    }
  }finally {
    var splashScreenElement = agent.getElementById("afr::Splash");
    if(splashScreenElement) {
      splashScreenElement.style.display = "none"
    }
    this.SetPhase(AdfPage.WAITING_FOR_USER_INPUT_PHASE)
  }
  this._initializationComplete = true;
  this._startGlobalActiveData();
  this._inAppNavigationFlag = false;
  AdfDhtmlPage._LOAD_CHECKPOINT.stop(loadId);
  this._restorePreviousUserActivityData();
  this._partialRequestRedirect = false;
  var navAgent = AdfNavigationHistoryAgent.getInstance();
  if(navAgent && navAgent.isInitialized()) {
    navAgent.startTrackingURI(this)
  }
  this._onLoadPerfTimings();
  AdfLogger.LOGGER.getLogWriter().flush()
};
AdfDhtmlPage.prototype.setFacesPath = function(path) {
  this._facesPath = path;
  AdfNavigationHistoryAgent.getInstance().setFacesPath(path)
};
AdfDhtmlPage.prototype.loadView = function(viewId, params, loadId) {
  var uri;
  if(viewId == null) {
    uri = this.getDomWindow().location.href;
    var hashIndex = uri.indexOf("#");
    if(hashIndex >= 0) {
      uri = uri.substring(0, hashIndex)
    }
  }else {
    uri = this._facesPath + viewId;
    if(params) {
      uri += params
    }
  }
  this._blockUI(true);
  this.getDataTransferService().sendRequest({_loadId:loadId}, uri, null, "_", [this])
};
AdfDhtmlPage.prototype._onLoadPerfTimings = function() {
  if(this._perfProfileEnabled) {
    var domWindow = this.getDomWindow();
    var preLoadStart = domWindow._afrTimingPreLoadStart;
    var loadEnd = (new Date).getTime();
    var coreLibraryPartitionLoadStart = domWindow._afrTimingCoreLibraryPartitionLoadStart;
    var coreLibraryPartitionLoadEnd = domWindow._afrTimingCoreLibraryPartitionLoadEnd;
    var coreLibraryPartitionLoadTime = coreLibraryPartitionLoadEnd - coreLibraryPartitionLoadStart;
    var bootstrapLibraryPartitionLoadStart = domWindow._afrTimingBootstrapLibraryPartitionLoadStart;
    var bootstrapLibraryPartitionLoadEnd = domWindow._afrTimingBootstrapLibraryPartitionLoadEnd;
    var bootstrapLibraryPartitionLoadTime = bootstrapLibraryPartitionLoadEnd - bootstrapLibraryPartitionLoadStart;
    var libraryPartitionsLoadStart = domWindow._afrTimingLibraryPartitionsLoadStart;
    var libraryPartitionsLoadEnd = domWindow._afrTimingLibraryPartitionsLoadEnd;
    var libraryPartitionsLoadTime = libraryPartitionsLoadEnd - libraryPartitionsLoadStart;
    var skinLoadStart = domWindow._afrTimingSkinLoadStart;
    var skinLoadEnd = domWindow._afrTimingSkinLoadEnd;
    var skinLoadTime = skinLoadEnd - skinLoadStart;
    var coreLibraryLoadStart = domWindow._afrTimingCoreLibraryLoadStart;
    var coreLibraryLoadEnd = domWindow._afrTimingCoreLibraryLoadEnd;
    var coreLibraryLoadTime = coreLibraryLoadEnd - coreLibraryLoadStart;
    var profilerLibraryLoadStart = domWindow._afrTimingProfilerLibraryLoadStart;
    var profilerLibraryLoadEnd = domWindow._afrTimingProfilerLibraryLoadEnd;
    var profilerLibraryLoadTime = profilerLibraryLoadEnd - profilerLibraryLoadStart;
    var preludeStart = domWindow._afrTimingPreludeStart;
    var preludeEnd = domWindow._afrTimingPreludeEnd;
    var preludeTime = preludeEnd - preludeStart;
    var profilerScriptLoadStart = domWindow._afrTimingProfilerScriptLoadStart;
    var profilerScriptLoadEnd = domWindow._afrTimingProfilerScriptLoadEnd;
    var profilerScriptLoadTime = profilerScriptLoadEnd - profilerScriptLoadStart;
    var translationsLoadStart = domWindow._afrTimingTranslationsLoadStart;
    var translationsLoadEnd = domWindow._afrTimingTranslationsLoadEnd;
    var translationsLibraryLoadTime = translationsLoadEnd - translationsLoadStart;
    var elementsAddedStart = domWindow._afrTimingElementsAddedStart;
    var elementsAddedEnd = domWindow._afrTimingElementsAddedEnd;
    var elementsAddedTime = elementsAddedEnd - elementsAddedStart;
    var encodeComponentsStart = domWindow._afrTimingEncodeComponentsStart;
    var encodeComponentsEnd = domWindow._afrTimingEncodeComponentsEnd;
    var encodeComponentsTime = encodeComponentsEnd - encodeComponentsStart;
    var renderSkinPropertiesStart = domWindow._afrTimingRenderSkinPropertiesStart;
    var renderSkinPropertiesEnd = domWindow._afrTimingRenderSkinPropertiesEnd;
    var renderSkinPropertiesTime = renderSkinPropertiesEnd - renderSkinPropertiesStart;
    var addComponentsStart = domWindow._afrTimingAddComponentsStart;
    var addComponentsEnd = domWindow._afrTimingAddComponentsEnd;
    var addComponentsTime = addComponentsEnd - addComponentsStart;
    var extendedScriptsExecuteStart = domWindow._afrTimingExtendedScriptsExecuteStart;
    var extendedScriptsExecuteEnd = domWindow._afrTimingExtendedScriptsExecuteEnd;
    var extendedScriptsExecuteTime = extendedScriptsExecuteEnd - extendedScriptsExecuteStart;
    var loadScriptLoadStart = domWindow._afrTimingLoadScriptLoadStart;
    var loadScriptLoadEnd = domWindow._afrTimingLoadScriptLoadEnd;
    var loadScriptLoadTime = loadScriptLoadEnd - loadScriptLoadStart;
    var extendedScriptsLoadStart = domWindow._afrTimingExtendedScriptsLoadStart;
    var extendedScriptsLoadEnd = domWindow._afrTimingExtendedScriptsLoadEnd;
    var extendedScriptsLoadTime = extendedScriptsLoadEnd - extendedScriptsLoadStart;
    var pprScriptsLoadStart = domWindow._afrTimingPPRNavInitScriptStart;
    var pprScriptsLoadEnd = domWindow._afrTimingPPRNavInitScriptEnd;
    var pprScriptsLoadTime = pprScriptsLoadEnd - pprScriptsLoadStart;
    var createComponentsTime = encodeComponentsTime - addComponentsTime;
    var htmlLayoutTime = libraryPartitionsLoadStart - translationsLoadEnd;
    var onloadHandlerTime = elementsAddedStart - extendedScriptsLoadEnd;
    var preLoadTime = domWindow._afrTimingOnLoadEnd - preLoadStart;
    var resizeStart = domWindow._afrTimingResizeStart;
    var resizeEnd = domWindow._afrTimingResizeEnd;
    var resizeTotal = resizeEnd - resizeStart;
    AdfLogger.PROFILER_LOGGER.info("initial page load started;", preLoadStart);
    AdfLogger.PROFILER_LOGGER.info("CSS skin load time;;", skinLoadTime);
    AdfLogger.PROFILER_LOGGER.info("JS Trinidad library load time;;", coreLibraryLoadTime);
    AdfLogger.PROFILER_LOGGER.info("JS profiler library load time;;", profilerLibraryLoadTime);
    AdfLogger.PROFILER_LOGGER.info("JS bootstrap library partition load time;;", bootstrapLibraryPartitionLoadTime);
    AdfLogger.PROFILER_LOGGER.info("JS prelude script time;;", preludeTime);
    AdfLogger.PROFILER_LOGGER.info("JS profiler script load time;;", profilerScriptLoadTime);
    AdfLogger.PROFILER_LOGGER.info("JS core library partition load time;;", coreLibraryPartitionLoadTime);
    AdfLogger.PROFILER_LOGGER.info("JS translations library load time;;", translationsLibraryLoadTime);
    AdfLogger.PROFILER_LOGGER.info("HTML layout time;;", htmlLayoutTime);
    AdfLogger.PROFILER_LOGGER.info("JS library partitions load time;;", libraryPartitionsLoadTime);
    AdfLogger.PROFILER_LOGGER.info("JS load script time;;", loadScriptLoadTime);
    AdfLogger.PROFILER_LOGGER.info("JS load extended scripts;;", extendedScriptsLoadTime);
    AdfLogger.PROFILER_LOGGER.info("onload handler time;;", onloadHandlerTime);
    AdfLogger.PROFILER_LOGGER.info("JS elements added time;;", elementsAddedTime);
    AdfLogger.PROFILER_LOGGER.info("JS render skin properties time;;", renderSkinPropertiesTime);
    AdfLogger.PROFILER_LOGGER.info("JS create components time;;", createComponentsTime);
    AdfLogger.PROFILER_LOGGER.info("JS add components time;;", addComponentsTime);
    AdfLogger.PROFILER_LOGGER.info("JS execute extended scripts time;;", extendedScriptsExecuteTime);
    AdfLogger.PROFILER_LOGGER.info("JS execute ppr init script time;;", pprScriptsLoadTime);
    AdfLogger.PROFILER_LOGGER.info("pre-load total time;;", preLoadTime);
    AdfLogger.PROFILER_LOGGER.info("resize time;;", resizeTotal);
    AdfLogger.PROFILER_LOGGER.info("initial page load done;", loadEnd, ";", loadEnd - preLoadStart);
    var perfTimingsEnd = (new Date).getTime();
    this._logOffset = perfTimingsEnd - loadEnd;
    this._perfProfileLogClosed = false
  }else {
    if(this._perfProfileTimingEnabled) {
      var domWindow = this.getDomWindow();
      var preLoadStart = domWindow._afrTimingPreLoadTimingStart;
      var loadEnd = (new Date).getTime();
      AdfLogger.PROFILER_LOGGER.info("initial page load started;", preLoadStart);
      AdfLogger.PROFILER_LOGGER.info("initial page load done;", loadEnd, ";", loadEnd - preLoadStart);
      var perfTimingsEnd = (new Date).getTime();
      this._logOffset = perfTimingsEnd - loadEnd;
      this._perfProfileLogClosed = false
    }
  }
};
AdfDhtmlPage.prototype.__perfTimings = function(closeRecord, closeBefore, timing, str1) {
  AdfAssert.assertBoolean(closeRecord);
  AdfAssert.assertBoolean(closeRecord, closeBefore);
  AdfAssert.assertBoolean(timing);
  if(this._perfProfileEnabled || timing && this._perfProfileTimingEnabled) {
    var domWindow = this.getDomWindow();
    var preLoadStart = this._perfProfileEnabled ? domWindow._afrTimingPreLoadStart : domWindow._afrTimingPreLoadTimingStart;
    var startArgIndex = 4;
    for(var i = startArgIndex;i < arguments.length;i++) {
      str1 += arguments[i]
    }
    var startTime = (new Date).getTime();
    if(this._logOffset === undefined) {
      this._logOffset = 0
    }
    var accTime = startTime - this._logOffset;
    if(closeRecord) {
      var logger = AdfLogger.PROFILER_LOGGER.getLogWriter();
      var filelogger = AdfXmlLogWriter.prototype.isPrototypeOf(logger);
      if(filelogger && closeBefore) {
        logger.closeRecord();
        accTime = (new Date).getTime();
        this._logOffset = 0;
        AdfLogger.PROFILER_LOGGER.info(str1, ";", accTime);
        this._perfProfileLogClosed = false
      }else {
        if(filelogger && !closeBefore) {
          if(this._perfProfileLogClosed) {
            AdfLogger.PROFILER_LOGGER.info(str1, ";", accTime)
          }else {
            AdfLogger.PROFILER_LOGGER.info(str1, ";", accTime, ";", accTime - preLoadStart)
          }
          logger.closeRecord();
          this._perfProfileLogClosed = true;
          var endTime = (new Date).getTime();
          this._logOffset += endTime - startTime
        }
      }
      if(this._perfProfileEnabled) {
        domWindow._afrTimingPreLoadStart = accTime
      }else {
        domWindow._afrTimingPreLoadTimingStart = accTime
      }
    }else {
      if(this._perfProfileLogClosed) {
        AdfLogger.PROFILER_LOGGER.info(str1, ";", accTime);
        if(this._perfProfileEnabled) {
          domWindow._afrTimingPreLoadStart = accTime
        }else {
          domWindow._afrTimingPreLoadTimingStart = accTime
        }
      }else {
        AdfLogger.PROFILER_LOGGER.info(str1, ";", accTime, ";", accTime - preLoadStart)
      }
      this._perfProfileLogClosed = false
    }
  }
};
AdfDhtmlPage._getFormElement = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  var peer = component.getPeer();
  if(peer) {
    var currComponentDomNode = AdfRichUIPeer.getDomNodeForComponent(component);
    return AdfDomUtils.getFormElement(currComponentDomNode)
  }
  return null
};
AdfDhtmlPage.prototype._getParameterElement = function(form, name) {
  AdfAssert.assertString(name);
  var agent = AdfAgent.AGENT;
  var input = agent.getFormElement(form, name);
  if(!input) {
    input = this.getDomDocument().createElement("input");
    input.type = "hidden";
    input.name = name;
    form.appendChild(input)
  }
  return input
};
AdfDhtmlPage.prototype._setParameter = function(form, name, value) {
  this._getParameterElement(form, name).value = value
};
AdfDhtmlPage.prototype._appendParameter = function(form, name, value) {
  var inputElement = this._getParameterElement(form, name);
  var inputValue = inputElement.value;
  if(inputValue) {
    value = inputValue + "," + value
  }
  inputElement.value = value
};
AdfDhtmlPage._removeAllFormElements = function(formObject) {
  AdfAssert.assert(formObject, "Invalid form;  cannot remove elements");
  var inputs = formObject.elements;
  if(inputs) {
    var curElement = null;
    for(var j = inputs.length - 1;j >= 0;j--) {
      curElement = inputs.item(0);
      if(curElement) {
        curElement.parentNode.removeChild(curElement)
      }
    }
  }
};
AdfDhtmlPage.prototype._getPublicAncestor = function(component) {
  var publicComponent = component;
  while(publicComponent != null) {
    if(!publicComponent.satisfiesUsage(AdfUIComponent.USAGE_PRIVATE_CHILD)) {
      return publicComponent
    }else {
      publicComponent = publicComponent.getParent()
    }
  }
};
AdfDhtmlPage.prototype.__redistributeJetEvent = function(event) {
  this._redistribute(event)
};
AdfDhtmlPage.prototype._redistribute = function(event) {
  var dndContext = this.getDnDContext();
  if(dndContext && dndContext.isDragging()) {
    return
  }
  var agent = AdfAgent.AGENT;
  if(event && event.type == "click" && event.timeStamp == 0) {
    var eventTarget = agent.getEventTarget(event);
    if(!eventTarget) {
      agent.eatEvent(event);
      return
    }
    if(agent.getNodeName(eventTarget) == "LABEL") {
      var component = AdfRichUIPeer.getFirstAncestorComponent(eventTarget);
      var peer = component.getPeer();
      peer.focus(component);
      agent.eatEvent(event);
      return
    }
  }
  if(agent.getPlatform() == AdfAgent.GECKO_PLATFORM && event && event.type == "keypress" && event.keyCode == 27) {
    event.preventDefault()
  }
  this.SetPhase(AdfPage.DELIVER_EVENTS_PHASE);
  try {
    if(!event) {
      event = this.getDomWindow().event
    }
    var userInactivityTimeoutHelper = this.__getUserInactivityTimeoutHelper();
    if(userInactivityTimeoutHelper) {
      userInactivityTimeoutHelper.__resetTimeoutHandler(event)
    }
    var sessionTimeoutHelper = this.__getSessionTimeoutHelper();
    if(sessionTimeoutHelper) {
      sessionTimeoutHelper.__recordUserActivity(event)
    }
    var eventTarget = agent.getEventTarget(event);
    if(eventTarget == null || eventTarget.nodeType == null) {
      return
    }
    var prevComponent = this.getActiveComponent();
    var component = AdfRichUIPeer.getFirstAncestorComponent(eventTarget);
    var domEventType = event.type;
    var compEventType = agent.mapNativeToComponentEventType(domEventType);
    if(domEventType == "click") {
      this._fixupLinkOnClick(eventTarget)
    }else {
      if(compEventType == "focus") {
        if(this._blurTimer) {
          this.cancelTimer(this._blurTimer);
          this._blurTimer = null
        }
        if(!this.__setActiveDomNodeInfo(eventTarget, component ? component.getClientId() : null)) {
          agent.eatEvent(event);
          return
        }
      }else {
        if(compEventType == "blur") {
          this._blurTimer = this.scheduleTimer(this, this._setActiveTimeout, {"activeElement":this.getDomDocument().activeElement}, 1)
        }
      }
    }
    if(component != null) {
      var peer = component.getPeer();
      if(!peer) {
        AdfLogger.LOGGER.severe("Peer null during event redistribution for component id: " + component.getClientId());
        return
      }
      if(compEventType == AdfComponentEvent.FOCUS_EVENT_TYPE || compEventType == AdfComponentEvent.BLUR_EVENT_TYPE) {
        if(peer.needsFocusTargetStyleClass()) {
          var styleComponent = this._getPublicAncestor(component);
          if(styleComponent) {
            var focusDomElement = AdfRichUIPeer.getDomContentElementForComponent(styleComponent);
            if(focusDomElement) {
              if(compEventType == AdfComponentEvent.FOCUS_EVENT_TYPE) {
                AdfDomUtils.addCSSClassName(focusDomElement, AdfRichUIPeer.FOCUS_TARGET_STYLECLASS)
              }else {
                AdfDomUtils.removeCSSClassName(focusDomElement, AdfRichUIPeer.FOCUS_TARGET_STYLECLASS)
              }
            }
          }
        }
      }else {
        if(domEventType == "mouseover" || domEventType == "mouseout") {
          if(agent.supportsTransientStyleClasses() && !agent.isTouchFirstDevice()) {
            var styleComponent = this._getPublicAncestor(component);
            if(styleComponent) {
              var stylePeer = styleComponent.getPeer();
              stylePeer.bind(styleComponent);
              var hoverDomElement = AdfRichUIPeer.getDomContentElementForComponent(styleComponent);
              if(domEventType == "mouseover") {
                if(hoverDomElement) {
                  AdfDomUtils.addCSSClassName(hoverDomElement, AdfRichUIPeer.HOVER_TARGET_STYLECLASS)
                }
              }else {
                if(domEventType == "mouseout") {
                  var clearStyles = true;
                  var nextElement = agent.getEventToElement(event);
                  if(nextElement && nextElement.nodeType != null) {
                    var nextComp = AdfRichUIPeer.getFirstAncestorComponent(nextElement);
                    nextComp = this._getPublicAncestor(nextComp);
                    if(nextComp) {
                      var nextPeer = nextComp.getPeer();
                      nextPeer.bind(nextComp);
                      var nextHoverDomElement = nextPeer.getDomElement();
                      if(nextHoverDomElement == hoverDomElement) {
                        clearStyles = false
                      }
                    }
                  }
                  if(clearStyles && hoverDomElement) {
                    AdfDomUtils.removeCSSClassName(hoverDomElement, AdfRichUIPeer.HOVER_TARGET_STYLECLASS)
                  }
                }
              }
            }
          }else {
            AdfLogger.LOGGER.info("The skinning's hover-target pseudo class is not supported on this configuration.")
          }
        }
      }
      peer._dispatchDomEvent(agent, component, event);
      var componentEvent = peer.createComponentEvent(component, event, prevComponent);
      if(componentEvent) {
        AdfAssert.assert(componentEvent.getSource() === component, "event generation can't change event source");
        var eventType = componentEvent.getType();
        switch(eventType) {
          case AdfComponentEvent.FOCUS_EVENT_TYPE:
            AdfLogger.LOGGER.fine("Focus: ", component);
            delete this._restorePprFocusIndex;
            this.__setActiveDomNodeInfo(eventTarget, component.getClientId());
            break
        }
        if(dndContext && AdfUIInputEvent.prototype.isPrototypeOf(componentEvent)) {
          dndContext.__handleInputEvent(componentEvent)
        }
        component.queueEvent(componentEvent);
        var touchContextMenuManager = this._touchContextMenuManager;
        var derivedEvent = touchContextMenuManager.deriveContextMenuEvent(componentEvent);
        if(derivedEvent) {
          component.queueEvent(derivedEvent)
        }
        this._eventLoopDeliverEvents()
      }
      if(this._descendantResizeNotifyQueue) {
        var dts = this.getDataTransferService();
        if(dts.getDTSState() == AdfDataTransferService.STATE_READY) {
          this.__doDescendantResizeNotify()
        }
      }
    }
  }finally {
    this.SetPhase(AdfPage.WAITING_FOR_USER_INPUT_PHASE);
    AdfLogger.LOGGER.getLogWriter().flush()
  }
};
AdfDhtmlPage.prototype._setActiveTimeout = function(argObj) {
  this._blurTimer = null;
  var activeElement = argObj.activeElement;
  var component = null;
  if(activeElement == this.getDomDocument().activeElement) {
    if(activeElement.nodeType) {
      component = AdfRichUIPeer.getFirstAncestorComponent(activeElement)
    }
    var clientId = component ? component.getClientId() : null;
    if(this.getActiveComponentId() != clientId) {
      this._setActiveComponentId(clientId)
    }
  }else {
    AdfLogger.LOGGER.fine("activeElement not equal document.activeElement in AdfDhtmlPage.prototype._setActiveTimeout")
  }
};
AdfDhtmlPage.prototype.createFloatingDiv = function(parent, zIndex, className) {
  AdfAssert.assertDomElement(parent);
  AdfAssert.assertNumber(zIndex);
  AdfAssert.assertString(className);
  var domDocument = parent.ownerDocument;
  var floatingDiv = domDocument.createElement("DIV");
  var divStyle = floatingDiv.style;
  divStyle.zIndex = zIndex;
  divStyle.position = "absolute";
  divStyle.visibility = "hidden";
  var contentSpan = domDocument.createElement("SPAN");
  contentSpan.style.display = "block";
  contentSpan.className = className;
  floatingDiv.appendChild(contentSpan);
  parent.appendChild(floatingDiv);
  return floatingDiv
};
AdfDhtmlPage.prototype.showFloatingDiv = function(floatingDiv, floatingContent) {
  this._clearFloatingDiv(floatingDiv);
  var floatingHolder = floatingDiv.firstChild;
  floatingHolder.appendChild(floatingContent);
  var floatingStyle = floatingDiv.style;
  floatingStyle.visibility = "visible"
};
AdfDhtmlPage.prototype.hideFloatingDiv = function(floatingDiv) {
  AdfAssert.assertDomElement(floatingDiv);
  var floatingStyle = floatingDiv.style;
  floatingStyle.visibility = "hidden";
  floatingStyle.top = "-100px";
  floatingStyle.left = "-100px";
  this._clearFloatingDiv(floatingDiv)
};
AdfDhtmlPage.prototype._clearFloatingDiv = function(floatingDiv) {
  AdfAssert.assertDomElement(floatingDiv);
  var removeParent = floatingDiv.firstChild;
  var currChild = removeParent.firstChild;
  var nextChild;
  while(currChild) {
    nextChild = currChild.nextSibling;
    removeParent.removeChild(currChild);
    currChild = nextChild
  }
};
AdfDhtmlPage.prototype.prepareMaskingFrame = function() {
  var zOrderManager = this.getZOrderManager();
  zOrderManager.prepareMaskingFrame()
};
AdfDhtmlPage.prototype.createMaskingFrame = function(element) {
  var zOrderManager = this.getZOrderManager();
  var maskFrame = zOrderManager.createMaskingFrame();
  this.moveMaskingFrame(element, maskFrame);
  return maskFrame
};
AdfDhtmlPage.prototype.moveMaskingFrame = function(element, maskFrame) {
  var maskFrameStyle = maskFrame.style;
  var agent = AdfAgent.AGENT;
  var pos = agent.getElementPosition(element);
  maskFrameStyle.top = pos.y + "px";
  maskFrameStyle.left = pos.x + "px";
  maskFrameStyle.width = element.offsetWidth + "px";
  maskFrameStyle.height = element.offsetHeight + "px";
  maskFrameStyle.visibility = "visible"
};
AdfDhtmlPage.prototype.removeMaskingFrame = function(maskFrame) {
  var zOrderManager = this.getZOrderManager();
  zOrderManager.removeMaskingFrame(maskFrame)
};
AdfDhtmlPage.prototype.getDocument = function() {
  return this._document
};
AdfDhtmlPage.prototype.getDomDocument = function() {
  return this._document
};
AdfDhtmlPage.prototype.getDomWindow = function() {
  return this._window
};
AdfDhtmlPage.prototype.showGlassPane = function(listenerMap, cursor) {
  AdfLogger.LOGGER.finest("Show glasspane");
  AdfAssert.assert(listenerMap);
  AdfAssert.assertString(cursor);
  var glassPane = this.getGlassPane();
  this._positionGlassPane(true);
  glassPane.style.visibility = "visible";
  var agent = AdfAgent.AGENT;
  agent.startMouseEventCapture(listenerMap);
  agent.setCursor(glassPane, agent.getCursor(cursor));
  var captureElement = agent.getPlatform() == AdfAgent.IE_PLATFORM ? this._document.documentElement : glassPane;
  this._keyCaptureState = agent.startDocumentKeyEventCapture(listenerMap, captureElement)
};
AdfDhtmlPage.prototype.hideGlassPane = function(listenerMap) {
  AdfAssert.assert(listenerMap);
  AdfLogger.LOGGER.finest("Hide glasspane");
  var agent = AdfAgent.AGENT;
  var glassPane = this.getGlassPane();
  agent.setCursor(glassPane, "auto");
  agent.stopMouseEventCapture(listenerMap);
  var captureElement = agent.getPlatform() == AdfAgent.IE_PLATFORM ? this._document.documentElement : glassPane;
  agent.endDocumentKeyEventCapture(listenerMap, captureElement, this._keyCaptureState);
  this._keyCaptureState = null;
  var glassPaneStyle = glassPane.style;
  glassPaneStyle.cursor = "auto";
  glassPaneStyle.visibility = "hidden";
  glassPaneStyle.height = "1px";
  glassPaneStyle.width = "1px";
  agent.forceCursorChange(this.getDomDocument())
};
AdfDhtmlPage.prototype.getDnDContext = function() {
  var dndContext = this._dndContext;
  if(dndContext === undefined) {
    dndContext = this.getDomWindow().AdfDhtmlDnDContext ? new AdfDhtmlDnDContext : null;
    this._dndContext = dndContext
  }
  return dndContext
};
AdfDhtmlPage.prototype.__clearDnDContext = function() {
  delete this._dndContext
};
AdfDhtmlPage.prototype.getGlassPane = function() {
  var glassPane = this._glassPane;
  if(!glassPane) {
    glassPane = this._createGlassPane(this.getDomDocument());
    this._glassPane = glassPane
  }
  return glassPane
};
AdfDhtmlPage.prototype._createGlassPane = function(ownerDocument) {
  var glassPaneDiv = ownerDocument.createElement("div");
  glassPaneDiv.className = "AFBlockingGlassPane";
  var divStyle = glassPaneDiv.style;
  divStyle.position = "absolute";
  divStyle.left = "0px";
  divStyle.top = "0px";
  divStyle.zIndex = AdfDhtmlZOrderManager.getMaxZIndex() + 1;
  divStyle.visibility = "hidden";
  divStyle.tabIndex = -1;
  var agent = AdfAgent.AGENT;
  agent.disableUserSelect(glassPaneDiv);
  ownerDocument.body.appendChild(glassPaneDiv);
  agent.setOpacity(glassPaneDiv, 0);
  return glassPaneDiv
};
AdfDhtmlPage.prototype._positionGlassPane = function(assumeVisible) {
  var glassPane = this._glassPane;
  if(glassPane) {
    var glassPaneStyle = glassPane.style;
    if(assumeVisible || glassPaneStyle.visibility == "visible") {
      var bodyElem = this.getDomDocument().body;
      var height = Math.max(bodyElem.offsetHeight, bodyElem.scrollHeight);
      var width = Math.max(bodyElem.offsetWidth, bodyElem.scrollWidth);
      glassPaneStyle.height = height + "px";
      glassPaneStyle.width = width + "px"
    }
  }
};
AdfDhtmlPage.prototype._positionBlockingGlassPane = function(assumeVisible) {
  var document = this.getDomDocument();
  var glassPane = this.getGlassPane();
  var agent = AdfAgent.AGENT;
  if(glassPane) {
    var glassPaneStyle = glassPane.style;
    if(assumeVisible || glassPaneStyle.visibility == "visible") {
      var domWindow = agent.getDomWindow();
      var height = agent.getWindowScrollHeight(domWindow);
      var width = agent.getWindowScrollWidth(domWindow);
      glassPaneStyle.height = height + "px";
      glassPaneStyle.width = width + "px";
      var maskFrame = this._uiMaskingFrame;
      if(maskFrame) {
        this.moveMaskingFrame(glassPane, maskFrame)
      }
    }
  }
};
AdfDhtmlPage.prototype._installBlockingHandler = function(ownerDocument) {
  var agent = AdfAgent.AGENT;
  var agentIsIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
  var uiBlockingDiv = this.getGlassPane();
  uiBlockingDiv.onkeydown = AdfAgent.eatEventCallback;
  uiBlockingDiv.onkeyup = AdfAgent.eatEventCallback;
  uiBlockingDiv.onkeypress = AdfAgent.eatEventCallback;
  uiBlockingDiv.onmousedown = AdfAgent.eatEventCallback;
  uiBlockingDiv.onmouseup = AdfAgent.eatEventCallback;
  uiBlockingDiv.onmouseover = AdfAgent.eatEventCallback;
  uiBlockingDiv.onmouseout = AdfAgent.eatEventCallback;
  uiBlockingDiv.onclick = AdfAgent.eatEventCallback;
  agent.disableBrowserContextMenu(uiBlockingDiv, true);
  var maskFrame = this._uiMaskingFrame = this.createMaskingFrame(uiBlockingDiv);
  AdfDomUtils.addCSSClassName(maskFrame, "AFBlockingMaskingFrame");
  var maskFrameDocument = maskFrame.document;
  if(maskFrameDocument != null) {
    agent.disableBrowserContextMenu(maskFrameDocument, true)
  }
  if(agentIsIE) {
    AdfFocusUtils.focusElement(uiBlockingDiv)
  }else {
    agent.installKeyboardBlocker(ownerDocument, true)
  }
  var activeElementBeforeBlocking = this.getActiveDomElement();
  if(activeElementBeforeBlocking) {
    this._activeIDBeforeBlocking = activeElementBeforeBlocking.id
  }
  var domWindow = agent.getDomWindow();
  var positionBlockingGlassPaneCallback = this._positionBlockingGlassPaneCallback;
  agent.addBubbleEventListener(domWindow, "resize", positionBlockingGlassPaneCallback);
  agent.setOpacity(uiBlockingDiv, AdfDhtmlPage._BLOCKING_OPACITY);
  agent.setOpacity(maskFrame, AdfDhtmlPage._BLOCKING_OPACITY);
  var divStyle = uiBlockingDiv.style;
  this._positionBlockingGlassPane(true);
  divStyle.visibility = "visible"
};
AdfDhtmlPage.prototype._removeBlockingHandler = function(ownerDocument) {
  var agent = AdfAgent.AGENT;
  var agentIsIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
  agent.disableBrowserContextMenu(ownerDocument, false);
  var maskingFrame = this._uiMaskingFrame;
  delete this._uiMaskingFrame;
  var maskFrameDocument = maskingFrame.document;
  if(maskFrameDocument != null) {
    agent.disableBrowserContextMenu(maskFrameDocument, false)
  }
  AdfDomUtils.removeCSSClassName(maskingFrame, "AFBlockingMaskingFrame");
  this.removeMaskingFrame(maskingFrame);
  var uiBlockingDiv = this.getGlassPane();
  uiBlockingDiv.onkeydown = null;
  uiBlockingDiv.onkeyup = null;
  uiBlockingDiv.onkeypress = null;
  var glassPaneStyle = uiBlockingDiv.style;
  glassPaneStyle.cursor = "auto";
  glassPaneStyle.visibility = "hidden";
  glassPaneStyle.height = "0px";
  glassPaneStyle.width = "0px";
  var activeIDBeforeBlocking = this._activeIDBeforeBlocking;
  delete this._activeIDBeforeBlocking;
  if(activeIDBeforeBlocking) {
    var focusElem = agent.getElementById(activeIDBeforeBlocking);
    if(focusElem) {
      AdfFocusUtils.focusElement(focusElem)
    }
  }
  if(!agentIsIE) {
    agent.installKeyboardBlocker(ownerDocument, false)
  }
  var domWindow = agent.getDomWindow();
  var positionBlockingGlassPaneCallback = this._positionBlockingGlassPaneCallback;
  agent.removeBubbleEventListener(domWindow, "resize", positionBlockingGlassPaneCallback)
};
AdfDhtmlPage.prototype._blockUI = function(block) {
  var agent = AdfAgent.AGENT;
  var ownerDocument = this.getDomDocument();
  if(block && !this._uiBlocked) {
    this._installBlockingHandler(ownerDocument);
    agent.showBusyCursor(ownerDocument, block);
    this._broadcastBusyStateEvent(true);
    this._uiBlocked = true
  }else {
    if(!block && this._uiBlocked) {
      agent.showBusyCursor(ownerDocument, block);
      this._broadcastBusyStateEvent(false);
      this._removeBlockingHandler(ownerDocument);
      this._uiBlocked = false
    }
  }
};
AdfDhtmlPage.prototype._isUIBlocked = function() {
  return this._uiBlocked
};
AdfDhtmlPage.prototype.showPageProcessingIndicator = function(show) {
  if(null == this._pageProcessingIndicator) {
    this._pageProcessingIndicator = AdfDhtmlPageProcessingIndicator.getInstance()
  }
  this._pageProcessingIndicator.display(show, this.getDomDocument());
  if(show) {
    AdfAgent.AGENT.setOpacity(this._uiBlockingDiv, 50);
    this._uiBlockingDiv.style.backgroundColor = this._pageProcessingIndicator.getBackgroundColor()
  }else {
    AdfAgent.AGENT.setOpacity(this._uiBlockingDiv, 0);
    this._uiBlockingDiv.style.backgroundColor = ""
  }
};
AdfDhtmlPage.prototype.isProcessingIndicatorDisplayed = function() {
  return null != this._pageProcessingIndicator && this._pageProcessingIndicator.isDisplayed()
};
AdfDhtmlPage.prototype.requestStatusChanged = function(requestEvent) {
  if(requestEvent.getStatus() == AdfDataTransferRequestEvent.STATUS_COMPLETE) {
    var reqContext = requestEvent.getContext();
    var noNavigationRedirect = false;
    if(reqContext) {
      var requestBusyCounts = reqContext.busyCounts;
      var currBusyCounts = this._busyCounts;
      for(var busyClientId in requestBusyCounts) {
        var newBusyCount = currBusyCounts[busyClientId] - requestBusyCounts[busyClientId];
        AdfAssert.assert(newBusyCount >= 0);
        if(newBusyCount == 0) {
          delete currBusyCounts[busyClientId];
          var nonBusyComponent = this.findComponent(busyClientId);
          if(nonBusyComponent) {
            nonBusyComponent.getPeer().setBusy(nonBusyComponent, false)
          }
        }else {
          currBusyCounts[busyClientId] = newBusyCount
        }
      }
    }
    var statusCode = requestEvent.getResponseStatusCode();
    if(statusCode == 200) {
      var newWindowId;
      var isRedirect;
      if(requestEvent.getResponseHeader) {
        newWindowId = requestEvent.getResponseHeader("Adf-Window-Id")
      }
      if(newWindowId) {
        AdfPage.PAGE.getDomWindow().name = newWindowId
      }
      if(requestEvent.isRichResponse()) {
        this.__perfTimings(false, false, true, "PPR response from server received");
        var responseDocument = requestEvent.getResponseXML();
        isRedirect = this._handleRichResponse(responseDocument, reqContext);
        if(isRedirect && reqContext && reqContext._noResponseExpected) {
          this._partialRequestRedirect = false
        }
      }else {
        this._handleInvalidPprResponse(requestEvent.getResponseText());
        return
      }
      if(newWindowId && !isRedirect) {
        AdfPage.PAGE._startGlobalActiveData()
      }
      if(this.isUserActivityMonitoringOn() && !isRedirect) {
        prevActInfo = AdfUserActivityInfo.getInstance(AdfUserActivityInfo.PREVIOUS);
        prevActInfo.setClientEndTime((new Date).getTime().toString());
        AdfUserActivityInfo.saveToSessionStorageByType(AdfUserActivityInfo.PREVIOUS);
        AdfUserActivityInfo.removeFromSessionStorageByType(AdfUserActivityInfo.PRIMARY)
      }
    }else {
      this._handleInvalidPprResponse(null);
      return
    }
    var postbackCheckpointId = null;
    if(reqContext) {
      postbackCheckpointId = reqContext.__checkPointId
    }
    if(postbackCheckpointId) {
      AdfDhtmlPage._POSTBACK_CHECKPOINT.stop(postbackCheckpointId)
    }
    this.__perfTimings(false, false, true, "PPR response processing done");
    this._haveOutstandingPPRRequest = false;
    if(this._isUIBlocked()) {
      this._blockUI(false)
    }
  }
};
AdfDhtmlPage._keyEventCallback = function(event) {
  AdfPage.PAGE._handleKey(event)
};
AdfDhtmlPage.prototype.registerKeyStroke = function(keystroke, callback, callbackContext) {
  AdfAssert.assertPrototype(keystroke, AdfKeyStroke);
  AdfAssert.assertFunction(callback);
  var clientId = null;
  if(callbackContext && callbackContext.clientId) {
    clientId = callbackContext.clientId
  }
  var keyStrokeString = keystroke.toMarshalledString();
  if(keyStrokeString in this._keyStrokeToCallbackMap) {
    var conflict = true;
    if(clientId) {
      var mapping = this._keyStrokeToCallbackMap[keyStrokeString];
      if(mapping.multipleAllowed) {
        conflict = false;
        mapping.callbacks[clientId] = callback;
        mapping.callbackContexts[clientId] = callbackContext;
        AdfLogger.LOGGER.finest("RP.registerKSAdditional, keystroke:callback:clientId ", keystroke, " : ", callback, " : ", clientId)
      }
    }
    if(conflict) {
      AdfLogger.LOGGER.warning("Conflicting shortcut mapping: The keystroke ", keystroke, " has already been registered on the RichPage.")
    }
  }else {
    if(clientId) {
      var multipleMapping = {multipleAllowed:true, callbacks:{}, callbackContexts:{}};
      multipleMapping.callbacks[clientId] = callback;
      multipleMapping.callbackContexts[clientId] = callbackContext;
      AdfLogger.LOGGER.finest("RP.registerKS, keystroke:callback:clientId ", keystroke, " : ", callback, " : ", clientId);
      this._keyStrokeToCallbackMap[keyStrokeString] = multipleMapping
    }else {
      AdfLogger.LOGGER.finest("RP.registerKS, keystroke:callback ", keystroke, " : ", callback);
      this._keyStrokeToCallbackMap[keyStrokeString] = callback;
      this._keyStrokeToCallbackContextMap[keyStrokeString] = callbackContext
    }
  }
};
AdfDhtmlPage.prototype.unregisterKeyStroke = function(keystroke, clientId) {
  AdfAssert.assertPrototype(keystroke, AdfKeyStroke);
  var keyStrokeString = keystroke.toMarshalledString();
  if(clientId) {
    var mapping = this._keyStrokeToCallbackMap[keyStrokeString];
    if(mapping.callbacks && mapping.callbacks.length <= 1) {
      delete this._keyStrokeToCallbackMap[keyStrokeString]
    }else {
      delete mapping.callbacks[clientId];
      delete mapping.callbackContexts[clientId]
    }
  }else {
    delete this._keyStrokeToCallbackMap[keyStrokeString];
    delete this._keyStrokeToCallbackContextMap[keyStrokeString]
  }
};
AdfDhtmlPage.prototype._handleKey = function(event) {
  var agent = AdfAgent.AGENT;
  var keyCode = agent.getKeyCode(event);
  var modifiers = event.shiftKey * AdfKeyStroke.SHIFT_MASK | event.ctrlKey * AdfKeyStroke.CTRL_MASK | event.altKey * AdfKeyStroke.ALT_MASK;
  if(event.metaKey) {
    modifiers |= AdfKeyStroke.META_MASK
  }
  var keyStroke = AdfKeyStroke.getKeyStroke(keyCode, modifiers);
  var keyStrokeString = keyStroke.toMarshalledString();
  var callback = this._keyStrokeToCallbackMap[keyStrokeString];
  if(callback != null) {
    var skipKey = keyStrokeString in AdfDhtmlPage._KEYSTROKE_OVERRIDES;
    if(skipKey) {
      var eventTarget = agent.getEventTarget(event);
      var nodeName = agent.getNodeName(eventTarget).toLowerCase();
      if(nodeName != "textarea") {
        if(nodeName == "input") {
          var type = eventTarget.type.toLowerCase();
          skipKey = type == "text" || type == "password"
        }else {
          skipKey = false
        }
      }
    }
    if(!skipKey) {
      var callbackContext = this._keyStrokeToCallbackContextMap[keyStrokeString];
      if(callback.multipleAllowed) {
        var callbacks = callback.callbacks;
        var callbackContexts = callback.callbackContexts;
        callback = null;
        var found = false;
        var callbackCount = 0;
        for(clientId in callbacks) {
          callbackCount++
        }
        if(callbackCount > 1) {
          var doc = this.getDomDocument();
          var activeElement = doc.activeElement;
          if(!activeElement) {
            activeElement = this.getActiveDomElement()
          }
          if(!activeElement) {
            AdfLogger.LOGGER.finest("No known activeElement available for _handleKey.");
            activeElement = doc.documentElement
          }
          var bestDistance = Number.POSITIVE_INFINITY;
          for(clientId in callbacks) {
            var component = this.findComponent(clientId);
            if(component) {
              var domElement = AdfRichUIPeer.getDomElementForComponent(component);
              if(domElement) {
                var distance = AdfDomUtils.getNodeDistance(domElement, activeElement);
                if(distance == 0) {
                  found = true;
                  callback = callbacks[clientId];
                  callbackContext = callbackContexts[clientId];
                  break
                }else {
                  if(distance < bestDistance) {
                    bestDistance = distance;
                    found = true;
                    callback = callbacks[clientId];
                    callbackContext = callbackContexts[clientId]
                  }
                }
              }else {
                AdfLogger.LOGGER.warning("Unable to locate domElement for clientId = " + clientId + " in _handleKey.")
              }
            }else {
              AdfLogger.LOGGER.warning("Unable to locate component for clientId = " + clientId + " in _handleKey.")
            }
          }
          if(!found) {
            AdfLogger.LOGGER.warning("Unable to locate a match for clientId = " + clientId + " in _handleKey.")
          }
        }
        if(!found && callbackCount == 1) {
          for(clientId in callbacks) {
            callback = callbacks[clientId];
            callbackContext = callbackContexts[clientId]
          }
        }
      }
      var handledEvent = callback.call(callbackContext, keyStroke) !== false;
      if(handledEvent) {
        agent.eatEvent(event)
      }
    }
  }
};
AdfDhtmlPage.prototype._doFullPostback = function(formElement, params, blockUI) {
  this._resetUncommittedIds();
  if(formElement.target != this._ACTIVE_FRAME_NAME && formElement.target != "_new") {
    this._inAppNavigationFlag = true;
    this._warnUncommitted = false;
    if(blockUI) {
      this._blockUI(true)
    }
    if(!this._waitingForDocumentUnload) {
      this.scheduleTimer(this, this._resetPerformingFullSubmit, null, 3E3)
    }
  }
  var combinedParams = {};
  this._collectProtectionKeys(combinedParams, formElement);
  AdfCollections.copyInto(combinedParams, params);
  for(var param in combinedParams) {
    this._setParameter(formElement, param, combinedParams[param])
  }
  AdfAgent.AGENT.autoCompleteForm(formElement);
  try {
    formElement.submit()
  }catch(e) {
    var multiPartForm = AdfDomUtils.getMultiPartForm(formElement);
    if(multiPartForm != null) {
      AdfInputFileUtils.addUploadErrorMessage()
    }
    AdfLogger.LOGGER.logErrorAsInfo(e, "doFullPostback form.submit()")
  }
  formElement.action = formElement.action;
  for(var param in params) {
    var input = this._getParameterElement(formElement, param);
    AdfAssert.assertDomElement(input);
    input.parentNode.removeChild(input)
  }
};
AdfDhtmlPage.prototype._doRichPostback = function(formElement, params, headerParams, blockUI, context, eventTargets) {
  AdfAssert.assertDomElement(formElement, "FORM");
  AdfAssert.assertObject(params);
  if(blockUI) {
    this._blockUI(true)
  }
  var postbackCheckpointId = AdfDhtmlPage._POSTBACK_CHECKPOINT.start();
  var requestBusyCounts = AdfCollections.copyInto({}, this._busyCounts);
  if(!context) {
    context = new Object
  }
  context.busyCounts = requestBusyCounts;
  context.__checkPointId = postbackCheckpointId;
  context.retryParams = params;
  context.formId = formElement.id;
  var dts = this.getDataTransferService();
  var multiPartForm = null;
  var targetForm = formElement;
  if(formElement.encoding.toLowerCase() == "multipart/form-data") {
    multiPartForm = AdfDomUtils.getMultiPartForm(formElement);
    if(multiPartForm) {
      targetForm = multiPartForm
    }
  }
  var combinedParams = {};
  this._collectProtectionKeys(combinedParams, multiPartForm != null ? multiPartForm : formElement);
  AdfCollections.copyInto(combinedParams, params);
  var pprURL = this._getPPRURL(targetForm);
  if(multiPartForm != null) {
    dts.sendMultiPartRequest(context, pprURL, null, multiPartForm, combinedParams, [this], null)
  }else {
    var content = this._getPostbackContent(formElement, combinedParams, eventTargets);
    AdfAgent.AGENT.autoCompleteForm(formElement);
    dts.sendRequest(context, pprURL, headerParams, content, [this])
  }
};
AdfDhtmlPage.prototype._getDefaultPostbackURL = function() {
  var doc = this.getDomDocument();
  var actionURL = null;
  var form = doc.forms[0];
  if(form) {
    actionURL = this._getPPRURL(form)
  }
  if(!actionURL) {
    actionURL = doc.location.href
  }
  return actionURL
};
AdfDhtmlPage.prototype._appendResponseId = function(url) {
  var urlWithResponseId = url;
  var ecid = this.getResponseIdentifier();
  if(ecid != null) {
    urlWithResponseId += url.indexOf("?") < 0 ? "?" : "&";
    urlWithResponseId += AdfDhtmlPage._ECID;
    urlWithResponseId += "=";
    urlWithResponseId += encodeURIComponent(ecid)
  }
  return urlWithResponseId
};
AdfDhtmlPage.prototype._getPPRURL = function(element) {
  var agent = AdfAgent.AGENT;
  var attribute = agent.getAttribute(element, AdfDhtmlPage._CUSTOM_PPR_URL_EXPANDO);
  var actionURL = attribute != null ? attribute : element.action;
  if(!actionURL || actionURL == "") {
    var domDocument = this.getDomDocument();
    actionURL = domDocument[AdfDhtmlPage._CUSTOM_PPR_URL_EXPANDO] ? domDocument[AdfDhtmlPage._CUSTOM_PPR_URL_EXPANDO] : domDocument.location.href
  }
  if(!this.isPortlet() && this.shouldTracePPRRequestId()) {
    actionURL = this._appendResponseId(actionURL)
  }
  return actionURL
};
AdfDhtmlPage.prototype._getPostbackContent = function(actionForm, params, eventTargets) {
  AdfAssert.assertDomElementOrNull(actionForm, "FORM");
  AdfAssert.assertObjectOrNull(params);
  var formParams = this._collectPostbackParams(actionForm, eventTargets);
  AdfCollections.copyInto(formParams, params);
  return this._toUrlEncodedForm(formParams)
};
AdfDhtmlPage.prototype._collectPostbackParams = function(actionForm, eventTargets) {
  var formParams = {};
  var editableEventTargetComponents = this._getEditableEventTargetComponents(eventTargets);
  if(actionForm != null) {
    var formElements = actionForm.elements;
    if(formElements) {
      for(var elementIndex = 0;elementIndex < formElements.length;elementIndex++) {
        var input = formElements[elementIndex];
        if(input.name && !input.disabled && this._isDirty(input, editableEventTargetComponents) && !this._isExcludedFromPostback(input)) {
          var component = this._mapInputElementToComponent(input);
          var inputName = input.name;
          var optionsValue = AdfDhtmlPage._getInputOptionsValue(input);
          if(optionsValue) {
            formParams[inputName] = optionsValue
          }else {
            var inputValue = input.value;
            if(this._isUncheckedInput(input)) {
              AdfAssert.assert(this._isTrackingDirtyData() || AdfDhtmlPage._peerOverrideUncheckedSubmit(component));
              inputValue = ""
            }
            formParams[inputName] = this._mergeFormParamValues(formParams[inputName], inputValue)
          }
          if(!this._isDirtyDataRetainPPRDisabled() && null != component) {
            var peer = component.getPeer();
            if(peer) {
              peer.bind(component);
              if(peer.setLastSubmittedValue) {
                var lastSubmittedValue = formParams[inputName];
                if(AdfCollections.isArray(formParams[inputName])) {
                  lastSubmittedValue = component.getSubmittedValue()
                }
                peer.setLastSubmittedValue(component, lastSubmittedValue)
              }
            }
          }
        }
      }
    }
  }
  return formParams
};
AdfDhtmlPage.prototype._isExcludedFromPostback = function(input) {
  return this.isCustomElementPostbackExcluded() && AdfDhtmlPage._isInsideCustomElement(input)
};
AdfDhtmlPage._isInsideCustomElement = function(elem) {
  if(typeof AdfRichCustomElement === "undefined") {
    return false
  }
  var componentParent = AdfRichUIPeer.getFirstAncestorComponent(elem);
  return componentParent && componentParent instanceof AdfRichCustomElement
};
AdfDhtmlPage._getInputOptionsValue = function(input) {
  var options = input.options;
  if(!options) {
    return null
  }
  var value = [];
  for(var j = 0;j < options.length;j++) {
    var option = options[j];
    if(option.selected) {
      var optionValueAttr = option.attributes["value"];
      var optionValue = optionValueAttr != null && optionValueAttr.value != null ? optionValueAttr.value : option.text;
      value.push(optionValue)
    }
  }
  return value
};
AdfDhtmlPage.prototype._collectProtectionKeys = function(formParams, actionForm) {
  var tokenizeParams = {};
  if(actionForm != null) {
    var formElements = actionForm.elements;
    if(formElements) {
      for(var elementIndex = 0;elementIndex < formElements.length;elementIndex++) {
        var input = formElements[elementIndex];
        var protectionKey = input.getAttribute(AdfDhtmlPage.PROTECTED_KEY_ATTRIBUTE);
        if(protectionKey) {
          tokenizeParams[input.name] = protectionKey
        }
      }
    }
  }
  if(!AdfCollections.isEmpty(tokenizeParams)) {
    formParams["oracle.adf.view.rich.TOKENIZED"] = JSON.stringify(tokenizeParams)
  }
};
AdfDhtmlPage.prototype._getEditableEventTargetComponents = function(eventTargets) {
  AdfAssert.assertArrayOrNull(eventTargets);
  var editableEventTargetComponents = [];
  if(eventTargets != null) {
    for(var i = 0;i < eventTargets.length;i++) {
      var eventTarget = eventTargets[i];
      this._pushEditableComponent(editableEventTargetComponents, eventTarget);
      var containerEventTarget = this._stripSubId(eventTarget);
      if(containerEventTarget != eventTarget) {
        this._pushEditableComponent(editableEventTargetComponents, containerEventTarget)
      }
    }
  }
  return editableEventTargetComponents
};
AdfDhtmlPage.prototype._pushEditableComponent = function(editableComponents, clientId) {
  var component = this.findComponent(clientId);
  if(component instanceof AdfUIEditableValue) {
    editableComponents.push(component)
  }
};
AdfDhtmlPage.prototype._mergeFormParamValues = function(oldValue, newValue) {
  if(oldValue == null || oldValue == "" && newValue != null) {
    return newValue
  }
  if(newValue == null || newValue == "") {
    return oldValue
  }
  var list = null;
  if(AdfCollections.isArray(oldValue)) {
    list = oldValue
  }else {
    list = new Array;
    list.push(oldValue)
  }
  list.push(newValue);
  return list
};
AdfDhtmlPage.prototype._toUrlEncodedForm = function(formParams) {
  var content = "";
  for(var key in formParams) {
    var paramValue = formParams[key];
    if(AdfCollections.isArray(paramValue)) {
      var array = paramValue;
      for(var i = 0;i < array.length;i++) {
        content = AdfDhtmlPage._appendUrlFormEncoded(content, key, array[i])
      }
    }else {
      if(paramValue != undefined) {
        content = AdfDhtmlPage._appendUrlFormEncoded(content, key, paramValue)
      }
    }
  }
  return content
};
AdfDhtmlPage.prototype._isRichResponseDirty = function() {
  var hidden = this.getDomDocument().getElementById(AdfDhtmlPage._RICH_UPDATE_FLAG);
  if(hidden && hidden.value == "dirty") {
    return true
  }
  return false
};
AdfDhtmlPage.prototype._setRichResponseDirty = function(isDirty) {
  var hidden = this.getDomDocument().getElementById(AdfDhtmlPage._RICH_UPDATE_FLAG);
  if(hidden) {
    hidden.value = isDirty ? "dirty" : ""
  }
};
AdfDhtmlPage.prototype._waitingForAnimation = function() {
  var waiting = this._incompleteAnimationCount != null && this._incompleteAnimationCount > 0;
  return waiting
};
AdfDhtmlPage.prototype.incrementPendingAnimation = function() {
  if(this._incompleteAnimationCount == null) {
    this._incompleteAnimationCount = 0
  }
  ++this._incompleteAnimationCount
};
AdfDhtmlPage.prototype.decrementPendingAnimation = function() {
  if(this._incompleteAnimationCount == null) {
    AdfAssert.assert(false, "Unable to decrement the pending animation count when it was never incremented in the first place")
  }else {
    --this._incompleteAnimationCount;
    AdfAssert.assert(this._incompleteAnimationCount >= 0, "More pending animation decrements than increments")
  }
};
AdfDhtmlPage.prototype._prepareForIncompleteImages = function() {
  var imgElements = this.getDocument().getElementsByTagName("img");
  var imgElementCount = imgElements.length;
  var incompleteImageCount = 0;
  for(var i = 0;i < imgElementCount;i++) {
    var imgElement = imgElements[i];
    if(!imgElement.complete) {
      var computedStyle = AdfAgent.AGENT.getComputedStyle(imgElement);
      var computedWidth = computedStyle.width;
      var computedHeight = computedStyle.height;
      if(computedWidth == "0px" || computedWidth == "auto" || computedHeight == "0px" || computedHeight == "auto") {
        AdfLogger.LOGGER.finer("An incompletly-loaded image was detected with src = ", imgElement.src, imgElement);
        incompleteImageCount++;
        AdfDomUtils.addCSSClassName(imgElement, AdfDhtmlPage._INCOMPLETE_IMAGE_CLASS_NAME)
      }
    }
    var logger = AdfLogger.LOGGER;
    if(logger.getLevel(AdfLogger.FINEST)) {
      AdfLogger.LOGGER.finest("Image load details:", imgElement, imgElement.src, ", w=", imgElement.width, ", h=", imgElement.height, ", sW=", imgElement.style.width, ", sH=", imgElement.style.height, ", cmpW=", computedWidth, ", cmpH=", computedHeight, imgElement.complete ? ", COMPLETE" : ", INCOMPLETE", ", className=", imgElement.className)
    }
  }
  if(incompleteImageCount > 0) {
    AdfLogger.LOGGER.fine("Number of incomplete images: ", incompleteImageCount);
    if(this._incompleteImageTimer != null) {
      this.cancelTimer(this._incompleteImageTimer)
    }
    this._incompleteImageTimerAttempts = 1;
    this._incompleteImageTimer = this.scheduleTimer(this, this._attemptToRelayoutForNewlyCompleteImages, null, 500)
  }
};
AdfDhtmlPage.prototype._attemptToRelayoutForNewlyCompleteImages = function() {
  this._incompleteImageTimer = null;
  var previouslyIncompleteImages = [];
  if(document.getElementsByClassName) {
    previouslyIncompleteImages = document.getElementsByClassName(AdfDhtmlPage._INCOMPLETE_IMAGE_CLASS_NAME)
  }else {
    var imgElements = document.getElementsByTagName("img");
    var imgElementCount = imgElements.length;
    for(var elemNum = 0;elemNum < imgElementCount;elemNum++) {
      var img = imgElements[elemNum];
      if(AdfDomUtils.containsCSSClassName(img, AdfDhtmlPage._INCOMPLETE_IMAGE_CLASS_NAME)) {
        previouslyIncompleteImages.push(img)
      }
    }
  }
  var stillIncompleteImageCount = 0;
  for(var i = 0;i < previouslyIncompleteImages.length;i++) {
    var imgElement = previouslyIncompleteImages[i];
    if(imgElement.complete) {
      AdfDomUtils.removeCSSClassName(imgElement, AdfDhtmlPage._INCOMPLETE_IMAGE_CLASS_NAME);
      var componentThatOwnsThisImage = AdfRichUIPeer.getFirstAncestorComponent(imgElement);
      if(componentThatOwnsThisImage != null) {
        this.__queueDescendantResizeNotifySource(componentThatOwnsThisImage);
        var peer = componentThatOwnsThisImage.getPeer();
        if(peer && peer.__preferredSizeChangeNotify) {
          peer.__preferredSizeChangeNotify(componentThatOwnsThisImage)
        }
      }
      AdfLogger.LOGGER.finer("A previously incompletly-loaded image is now complete with src = ", imgElement.src, ", nearestClientComponent = ", componentThatOwnsThisImage, ", imgElement = ", imgElement)
    }else {
      stillIncompleteImageCount++
    }
  }
  AdfLogger.LOGGER.fine("Number of remaining incomplete images (at attempt #", this._incompleteImageTimerAttempts, "): ", stillIncompleteImageCount);
  if(stillIncompleteImageCount > 0 && this._incompleteImageTimerAttempts < 10) {
    this._incompleteImageTimerAttempts++;
    this._incompleteImageTimer = this.scheduleTimer(this, this._attemptToRelayoutForNewlyCompleteImages, null, 500)
  }else {
    if(stillIncompleteImageCount > 0) {
      AdfLogger.LOGGER.fine("Gave up trying to wait for images to load.")
    }
    this.__doDescendantResizeNotify()
  }
};
AdfDhtmlPage.prototype._handleRichResponse = function(responseDocument, reqContext) {
  var isRedirect = this._applyRichResponse(responseDocument.documentElement, true, false, false, reqContext);
  this._resetPendingStreamingIDs();
  if(!isRedirect) {
    this.__doDescendantResizeNotify();
    this.flushToAssistiveTechnology();
    if(reqContext && reqContext._responseAnnounced) {
      var laf = this.getLookAndFeel();
      var message = laf.getTranslatedString("AFResponseCompleteStatus");
      this.announceToAssistiveTechnology(message)
    }
  }
  return isRedirect
};
AdfDhtmlPage.prototype._getFocusPath = function() {
  var activeDomNode = this._activeDomNode;
  var savedFocusPath = [];
  if(activeDomNode != null) {
    var currDomNode = activeDomNode;
    while(currDomNode) {
      var currId = currDomNode.id;
      if(currId) {
        savedFocusPath[currId] = savedFocusPath.push(currDomNode) - 1
      }
      currDomNode = currDomNode.parentNode
    }
  }
  return savedFocusPath
};
AdfDhtmlPage.prototype._restoreFocusPath = function(focusPath, maxIndex) {
  AdfAssert.assertArray(focusPath);
  AdfAssert.assertNumberOrNull(maxIndex);
  var pathCount = focusPath.length;
  if(maxIndex >= pathCount) {
    maxIndex = pathCount - 1
  }
  var agent = AdfAgent.AGENT;
  for(var restoreFocusIndex = 0;restoreFocusIndex <= maxIndex;restoreFocusIndex++) {
    var originalFocusDom = focusPath[restoreFocusIndex];
    var restoreFocusId = originalFocusDom.id;
    var newFocusDom = agent.getElementById(restoreFocusId);
    if(newFocusDom != null) {
      var context = new Object;
      var focusElement = AdfDomUtils.getFirstElementMatch(newFocusDom, null, AdfFocusUtils.isFocusable, context);
      if(!focusElement) {
        focusElement = AdfDomUtils.getNextElementMatch(newFocusDom, null, true, AdfFocusUtils.isFocusable, context);
        if(!focusElement) {
          focusElement = AdfDomUtils.getPreviousElementMatch(newFocusDom, null, AdfFocusUtils.isFocusable, context)
        }
      }
      if(focusElement) {
        AdfFocusUtils.focusElement(focusElement)
      }
      break
    }
  }
};
AdfDhtmlPage.prototype._getProcessedRootsInfo = function(documentElement) {
  var processedRootsInfo;
  var processedRootsElement = AdfDomUtils.getFirstDescendentElement(documentElement, "extension");
  if(processedRootsElement && "adf-processed-roots-ext" === processedRootsElement.getAttribute("id")) {
    processedRootsInfo = {processedClientIds:null, resetClientId:null, immediateOnly:false};
    if(processedRootsElement.hasAttribute === undefined || processedRootsElement.hasAttribute && processedRootsElement.hasAttribute("processed")) {
      var processed = processedRootsElement.getAttribute("processed");
      if(processed) {
        processedRootsInfo.processedClientIds = processed.split(" ")
      }
    }
    if(processedRootsElement.hasAttribute === undefined || processedRootsElement.hasAttribute && processedRootsElement.hasAttribute("resetRoot")) {
      var resetRoot = processedRootsElement.getAttribute("resetRoot");
      if(resetRoot) {
        processedRootsInfo.resetClientId = resetRoot
      }
    }
    var immediateOnly = processedRootsElement.getAttribute("immediateOnly");
    processedRootsInfo.immediateOnly = "true" === immediateOnly
  }
  return processedRootsInfo
};
AdfDhtmlPage.prototype._removeProcessedRootsFromDirtyValues = function(processedRoots, immediateOnly, replacedDirtyValues, oldValues) {
  var agent = AdfAgent.AGENT;
  for(var dirtyClientId in replacedDirtyValues) {
    var dirtyElement = agent.getElementById(dirtyClientId);
    var dirtyComponent = AdfPage.PAGE.findComponent(dirtyClientId);
    if(!dirtyElement || !dirtyComponent || AdfUIUtils.compareValues(replacedDirtyValues[dirtyClientId], dirtyComponent.getSubmittedValue())) {
      delete replacedDirtyValues[dirtyClientId];
      continue
    }
    if(!AdfUIUtils.compareValues(oldValues[dirtyClientId], dirtyComponent.getSubmittedValue())) {
      if(!immediateOnly || this._isImmediateEditableValueComponent(dirtyClientId)) {
        if(!processedRoots) {
          delete replacedDirtyValues[dirtyClientId];
          continue
        }
        var processedRootsCount = processedRoots.length;
        for(var i = 0;i < processedRootsCount;i++) {
          var processedClientId = processedRoots[i];
          if(processedClientId == "") {
            continue
          }
          var inProcessedRoot = this._isAncestorOrSelf(processedClientId, dirtyElement);
          if(inProcessedRoot) {
            delete replacedDirtyValues[dirtyClientId]
          }
        }
      }
    }
  }
};
AdfDhtmlPage.prototype._isAncestorOrSelf = function(ancestorClientId, node) {
  var bIsAncestorOrSelf = false;
  var ancestorPopupInfos = this._poppedUpComponentInfo[ancestorClientId];
  if(ancestorPopupInfos) {
    for(var popupId in ancestorPopupInfos) {
      var currPopupInfo = ancestorPopupInfos[popupId];
      bIsAncestorOrSelf = AdfDhtmlPopupWindow.isAncestorOrSelf(currPopupInfo.contentDom, node);
      if(bIsAncestorOrSelf) {
        return true
      }
    }
  }else {
    var ancestorNode = AdfAgent.AGENT.getElementById(ancestorClientId);
    bIsAncestorOrSelf = AdfDomUtils.isAncestorOrSelf(ancestorNode, node)
  }
  if(!bIsAncestorOrSelf && node.id.indexOf(ancestorClientId) == 0) {
    var page = AdfPage.PAGE;
    var ancestorComp = page.findComponent(ancestorClientId);
    var childComp = page.findComponent(node.id);
    if(ancestorComp && childComp) {
      bIsAncestorOrSelf = childComp.isDescendant(ancestorComp)
    }
  }
  return bIsAncestorOrSelf
};
AdfDhtmlPage.prototype._applyRichResponse = function(documentElement, updateAction, needsUnescape, isStreaming, reqContext) {
  if(this._isTrackingDirtyData()) {
    this._trackErrors = true
  }
  this._richPostbackHasErrors = false;
  var isRedirect = false;
  this._pprContext = new AdfDhtmlPage._PprContext;
  try {
    var oldActiveComponents;
    var isScreenReaderMode = this.isScreenReaderMode();
    if(isScreenReaderMode) {
      oldActiveComponents = new Object;
      AdfCollections.copyInto(oldActiveComponents, this._activeComponents)
    }
    var agent = AdfAgent.AGENT;
    var rootNodeName = agent.getNodeName(documentElement);
    var pendingEditableSubtrees;
    if(rootNodeName == "content") {
      var pprNavParams = null;
      if(updateAction) {
        this._handleRichResponseAction(documentElement)
      }
      var resizeDomNodes = [];
      var domReplacedIds = [];
      var savedFocusPath = this._getFocusPath();
      var childNodes = documentElement.childNodes;
      var length = childNodes.length;
      var eventsSet;
      if(reqContext != null) {
        eventsSet = reqContext._clientEventsSet
      }
      if(eventsSet && eventsSet[AdfPollEvent.POLL_EVENT_TYPE]) {
        this._componentsUpdatedByPollEvent = new Array
      }
      var replacedDirtyValues = {};
      var replacedScrollPositions = {};
      var oldValues = {};
      var selectionRanges = {};
      var processedRootsInfo = this._getProcessedRootsInfo(documentElement);
      for(var i = 0;i < length;i++) {
        var childNode = childNodes[i];
        var childNodeName = agent.getNodeName(childNode);
        if(childNodeName == "fragment") {
          var fragmentValues = this._handleRichResponseFragment(childNode, resizeDomNodes, domReplacedIds, needsUnescape, savedFocusPath, isStreaming, replacedDirtyValues, oldValues, selectionRanges, replacedScrollPositions);
          var isIOSSafariMobile = agent.getDomWindow().AdfSafariMobileAgent && agent instanceof AdfSafariMobileAgent && agent.getOS() != AdfAgent.ANDROID_OS;
          if(fragmentValues != null) {
            if(fragmentValues.restoreFocusIndex != null && !isIOSSafariMobile) {
              this._restorePprFocusIndex = fragmentValues.restoreFocusIndex
            }
            if(fragmentValues.pprNavParams != null) {
              pprNavParams = fragmentValues.pprNavParams
            }
            if(fragmentValues.pendingEditableSubtree) {
              if(!pendingEditableSubtrees) {
                pendingEditableSubtrees = []
              }
              pendingEditableSubtrees.push(fragmentValues.pendingEditableSubtree)
            }
          }
        }else {
          if(childNodeName == "script") {
            this._handleRichResponseScript(childNode)
          }else {
            if(childNodeName == "script-library") {
              this._handleRichResponseLibrary(childNode)
            }
          }
        }
      }
      if(!this._isDirtyDataRetainPPRDisabled() && processedRootsInfo) {
        var processedRoots = processedRootsInfo.processedClientIds;
        var resetRoot = processedRootsInfo.resetClientId;
        if(resetRoot) {
          this._removeProcessedRootsFromDirtyValues([resetRoot], false, replacedDirtyValues, oldValues)
        }
        if(!AdfCollections.isEmpty(replacedDirtyValues)) {
          this._removeProcessedRootsFromDirtyValues(processedRoots, processedRootsInfo.immediateOnly, replacedDirtyValues, oldValues)
        }
        if(resetRoot) {
          this._setProcessedRoots([resetRoot], false)
        }
        this._setProcessedRoots(processedRoots, processedRootsInfo.immediateOnly);
        this._restoreDirtyValues(replacedDirtyValues);
        this._restoreSelectionRanges(selectionRanges);
        this._restoreScrollPositionsForTable(replacedScrollPositions)
      }
      if(agent.getPlatform() == AdfAgent.IE_PLATFORM) {
        this.scheduleTimer(this, this._prepareForIncompleteImages, null, 10)
      }else {
        this._prepareForIncompleteImages()
      }
      if(resizeDomNodes.length > 0) {
        this._doResizeNotify(resizeDomNodes);
        this._checkResizeNotifyDelayed()
      }
      if(domReplacedIds.length > 0) {
        var clientListeners = this._clientListeners;
        var propListeners = clientListeners ? clientListeners[AdfDomReplacedEvent.EVENT_TYPE] : null;
        if(propListeners != null) {
          AdfEventUtils.deliverEventToListeners(propListeners, new AdfDomReplacedEvent(this, domReplacedIds))
        }
      }
      if(pprNavParams != null) {
        var navAgent = AdfNavigationHistoryAgent.getInstance();
        if(navAgent) {
          var loadId = reqContext ? reqContext._loadId : null;
          navAgent.setCurrentPage(pprNavParams["viewId"], pprNavParams["queryParams"], loadId)
        }
        this._navResetPage();
        this._restorePreviousUserActivityData()
      }
      if(this._restorePprFocusIndex != undefined) {
        this._restoreFocusPath(savedFocusPath, this._restorePprFocusIndex);
        delete this._restorePprFocusIndex
      }
    }else {
      if(rootNodeName == "redirect") {
        var urlNode = documentElement.childNodes[0];
        var url = urlNode.textContent;
        if(!url) {
          url = urlNode.text
        }
        AdfAssert.assert(url, "Could not get redirect URL");
        isRedirect = true;
        this._warnUncommitted = false;
        this._notifyOfUnload = false;
        if(this.isUserActivityMonitoringOn()) {
          var contextIdNode = documentElement.childNodes[1];
          var contextId = contextIdNode.textContent;
          if(!contextId) {
            contextId = contextIdNode.text
          }
          var prevActInfo = AdfUserActivityInfo.getInstance(AdfUserActivityInfo.PREVIOUS);
          prevActInfo.setContextId(contextId);
          AdfUserActivityInfo.saveToSessionStorage()
        }
        this.__perfTimings(true, true, true, "redirect to ", url);
        var documentComponent = this.findComponent(this._documentClientId);
        this._partialRequestRedirect = true;
        var noNavigationRedirect = reqContext ? reqContext._noNavigation : false;
        (new AdfRedirectEvent(documentComponent, url, noNavigationRedirect)).queue(false)
      }else {
        if(rootNodeName == "script") {
          this._handleRichResponseScript(documentElement)
        }else {
          if(rootNodeName == "error") {
            this._richPostbackHasErrors = false;
            var nodeText = agent.getTextContent(documentElement);
            if(nodeText == null) {
              nodeText = "Unknown error during PPR"
            }
            alert(nodeText);
            if("true" == documentElement.getAttribute("redirect")) {
              this._warnUncommitted = false;
              this._notifyOfUnload = false;
              document.location.href = this._getDefaultPostbackURL()
            }
          }else {
            if(rootNodeName == "noop") {
            }else {
              if(rootNodeName == "retry") {
                var formId = reqContext.formId;
                var formElement;
                if(formId) {
                  formElement = agent.getElementById(formId)
                }
                if(!formElement) {
                  formElement = this.getDomDocument().forms[0]
                }
                this._doFullPostback(formElement, reqContext.retryParams, false, true)
              }else {
                if(rootNodeName == "reload") {
                  this.getDomWindow().location.reload(true)
                }else {
                  AdfAssert.assert(false, "invalid root node '" + rootNodeName + "' in rich response")
                }
              }
            }
          }
        }
      }
    }
    this._reattachInlineEditing(pendingEditableSubtrees)
  }finally {
    this._trackErrors = false;
    this._pprContext.notifyDispose();
    this._pprContext = null
  }
  return isRedirect
};
AdfDhtmlPage.prototype._reattachInlineEditing = function(pendingEditableSubtrees) {
  if(!pendingEditableSubtrees) {
    return
  }
  for(var n = 0;n < pendingEditableSubtrees.length;n++) {
    var sourceNode = pendingEditableSubtrees[n];
    this._filterEditableSubtree(sourceNode, this._editableCallback, this._editableCallbackContext);
    break
  }
};
AdfDhtmlPage.prototype.addEventListener = function(eventType, listener, instance) {
  this._clientListeners = AdfEventUtils.addEventListener(this._clientListeners, eventType, listener, instance)
};
AdfDhtmlPage.prototype.removeEventListener = function(eventType, listener, instance) {
  this._clientListeners = AdfEventUtils.removeEventListener(this._clientListeners, eventType, listener, instance)
};
AdfDhtmlPage.prototype.setDocumentClientId = function(documentClientId) {
  this._documentClientId = documentClientId
};
AdfDhtmlPage.prototype.__getDocumentClientId = function() {
  return this._documentClientId
};
AdfDhtmlPage.prototype.doRedirect = function(url, noNavigation) {
  AdfLogger.LOGGER.info("Redirecting to : ", url);
  var win = this.getDomWindow();
  if(win.adfpp_handleLocationChange != undefined) {
    win.adfpp_handleLocationChange(url)
  }else {
    if(noNavigation) {
      win.location.replace(url)
    }else {
      win.location.href = url
    }
  }
};
AdfDhtmlPage.prototype.streamingResponseComplete = function() {
  this._resetPendingStreamingIDs();
  this.getDataTransferService().notifyStreamingRequestComplete();
  if(this.isUserActivityMonitoringOn()) {
    var currentTime = (new Date).getTime().toString();
    var prevActInfo = AdfUserActivityInfo.getInstance(AdfUserActivityInfo.PREVIOUS);
    prevActInfo.setClientEndTime(currentTime);
    AdfUserActivityInfo.saveToSessionStorageByType(AdfUserActivityInfo.PREVIOUS);
    var secUserActInfo = AdfUserActivityInfo.getInstance(AdfUserActivityInfo.SECONDARY);
    secUserActInfo.setClientEndTime(currentTime);
    AdfUserActivityInfo.removeFromSessionStorageByType(AdfUserActivityInfo.PRIMARY);
    AdfUserActivityInfo.removeFromSessionStorageByType(AdfUserActivityInfo.SECONDARY)
  }
  this._addDelayedMessages(true);
  if(this._streamingStatus == AdfDhtmlPage._STREAMING_REQUEST_SENT) {
    this._handleInvalidPprResponse(null)
  }else {
    if(this._streamingStatus == AdfDhtmlPage._STREAMING_COMPLETE) {
      this.scheduleTimer(this, this._startGlobalActiveData, null, 500)
    }else {
      var laf = this.getLookAndFeel();
      alert(laf.getTranslatedString("af_document.UNKNOWN_STREAMING_ERROR"))
    }
  }
};
AdfDhtmlPage.prototype.streamingResponseWritten = function() {
  this._streamingStatus = AdfDhtmlPage._STREAMING_COMPLETE;
  this.__perfTimings(false, false, true, "streaming response processing done");
  if(this.isUserActivityMonitoringOn()) {
    AdfUserActivityInfo.setResponseReceivedTime(AdfUserActivityInfo.SECONDARY)
  }
};
AdfDhtmlPage.prototype.streamingResponseStarted = function() {
  this._streamingStatus = AdfDhtmlPage._STREAMING_STARTED;
  if(this._perfProfileEnabled || this._perfProfileTimingEnabled) {
    AdfLogger.PROFILER_LOGGER.info("streaming request sent;", this.getDomWindow()._afrTimingStreamingRequestStart);
    this.__perfTimings(false, false, true, "streaming response received. The ECID is: ", AdfDhtmlPage._ECID)
  }
};
AdfDhtmlPage.prototype._resetPendingStreamingIDs = function() {
  this._pendingStreamingIDs = new Object
};
AdfDhtmlPage.prototype.handleStreamingResponse = function(doc, id, needsUnescape) {
  if(this._perfProfileEnabled) {
    this.__perfTimings(false, false, false, "streaming response segment received")
  }
  var root = doc.getElementById(id);
  AdfAssert.assert(root);
  this._applyRichResponse(root.firstChild, false, needsUnescape, true, null);
  if(this._perfProfileEnabled) {
    this.__perfTimings(false, false, false, "streaming response segment processed")
  }
};
AdfDhtmlPage.prototype.updateStreamingViewState = function(doc, id) {
  var root = doc.getElementById(id);
  AdfAssert.assert(root);
  var input = root.getElementsByTagName("input")[0];
  AdfAssert.assert(input);
  var form = this.getDomDocument().forms[0];
  AdfAssert.assertDomElement(form);
  var field = form[AdfDhtmlPage._STATE_PARAM_NAME];
  AdfAssert.assertDomElement(field);
  field.parentNode.innerHTML = "<input type='hidden' name='" + AdfDhtmlPage._STATE_PARAM_NAME + "' value='" + input.getAttribute("value") + "' />"
};
AdfDhtmlPage.prototype._handleRichResponseAction = function(contentNode) {
  var action = contentNode.getAttribute("action");
  if(action) {
    var doc = this.getDomDocument();
    doc.forms[0].action = action;
    var protectedElement = doc.getElementById(AdfDhtmlPage.PROTECTED_SEARCH_TOKENIZED_QUERY_PARAMETER);
    if(protectedElement) {
      doc.forms[0].removeChild(protectedElement)
    }
  }
  var pprAction = AdfAgent.AGENT.getAttribute(contentNode, AdfDhtmlPage._CUSTOM_PPR_URL_EXPANDO);
  if(pprAction) {
    AdfAgent.AGENT.setAttribute(doc.forms[0], AdfDhtmlPage._CUSTOM_PPR_URL_EXPANDO, pprAction)
  }
};
AdfDhtmlPage.prototype._saveDirtyValueForComponent = function(dirtyComponent, replacedDirtyValues, oldValues, selectionRanges) {
  if(dirtyComponent instanceof AdfUIEditableValue) {
    var dirtyClientId = dirtyComponent.getClientId();
    var dirtyValue = dirtyComponent.getSubmittedValue();
    if(dirtyValue != null) {
      replacedDirtyValues[dirtyClientId] = dirtyValue;
      var peer = dirtyComponent.getPeer();
      peer.bind(dirtyComponent);
      if(peer && peer.getLastSubmittedValue) {
        var oldValue = dirtyComponent.getPeer().getLastSubmittedValue(dirtyComponent);
        oldValues[dirtyClientId] = oldValue
      }
      if(AdfPage.PAGE.getActiveComponent() == dirtyComponent) {
        var domElement = AdfDhtmlEditableValuePeer.GetContentNode(dirtyComponent, null);
        selectionRanges[dirtyClientId] = this._getEditableFieldSelectionRange(domElement)
      }
    }
  }
};
AdfDhtmlPage.prototype._saveValuesOfDirtyComponentsBeingReplaced = function(targetNode, replacedDirtyValues, oldValues, selectionRanges) {
  var dirtyComponents = this._getDirtyComponentsForElement(targetNode);
  var dirtyCount = dirtyComponents.length;
  for(var i = 0;i < dirtyCount;i++) {
    this._saveDirtyValueForComponent(dirtyComponents[i], replacedDirtyValues, oldValues, selectionRanges)
  }
};
AdfDhtmlPage.prototype._saveScrollPositionsForTable = function(targetNode, replacedScrollPositions) {
  var tableComp = this.findComponent(targetNode.id);
  if(tableComp && tableComp.getComponentType() == "oracle.adf.RichTable") {
    var scrollleft = tableComp.getProperty("scrollLeft");
    var scrollTop = tableComp.getProperty("scrollTop");
    var scrollPos = [scrollleft, scrollTop];
    replacedScrollPositions[targetNode.id] = scrollPos
  }
};
AdfDhtmlPage.prototype._restoreScrollPositionsForTable = function(replacedScrollPositions) {
  for(var clientId in replacedScrollPositions) {
    var comp = this.findComponent(clientId);
    if(comp && comp.getComponentType() == "oracle.adf.RichTable") {
      var scrollPos = replacedScrollPositions[clientId];
      comp.setProperty("scrollLeft", scrollPos[0], true, AdfUIComponent.PROPAGATE_NEVER);
      comp.setProperty("scrollTop", scrollPos[1], true, AdfUIComponent.PROPAGATE_NEVER)
    }
  }
};
AdfDhtmlPage.prototype._restoreDirtyValues = function(replacedDirtyValues) {
  for(var clientId in replacedDirtyValues) {
    var comp = this.findComponent(clientId);
    if(comp) {
      this.clearMessages(comp.getClientId());
      var restoredValue = replacedDirtyValues[clientId];
      var peer = comp.getPeer();
      if(peer instanceof AdfDhtmlEditableValuePeer) {
        try {
          AdfDhtmlEditableValuePeer.__restoreDisplayValue(comp, peer, restoredValue)
        }catch(e) {
          AdfLogger.LOGGER.fine("component does not support SetDisplayValue")
        }
      }
    }
  }
};
AdfDhtmlPage.prototype._restoreSelectionRanges = function(selectionRanges) {
  for(var clientId in selectionRanges) {
    var comp = this.findComponent(clientId);
    if(comp) {
      var selectionRange = selectionRanges[clientId];
      var domElement = AdfDhtmlEditableValuePeer.GetContentNode(comp, null);
      this._setEditableFieldSelectionRange(domElement, selectionRange)
    }
  }
};
AdfDhtmlPage.prototype._setEditableFieldSelectionRange = function(domElement, range) {
  if(range && range.posEnd != 0 && domElement.setSelectionRange) {
    domElement.setSelectionRange(range.posEnd, range.posEnd)
  }
};
AdfDhtmlPage.prototype._getEditableFieldSelectionRange = function(domElement) {
  var range = {};
  try {
    if(domElement.tagName.toLowerCase() == "textarea" || domElement.tagName.toLowerCase() == "input" && domElement.type.toLowerCase() == "text") {
      range.posStart = domElement.selectionStart ? domElement.selectionStart : 0;
      range.posEnd = domElement.selectionEnd ? domElement.selectionEnd : 0
    }else {
      return null
    }
  }catch(e) {
  }
  return range
};
AdfDhtmlPage.prototype._handleRichResponseFragment = function(fragmentNode, resizeDomNodes, domReplacedIds, needsUnescape, savedFocusPath, isStreaming, replacedDirtyValues, oldValues, selectionRanges, replacedScrollPositions) {
  var sourceNode = this._getFirstElementFromFragment(fragmentNode, needsUnescape);
  if(sourceNode == null) {
    AdfLogger.LOGGER.warning("Unable to locate content in partial page response fragment.  " + "If you are adding a partial target programmatically, try setting " + 'clientComponent="true" on the partial target component.');
    return null
  }
  var fragmentValues = {restoreFocusIndex:null, pprNavParams:null, pendingEditableSubtree:null};
  var id = sourceNode.getAttribute("id");
  AdfAssert.assert(id != null, "null id in response fragment");
  if(this._componentsUpdatedByPollEvent != null) {
    this._componentsUpdatedByPollEvent.push(id)
  }
  var doc = this.getDomDocument();
  var agent = AdfAgent.AGENT;
  var targetNode = agent.getElementById(id);
  if(targetNode == null) {
    AdfLogger.LOGGER.severe("unable to locate target node: " + id)
  }else {
    var isStyleHolder = sourceNode.getAttribute(AdfDhtmlPage._DOCUMENT_STYLE_HOLDER);
    if(isStyleHolder == "true") {
      var body = this.getDomDocument().body;
      var theme = sourceNode.getAttribute("theme");
      body.setAttribute("theme", theme ? theme : "");
      sourceNode.removeAttribute("theme");
      var className = sourceNode.className;
      var oldClassName = body.className;
      if(className != oldClassName) {
        body.className = className ? className : ""
      }
      sourceNode.className = "";
      var style = sourceNode.style.cssText;
      body.style.cssText = style ? style : "";
      sourceNode.style.cssText = ""
    }
    var oldQueryParams = null;
    var formElem = this.getDomDocument().forms[0];
    var uri = formElem.action;
    var queryIndex = uri.indexOf("?");
    if(queryIndex >= 0) {
      oldQueryParams = uri.substring(queryIndex)
    }
    var affectedIndex = savedFocusPath[id];
    var component = AdfRichUIPeer.getFirstAncestorComponent(targetNode.parentNode);
    var peer = component ? component.getPeer() : null;
    var isPPRNavigation = sourceNode.id == AdfDhtmlPage._NAVIGATION_WRAPPER_ID;
    if(isPPRNavigation) {
      this._resizeNotifyMap = new Object;
      this._resizeNotifyTree = new Object;
      this._descendantResizeNotifyList = new Array;
      this._serverQueue = new AdfServerEventQueue;
      this._partialTargets = null;
      this._autoPPRComponents = new Object;
      this._resetADS()
    }
    this._saveValuesOfDirtyComponentsBeingReplaced(targetNode, replacedDirtyValues, oldValues, selectionRanges);
    this._saveScrollPositionsForTable(targetNode, replacedScrollPositions);
    if(peer != null) {
      peer.replaceDomElement(component, sourceNode, targetNode);
      domReplacedIds.push(component.getClientId())
    }else {
      this.__replaceDomElement(sourceNode, targetNode)
    }
    if(affectedIndex != null && !isPPRNavigation) {
      fragmentValues.restoreFocusIndex = affectedIndex
    }
    var resizeDomNode = null;
    if(component) {
      resizeDomNode = peer.domReplaceNotify(component, sourceNode);
      this.__queueDescendantResizeNotifySource(component)
    }else {
      resizeDomNode = sourceNode
    }
    if(resizeDomNode) {
      resizeDomNodes.push(resizeDomNode)
    }
    if(isPPRNavigation) {
      var viewId = agent.getAttribute(sourceNode, AdfDhtmlPage._NAVIGATION_VIEW_ROOT);
      var queryParams = agent.getAttribute(sourceNode, AdfDhtmlPage._NAVIGATION_QUERY_PARAMS);
      queryParams = queryParams ? queryParams : oldQueryParams;
      fragmentValues.pprNavParams = {viewId:viewId, queryParams:queryParams}
    }else {
      if(!isStreaming) {
        this._setRichResponseDirty(true)
      }
    }
    var editableSubtreeId = this._editableSubtreeId;
    if(editableSubtreeId) {
      var editableSubtrees = this._getEditableSubtrees(editableSubtreeId, true);
      for(var i = 0;i < editableSubtrees.length;i++) {
        if(AdfDhtmlPopupWindow.isAncestorOrSelf(editableSubtrees[i], sourceNode)) {
          fragmentValues.pendingEditableSubtree = sourceNode;
          break
        }
      }
    }
  }
  return fragmentValues
};
AdfDhtmlPage.prototype._restorePreviousUserActivityData = function() {
  if(this.isUserActivityMonitoringOn()) {
    var prevActInfo = null;
    prevActInfo = AdfUserActivityInfo.getInstance(AdfUserActivityInfo.PREVIOUS);
    if(prevActInfo && prevActInfo.getContextId() != null) {
      AdfUserActivityInfo.restoreFromSessionStorage();
      prevActInfo.setClientEndTime((new Date).getTime().toString())
    }
  }
};
AdfDhtmlPage.prototype.__replaceDomElement = function(newElement, oldElement) {
  var agent = AdfAgent.AGENT;
  var component = null;
  var peer = null;
  if(oldElement.id != null) {
    component = AdfPage.PAGE.findComponent(oldElement.id);
    if(component != null) {
      peer = component.getPeer()
    }
  }
  var oldNodes = this._getDomNodesForRootElement(oldElement, component, peer);
  var numNodes = oldNodes.length;
  var oldNode;
  var newNodes = peer == null ? [newElement] : peer.getDomRootNodes(component, newElement);
  for(var n = 0;n < numNodes;n++) {
    this.removeComponentsInSubtree(oldNodes[n])
  }
  var removingAll = oldElement.id == AdfDhtmlPage._NAVIGATION_WRAPPER_ID;
  if(!removingAll) {
    agent.elementsRemoved(oldElement)
  }
  var parentNode = oldElement.parentNode;
  if(oldNodes.length > 1) {
    this._removeNodes(parentNode, oldNodes.slice(1, oldNodes.length), removingAll)
  }
  this._insertNodes(parentNode, oldElement, newElement, newNodes);
  if(removingAll) {
    agent.allElementsRemoved()
  }
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM && agent.getVersion() < 11) {
    var div = agent.getElementById(AdfDhtmlPage._PARSER_DIV_ID);
    div.appendChild(oldElement);
    div.innerHTML = ""
  }
  this._registerNewNodes(newNodes)
};
AdfDhtmlPage.prototype._registerNewNodes = function(newNodes) {
  var agent = AdfAgent.AGENT;
  for(var n = 0, numNodes = newNodes.length;n < numNodes;n++) {
    var newNode = newNodes[n];
    if(newNode.nodeType == 1) {
      agent.elementsAdded(newNode)
    }
  }
};
AdfDhtmlPage.prototype._getDomNodesForRootElement = function(element, component, peer) {
  var nodes = null;
  if(peer != null) {
    nodes = peer.getDomRootNodes(component, element)
  }
  if(nodes == null) {
    nodes = [element]
  }
  return nodes
};
AdfDhtmlPage.prototype._removeNodes = function(parentNode, nodes, removingAll) {
  var agent = AdfAgent.AGENT;
  for(var n = 0, numNodes = nodes.length;n < numNodes;n++) {
    var node = nodes[n];
    if(!removingAll && node.nodeType == 1) {
      agent.elementsRemoved(node)
    }
    parentNode.removeChild(node)
  }
};
AdfDhtmlPage.prototype._insertNodes = function(parentNode, oldElement, newElement, newNodes) {
  var insertBefore = oldElement.nextSibling;
  parentNode.replaceChild(newElement, oldElement);
  for(var n = 1, numNodes = newNodes.length;n < numNodes;n++) {
    if(insertBefore != null) {
      parentNode.insertBefore(newNodes[n], insertBefore)
    }else {
      parentNode.appendChild(newNodes[n])
    }
  }
};
AdfDhtmlPage.prototype._getFirstElementFromFragment = function(fragmentNode, needsUnescape) {
  var fragmentChildNodes = fragmentNode.childNodes;
  var outerHTML;
  var fragChildCount = fragmentChildNodes.length;
  AdfAssert.assert(fragChildCount >= 1, "invalid fragment child count");
  if(fragChildCount > 1) {
    var data = new Array(fragChildCount);
    for(var n = 0;n < fragChildCount;n++) {
      var cdataNode = fragmentChildNodes[n];
      AdfAssert.assert(cdataNode.nodeType == 4, "invalid fragment content");
      AdfAssert.assert(cdataNode.data, "null fragment content");
      data.push(cdataNode.data)
    }
    outerHTML = data.join("")
  }else {
    var cdataNode = fragmentChildNodes[0];
    AdfAssert.assert(cdataNode.nodeType == 4, "invalid fragment content");
    AdfAssert.assert(cdataNode.data, "null fragment content");
    outerHTML = cdataNode.data
  }
  if(needsUnescape) {
    outerHTML = outerHTML.replace(/__AFR_XML_ELEM/g, "xml")
  }
  outerHTML = "<div>" + outerHTML + "</div>";
  var doc = this.getDomDocument();
  var div = null;
  var agent = AdfAgent.AGENT;
  div = agent.getElementById(AdfDhtmlPage._PARSER_DIV_ID);
  if(!div) {
    div = doc.createElement("div");
    div.style.display = "none";
    div.id = AdfDhtmlPage._PARSER_DIV_ID;
    doc.body.appendChild(div);
    agent.elementsAdded(div)
  }
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM) {
    div.innerHTML = "<div>ie</div>" + outerHTML;
    div.removeChild(div.firstChild)
  }else {
    div.innerHTML = outerHTML
  }
  var wrapperDiv = div.firstChild;
  div.removeChild(wrapperDiv);
  var elem = AdfDhtmlPage._getFirstElementWithId(wrapperDiv);
  return elem
};
AdfDhtmlPage._getFirstElementWithId = function(domNode) {
  var childNodes = domNode.childNodes;
  var length = childNodes.length;
  for(var i = 0;i < length;i++) {
    var childNode = childNodes[i];
    if(childNode.nodeType == 1) {
      if(childNode.id) {
        return childNode
      }
      return AdfDhtmlPage._getFirstElementWithId(childNode)
    }
  }
  return null
};
AdfDhtmlPage.prototype._loadScript = function(source) {
  var loadedLibraries = this._loadedLibraries;
  var strippedSource = AdfDhtmlPage._stripSessionId(source);
  if(loadedLibraries[strippedSource]) {
    return
  }
  loadedLibraries[strippedSource] = true;
  var xmlHttp = new AdfXMLRequest;
  xmlHttp.setSynchronous(true);
  try {
    xmlHttp.send(source, null, true)
  }catch(e) {
    this._loadScriptFailed(source, e)
  }
  if(xmlHttp.getStatus() == 200) {
    var agent = AdfAgent.AGENT;
    try {
      agent.execScript(this.getDomWindow(), xmlHttp.getResponseText())
    }catch(e) {
      this._logAsGlobalError(e);
      AdfLogger.LOGGER.severe("Error: " + e.message + "\nWhile executing script: " + source);
      throw e;
    }
  }
  xmlHttp.cleanup();
  delete xmlHttp
};
AdfDhtmlPage.prototype._loadScriptFailed = function(source, e) {
  if(source.indexOf("http:") == 0 || source.indexOf("https:") == 0) {
    var failedConnectionText = this.getFailedConnectionText();
    if(failedConnectionText != null) {
      var message = failedConnectionText;
      alert(failedConnectionText + " (source=" + source + ")")
    }
    AdfLogger.LOGGER.warning("Failed to load script from " + source + ".  This might be due to cross-origin rewriting of script resource uris.")
  }
  throw e;
};
AdfDhtmlPage.prototype._createStyle = function(content) {
  return AdfAgent.AGENT.createStyle(content)
};
AdfDhtmlPage.prototype._loadCss = function(source) {
  var loadedCss = this._loadedCss;
  AdfAssert.assert(loadedCss != null, "Unexpected loadedCss ", loadedCss);
  var head = AdfDomUtils.getFirstDescendentElement(AdfAgent.AGENT.getDomDocument().documentElement, "HEAD");
  if(loadedCss[source]) {
    var elems = head.getElementsByTagName("LINK");
    var count = elems.length;
    for(var i = count - 1;i >= 0;--i) {
      var elem = elems[i];
      if(elem.getAttribute("href") == source) {
        return elem
      }
    }
  }else {
    loadedCss[source] = true
  }
  var link = document.createElement("link");
  link.setAttribute("type", "text/css");
  link.setAttribute("rel", "stylesheet");
  link.setAttribute("href", source);
  head.appendChild(link);
  return link
};
AdfDhtmlPage.prototype._getDirtyComponentsForElement = function(rootElement) {
  if(rootElement == null) {
    return this._getDirtyComponents()
  }
  var comps = [];
  var dirtyComponentIds = this._uncommittedIds;
  var peer = null;
  for(var clientId in dirtyComponentIds) {
    var comp = page.findComponent(clientId);
    if(comp) {
      peer = comp.getPeer();
      if(peer) {
        peer.bind(comp)
      }
    }
    if(comp instanceof AdfUIEditableValue && peer instanceof AdfDhtmlEditableValuePeer && AdfRichUIPeer.isComponentContainedByElement(comp, rootElement) && peer && !peer.getMarkDirtyFlag()) {
      comps.push(comp)
    }
  }
  comp = this.getActiveComponent();
  peer = null;
  if(comp instanceof AdfUIEditableValue) {
    peer = comp.getPeer();
    if(peer && peer instanceof AdfDhtmlEditableValuePeer) {
      peer.bind(comp);
      if(!peer.getMarkDirtyFlag()) {
        if(AdfRichUIPeer.isComponentContainedByElement(comp, rootElement) && !AdfUIUtils.compareValues(peer.getLastSubmittedValue(comp), comp.getSubmittedValue())) {
          comps.push(comp)
        }
      }else {
        peer.setMarkDirtyFlag(false)
      }
    }
  }
  this._initPotentiallyDirtyFlags();
  return comps
};
AdfDhtmlPage.prototype._getDirtyComponents = function() {
  var comps = [];
  var resetFlags = false;
  for(var clientId in this._uncommittedIds) {
    var comp = this.findComponent(clientId);
    if(comp == null) {
      delete this._uncommittedIds[clientId];
      resetFlags = true
    }
    comps.push(comp)
  }
  if(resetFlags) {
    this._initPotentiallyDirtyFlags()
  }
  return comps
};
AdfDhtmlPage.prototype._forcePreloadOfAllImages = function() {
  var allImages = document.getElementsByTagName("IMG");
  for(var i = 0;i < allImages.length;i++) {
    var clone = new Image(1, 1);
    clone.src = allImages[i].getAttribute("src")
  }
};
AdfDhtmlPage.prototype._handleRichResponseScript = function(scriptNode) {
  var source = scriptNode.getAttribute("src");
  if(source) {
    this._loadScript(source)
  }else {
    var agent = AdfAgent.AGENT;
    var nodeText = agent.getTextContent(scriptNode);
    try {
      agent.execScript(this.getDomWindow(), nodeText)
    }catch(problem) {
      AdfLogger.LOGGER.severe("Error: " + problem + "\nWhile handling rich response script: " + nodeText);
      this._logAsGlobalError(problem)
    }
  }
};
AdfDhtmlPage.prototype._handleRichResponseLibrary = function(scriptNode) {
  var nodeText = AdfAgent.AGENT.getTextContent(scriptNode);
  this._loadScript(nodeText)
};
AdfDhtmlPage.prototype._doResizeNotify = function(domNodes) {
  for(var i = 0;i < domNodes.length;i++) {
    var domNode = domNodes[i];
    this.doResizeNotifyDom(domNode, true)
  }
};
AdfDhtmlPage.prototype._notifyWindowOpened = function(isDialog) {
  var expectedId = this._expectedWindowId;
  this._notifyWindowEvent(true, expectedId, null, isDialog)
};
AdfDhtmlPage.prototype._notifyWindowUnregistered = function(windowId, pageId) {
  this._notifyWindowEvent(false, windowId, pageId, false)
};
AdfDhtmlPage.prototype.needsWindowUnload = function() {
  this._notifyOfUnload = true
};
AdfDhtmlPage.prototype._notifyWindowUnloaded = function() {
  if(this._notifyOfUnload) {
    this._notifyOfUnload = false;
    var windowId = this.getDomWindow().name;
    if(windowId) {
      var doc = this.getDomDocument();
      var content = null;
      var actionURL = null;
      var form = doc.forms[0];
      if(form) {
        actionURL = this._getPPRURL(form);
        var params = null;
        var deltas = this._getAndClearDeltas(false);
        if(deltas) {
          params = {"oracle.adf.view.rich.DELTAS":deltas}
        }
        content = this._getPostbackContent(form, params)
      }else {
        actionURL = this._getDefaultPostbackURL()
      }
      var xmlr = new AdfXMLRequest;
      xmlr.setSynchronous(true);
      xmlr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      xmlr.setRequestHeader("Adf-Window-Unloaded", true);
      xmlr.setRequestHeader("Adf-Window-Id", windowId);
      if(this._notifyOfUnloadUrl) {
        xmlr.setRequestHeader("Adf-Window-Url", this._notifyOfUnloadUrl)
      }
      xmlr.send(actionURL, content);
      xmlr.cleanup();
      delete xmlr
    }
  }
};
AdfDhtmlPage.prototype._notifyWindowEvent = function(isWindowOpen, windowId, pageId, isDialog) {
  AdfAssert.assertBoolean(isWindowOpen);
  AdfAssert.assertString(windowId);
  AdfAssert.assertStringOrNull(pageId);
  var headerMap = this._windowEventHeaderMap;
  if(isWindowOpen) {
    if(windowId == null || windowId == "") {
      windowId = "null"
    }
    headerMap = {"Adf-Window-Opened":"true", "Adf-Window-Id":windowId};
    if(isDialog) {
      headerMap["Adf-IsDialog"] = "true"
    }
  }else {
    if(headerMap == null) {
      headerMap = {"Adf-Window-Unregistered":"true", "Adf-Window-Unregistered-Id":windowId, "Adf-Page-Unregistered-Id":pageId}
    }else {
      var newWindowId = headerMap["Adf-Window-Unregistered-Id"] + ":" + windowId;
      var newPageId = headerMap["Adf-Page-Unregistered-Id"] + ":" + pageId;
      headerMap["Adf-Window-Unregistered-Id"] = newWindowId;
      headerMap["Adf-Page-Unregistered-Id"] = newPageId
    }
  }
  this._windowEventHeaderMap = headerMap;
  this.__queueEventTimerIfNeeded()
};
AdfDhtmlPage.prototype.__notifyWindowCloseImmediately = function(windowClosed, returnId) {
  if(this._inAppNavigationFlag == false) {
    var xmlHttp = new AdfXMLRequest;
    xmlHttp.setSynchronous(true);
    if(windowClosed) {
      xmlHttp.setRequestHeader("Adf-Window-Closed", "true");
      xmlHttp.setRequestHeader("Adf-Dialog-Return-Id", returnId)
    }else {
      xmlHttp.setRequestHeader("Adf-Window-Unregistered", "true");
      xmlHttp.setRequestHeader("Adf-Window-Unregistered-Id", this._getWindowId());
      xmlHttp.setRequestHeader("Adf-Page-Unregistered-Id", this._getPageId())
    }
    var actionURL = this._getDefaultPostbackURL();
    var body = "windowClosed";
    xmlHttp.send(actionURL, body)
  }
};
AdfDhtmlPage._doResizeNotify = function(node, forceResize, checkAll) {
  if(node) {
    var component = node.component;
    if(component) {
      var domElement = AdfRichUIPeer.getDomElementForComponent(component);
      var newClientWidth = domElement.clientWidth;
      var newClientHeight = domElement.clientHeight;
      var oldClientWidth = node.clientWidth;
      var oldClientHeight = node.clientHeight;
      if(newClientWidth == 0 || newClientHeight == 0 || newClientWidth == oldClientWidth && newClientHeight == oldClientHeight && !forceResize) {
        node.clientWidth = newClientWidth;
        node.clientHeight = newClientHeight;
        if(!checkAll) {
          return
        }
      }else {
        node.clientWidth = newClientWidth;
        node.clientHeight = newClientHeight;
        component.resizeNotify(oldClientWidth, oldClientHeight, newClientWidth, newClientHeight)
      }
    }
    var children = node.children;
    if(children) {
      var length = children.length;
      for(var i = 0;i < length;i++) {
        AdfDhtmlPage._doResizeNotify(children[i], false, checkAll)
      }
    }
  }
};
AdfDhtmlPage.prototype._checkResizeNotifyDelayed = function() {
  var timeout = 500;
  var timer = this._checkResizeNotifyTimer;
  if(timer) {
    this.rescheduleTimer(timer, timeout)
  }else {
    this._checkResizeNotifyTimer = this.scheduleTimer(this, this._checkResizeNotifyCallback, null, timeout)
  }
};
AdfDhtmlPage.prototype._checkResizeNotifyCallback = function() {
  this._checkResizeNotifyTimer = null;
  this.__perfTimings(false, true, false, "_checkResizeNotifyCallback", "(start)");
  AdfDhtmlPage._doResizeNotify(this._resizeNotifyTree, false, true);
  this.__perfTimings(false, false, false, "_checkResizeNotifyCallback", "(end)")
};
AdfDhtmlPage._appendUrlFormEncoded = function(buffer, key, value) {
  if(buffer.length > 0) {
    buffer = buffer + "&"
  }
  return buffer + key + "=" + encodeURIComponent(value).replace(/\'/g, "%27").replace(/%20/g, "+")
};
AdfDhtmlPage.prototype._setSelectedEditingComponents = function(newSelection) {
  AdfAssert.assertArrayOrNull(newSelection);
  var oldSelection = this.getSelectedEditingComponents();
  if(newSelection == oldSelection) {
    return
  }
  var selectedStyleClass = "p_AFInlineSelected";
  var selectionIndex;
  if(oldSelection != null) {
    var oldSelectionCount = oldSelection.length;
    for(selectionIndex = 0;selectionIndex < oldSelectionCount;selectionIndex++) {
      AdfDomUtils.removeCSSClassName(AdfRichUIPeer.getDomContentElementForComponent(oldSelection[selectionIndex]), selectedStyleClass)
    }
  }
  var newSelectionCount = newSelection ? newSelection.length : 0;
  var newSelectedClientIds;
  if(newSelectionCount) {
    newSelectedClientIds = [];
    for(selectionIndex = 0;selectionIndex < newSelectionCount;selectionIndex++) {
      newSelectedClientIds.push(newSelection[selectionIndex].getClientId())
    }
  }else {
    newSelectedClientIds = null
  }
  this._selectedEditingComponents = newSelectedClientIds;
  if(newSelectionCount) {
    for(selectionIndex = 0;selectionIndex < newSelectionCount;selectionIndex++) {
      AdfDomUtils.addCSSClassName(AdfRichUIPeer.getDomContentElementForComponent(newSelection[selectionIndex]), selectedStyleClass)
    }
  }
  var editedComponent = this.getEditedComponent();
  if(editedComponent && AdfCollections.indexOf(newSelection, editedComponent) == -1) {
    this.setEditedComponent(null)
  }
  AdfEventUtils.firePropertyChangeEvent(this._propertyChangeListeners, this, AdfPage.SELECTED_EDITING_COMPONENTS_PROPERTY, oldSelection, newSelection)
};
AdfDhtmlPage.prototype._isAncestorComponentOrSelf = function(possibleAncestor, possibleChild) {
  if(possibleAncestor === possibleChild) {
    return true
  }else {
    return this._isAncestorComponent(possibleAncestor, possibleChild)
  }
};
AdfDhtmlPage.prototype._isAncestorComponent = function(possibleAncestor, possibleChild) {
  AdfAssert.assertPrototype(possibleAncestor, AdfUIComponent);
  AdfAssert.assertPrototype(possibleChild, AdfUIComponent);
  var ancestorContent = AdfRichUIPeer.getDomContentElementForComponent(possibleAncestor);
  var currDom = AdfRichUIPeer.getDomNodeForComponent(possibleChild).parentNode;
  while(currDom) {
    if(currDom === ancestorContent) {
      return true
    }
    currDom = currDom.parentNode
  }
  return false
};
AdfDhtmlPage.prototype._intersectSelectionWithEditableSubtree = function(editableSubtree, selection) {
  AdfAssert.assertPrototypeOrNull(editableSubtree, AdfUIComponent);
  AdfAssert.assertArrayOrNull(selection);
  if(editableSubtree == null) {
    return null
  }
  return this._intersectSelectionWithEditableSubtreeDom(editableSubtree.getPeer().getDomNode(), selection)
};
AdfDhtmlPage.prototype._intersectSelectionWithEditableSubtreeDom = function(editableSubtreeDom, selection) {
  if(editableSubtreeDom == null) {
    return null
  }
  AdfAssert.assertDomNode(editableSubtreeDom);
  AdfAssert.assertArrayOrNull(selection);
  var selectionCount = selection != null ? selection.length : 0;
  if(selectionCount == 0) {
    return null
  }
  var newSelection = [];
  for(var i = 0;i < selectionCount;i++) {
    var currSelectedComponent = selection[i];
    var peer = currSelectedComponent.getPeer();
    peer.bind(currSelectedComponent);
    var currSelectedComponentDom = peer.getDomNode();
    if(AdfDhtmlPopupWindow.isAncestorOrSelf(editableSubtreeDom, currSelectedComponentDom)) {
      newSelection.push(currSelectedComponent)
    }
  }
  if(newSelection.length == selectionCount) {
    newSelection = selection
  }
  return newSelection
};
AdfDhtmlPage.prototype._isComponentInlineSelectable = function(componentDomElement) {
  return AdfDomUtils.containsCSSClassName(componentDomElement, AdfDhtmlPage._EDITABLE_STYLE) || AdfDomUtils.containsCSSClassName(componentDomElement, AdfDhtmlPage._SELECTABLE_STYLE)
};
AdfDhtmlPage.prototype._inlineSelectionListener = function(event) {
  var agent = AdfAgent.AGENT;
  var domEventType = event.type;
  var preventDefault = true;
  var isMouseMove = domEventType === "mousemove";
  if(isMouseMove || domEventType == "mouseover" || domEventType == "mousedown" || domEventType == "mouseout") {
    if(isMouseMove || domEventType == "mousedown") {
      preventDefault = !agent.isChromeEvent(event);
      if(!preventDefault) {
        return
      }
    }
    if(!isMouseMove) {
      var eventTarget = agent.getEventTarget(event);
      var component = AdfRichUIPeer.getFirstAncestorComponent(eventTarget);
      var editableSubtree = this.getEditableSubtree();
      var contentDomElement;
      while(component != null) {
        contentDomElement = AdfRichUIPeer.getDomContentElementForComponent(component);
        if(this._isComponentInlineSelectable(contentDomElement)) {
          break
        }else {
          if(component != editableSubtree) {
            component = component.getParent()
          }else {
            component = null
          }
        }
      }
      if(component && (domEventType == "mouseover" || domEventType == "mouseout")) {
        var isIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
        var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
        if(!(isIE && isRTL)) {
          var hoverStyle = AdfRichUIPeer.HOVER_TARGET_STYLECLASS;
          if(domEventType == "mouseover") {
            var oldHoverClientId = this._hoverComponentId;
            var newHoverClientId = component.getClientId();
            if(oldHoverClientId !== newHoverClientId) {
              if(oldHoverClientId) {
                this._removeStyleFromComponent(oldHoverClientId, hoverStyle)
              }
              this._hoverComponentId = newHoverClientId;
              AdfDomUtils.addCSSClassName(contentDomElement, hoverStyle)
            }
          }else {
            if(domEventType == "mouseout") {
              oldHoverClientId = this._hoverComponentId;
              if(oldHoverClientId) {
                this._removeStyleFromComponent(oldHoverClientId, hoverStyle);
                this._hoverComponentId = null
              }
            }
          }
        }else {
          AdfLogger.LOGGER.info("Due to a bug in IE, skinning's hover-target pseudo class not supported on IE in right to left mode.")
        }
      }else {
        if(component && domEventType == "mousedown") {
          var filterFunction = this._editableCallback;
          var filterContext = this._editableCallbackContext;
          if(!this._getFilterResult(component, filterFunction, filterContext)) {
            var prevSibling = contentDomElement.previousSibling;
            component = null;
            while(prevSibling) {
              var nodeType = prevSibling.nodeType;
              if(nodeType == 8) {
                var commentComponent = this._getComponentFromComment(prevSibling);
                if(commentComponent && this._getFilterResult(commentComponent, filterFunction, filterContext)) {
                  component = commentComponent;
                  break
                }
              }else {
                if(nodeType == 1) {
                  break
                }
              }
              prevSibling = prevSibling.previousSibling
            }
          }
          if(component) {
            this.setEditedComponent(component, event)
          }
        }
      }
    }
  }
  var currInlineEditor = this._inlineEditor;
  if(currInlineEditor != null) {
    currInlineEditor.handleEvent(event)
  }
  if(preventDefault) {
    agent.eatEvent(event)
  }else {
    agent.stopPropagation(event)
  }
};
AdfDhtmlPage.prototype._removeStyleFromComponent = function(clientId, styleClass) {
  var removeComponent = this.findComponent(clientId);
  if(removeComponent) {
    var removeDomElement = AdfRichUIPeer.getDomContentElementForComponent(removeComponent);
    return AdfDomUtils.removeCSSClassName(removeDomElement, styleClass)
  }else {
    return false
  }
};
AdfDhtmlPage._inlineSelectionStub = function(event) {
  AdfPage.PAGE._inlineSelectionListener(event)
};
AdfDhtmlPage.prototype.setDefaultMessageHandlerComponentId = function(id, slaveId) {
  if(id != null) {
    this._defaultMessageKey = id
  }
  this._messageSlaveKey = slaveId
};
AdfDhtmlPage.prototype.getDefaultMessageHandlerComponentId = function() {
  return this._defaultMessageKey
};
AdfDhtmlPage.prototype.getMessageHandlerSlaveComponentId = function() {
  return this._messageSlaveKey
};
AdfDhtmlPage.prototype.addMessage = function(componentId, facesMessage, toBeRemoved) {
  var messageId = this._resolveMessageComponentId(componentId, true);
  if(this.findComponent(messageId) == null) {
    for(var streamingId in this._pendingStreamingIDs) {
      if(messageId.indexOf(streamingId) == 0) {
        this._delayMessageForComponent(messageId, facesMessage, toBeRemoved);
        AdfLogger.LOGGER.info("A message for client id '" + messageId + "' is being added as delayed messages");
        return
      }
    }
    if(AdfAssert.DEBUG) {
      AdfAssert.assert(false, "A message for client id '" + messageId + "' is being added. No client component with that id can be found. ")
    }
  }
  var array = this._messages[messageId];
  if(!array) {
    array = [];
    array.sorted = [];
    array.maxType = 0;
    array.compId = messageId;
    array.title = toBeRemoved;
    this._messages[messageId] = array
  }
  var type = AdfFacesMessage.getTypeFromMessage(facesMessage);
  if(this._trackErrors && type >= AdfFacesMessage.TYPE_ERROR) {
    this._richPostbackHasErrors = true
  }
  if(!array.sorted[type]) {
    array.sorted[type] = []
  }
  array.push(facesMessage);
  array.sorted[type].push(facesMessage);
  if(type > array.maxType) {
    array.maxType = type
  }
  var globalType = this._global_max_msg_type;
  if(!globalType || type > globalType) {
    if(type == null) {
      delete this._global_max_msg_type
    }else {
      this._global_max_msg_type = type
    }
  }
  this._notifyComponent(messageId, array)
};
AdfDhtmlPage.prototype.showMessages = function(componentId) {
  componentId = this._resolveMessageComponentId(componentId, true);
  var allMessages = this.getAllMessages();
  var messageArray = allMessages[componentId];
  var component = this.findComponent(componentId);
  if(component != null) {
    var peer = component.getPeer();
    peer.bind(component);
    if(messageArray != null) {
      peer.messageShow(component, messageArray["maxType"], messageArray)
    }else {
      peer.messageShow(component)
    }
  }
};
AdfDhtmlPage.prototype.getMessages = function(componentId) {
  componentId = this._resolveMessageComponentId(componentId, true);
  return this._messages[componentId]
};
AdfDhtmlPage.prototype.getAllMessages = function() {
  var allMessages = this._messages;
  var visibleMessages = {};
  for(messageId in allMessages) {
    var currComponent = this.findComponent(messageId);
    if(currComponent == null) {
      AdfLogger.LOGGER.info("AdfDhtmlPage.getAllMessages: ignoring messages for non-existing component: ", currComponent);
      continue
    }
    var currDomElement = AdfRichUIPeer.getDomElementForComponent(currComponent);
    if(AdfDomUtils.isInVisibleSubtree(currDomElement)) {
      visibleMessages[messageId] = allMessages[messageId]
    }else {
      AdfLogger.LOGGER.info("AdfDhtmlPage.getAllMessages: ignoring messages for hidden component: ", currComponent)
    }
  }
  return visibleMessages
};
AdfDhtmlPage.prototype.getClientIdsWithMessages = function(rootId) {
  var ids = [];
  var messages = this._messages;
  var defaultId = this._defaultMessageKey;
  var agent = AdfAgent.AGENT;
  var rootNode;
  if(rootId != null) {
    var rootComp = AdfPage.PAGE.findComponent(rootId);
    if(rootComp && rootComp instanceof AdfRichPopup) {
      rootNode = AdfDhtmlPopupPeer.getContentDom(rootComp)
    }else {
      rootNode = agent.getElementById(rootId)
    }
  }
  for(var clientId in messages) {
    if(!rootNode && clientId == defaultId) {
      ids.push(null)
    }else {
      var currComponent = this.findComponent(clientId);
      if(currComponent == null) {
        continue
      }
      var currDomElement = AdfRichUIPeer.getDomElementForComponent(currComponent);
      if(AdfDomUtils.isInVisibleSubtree(currDomElement)) {
        if(rootNode == null || rootId == clientId || AdfDomUtils.isAncestor(rootNode, currDomElement)) {
          ids.push(clientId)
        }
      }
    }
  }
  return ids
};
AdfDhtmlPage.prototype.__setGlobalMessagesResetStrategy = function(strategy) {
  this._globalMessagesResetStrategy = strategy
};
AdfDhtmlPage.prototype.clearMessages = function(componentId) {
  componentId = this._resolveMessageComponentId(componentId, false);
  var messages = this._messages[componentId];
  if(messages != null) {
    delete this._messages[componentId];
    delete this._global_max_msg_type;
    this._notifyComponent(componentId, null)
  }
  this._clearDelayedMessages(componentId)
};
AdfDhtmlPage.prototype.clearAllMessages = function() {
  var toBlank = [];
  for(var id in this._messages) {
    toBlank.push(id)
  }
  this._messages = {};
  delete this._global_max_msg_type;
  for(var index in toBlank) {
    this._notifyComponent(toBlank[index], null)
  }
  this._clearAllDelayedMessages()
};
AdfDhtmlPage.prototype.hasMessages = function(componentId) {
  return this.getMessages(componentId) != null
};
AdfDhtmlPage.prototype.clearSubtreeMessages = function(rootId) {
  var messageIds = this.getClientIdsWithMessages();
  if(messageIds) {
    var agent = AdfAgent.AGENT;
    var rootComp = AdfPage.PAGE.findComponent(rootId);
    var rootNode;
    if(rootComp && rootComp instanceof AdfRichPopup) {
      rootNode = AdfDhtmlPopupPeer.getContentDom(rootComp)
    }else {
      rootNode = agent.getElementById(rootId)
    }
    if(rootNode) {
      for(var i = 0;i < messageIds.length;i++) {
        var messageId = messageIds[i];
        if(messageId != null) {
          var messageNode = agent.getElementById(messageId);
          if(!messageNode || rootId == messageId || AdfDomUtils.isAncestor(rootNode, messageNode)) {
            this.clearMessages(messageId)
          }
        }
      }
    }
  }
};
AdfDhtmlPage.prototype._resolveMessageComponentId = function(componentId, useDefaultAsFallback) {
  if(!useDefaultAsFallback) {
    return componentId == null ? this.getDefaultMessageHandlerComponentId() : componentId
  }
  if(componentId != null) {
    var component = this.findComponent(componentId);
    if(component instanceof AdfUIEditableValue) {
      return componentId
    }
    var overrideElemId = AdfPage._FOR_CONTAINER_PREFIX + componentId;
    var overrideElem = AdfAgent.AGENT.getElementById(overrideElemId);
    if(overrideElem != null) {
      return componentId
    }
  }
  return this._defaultMessageKey
};
AdfDhtmlPage.prototype._getMaxType = function() {
  var maxType = this._global_max_msg_type;
  if(!maxType) {
    for(var f in this._messages) {
      var message = this._messages[f];
      if(message != null && (maxType == null || message.maxType > maxType)) {
        maxType = message.maxType
      }
    }
    if(maxType != null) {
      this._global_max_msg_type = maxType
    }
  }
  return maxType
};
AdfDhtmlPage.prototype._notifyComponent = function(componentId, messageArray) {
  if(componentId != this._defaultMessageKey) {
    var overrideElementId = AdfPage._FOR_CONTAINER_PREFIX + componentId;
    var overrideElement = AdfAgent.AGENT.getElementById(overrideElementId);
    if(overrideElement != null && !this.isScreenReaderMode()) {
      if(messageArray == null) {
        AdfDomUtils.removeAllNodes(overrideElement)
      }else {
        messageArray["overridden"] = true;
        AdfDomUtils.removeAllNodes(overrideElement);
        AdfMessageUtils.appendComponentMessageInlineDom(overrideElement, messageArray)
      }
    }
    var component = this.findComponent(componentId);
    if(component != null) {
      var peer = component.getPeer();
      peer.bind(component);
      if(messageArray != null) {
        peer.messageNotify(component, messageArray["maxType"], messageArray)
      }else {
        peer.messageNotify(component)
      }
      var keepPropagating = !component.dontPropagateDescendantMessageChanges();
      var ancestor = component.getParent();
      while(ancestor && keepPropagating) {
        peer = ancestor.getPeer();
        if(peer) {
          peer.bind(ancestor);
          peer.descendantMessageChanged(ancestor)
        }
        keepPropagating = !ancestor.dontPropagateDescendantMessageChanges();
        ancestor = ancestor.getParent()
      }
    }
  }
  component = this.findComponent(this._defaultMessageKey);
  if(component != null) {
    peer = component.getPeer();
    peer.bind(component);
    peer.messageNotify(component, this._getMaxType(), messageArray)
  }
};
AdfDhtmlPage.prototype._addDelayedMessages = function(showMessages) {
  var delayedMessages = this._delayedMessages;
  var addDelayedMessage = false;
  for(var messageId in delayedMessages) {
    if(this.findComponent(messageId) == null) {
      continue
    }
    var messagesArray = delayedMessages[messageId];
    var count = messagesArray.length;
    for(var i = 0;i < count;i++) {
      var messsageEntry = messagesArray[i];
      var title = messsageEntry.pop();
      var facesMessage = messsageEntry.pop();
      this.addMessage(messageId, facesMessage, title);
      addDelayedMessage = true
    }
    this._clearDelayedMessages(messageId)
  }
  if(showMessages && addDelayedMessage) {
    this.showMessages()
  }
};
AdfDhtmlPage.prototype._delayMessageForComponent = function(componentId, facesMessage, title) {
  var messageId = componentId;
  var array = this._delayedMessages[messageId];
  if(!array) {
    array = [];
    this._delayedMessages[messageId] = array
  }
  var messsageEntryArray = [];
  messsageEntryArray.push(facesMessage);
  messsageEntryArray.push(title);
  array.push(messsageEntryArray)
};
AdfDhtmlPage.prototype._clearDelayedMessages = function(componentId) {
  var messages = this._delayedMessages[componentId];
  if(messages != null) {
    delete this._delayedMessages[componentId]
  }
};
AdfDhtmlPage.prototype._clearAllDelayedMessages = function() {
  this._delayedMessages = {}
};
AdfDhtmlPage.prototype.isActiveDataSupported = function() {
  return!AdfCollections.isEmpty(this._activeComponents)
};
AdfDhtmlPage.prototype.updateAutoPPRComponents = function(pageId, clientIds) {
  this._setPageId(pageId);
  var autoPPRComponents = this._autoPPRComponents;
  var argCount = arguments.length;
  var stopADSClientIds = this._stopADSClientIds;
  for(var i = 1;i < argCount;i++) {
    var clientId = arguments[i];
    AdfAssert.assertString(clientId);
    if(clientId in stopADSClientIds) {
      delete stopADSClientIds[clientId];
      AdfCollections.removeArrayValue(stopADSClientIds, clientId)
    }
    autoPPRComponents[clientId] = true
  }
};
AdfDhtmlPage.prototype.initializeActiveForm = function(wls, ctxName) {
  AdfAssert.assertBoolean(wls);
  this._ACTIVE_FORM_URL = wls ? ctxName + "/adwwls/wls.ads" : "adw.jspx"
};
AdfDhtmlPage.prototype.updateActiveDataComponents = function(masterWindowId, masterPageId, pageId, clientIds, changeCounts) {
  AdfAssert.assertString(masterWindowId);
  this._setMasterWindowId(masterWindowId);
  this._setMasterPageId(masterPageId);
  this._setPageId(pageId);
  var argCount = arguments.length;
  AdfAssert.assert(argCount % 2 == 1, "An equal number of clientId and changeCount parameters are required");
  var activeComponents = this._activeComponents;
  for(var i = 3;i < argCount;i++) {
    var clientId = arguments[i];
    AdfAssert.assertString(clientId);
    i++;
    var changeCount = arguments[i];
    AdfAssert.assertNumber(changeCount);
    var needsStart = !(clientId in activeComponents);
    activeComponents[clientId] = new Object;
    activeComponents[clientId].changeCount = changeCount;
    if(needsStart) {
      AdfLogger.LOGGER.fine("Register active data on:", clientId);
      if(!this._admInitialized) {
        this._initActivePage()
      }
      this._updateStartActiveDataStateChange(clientId);
      var component = AdfPage.PAGE.findComponent(clientId);
      if(component) {
        component.registerADSAccessibility()
      }
    }
  }
};
AdfDhtmlPage.prototype._startGlobalActiveData = function() {
  this._canReceiveActiveDataCount++;
  if(this._canReceiveActiveDataCount == 1) {
    if(!this._admInitialized && this._getMasterWindowId() != null) {
      this._initActivePage()
    }
    this._updateDeliveryTimer()
  }
};
AdfDhtmlPage.prototype._stopGlobalActiveData = function() {
  this._canReceiveActiveDataCount--
};
AdfDhtmlPage.prototype.stopActiveData = function() {
};
AdfDhtmlPage.prototype.startActiveData = function() {
};
AdfDhtmlPage.prototype._registerWindowWithADSMaster = function(registeringWindow) {
  AdfAssert.assert(registeringWindow);
  var windowMap = this._windowNameToWindow;
  windowMap[registeringWindow.name] = registeringWindow
};
AdfDhtmlPage.prototype._initializeADSIFrame = function() {
  var iframeName = this._ACTIVE_FRAME_NAME;
  var formName = this._ACTIVE_FORM_NAME;
  var domWindow = this.getDomWindow();
  var iframeWindow = domWindow.frames[iframeName];
  var currDocument = this.getDomDocument();
  var sourceForm = currDocument.forms[0];
  var url = this._ACTIVE_FORM_URL;
  url += "?" + "action=" + this._ESTABLISH_CHANNEL_ACTION + "&" + "windowId=" + this._windowId + "&" + "pageId=" + this._pageId + "&" + "replaceMasterWindowId=" + this._replaceMasterWindowId + "&" + "replaceMasterPageId=" + this._replaceMasterPageId;
  AdfLogger.LOGGER.fine("Connecting for master window:", this._windowId, " in window:", domWindow.name);
  this._notifyADSConnectionStateChange(AdfDhtmlPage.PushChannelStates.CONNECTING);
  iframeWindow.location.replace(url)
};
AdfDhtmlPage.prototype._processPushData = function(clientId, payload, changeCount, isLate, eventNumber, perfLogging) {
  AdfAssert.assertString(clientId);
  AdfAssert.assert(payload !== undefined);
  AdfAssert.assertNumber(changeCount);
  AdfAssert.assertBoolean(perfLogging);
  AdfAssert.assertNumberOrNull(eventNumber);
  var component = this.findComponent(clientId);
  var pushAccepted = false;
  if(component) {
    if(isLate) {
      AdfLogger.LOGGER.fine("Event received beyond the configured threshold for component:", clientId)
    }
    var lastChangeCount = this._activeComponents[clientId].changeCount;
    if(lastChangeCount === undefined) {
      AdfLogger.LOGGER.severe("Active data for unregistered component:", clientId)
    }else {
      if(changeCount > lastChangeCount) {
        pushAccepted = component.processPushData(payload, changeCount);
        if(eventNumber !== undefined) {
          var currentTime = (new Date).getTime();
          if(eventNumber % 500 == 0) {
            AdfLogger.LOGGER.info("ADS: GENERAL: component finished processing event : ", " windowId:", this._windowId, " pageId:", this._pageId, " clientId:", clientId, " eventId:", changeCount, " client time:", currentTime, " event number:", eventNumber)
          }
          if(perfLogging) {
            AdfLogger.LOGGER.info("ADS: component finished processing event : ", " windowId:", this._windowId, " pageId:", this._pageId, " clientId:", clientId, " eventId:", changeCount, " client time:", currentTime)
          }
        }
        this._activeComponents[clientId].changeCount = changeCount
      }else {
        AdfLogger.LOGGER.fine("Old active data for", clientId, " declined")
      }
    }
  }else {
    AdfLogger.LOGGER.fine("No active component:", clientId, " Deregestering component")
  }
  return pushAccepted
};
AdfDhtmlPage.prototype.__processActiveDataEvent = function(windowId, pageId, clientId, payload, changeCount, timeStamp, eventNumber, perfLogging) {
  AdfAssert.assertString(windowId);
  AdfAssert.assertString(pageId);
  AdfAssert.assertString(clientId);
  AdfAssert.assertObject(payload);
  AdfAssert.assertNumber(changeCount);
  AdfAssert.assertNumber(timeStamp);
  AdfAssert.assertNumber(perfLogging);
  AdfAssert.assertNumberOrNull(eventNumber);
  this._lastActiveDataActivityTime = (new Date).getTime();
  if(eventNumber !== undefined) {
    if(eventNumber % 500 == 0) {
      AdfLogger.LOGGER.info("ADS: GENERAL: active data manager receives event : ", " windowId:", windowId, " pageId:", pageId, " clientId:", clientId, " eventId:", changeCount, " event generation time:", timeStamp, " client time:", this._lastActiveDataActivityTime, " event number:", eventNumber)
    }
    if(perfLogging) {
      AdfLogger.LOGGER.info("ADS: active data manager receives event : ", " windowId:", windowId, " pageId:", pageId, " clientId:", clientId, " eventId:", changeCount, " event generation time:", timeStamp, " client time:", this._lastActiveDataActivityTime)
    }
  }
  var targetPage = this._getTargetPage(windowId);
  if(targetPage) {
    if(targetPage._getPageId() == pageId) {
      var millisecondsBehind = this._getMilliSecondsBehind(timeStamp);
      var isLate = millisecondsBehind > this._latencyThreshold;
      if(eventNumber !== undefined) {
        targetPage._processPushData(clientId, payload, changeCount, isLate, eventNumber, perfLogging == 1)
      }else {
        targetPage._processPushData(clientId, payload, changeCount, isLate)
      }
    }
  }
};
AdfDhtmlPage.prototype._getTargetPage = function(windowId) {
  AdfAssert.assertString(windowId);
  if(windowId == this._windowId) {
    return this
  }
  var targetWindow = null;
  var windowMap = this._windowNameToWindow;
  if(windowMap != null) {
    targetWindow = windowMap[windowId]
  }
  var targetPage = null;
  if(this._testAdfPageExistence(targetWindow)) {
    try {
      targetPage = targetWindow.AdfPage.PAGE
    }catch(e) {
      AdfLogger.LOGGER.fine("Could not access active window:", windowId)
    }
  }
  return targetPage
};
AdfDhtmlPage.prototype._refreshPushComponent = function(clientId) {
  AdfAssert.assertString(clientId);
  if(!(clientId in this._activeComponents)) {
    AdfLogger.LOGGER.info("ADS: active data component is not refreshed because it's not active, clientId=", clientId);
    return false
  }
  var component = this.findComponent(clientId);
  if(component) {
    this.addPartialTargets(component);
    return true
  }else {
    this._stopActiveData(clientId);
    AdfLogger.LOGGER.info("No active component:", clientId);
    return false
  }
};
AdfDhtmlPage.prototype._refreshAllPushComponents = function() {
  var activeComponents = this._activeComponents;
  for(var clientId in activeComponents) {
    this._refreshPushComponent(clientId)
  }
};
AdfDhtmlPage.prototype._notifyADSConnectionStateChange = function(adsConnectionState) {
  AdfAssert.assert(this._masterWindowId == this._windowId, "_notifyADSConnectionStateChange should not be called on a non-master window");
  var currWindow = undefined;
  var candidateWindow = undefined;
  var windowMap = this._getRegistryMap();
  for(var winId in windowMap) {
    currWindow = windowMap[winId];
    if(this._testAdfPageExistence(currWindow)) {
      try {
        currWindow.AdfPage.PAGE._broadcastADSConnectionStateChange(adsConnectionState)
      }catch(e) {
        AdfLogger.LOGGER.logError(e, AdfLogger.WARNING, "Error broadcasting ADS connection state to window ", winId)
      }
    }
  }
};
AdfDhtmlPage.prototype._stopActiveData = function(clientId) {
  AdfAssert.assertString(clientId);
  delete this._activeComponents[clientId];
  this._updateStopActiveDataStateChange(clientId)
};
AdfDhtmlPage.prototype._stopAutoPPR = function(clientId) {
  AdfAssert.assertString(clientId);
  delete this._autoPPRComponents[clientId];
  AdfLogger.LOGGER.fine("Stop autoPPR active data on ", clientId);
  this._updateStopActiveDataStateChange(clientId, null)
};
AdfDhtmlPage.prototype._updateStopActiveDataStateChange = function(clientId) {
  var startADSClientIds = this._startADSClientIds;
  if(clientId in startADSClientIds) {
    delete startADSClientIds[clientId];
    this._startADSClientIdCount--
  }else {
    var stopADSClientIds = this._stopADSClientIds;
    if(!(clientId in stopADSClientIds)) {
      AdfLogger.LOGGER.fine("Queue ADS stop on clientID:", clientId);
      stopADSClientIds[clientId] = true;
      stopADSClientIds.push(clientId);
      this._updateDeliveryTimer()
    }
  }
};
AdfDhtmlPage.prototype._updateStartActiveDataStateChange = function(clientId) {
  var startADSClientIds = this._startADSClientIds;
  var stopADSClientIds = this._stopADSClientIds;
  if(stopADSClientIds.hasOwnProperty(clientId)) {
    delete stopADSClientIds[clientId];
    AdfCollections.removeArrayValue(stopADSClientIds, clientId)
  }else {
    startADSClientIds[clientId] = true;
    this._startADSClientIdCount++;
    AdfLogger.LOGGER.fine("Request start of active data on ", clientId, " startRefCount:", this._canReceiveActiveDataCount);
    if(this._canReceiveActiveDataCount > 0) {
      this._updateDeliveryTimer()
    }
  }
};
AdfDhtmlPage.prototype._setBodyCursorForActivePage = function() {
  if(AdfAgent.AGENT.getPlatform() != AdfAgent.GECKO_PLATFORM) {
    return
  }
  var currDocument = this.getDomDocument();
  var cursorURL = this.getResourceURL("/afr/default_arrow_black.cur");
  if(AdfAgent.AGENT.getOS() == AdfAgent.WINDOWS_OS) {
    cursorURL = this.getResourceURL("/afr/default_arrow_white.cur")
  }
  currDocument.body.style.cursor = "url('" + cursorURL + "'), progress"
};
AdfDhtmlPage.prototype._initActivePage = function() {
  var domWindow = this.getDomWindow();
  AdfAssert.assert(domWindow["AdfDhtmlActiveDataSupport"], "AdfActiveDataService JavaScript feature not loaded. Please make sure it is not blocked by ad block software.");
  this._ads = new AdfDhtmlActiveDataSupport;
  var masterWindowId = this._getMasterWindowId();
  var masterPageId = this._getMasterPageId();
  var pageId = this._getPageId();
  var windowId = null;
  if(!domWindow.name) {
    windowId = this._expectedWindowId
  }else {
    windowId = domWindow.name
  }
  if(!this._admInitialized) {
    this._setBodyCursorForActivePage();
    this._admInitialized = true;
    this._initAdm();
    var wrappedMasterWindowId = this._wrapMasterWindowId(masterWindowId);
    if(masterWindowId == windowId) {
      AdfLogger.LOGGER.info("self is master window: ", masterWindowId);
      if(this._windowNameToWindow == null) {
        this._windowNameToWindow = new Object
      }
      domWindow.name = wrappedMasterWindowId;
      this._setWindowId(windowId);
      this._setMasterWindowId(masterWindowId);
      this._setReplaceMasterWindowId(masterWindowId);
      this._setPageId(pageId);
      this._setMasterPageId(masterPageId);
      this._setReplaceMasterPageId(masterPageId);
      this._setMasterWindowRef(domWindow);
      this._registerWindowWithADSMaster(domWindow);
      this._initializeADSIFrame()
    }else {
      if(domWindow.name == wrappedMasterWindowId) {
        this._claimMaster(masterWindowId, masterPageId)
      }else {
        AdfLogger.LOGGER.info("non-master window, needs to register with: ", masterWindowId);
        domWindow.name = windowId;
        var masterPage = null;
        var masterWindow = this._getADSMasterWindow(masterWindowId);
        if(masterWindow != null) {
          masterPage = masterWindow.AdfPage.PAGE;
          masterPage._registerWindowWithADSMaster(domWindow);
          this._setWindowId(windowId);
          this._setMasterWindowId(masterWindowId);
          this._setReplaceMasterWindowId(masterWindowId);
          this._setPageId(pageId);
          this._setMasterPageId(masterPageId);
          this._setReplaceMasterPageId(masterPageId);
          this._setMasterWindowRef(masterWindow)
        }else {
          this._setWindowId(domWindow.name);
          this._setPageId(pageId);
          this._claimMaster(masterWindowId, masterPageId)
        }
      }
    }
  }
};
AdfDhtmlPage.prototype._initAdm = function() {
  AdfLogger.LOGGER.fine("Initialize active data manager");
  this._windowId = undefined;
  this._masterWindowId = undefined;
  this._masterWindowRef = undefined;
  this._replaceMasterWindowId = undefined;
  this._pageId = undefined;
  this._masterPageId = undefined;
  this._replaceMasterPageId = undefined;
  this._ESTABLISH_CHANNEL_ACTION = "establishChannel";
  this._RECONNECT_ACTION = "reconnect";
  this._POLL_EVENTS_ACTION = "pollEvents";
  this._ACTIVE_FRAME_NAME = "afr::PushIframe";
  this._ACTIVE_FORM_NAME = "_activeDataForm";
  this._ACTIVE_WINDOW_REGISTRY_MAP = this._windowNameToWindow
};
AdfDhtmlPage.prototype._getADSMasterWindow = function(masterWindowId) {
  AdfAssert.assertString(masterWindowId);
  var masterWindow = this.getDomWindow().open("", masterWindowId, "height=1,width=1,top=0,left=0,status=no,toolbar=no,menubar=no,location=no");
  if(!this._testAdfPageExistence(masterWindow) || masterWindow.AdfPage.PAGE._getMasterWindowId() != masterWindowId) {
    AdfLogger.LOGGER.warning("can't get the master window for: ", masterWindowId);
    try {
      var loc = masterWindow.location;
      if(loc == null || loc == "about:blank" || loc == "about:Tabs") {
        masterWindow.close()
      }
    }catch(e) {
    }
    masterWindow = null
  }
  return masterWindow
};
AdfDhtmlPage.prototype._getRegistryMap = function() {
  if(this._windowNameToWindow == null) {
    this._windowNameToWindow = new Object
  }
  return this._windowNameToWindow
};
AdfDhtmlPage.prototype._getWindowId = function() {
  return this._windowId
};
AdfDhtmlPage.prototype._setWindowId = function(windowId) {
  this._windowId = windowId
};
AdfDhtmlPage.prototype._getPageId = function() {
  return this._pageId
};
AdfDhtmlPage.prototype._setPageId = function(pageId) {
  this._pageId = pageId
};
AdfDhtmlPage.prototype._setMasterWindowId = function(masterWindowId) {
  this._masterWindowId = masterWindowId
};
AdfDhtmlPage.prototype._getMasterWindowId = function() {
  return this._masterWindowId
};
AdfDhtmlPage.prototype._getMasterPageId = function() {
  return this._masterPageId
};
AdfDhtmlPage.prototype._setMasterPageId = function(masterPageId) {
  this._masterPageId = masterPageId
};
AdfDhtmlPage.prototype._setMasterWindowRef = function(masterWinRef) {
  this._masterWindowRef = masterWinRef
};
AdfDhtmlPage.prototype._setReplaceMasterWindowId = function(replaceMasterWindowId) {
  this._replaceMasterWindowId = replaceMasterWindowId
};
AdfDhtmlPage.prototype._setReplaceMasterPageId = function(replaceMasterPageId) {
  this._replaceMasterPageId = replaceMasterPageId
};
AdfDhtmlPage.prototype._getActiveFrame = function() {
  return this.getDomWindow().frames[this._ACTIVE_FRAME_NAME]
};
AdfDhtmlPage.prototype._getClientStateMap = function() {
  return this._activeComponents
};
AdfDhtmlPage.prototype._handleBeforeUnload = function(evt) {
  AdfLogger.LOGGER.getLogWriter().flush();
  if(this.isPerformingFullSubmit() && !this._waitingForDocumentUnload) {
    return
  }
  var warningDisplayed = false;
  var message = undefined;
  var hasOpenModalDialogs = AdfDhtmlRichDialogService.hasModalDialogsOpen();
  if(this._warnUncommitted || this._checkDirtyDataComponents() || hasOpenModalDialogs) {
    if(!this._dataDirty && !this._hasLocalUncommitted && this.getDomWindow()["AdfDhtmlInputBasePeer"] != undefined) {
      var peer = null;
      var comp = this.getActiveComponent();
      if(comp) {
        peer = comp.getPeer()
      }
      if(peer && peer instanceof AdfDhtmlInputBasePeer) {
        peer.__simulateBlur(comp)
      }
    }
    if(this._dataDirty || this._hasLocalUncommitted || this._checkDirtyDataComponents() || hasOpenModalDialogs) {
      warningDisplayed = true;
      var laf = this.getLookAndFeel();
      var msgKey = !hasOpenModalDialogs ? "af_document.MSG_UNCOMMITTED_DATA" : "af_document.MSG_DEPENDENT_DIALOGS";
      message = laf.getTranslatedString(msgKey);
      evt.returnValue = message
    }
  }
  this._beforeUnloadDelayed = false;
  if(!warningDisplayed) {
    if(!this._pageExpired && !this.isPortlet() && !this._isPropertyDeltaSyncDisabled()) {
      this._deliverQueuedServerEvents(true, true)
    }
    this._onBeforeUnload()
  }else {
    this._beforeUnloadDelayed = true;
    return message
  }
};
AdfDhtmlPage.prototype._onBeforeUnload = function() {
  this._notifyWindowUnloaded();
  this._unloading = true;
  var masterWindowId = this._getMasterWindowId();
  if(masterWindowId) {
    if(masterWindowId == this._getWindowId() && this._handlingFailover != true) {
      this._handleADSChannelMigration()
    }
    this.__notifyWindowCloseImmediately(false, "")
  }
  if(this.isUserActivityMonitoringOn()) {
    if(this._partialRequestRedirect) {
      AdfUserActivityInfo.saveToSessionStorage()
    }
  }
};
AdfDhtmlPage.prototype._cancelADSTimers = function() {
  var page = AdfPage.PAGE;
  var currentTimer = this._adsConnectionCheckTimer;
  if(currentTimer) {
    try {
      page.cancelTimer(currentTimer)
    }catch(e) {
      AdfLogger.LOGGER.logErrorAsInfo(e, "Error clearing connection check timer")
    }
    this._adsConnectionCheckTimer = null
  }
  var pollingTimer = this._pollingTimer;
  if(pollingTimer) {
    try {
      page.cancelTimer(pollingTimer)
    }catch(e) {
      AdfLogger.LOGGER.logErrorAsInfo(e, "Error clearing polling timer")
    }
    this._pollingTimer = null
  }
};
AdfDhtmlPage.prototype._handleADSChannelMigration = function() {
  try {
    this._cancelADSTimers();
    var windowMap = this._getRegistryMap();
    var candidateWindow = this._findYoungestWindow(windowMap);
    if(candidateWindow == null) {
      AdfLogger.LOGGER.fine("Could not find candidate window to migrate to");
      return
    }
    var newMasterPage = candidateWindow.AdfPage.PAGE;
    var newWindowMap = newMasterPage._getRegistryMap();
    AdfCollections.copyInto(newWindowMap, windowMap);
    candidateWindow.name = this._wrapMasterWindowId(newMasterPage._getWindowId());
    newMasterPage._setReplaceMasterWindowId(this._getWindowId());
    newMasterPage._setReplaceMasterPageId(this._getPageId());
    newMasterPage._setMasterWindowId(newMasterPage._getWindowId());
    newMasterPage._setMasterPageId(newMasterPage._getPageId());
    var registryMap = newMasterPage._getRegistryMap();
    var createChannelFunc = newMasterPage.createCallback(newMasterPage._createADSChannel);
    candidateWindow.setTimeout(createChannelFunc, 50)
  }catch(e) {
    AdfLogger.LOGGER.info("Can not migrate the active channel to other windows")
  }
};
AdfDhtmlPage.prototype._createADSChannel = function(reconnect) {
  this._makeADSChannelRequest(true, reconnect)
};
AdfDhtmlPage.prototype.__registerWithNewMaster = function(masterWindowId, masterPageId) {
  AdfLogger.LOGGER.info("register with new master ", masterWindowId);
  this._setMasterWindowId(masterWindowId);
  this._setMasterPageId(masterPageId);
  try {
    var masterWindow = this._getADSMasterWindow(masterWindowId);
    if(masterWindow != null) {
      this._setMasterWindowRef(masterWindow);
      var newMasterPage = masterWindow.AdfPage.PAGE;
      if(newMasterPage != null) {
        newMasterPage._registerWindowWithADSMaster(this.getDomWindow());
        var windowMap = this._getRegistryMap();
        var newWindowMap = newMasterPage._getRegistryMap();
        AdfCollections.copyInto(newWindowMap, windowMap)
      }
    }else {
      AdfLogger.LOGGER.fine("can't find the master page " + masterWindowId);
      this._claimMaster(masterWindowId, masterPageId)
    }
    if(this._pushChannelState != AdfDhtmlPage.PushChannelStates.CONNECTED) {
      newMasterPage._notifyADSConnectionStateChange(AdfDhtmlPage.PushChannelStates.CONNECTED)
    }
    this._startGlobalActiveData()
  }catch(e) {
    AdfLogger.LOGGER.info("ADS register with new master failed")
  }
  this._windowNameToWindow = null
};
AdfDhtmlPage.prototype._findYoungestWindow = function(windowMap) {
  var currWindow = undefined;
  var candidateWindow = undefined;
  var domWindow = this.getDomWindow();
  for(var winId in windowMap) {
    currWindow = windowMap[winId];
    if(currWindow != domWindow) {
      if(this._testAdfPageExistence(currWindow)) {
        if(!currWindow.AdfPage.PAGE.isHAMigrated()) {
          candidateWindow = windowMap[winId]
        }
      }
    }
  }
  return candidateWindow
};
AdfDhtmlPage.prototype._createADSChannelParameterMap = function(reconnect) {
  var parameterMap = undefined;
  if(this._replaceMasterWindowId == null) {
    this._replaceMasterWindowId = this._masterWindowId
  }
  var action = undefined;
  if(reconnect != true) {
    action = this._ESTABLISH_CHANNEL_ACTION
  }else {
    action = this._RECONNECT_ACTION
  }
  parameterMap = {"action":action, "windowId":this._windowId, "replaceMasterWindowId":this._replaceMasterWindowId, "pageId":this._pageId, "replaceMasterPageId":this._replaceMasterPageId};
  return parameterMap
};
AdfDhtmlPage.prototype._createADSClientStateMap = function(createChannel) {
  var clientStateMap = new Object;
  if(createChannel) {
    var windowMap = this._getRegistryMap();
    for(var winId in windowMap) {
      var windowObject = windowMap[winId];
      try {
        if(this._testAdfPageExistence(windowObject)) {
          var pageRef = windowObject.AdfPage.PAGE;
          var pageId = pageRef._getPageId();
          var key = winId + ":" + pageId;
          clientStateMap[key] = pageRef._getClientStateMap()
        }
      }catch(e) {
        AdfLogger.LOGGER.logErrorAsInfo(e, "Could not access active page:" + winId)
      }
    }
  }else {
    var domWindow = this.getDomWindow();
    try {
      if(this._testAdfPageExistence(domWindow)) {
        clientStateMap[this._getWindowId()] = this._getClientStateMap()
      }
    }catch(e) {
      AdfLogger.LOGGER.logErrorAsInfo(e, "Could not access active page:" + domWindow.name)
    }
  }
  return clientStateMap
};
AdfDhtmlPage.prototype._makeADSChannelRequest = function(createChannel, reconnect) {
  var channelParameterMap = this._createADSChannelParameterMap(reconnect);
  var clientStateMap = new Object;
  var activeFrame = this.getDomWindow().frames[this._ACTIVE_FRAME_NAME];
  this._notifyADSConnectionStateChange(AdfDhtmlPage.PushChannelStates.RECONNECTING);
  this._sendADSChannelRequest(channelParameterMap, clientStateMap)
};
AdfDhtmlPage.prototype._claimMaster = function(masterWindowId, masterPageId) {
  AdfAssert.assertString(masterWindowId);
  AdfAssert.assertString(masterPageId);
  var windowId = this._getWindowId();
  var pageId = this._getPageId();
  if(this._windowNameToWindow == null) {
    this._windowNameToWindow = new Object
  }
  this._setMasterWindowId(windowId);
  this._setReplaceMasterWindowId(masterWindowId);
  this._setMasterPageId(pageId);
  this._setReplaceMasterPageId(masterPageId);
  var domWindow = this.getDomWindow();
  this._setMasterWindowRef(domWindow);
  this._registerWindowWithADSMaster(domWindow);
  this._createADSChannel()
};
AdfDhtmlPage.prototype._wrapMasterWindowId = function(windowId) {
  var newId = windowId.replace(/\//g, "S").replace(/-/g, "M").replace(/\./g, "D");
  return newId
};
AdfDhtmlPage.prototype._testAdfPageExistence = function(windowObject) {
  var page = null;
  try {
    page = windowObject.AdfPage.PAGE
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsInfo(e, "Could not access active window")
  }
  if(page != null) {
    return true
  }else {
    return false
  }
};
AdfDhtmlPage.PushChannelStates = {CONNECTED:0, CONNECTING:1, DISCONNECTED:2, RECONNECTING:3};
AdfDhtmlPage._DEFAULT_ACTIVEDATA_CONFIG = {"restartInterval":15, "maxReconnectionRetries":10, "reconnectWaitTime":1E4, "latencyThreshold":1E4, "transport":"STREAMING", "pollingInterval":5E3, "keepAliveInterval":1E4};
AdfDhtmlPage.prototype.__initLongPolling = function() {
  var helper = this.__getUserInactivityTimeoutHelper();
  if(helper && helper.hasTimedOut()) {
    if(!this._longPollingInitTimer) {
      this._longPollingInitTimer = this.scheduleTimer(this, this.__initLongPolling, null, 300)
    }
    return 300
  }
  if(this._longPollingInitTimer) {
    var currentTimer = this._longPollingInitTimer;
    this.cancelTimer(currentTimer);
    this._longPollingInitTimer = null
  }
  var params = {"action":this._POLL_EVENTS_ACTION, "windowId":this._getWindowId(), "pageId":this._getPageId()};
  this._sendADSChannelRequest(params, null);
  this.__setConnected()
};
AdfDhtmlPage.prototype.__setConfiguration = function(config) {
  try {
    this._transport = config.transport;
    this._pollingInterval = config.pollingInterval;
    this._maxReconnectionRetries = config.maxReconnectionRetries;
    this._reconnectWaitTime = config.reconnectWaitTime;
    this._latencyThreshold = config.latencyThreshold;
    this._restartInterval = config.restartInterval;
    this._keepAliveInterval = config.keepAliveInterval
  }catch(e) {
    AdfLogger.LOGGER.warning("Exception occurred while setting configuration. Name: " + e.name + ", Message: " + e.message)
  }
};
AdfDhtmlPage.prototype.__refreshPushComponent = function(windowId, pageId, clientId) {
  AdfAssert.assertString(windowId);
  AdfAssert.assertString(pageId);
  AdfAssert.assertString(clientId);
  this._lastActiveDataActivityTime = (new Date).getTime();
  var targetWindow = null;
  var windowMap = this._windowNameToWindow;
  if(windowMap != null) {
    targetWindow = windowMap[windowId]
  }
  if(this._testAdfPageExistence(targetWindow)) {
    try {
      targetWindow.AdfPage.PAGE._refreshPushComponent(clientId)
    }catch(e) {
      AdfLogger.LOGGER.fine("can't access the window ", windowId)
    }
  }else {
    AdfLogger.LOGGER.info("No window found for refreshing component: windowId = ", windowId)
  }
};
AdfDhtmlPage.prototype._sendADSChannelRequest = function(channelParameterMap, clientStateMap) {
  var domWindow = this.getDomWindow();
  var iframeName = this._ACTIVE_FRAME_NAME;
  var iframeWindow = domWindow.frames[iframeName];
  var queryString = "";
  for(var param in channelParameterMap) {
    queryString += "&" + param + "=" + channelParameterMap[param]
  }
  var idx = 1;
  var pageIdKey = "pageKey";
  var componentIdKey = "componentId";
  var componentIndexKey = "componentIndex";
  for(var winId in clientStateMap) {
    var windowStateMap = clientStateMap[winId];
    if(!AdfCollections.isEmpty(windowStateMap)) {
      queryString += "&" + pageIdKey + idx + "=" + winId;
      for(var compId in windowStateMap) {
        var currentComponentIdKey = componentIdKey + idx;
        var currentComponentIndexKey = componentIndexKey + idx;
        queryString += "&" + currentComponentIdKey + "=" + compId;
        queryString += "&" + currentComponentIndexKey + "=" + windowStateMap[compId].changeCount
      }
    }
    idx = idx + 1
  }
  var index = queryString.indexOf("&");
  if(queryString.length > 0 && index == 0) {
    queryString = queryString.substring(1)
  }
  var url = this._ACTIVE_FORM_URL + "?" + queryString;
  if(this._transport == "STREAMING") {
    if(url.length > 2E3) {
      var windows = new Array;
      this._handleAllFailovers(windows)
    }
    iframeWindow.location.replace(url)
  }else {
    var dts = this.getDataTransferService(false, true);
    this._pollingRequest = dts.sendPollingRequest(url, [this._ads])
  }
};
AdfDhtmlPage.prototype.__setServerTimestamp = function(timestamp) {
  this._serverTimeDifference = AdfDhtmlPage._getTimeDifference(timestamp);
  if(this._perfProfileEnabled) {
    AdfLogger.PROFILER_LOGGER.info("ADS: Server time difference: ", this._serverTimeDifference, ";;")
  }
};
AdfDhtmlPage._getTimeDifference = function(timestamp) {
  if(timestamp == null) {
    return 0
  }
  var oTimestamp = new Date(timestamp);
  var oNow = new Date;
  return oNow - oTimestamp
};
AdfDhtmlPage.prototype._getMilliSecondsBehind = function(timestamp) {
  return AdfDhtmlPage._getTimeDifference(timestamp) - this._serverTimeDifference
};
AdfDhtmlPage.prototype.__recordActiveDataActivity = function() {
  var now = (new Date).getTime();
  this._lastActiveDataActivityTime = now;
  AdfLogger.LOGGER.finer(now, ": got keep alive")
};
AdfDhtmlPage.prototype._handleDisconnect = function() {
  AdfLogger.LOGGER.finer("ADS Channel Disconnected");
  this._reconnectRetries = 0;
  if(this._isWindowClosing) {
    AdfLogger.LOGGER.finer("Closing window ... will not try to reconnect");
    return
  }
  this._notifyADSConnectionStateChange(AdfDhtmlPage.PushChannelStates.RECONNECTING);
  this.scheduleTimer(this, this._reconnect, null, this._reconnectWaitTime)
};
AdfDhtmlPage.prototype.__setConnected = function() {
  AdfLogger.LOGGER.finer("ADS Channel Connected");
  this._notifyADSConnectionStateChange(AdfDhtmlPage.PushChannelStates.CONNECTED);
  if(this._transport == "POLLING") {
    this._pollSucceeded = true
  }
  this._reconnectRetries = 0;
  this._lastActiveDataActivityTime = 0;
  var pageId = this._getPageId();
  this._setMasterPageId(pageId);
  this._setReplaceMasterPageId(pageId);
  var windowId = this._getWindowId();
  this._setMasterWindowId(windowId);
  this._setReplaceMasterWindowId(windowId);
  if(this._transport == "POLLING") {
    this._startPolling()
  }else {
    var domWindow = this.getDomWindow();
    this._prepareAdsConnectionTimer()
  }
  this.__perfTimings(false, false, false, "ADS channel connected")
};
AdfDhtmlPage.prototype.__stopADS = function() {
  AdfLogger.LOGGER.finer("ADS stopped due to user inactivity timeout.");
  if(this._transport == "LONG_POLLING") {
    if(this._pollingRequest) {
      try {
        this._pollingRequest.abort();
        delete this._pollingRequest;
        this._pollingRequest = null
      }catch(e) {
        this._pollingRequest = null;
        AdfLogger.LOGGER.fine("Failed to abort Long-Polling request due to error: ", e.message)
      }
    }
  }else {
    if(this._transport == "STREAMING") {
      var iframeName = this._ACTIVE_FRAME_NAME;
      var domWindow = this.getDomWindow();
      var iframeWindow = domWindow.frames[iframeName];
      if(iframeWindow && iframeWindow.frameElement) {
        iframeWindow.frameElement.src = ""
      }
      AdfLogger.LOGGER.fine("Terminate the push channel for master window:", this._getWindowId(), " in window:", domWindow.name)
    }
  }
};
AdfDhtmlPage.prototype._prepareAdsConnectionTimer = function() {
  if(this._adsConnectionCheckTimer) {
    this.cancelTimer(this._adsConnectionCheckTimer)
  }
  var frequency = this._latencyThreshold + this._keepAliveInterval;
  this._adsConnectionCheckTimer = this.scheduleTimer(this, this._checkAdsConnection, null, frequency)
};
AdfDhtmlPage.prototype._checkAdsConnection = function() {
  var helper = this.__getUserInactivityTimeoutHelper();
  if(helper && helper.hasTimedOut()) {
    return 300
  }
  var latencyThreshold = this._latencyThreshold;
  var keepAliveInterval = this._keepAliveInterval;
  if(this._pushChannelState == AdfDhtmlPage.PushChannelStates.CONNECTED) {
    var elapsed = AdfDhtmlPage._getTimeDifference(this._lastActiveDataActivityTime);
    if(elapsed > latencyThreshold + keepAliveInterval) {
      this._handleDisconnect()
    }
  }
  return latencyThreshold + keepAliveInterval
};
AdfDhtmlPage.prototype._pollForEvents = function() {
  var helper = this.__getUserInactivityTimeoutHelper();
  if(helper && helper.hasTimedOut()) {
    return
  }
  var params = {"action":this._POLL_EVENTS_ACTION, "windowId":this._getWindowId(), "pageId":this._getPageId()};
  var clientStateMap = this._createADSClientStateMap(true);
  this._lastPollTime = (new Date).getTime();
  var displayState;
  if(this._pollSucceeded) {
    displayState = AdfDhtmlPage.PushChannelStates.CONNECTING
  }else {
    displayState = AdfDhtmlPage.PushChannelStates.RECONNECTING
  }
  this._notifyADSConnectionStateChange(displayState);
  this._pollSucceeded = false;
  this._sendADSChannelRequest(params, clientStateMap)
};
AdfDhtmlPage.prototype._reconnect = function() {
  if(this._isWindowClosing) {
    this._reconnectRetries = 0;
    return
  }
  AdfLogger.LOGGER.fine("Reconnect called ", this._reconnectRetries + 1, " time(s)");
  if(this._pushChannelState != AdfDhtmlPage.PushChannelStates.CONNECTED) {
    if(this._reconnectRetries < this._maxReconnectionRetries) {
      this._reconnectRetries++;
      if(AdfAgent.AGENT.getPlatform() == AdfAgent.GECKO_PLATFORM && this._reconnectRetries > 3) {
        var domWindow = this.getDomWindow();
        domWindow.stop()
      }
      this._createADSChannel(true);
      this.scheduleTimer(this, this._reconnect, null, this._reconnectWaitTime)
    }else {
      AdfLogger.LOGGER.warning("Cannot connect. Exceeded number of retries for reconnection");
      this._notifyADSConnectionStateChange(AdfDhtmlPage.PushChannelStates.DISCONNECTED)
    }
  }
};
AdfDhtmlPage.prototype.getADSConnectionState = function() {
  return this._pushChannelState
};
AdfDhtmlPage.prototype.addADSConnectionStateListener = function(listener, instance) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assertObjectOrNull(instance);
  var adsConnectionStateListeners = this._adsConnectionStateListeners;
  if(!adsConnectionStateListeners) {
    adsConnectionStateListeners = new Array;
    this._adsConnectionStateListeners = adsConnectionStateListeners
  }
  adsConnectionStateListeners.push(listener, instance)
};
AdfDhtmlPage.prototype.removeADSConnectionStateListener = function(listener, instance) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assertObjectOrNull(instance);
  var listenerArray = this._adsConnectionStateListeners;
  AdfAssert.assert(listenerArray, "adsConnectionStateListeners array must exist");
  var length = listenerArray.length;
  for(var i = 0;i < length;i++) {
    var curListener = listenerArray[i];
    i++;
    if(curListener == listener) {
      var curInstance = listenerArray[i];
      if(curInstance === instance) {
        listenerArray.splice(i - 1, 2)
      }
    }
  }
  if(listenerArray.length == 0) {
    this._adsConnectionStateListeners = null
  }
};
AdfDhtmlPage.prototype._broadcastADSConnectionStateChange = function(adsConnectionState) {
  var oldConnectionState = this._pushChannelState;
  if(oldConnectionState == adsConnectionState) {
    AdfLogger.LOGGER.finest("broadcastADSConnectionStateChange called without a change in state");
    return
  }
  this._pushChannelState = adsConnectionState;
  var listenerArray = this._adsConnectionStateListeners;
  if(listenerArray) {
    var length = listenerArray.length;
    if(length > 0) {
      var event = new AdfPropertyChangeEvent(this, "adsConnectionState", oldConnectionState, adsConnectionState);
      for(var i = 0;i < length;i++) {
        var callback = listenerArray[i];
        i++;
        var instance = listenerArray[i];
        try {
          if(instance != null) {
            callback.call(instance, event)
          }else {
            callback(event)
          }
        }catch(e) {
          AdfLogger.LOGGER.logError(e, AdfLogger.WARNING, "Error broadcasting ADS connection state")
        }
      }
    }
  }
};
AdfDhtmlPage.prototype._startPolling = function() {
  if((0 != (this.getPPRNavigationOptions() & AdfDhtmlPage.PPR_NAVIGATION_FORCE_PPR) || 0 != (this.getPPRNavigationOptions() & AdfDhtmlPage.PPR_NAVIGATION_ON)) && AdfCollections.isEmpty(this._getClientStateMap())) {
    this._pollingTimer = this.scheduleTimer(this, this._startPolling, null, this._pollingInterval);
    return
  }
  if(!this._pollSucceeded) {
    this._reconnectRetries++;
    if(this._reconnectRetries > this._maxReconnectionRetries) {
      AdfLogger.LOGGER.warning("Cannot connect. Exceeded number of retries for reconnection");
      this._notifyADSConnectionStateChange(AdfDhtmlPage.PushChannelStates.DISCONNECTED);
      return
    }
  }
  this._notifyADSConnectionStateChange(AdfDhtmlPage.PushChannelStates.CONNECTED);
  if(this._pollingTimer != null) {
    try {
      clearTimeout(this._pollingTimer)
    }catch(e) {
    }
    this._pollingTimer = null
  }
  var now = new Date;
  var elapsedTime = this._pollingInterval;
  if(this._lastPollTime != null) {
    elapsedTime = now.getTime() - this._lastPollTime
  }
  var remainingTime = 0;
  if(elapsedTime < this._pollingInterval) {
    remainingTime = this._pollingInterval - elapsedTime
  }
  if(remainingTime <= 200) {
    this._pollForEvents();
    this._pollingTimer = this.scheduleTimer(this, this._startPolling, null, this._pollingInterval)
  }else {
    AdfLogger.LOGGER.finer("Timer is fired much before the _pollingInterval, scheduling timer for ", remainingTime);
    this._pollingTimer = this.scheduleTimer(this, this._startPolling, null, remainingTime)
  }
};
AdfDhtmlPage.prototype._fixupLinkOnClick = function(element) {
  delete this._notifyOfUnloadUrl;
  while(element != null) {
    if(element.nodeName == "A") {
      break
    }
    element = element.parentNode
  }
  if(element != null) {
    var linkHref = element.href;
    if(linkHref == null) {
      return
    }
    var hrefAttr = element.getAttribute("href");
    if(hrefAttr && hrefAttr.indexOf("#") == 0) {
      return
    }
    this._notifyOfUnloadUrl = linkHref
  }
};
AdfDhtmlPage.prototype.setStreamingDisabled = function(disabled) {
  this._streamingDisabled = disabled
};
AdfDhtmlPage.prototype.isStreamingDisabled = function() {
  return this._streamingDisabled
};
AdfDhtmlPage.prototype.sendStreamingRequest = function(iDs) {
  var formElem = this.getDomDocument().forms[0];
  AdfAssert.assert(formElem, "No form found;  cannot stream data");
  var uri = this._getPPRURL(formElem);
  var params = new Object;
  this._addPendingStreamingIDs(iDs, params);
  AdfDhtmlPage._addStateParameter(formElem, params);
  this._streamingStatus = AdfDhtmlPage._STREAMING_REQUEST_SENT;
  this._stopGlobalActiveData();
  if(this.isUserActivityMonitoringOn()) {
    var secUserActInfo = AdfUserActivityInfo.getInstance(AdfUserActivityInfo.SECONDARY);
    secUserActInfo.setClientStartTime((new Date).getTime().toString());
    AdfUserActivityInfo.saveToSessionStorageByType(AdfUserActivityInfo.SECONDARY)
  }
  this.getDataTransferService().sendStreamingRequest(uri, params);
  if(this._perfProfileEnabled || this._perfProfileTimingEnabled) {
    this.getDomWindow()._afrTimingStreamingRequestStart = (new Date).getTime()
  }
};
AdfDhtmlPage._addStateParameter = function(formElem, params) {
  var stateParam = AdfDhtmlPage._STATE_PARAM_NAME;
  var state = formElem[stateParam];
  AdfAssert.assert(state, "No view state token for postback");
  params[stateParam] = state.value
};
AdfDhtmlPage.prototype.getLazyFetchURI = function(id) {
  AdfAssert.assertString(id, "invalid Id for the lazy fetch URI");
  var formElem = this.getDomDocument().forms[0];
  AdfAssert.assert(formElem, "No form found;  cannot perform lazy fetch");
  var uri = formElem.action;
  if(uri.indexOf("?") == -1) {
    uri += "?unique="
  }else {
    uri += "&unique="
  }
  uri += (new Date).getTime();
  var stateParam = AdfDhtmlPage._STATE_PARAM_NAME;
  uri += "&" + stateParam + "=";
  var state = formElem[stateParam];
  AdfAssert.assert(state, "No view state token for lazy fetch");
  uri += state.value;
  uri += "&" + AdfDhtmlPage._LAZY_FETCH_ID_PARAM + "=" + id;
  return uri
};
AdfDhtmlPage.prototype.isStreamingRequestPending = function(id) {
  return this._pendingStreamingIDs[id]
};
AdfDhtmlPage.prototype._addPendingStreamingIDs = function(ids, params) {
  var separator = ",";
  var streamedIDs = "";
  var visibleIDs = new Array;
  var hiddenIDs = new Array;
  var arr = ids.split(separator);
  for(var i = 0;i < arr.length;i++) {
    var id = arr[i];
    var elem = this.getDomDocument().getElementById(id);
    if(AdfDomUtils.isInVisibleSubtree(elem)) {
      this._pendingStreamingIDs[id] = true;
      visibleIDs.push(id)
    }else {
      hiddenIDs.push(id)
    }
  }
  if(visibleIDs.length > 0) {
    streamedIDs = visibleIDs.join(separator)
  }
  params[AdfDhtmlPage._STREAMING_IDS_PARAM] = streamedIDs;
  if(hiddenIDs.length > 0) {
    params[AdfDhtmlPage._REMOVED_STREAMING_IDS_PARAM] = hiddenIDs.join(separator)
  }
};
AdfDhtmlPage._getCookie = function(domDocument, name) {
  if(domDocument.cookie.length > 0) {
    var begin = domDocument.cookie.indexOf(name + "=");
    if(begin != -1) {
      var end = domDocument.cookie.indexOf(";", begin);
      if(end == -1) {
        end = domDocument.cookie.length
      }
      return domDocument.cookie.substring(begin + name.length + 1, end)
    }
  }
  return null
};
AdfDhtmlPage._setCookie = function(domDocument, name, value, expiresAfter, path) {
  AdfAssert.assertNumeric(expiresAfter);
  var expires = "";
  if(expiresAfter) {
    var date = new Date;
    date.setTime(date.getTime() + expiresAfter);
    expires = "expires=" + date.toGMTString() + ";"
  }
  if(path) {
    path = "path=" + path + ";"
  }else {
    path = "path=/;"
  }
  domDocument.cookie = name + "=" + value + ";" + expires + path
};
AdfDhtmlPage._eraseCookie = function(domDocument, name) {
  this.setCookie(domDocument, name, "", -99999)
};
AdfDhtmlPage.prototype._dtsStateChanged = function() {
  var dts = this.getDataTransferService();
  var dtsState = dts.getDTSState();
  var isServerBusy = dtsState != AdfDataTransferService.STATE_READY;
  if(this._serverBusy != isServerBusy) {
    this._serverBusy = isServerBusy;
    AdfAgent.AGENT.showBusyCursor(this.getDomDocument(), isServerBusy);
    this._broadcastBusyStateEvent(isServerBusy)
  }
  if(!isServerBusy) {
    this._deliverQueuedServerEvents()
  }
};
AdfDhtmlPage.prototype.setLastFocusedElement = function(element) {
  this._lastFocusedElement = element
};
AdfDhtmlPage.prototype.getLastFocusedElement = function(element) {
  return this._lastFocusedElement
};
AdfDhtmlPage.prototype.setPPRNavigationOptions = function(options) {
  this._pprNavOptions = options
};
AdfDhtmlPage.prototype.getPPRNavigationOptions = function() {
  return this._pprNavOptions != undefined ? this._pprNavOptions : 0
};
AdfDhtmlPage.prototype._collectLoadedLibraries = function() {
  var loadedLibraries = this._loadedLibraries;
  var domDocument = this.getDocument();
  var scripts = domDocument.getElementsByTagName("script");
  for(var i = 0;i < scripts.length;i++) {
    var src = AdfDhtmlPage._stripSessionId(scripts[i].getAttribute("src"));
    if(src) {
      loadedLibraries[src] = true
    }
  }
  return loadedLibraries
};
AdfDhtmlPage._stripSessionId = function(uri) {
  if(!uri) {
    return null
  }
  return uri.replace(/;[^\?]*/, "")
};
AdfDhtmlPage.prototype._collectCss = function() {
  var obj = new Object;
  var elems = document.getElementsByTagName("link");
  for(var i = 0, size = elems.length;i < size;++i) {
    var href = elems[i].getAttribute("href");
    if(href) {
      obj[href] = true
    }
  }
  return obj
};
AdfDhtmlPage.prototype.flushToAssistiveTechnology = function() {
  var flushInput = AdfAgent.AGENT.getElementById("afr::ATFlush");
  if(flushInput) {
    var oldValue = flushInput.value;
    flushInput.value = oldValue == "1" ? "0" : "1"
  }
};
AdfDhtmlPage.prototype.announceToAssistiveTechnology = function(message, onlyIfChanged) {
  var statusRegion = AdfAgent.AGENT.getElementById("afr::ATStatus");
  if(statusRegion) {
    if(onlyIfChanged && message == this._lastStatusMessage) {
      return
    }
    statusRegion.innerHTML = message;
    this._lastStatusMessage = message;
    var timer = this._clearStatusMessageTimer;
    var delay = 2E3;
    if(timer) {
      this.rescheduleTimer(timer, delay)
    }else {
      this._clearStatusMessageTimer = this.scheduleTimer(this, this._clearStatusRegion, null, delay)
    }
  }
};
AdfDhtmlPage.prototype._clearStatusRegion = function() {
  var statusRegion = AdfAgent.AGENT.getElementById("afr::ATStatus");
  if(statusRegion) {
    statusRegion.innerHTML = "";
    this.flushToAssistiveTechnology()
  }
  this._clearStatusMessageTimer = null
};
AdfDhtmlPage.prototype.setDataDirty = function(isDirty) {
  this._dataDirty = isDirty
};
AdfDhtmlPage.prototype.registerDirtyDataComponent = function(component, level) {
  var clientId = component.getClientId();
  this._dirtyDataComponents[clientId] = level
};
AdfDhtmlPage.prototype._checkDirtyDataComponents = function() {
  var isDirty = false;
  for(var clientId in this._dirtyDataComponents) {
    if(this._dirtyDataComponents[clientId] == "always") {
      var component = this.findComponent(clientId);
      if(component != null) {
        var peer = component.getPeer();
        if(peer != null && peer.isDataDirty()) {
          isDirty = true
        }
      }
    }
  }
  return isDirty
};
AdfDhtmlPage.prototype._setProcessedRoots = function(ids, immediateOnly) {
  this._removeUncommittedIds(ids, immediateOnly)
};
AdfDhtmlPage.prototype.confirmNavigation = function(token, isPartial) {
  var laf = this.getLookAndFeel();
  var result = this._displayUncommittedDataWarning();
  var params = new Object;
  params["oracle.adfinternal.view.faces.rich.navigationToken"] = token;
  params["oracle.adfinternal.view.faces.rich.confirmNavigation"] = result;
  var context = {_noNavigation:!isPartial};
  this._sendRichPayload(params, context)
};
AdfDhtmlPage.prototype._removeUncommittedIds = function(Ids, immediateOnly) {
  if(!this._richPostbackHasErrors) {
    if(!this._hasLocalUncommitted) {
      return
    }
    if(Ids == null || Ids.length == 0) {
      if(immediateOnly) {
        Ids = [""]
      }else {
        this._resetUncommittedIds();
        return
      }
    }
    this._hasLocalUncommitted = false;
    var oldUncommitted = this._uncommittedIds;
    this._uncommittedIds = new Object;
    var agent = AdfAgent.AGENT;
    for(var id in oldUncommitted) {
      var matched = false;
      if(!immediateOnly || this._isImmediateEditableValueComponent(id)) {
        for(var i = 0;i < Ids.length && !matched;i++) {
          if(id.indexOf(Ids[i]) == 0) {
            matched = true
          }
        }
        if(!matched) {
          var node = agent.getElementById(id);
          if(node) {
            for(var n = 0;!matched && n < Ids.length;n++) {
              matched = this._isAncestorOrSelf(Ids[n], node)
            }
          }else {
            matched = true
          }
        }
      }
      if(!matched) {
        this._uncommittedIds[id] = true;
        this._hasLocalUncommitted = true
      }
    }
  }
};
AdfDhtmlPage.prototype._isImmediateEditableValueComponent = function(clientId) {
  var component = this.findComponent(clientId);
  return component != null && component instanceof AdfUIEditableValue && component.getImmediate()
};
AdfDhtmlPage.prototype._navResetPage = function() {
  AdfDhtmlRichDialogService.getInstance().cancelAll();
  this._pageProperties = new Object;
  this._excludeCustomPostback = false;
  this._setRichResponseDirty(false)
};
AdfDhtmlPage.prototype.removePageResources = function() {
  var head = AdfDomUtils.getFirstDescendentElement(AdfAgent.AGENT.getDomDocument().documentElement, "HEAD");
  var removeElementsByName = function(name, head) {
    var elems = head.getElementsByTagName(name);
    var count = elems.length;
    for(var i = count - 1;i >= 0;--i) {
      var elem = elems[i];
      if(elem.getAttribute("afrres") == "true") {
        head.removeChild(elem)
      }
    }
  };
  removeElementsByName("LINK", head);
  removeElementsByName("STYLE", head)
};
AdfDhtmlPage.prototype._handleInvalidPprResponse = function(responseText) {
  if(responseText) {
    var errorDoc = AdfDhtmlPage._extractInstructionXML(responseText, "error");
    if(errorDoc != null) {
      this._handleRichResponse(errorDoc, null);
      return
    }
    var redirectDoc = AdfDhtmlPage._extractInstructionXML(responseText, "redirect");
    if(redirectDoc != null) {
      this._handleRichResponse(redirectDoc, null);
      return
    }
  }
  if(AdfAssert.DEBUG) {
    AdfLogger.LOGGER.severe("Unexpected non-rich response")
  }else {
    AdfLogger.LOGGER.warning("Unexpected non-rich response")
  }
  if(!this._unloading) {
    this.getDomWindow().location.reload(true)
  }
};
AdfDhtmlPage._extractInstructionXML = function(responseText, element) {
  var len = responseText.length;
  if(len <= 1) {
    return null
  }
  if(responseText.charAt(len - 1) != ">") {
    return null
  }
  var doc = null;
  var elementClose = "</" + element;
  var elemLen = elementClose.length;
  if(len > elemLen + 1) {
    if(elementClose == responseText.substr(len - elemLen - 1, elemLen)) {
      var start = responseText.lastIndexOf("<?xml");
      if(start >= 0) {
        doc = AdfAgent.AGENT.parseXML(responseText.substring(start))
      }
    }
  }
  return doc
};
AdfDhtmlPage.prototype.__failover = function(windows) {
  this._handlingFailover = true;
  this._handleAllFailovers(windows)
};
AdfDhtmlPage.prototype._handleFailover = function() {
  this.__setHAMigrated(false);
  var domWindow = this.getDomWindow();
  domWindow.location.reload(true)
};
AdfDhtmlPage.prototype._handleAllFailovers = function(windows) {
  var windowMap = this._getRegistryMap();
  var currWindow = undefined;
  var domWindow = this.getDomWindow();
  var refreshDom = undefined;
  if(!AdfCollections.isArray(windows)) {
    var windowString = windows;
    windows = new Array;
    windows = windows.concat(windowString)
  }
  for(var winId in windowMap) {
    if(AdfCollections.indexOf(windows, winId) == -1) {
      currWindow = windowMap[winId];
      if(currWindow != domWindow) {
        if(this._testAdfPageExistence(currWindow)) {
          var targetPage = currWindow.AdfPage.PAGE;
          if(!targetPage.isHAMigrated()) {
            targetPage._handleFailover()
          }
        }
      }else {
        refreshDom = true
      }
    }
  }
  if(refreshDom && this._testAdfPageExistence(domWindow)) {
    var page = domWindow.AdfPage.PAGE;
    page._handleFailover()
  }
};
AdfDhtmlPage.prototype.__setHAMigrated = function(migration) {
  AdfAssert.assertBoolean(migration);
  this._haMigrated = migration
};
AdfDhtmlPage.prototype.isHAMigrated = function() {
  return this._haMigrated
};
AdfDhtmlPage.prototype.__initUncommittedDataWarningForDocument = function(enabled) {
  this._warnUncommitted = enabled;
  this._resetUncommittedIds()
};
AdfDhtmlPage.prototype.__enableDirtyPostbackPayloads = function() {
  this._dirtyPostbackPayloads = true;
  this._resetUncommittedIds()
};
AdfDhtmlPage.prototype.__isDirtyPostbackPayloadsEnabled = function() {
  return this._dirtyPostbackPayloads
};
AdfDhtmlPage.prototype._isTrackingDirtyData = function() {
  return true
};
AdfDhtmlPage.prototype.__disableDirtyDataRetainPPR = function() {
  this._disableDirtyDataRetainPPR = true
};
AdfDhtmlPage.prototype._isDirtyDataRetainPPRDisabled = function() {
  return this._disableDirtyDataRetainPPR
};
AdfDhtmlPage.prototype._isDirty = function(inputElement, editableEventTargetComponents) {
  var component = this._mapInputElementToComponent(inputElement);
  if(this._dirtyPostbackPayloads) {
    return component == null || component.getProperty("_afrFullPost") != null || !(component instanceof AdfUIEditableValue) || !component.isConvertible() || !component.getValid() || this._uncommittedIds[component.getClientId()] == true || AdfCollections.indexOf(editableEventTargetComponents, component) > -1
  }else {
    return!(this._isUncheckedInput(inputElement) && !AdfDhtmlPage._peerOverrideUncheckedSubmit(component))
  }
};
AdfDhtmlPage.prototype.markDirty = function(clientId) {
  this._uncommittedIds[clientId] = true;
  this._hasLocalUncommitted = true
};
AdfDhtmlPage.prototype._mapInputElementToComponent = function(inputElement) {
  var component = AdfRichUIPeer.getFirstAncestorComponent(inputElement);
  if(!component) {
    return null
  }
  var clientId = component.getClientId();
  return clientId == this._stripSubId(inputElement.name) || clientId == this._stripSubId(inputElement.id) ? component : null
};
AdfDhtmlPage.prototype._stripSubId = function(id) {
  var lastSubId = id == null ? -1 : id.lastIndexOf("::");
  return lastSubId > -1 ? id.substr(0, lastSubId) : id
};
AdfDhtmlPage._peerOverrideUncheckedSubmit = function(component) {
  if(!component) {
    return false
  }
  var peer = component.getPeer();
  return peer.isTristateDeterminateUnchecked && peer.isTristateDeterminateUnchecked(component)
};
AdfDhtmlPage.prototype._isUncheckedInput = function(inputElement) {
  return(inputElement.type == "checkbox" || inputElement.type == "radio") && !inputElement.checked
};
AdfDhtmlPage.prototype._resetUncommittedIds = function() {
  this._hasLocalUncommitted = false;
  this._uncommittedIds = new Object
};
AdfDhtmlPage.prototype._initPotentiallyDirtyFlags = function() {
  this._hasLocalUncommitted = false;
  var clientId;
  for(clientId in this._uncommittedIds) {
    this._hasLocalUncommitted = true;
    break
  }
};
AdfDhtmlPage.prototype._reloadPage = function() {
  var win = this.getDomWindow();
  var url = win.location.href;
  if(url.indexOf("?") == -1) {
    url += "?"
  }else {
    url += "&"
  }
  url += "_afr.ts=";
  url += (new Date).getTime();
  win.location.replace(url)
};
AdfDhtmlPage.prototype.__handleCachedPageForNewWindow = function(windowName) {
  if(AdfAgent.IE_PLATFORM == AdfAgent.AGENT.getPlatform() && !window.name) {
    var href = this.getDomWindow().location.href;
    var query = null;
    var queryIndex = href.indexOf("?");
    if(queryIndex > 0) {
      query = href.substring(queryIndex)
    }
    if(query && query.match(/_afr.ts=\d*$/)) {
      AdfLogger.LOGGER.warning("Two or more opened browser windows share same name and same ADF states!");
      return false
    }else {
      this._reloadPage();
      return true
    }
  }
  return false
};
AdfDhtmlPage.prototype.__initializeSessionTimeoutTimer = function(timeout, warningBeforeTimeout, newSessionURL) {
  var hasNoADSComponents = AdfCollections.isEmpty(this._getClientStateMap());
  var userInactivityTimeoutHelper = this.__getUserInactivityTimeoutHelper();
  var adsInactive = hasNoADSComponents || userInactivityTimeoutHelper && userInactivityTimeoutHelper.hasTimedOut();
  if(adsInactive) {
    if(!this._sessionTimeoutHelper) {
      this._sessionTimeoutHelper = new AdfSessionTimeoutHelper
    }
    this._sessionTimeoutHelper.__initializeSessionTimeoutTimer(timeout, warningBeforeTimeout, newSessionURL)
  }else {
    if(this._sessionTimeoutHelper) {
      this._sessionTimeoutHelper.__cancelSessionTimeoutTimer()
    }
  }
};
AdfDhtmlPage.prototype.__getSessionTimeoutHelper = function() {
  return this._sessionTimeoutHelper
};
AdfDhtmlPage.prototype.__initUserInactivityTimeout = function(userInactivityTimeout) {
  var timeoutHelper = this.__getUserInactivityTimeoutHelper();
  if(timeoutHelper) {
    timeoutHelper.initializeTimeout(userInactivityTimeout)
  }
};
AdfDhtmlPage.prototype.__getUserInactivityTimeoutHelper = function() {
  var helperInstance = this._userInactivityTimeoutHelper;
  if(!helperInstance) {
    var domWindow = this.getDomWindow();
    var helperClass = domWindow["AdfUserInactivityTimeoutHelper"];
    if(helperClass) {
      helperInstance = new helperClass;
      this._userInactivityTimeoutHelper = helperInstance
    }
  }
  return helperInstance
};
AdfDhtmlPage.prototype.getComponentIdsUpdatedByPollEvent = function() {
  return this._componentsUpdatedByPollEvent
};
AdfDhtmlPage.prototype._resetADS = function() {
  if(this.isActiveDataSupported()) {
    this._cancelADSTimers();
    this._canReceiveActiveDataCount = 1;
    this._admInitialized = false
  }
  this._activeComponents = new Object
};
AdfDhtmlPage.prototype.__confirm = function(title, message, callback, timeout, disableCancel) {
  AdfAssert.assertString(title, "confirm title");
  AdfAssert.assertString(message, "confirm message");
  AdfAssert.assertFunction(callback, "confirm callback");
  if(timeout) {
    AdfAssert.assertNumber(timeout, "confirm timeout")
  }
  var documentComponent = this.findComponent(this._documentClientId);
  var documentPeer = documentComponent.getPeer();
  documentPeer.bind(documentComponent);
  return documentPeer.__showAlertConfirm(disableCancel, title, message, callback, timeout)
};
AdfDhtmlPage.prototype.__alert = function(title, message, callback) {
  AdfAssert.assertString(title, "alert title");
  AdfAssert.assertString(message, "alert message");
  AdfAssert.assertFunction(callback, "alert callback");
  var documentComponent = this.findComponent(this._documentClientId);
  var documentPeer = documentComponent.getPeer();
  documentPeer.bind(documentComponent);
  return documentPeer.__showAlertConfirm(true, title, message, callback)
};
AdfDhtmlPage.prototype._displayUncommittedDataWarning = function() {
  return confirm(this.getLookAndFeel().getTranslatedString("af_document.MSG_CONFIRM_NAVIGATION"))
};
AdfDhtmlPage.prototype._logAsGlobalError = function(e) {
  if(window.onerror != undefined) {
    this._handleGlobalError(e.message, e.fileName, e.lineNumber)
  }
};
AdfDhtmlPage.prototype._handleGlobalError = function(msg, url, line) {
  if(!this._savedErrors) {
    this._savedErrors = new Array
  }
  var ignoreError = false;
  if(msg == "setting a property that has only a getter" && url == "" && line == 0) {
    ignoreError = true
  }
  if(AdfAgent.AGENT.getPlatform() == AdfAgent.GECKO_PLATFORM && msg != undefined) {
    if(url == "" && line == 0 && msg.match(/Permission denied for </) && msg.match(/> to call method Location.toString on </)) {
      ignoreError = true
    }else {
      if(url != "" && msg.match(/Permission denied to get property Location.toString/)) {
        ignoreError = true
      }
    }
  }
  if(ignoreError) {
    return false
  }
  this._savedErrors.push({msg:msg, url:url, line:line});
  return false
};
AdfDhtmlPage.prototype._throwSavedErrors = function() {
  if(this._savedErrors && this._savedErrors.length > 0) {
    var msg = "Javascript error(s): ";
    for(var i = 0;i < this._savedErrors.length;i++) {
      if(i > 0) {
        msg += ";"
      }
      var info = this._savedErrors[i];
      msg += info.msg;
      if(info.url) {
        msg += " in " + info.url
      }
      if(info.line !== undefined && info.line !== null) {
        msg += ":" + info.line
      }
    }
    throw msg;
  }
};
AdfDhtmlPage.prototype._isPropertyDeltaSyncDisabled = function() {
  var lookAndFeel = this.getLookAndFeel();
  var disable = lookAndFeel.getSkinProperty(".AFWorkaround-tr-disable-property-delta-sync");
  return"true" == disable
};
AdfDhtmlPage.prototype.simulateMouse = function(locator, mouseEvent) {
  var componentLocator = locator;
  var subId;
  var startIndex = locator.indexOf("#");
  if(startIndex > -1) {
    componentLocator = locator.substring(0, startIndex);
    subId = locator.substring(startIndex + 1)
  }
  AdfLogger.LOGGER.fine("SimulateMouse, locator: " + locator + ", compLocator: " + componentLocator + ", subId: " + subId);
  var component = this.findComponentByAbsoluteLocator(componentLocator);
  if(component) {
    component.simulateMouse(subId, mouseEvent)
  }else {
    AdfLogger.LOGGER.warning("During simulateMouse, unable to find a component for the provided locator: " + locator)
  }
};
AdfDhtmlPage.prototype.simulateDomMouse = function(domElement, mouseEvent) {
  var agent = AdfAgent.AGENT;
  if(mouseEvent == null) {
    mouseEvent = {}
  }
  if(mouseEvent.type == null) {
    mouseEvent.type = "click"
  }
  if(mouseEvent.canBubble == null) {
    mouseEvent.canBubble = true
  }
  if(mouseEvent.cancelable == null) {
    mouseEvent.cancelable = true
  }
  if(mouseEvent.view == null) {
    mouseEvent.view = window
  }
  if(mouseEvent.detail == null) {
    mouseEvent.detail = 1
  }
  if(mouseEvent.screenX == null) {
    mouseEvent.screenX = 0
  }
  if(mouseEvent.screenY == null) {
    mouseEvent.screenY = 0
  }
  if(mouseEvent.clientX == null) {
    mouseEvent.clientX = agent.getElementLeft(domElement) + (domElement.offsetWidth > 0 ? domElement.offsetWidth / 2 : 0)
  }
  if(mouseEvent.clientY == null) {
    mouseEvent.clientY = agent.getElementTop(domElement) + (domElement.offsetHeight > 0 ? domElement.offsetHeight / 2 : 0)
  }
  if(mouseEvent.ctrlKey == null) {
    mouseEvent.ctrlKey = false
  }
  if(mouseEvent.altKey == null) {
    mouseEvent.altKey = false
  }
  if(mouseEvent.shiftKey == null) {
    mouseEvent.shiftKey = false
  }
  if(mouseEvent.metaKey == null) {
    mouseEvent.metaKey = false
  }
  if(mouseEvent.button == null) {
    mouseEvent.button = 0
  }
  if(mouseEvent.relatedTarget == null) {
    mouseEvent.relatedTarget = null
  }
  AdfLogger.LOGGER.fine("simulateDomMouse, domElement id: " + domElement.id + ", type: " + mouseEvent.type);
  var testEngine = AdfDhtmlTestEngine.getEngine();
  testEngine.simulateDomMouse(domElement, mouseEvent)
};
AdfDhtmlPage._PprContext = function() {
  this.put = function(key, val, cleanup) {
    _values[key] = val;
    _cleanupHandlers[key] = cleanup
  };
  this.get = function(key) {
    return _values[key]
  };
  this.notifyDispose = function() {
    for(var k in _cleanupHandlers) {
      var handler = _cleanupHandlers[k];
      if(handler) {
        handler(_values[k])
      }
    }
  };
  var _cleanupHandlers = {};
  var _values = {}
};

function AdfDhtmlRichDialogService() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlRichDialogService);
AdfDhtmlRichDialogService.getInstance = function() {
  if(this._theInstance == null) {
    this._theInstance = new AdfDhtmlRichDialogService
  }
  return this._theInstance
};
AdfDhtmlRichDialogService.dialogExists = function(rtnId) {
  return AdfDhtmlRichDialogService._getDialogStateToken(rtnId) ? true : false
};
AdfDhtmlRichDialogService.prototype.launchWindow = function(srcURL, windowName, features, dialogSourceClientId) {
  AdfAssert.assertString(srcURL);
  AdfAssert.assertString(windowName);
  AdfAssert.assertObject(features);
  AdfAssert.assertStringOrNull(dialogSourceClientId);
  var page = AdfPage.PAGE;
  try {
    AdfDhtmlRichDialogService._setBusy(true);
    var rtnId = AdfDhtmlRichDialogService._generateRtnId();
    var launchSourceId = AdfDhtmlRichDialogService._normalizeLaunchSourceId(dialogSourceClientId);
    var modal = features.windowModalityType && features.windowModalityType == AdfDhtmlRichDialogService._WINDOW_MODALITY_TYPE_APPLICATION_MODAL ? true : false;
    var state = {launchSourceId:launchSourceId, modal:modal, windowName:windowName, rtnId:rtnId};
    AdfDhtmlRichDialogService._setDialogStateToken(rtnId, state);
    if(modal) {
      AdfDhtmlRichDialogService._showModalGlass()
    }
    var childWindow = AdfDhtmlRichDialogService._openWindow(srcURL, windowName, features, rtnId);
    state.childWindow = childWindow;
    AdfDhtmlRichDialogService._setDialogStateToken(rtnId, state);
    page.scheduleTimer(page, AdfDhtmlRichDialogService._setWindowFocus, rtnId, 100, {"isSynchronized":true})
  }finally {
    AdfDhtmlRichDialogService._setBusy(false)
  }
};
AdfDhtmlRichDialogService.prototype.launchInline = function(popupId) {
  AdfAssert.assertString(popupId);
  var page = AdfPage.PAGE;
  try {
    AdfDhtmlRichDialogService._setBusy(true);
    var popup = page.findComponent(popupId);
    AdfAssert.assertPrototype(popup, AdfRichPopup);
    popup.addEventListener(AdfPopupOpenedEvent.POPUP_OPENED_EVENT_TYPE, AdfDhtmlRichDialogService._popupOpenedHandler);
    popup.addEventListener(AdfPopupClosedEvent.POPUP_CLOSED_EVENT_TYPE, AdfDhtmlRichDialogService._popupClosedHandler);
    var popupPeer = popup.getPeer();
    popupPeer.bind(popup);
    var rtnId = popup.getProperty("_rtnId");
    var dialogSourceClientId = popup.getProperty("_launchId");
    var inlineFrameId = popup.getProperty("_inlineFrameId");
    var isCancellationDisabled = popup.getProperty("_isCancellationDisabled");
    var launchSourceId = AdfDhtmlRichDialogService._normalizeLaunchSourceId(dialogSourceClientId);
    var state = {launchSourceId:launchSourceId, popupId:popupId, frameName:inlineFrameId, rtnId:rtnId};
    AdfDhtmlRichDialogService._setDialogStateToken(rtnId, state);
    var hints = {};
    if(launchSourceId) {
      hints[AdfRichPopup.HINT_LAUNCH_ID] = launchSourceId
    }
    if(isCancellationDisabled) {
      hints[AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE] = false
    }
    popup.show(hints)
  }finally {
    AdfDhtmlRichDialogService._setBusy(false)
  }
};
AdfDhtmlRichDialogService.prototype.returnFrom = function(rtnId) {
  var state = AdfDhtmlRichDialogService._getDialogStateToken(rtnId);
  if(!state) {
    AdfLogger.LOGGER.warning("dialog state missing or already returned for rtnId:", rtnId);
    return
  }
  try {
    AdfDhtmlRichDialogService._setBusy(true);
    if(!state.popupId) {
      if(!AdfDhtmlRichDialogService._closeWindow(state)) {
        state.isReturnFromPending = true;
        return
      }
      AdfDhtmlRichDialogService._queueReturnEvent(state);
      AdfDhtmlRichDialogService._notifyWindowClosed(rtnId);
      if(state.modal) {
        AdfDhtmlRichDialogService._hideModalGlass()
      }
    }else {
      AdfDhtmlRichDialogService._hidePopup(state);
      AdfDhtmlRichDialogService._queueReturnEvent(state)
    }
    AdfDhtmlRichDialogService._removeDialogStateToken(rtnId)
  }finally {
    AdfDhtmlRichDialogService._setBusy(false)
  }
};
AdfDhtmlRichDialogService.prototype.checkForWindowCanceled = function(rtnId) {
  AdfAssert.assertNumeric(rtnId);
  var state = AdfDhtmlRichDialogService._getDialogStateToken(rtnId);
  if(!state) {
    return
  }
  try {
    AdfDhtmlRichDialogService._setBusy(true);
    var childWindow = state.childWindow;
    if(childWindow.closed) {
      if(state.modal) {
        AdfDhtmlRichDialogService._hideModalGlass()
      }
      if(state.isReturnFromPending) {
        AdfDhtmlRichDialogService._queueReturnEvent(state)
      }
      AdfDhtmlRichDialogService._removeDialogStateToken(rtnId);
      AdfDhtmlRichDialogService._notifyWindowClosed(rtnId)
    }else {
      var page = AdfPage.PAGE;
      page.scheduleTimer(page, AdfDhtmlRichDialogService.getInstance().checkForWindowCanceled, rtnId, 100, {"isSynchronized":true})
    }
  }finally {
    AdfDhtmlRichDialogService._setBusy(false)
  }
};
AdfDhtmlRichDialogService._setBusy = function(isBusy) {
  AdfDhtmlRichDialogService.getInstance().Busy = isBusy
};
AdfDhtmlRichDialogService.isBusy = function() {
  if(AdfDhtmlRichDialogService.getInstance().Busy) {
    return true
  }
  var stateMap = AdfDhtmlRichDialogService.getInstance().StateMap;
  if(stateMap) {
    for(rtnId in stateMap) {
      var state = stateMap[rtnId];
      if(state && state.isReturnFromPending) {
        return true
      }
    }
  }
  return false
};
AdfDhtmlRichDialogService.prototype.cancelAll = function() {
  var stateMap = AdfDhtmlRichDialogService.getInstance().StateMap;
  if(stateMap) {
    for(rtnId in stateMap) {
      AdfDhtmlRichDialogService._cancel(rtnId)
    }
  }
};
AdfDhtmlRichDialogService.prototype.__visitWindows = function(callback) {
  var stateMap = AdfDhtmlRichDialogService.getInstance().StateMap;
  if(stateMap) {
    for(rtnId in stateMap) {
      var state = stateMap[rtnId];
      if(state) {
        callback(state)
      }
    }
  }
};
AdfDhtmlRichDialogService._setWindowFocus = function(rtnId) {
  AdfAssert.assertNumeric(rtnId);
  var state = AdfDhtmlRichDialogService._getDialogStateToken(rtnId);
  if(!state) {
    return
  }
  state.childWindow.focus()
};
AdfDhtmlRichDialogService._cancel = function(rtnId) {
  AdfAssert.assertNumeric(rtnId);
  var state = AdfDhtmlRichDialogService._getDialogStateToken(rtnId);
  if(!state) {
    return
  }
  if(!state.popupId) {
    AdfDhtmlRichDialogService._closeWindow(state);
    if(state.modal) {
      AdfDhtmlRichDialogService._hideModalGlass()
    }
  }else {
    AdfDhtmlRichDialogService._cancelPopup(state)
  }
  AdfDhtmlRichDialogService._removeDialogStateToken(rtnId);
  AdfDhtmlRichDialogService._notifyWindowClosed(rtnId)
};
AdfDhtmlRichDialogService._queueReturnEvent = function(state) {
  AdfAssert.assertObject(state);
  var launchSourceId = state.launchSourceId;
  if(!launchSourceId) {
    return
  }
  var targetComponent = AdfPage.PAGE.findComponent(launchSourceId);
  if(targetComponent) {
    (new AdfReturnEvent(targetComponent)).queue();
    targetComponent.focus()
  }
};
AdfDhtmlRichDialogService._normalizeLaunchSourceId = function(dialogSourceClientId) {
  if(!dialogSourceClientId || dialogSourceClientId.length == 0) {
    return null
  }
  var page = AdfPage.PAGE;
  var isComponentFound = page.findComponent(dialogSourceClientId);
  if(!isComponentFound) {
    var lastSeperator = dialogSourceClientId.lastIndexOf(":");
    if(lastSeperator != -1) {
      var secondToLastSeperator = dialogSourceClientId.lastIndexOf(":", lastSeperator - 1);
      if(secondToLastSeperator != -1) {
        var idBeforeCurrency = dialogSourceClientId.substring(0, secondToLastSeperator);
        var parentCollection = page.findComponent(idBeforeCurrency);
        if(parentCollection && window["AdfUICollection"] && parentCollection instanceof AdfUICollection) {
          var idAfterCurrency = dialogSourceClientId.substring(lastSeperator);
          var returnId = idBeforeCurrency.concat(idAfterCurrency);
          if(page.findComponent(returnId)) {
            return returnId
          }
        }
      }
    }
  }
  return dialogSourceClientId
};
AdfDhtmlRichDialogService._generateRtnId = function() {
  return(new Date).getTime()
};
AdfDhtmlRichDialogService._closeWindow = function(state) {
  AdfAssert.assertObject(state);
  var childWindow = state.childWindow;
  childWindow.close();
  return childWindow.closed
};
AdfDhtmlRichDialogService._hidePopup = function(state) {
  var popupId = state.popupId;
  AdfAssert.assertString(popupId);
  var popup = AdfPage.PAGE.findComponent(popupId);
  AdfAssert.assertPrototype(popup, AdfRichPopup);
  if(popup) {
    AdfDhtmlRichDialogService.__unloadDocument(popup);
    popup.hide()
  }
};
AdfDhtmlRichDialogService._cancelPopup = function(state) {
  var popupId = state.popupId;
  AdfAssert.assertString(popupId);
  var popup = AdfPage.PAGE.findComponent(popupId);
  AdfAssert.assertPrototype(popup, AdfRichPopup);
  if(popup) {
    AdfDhtmlRichDialogService.__unloadDocument(popup);
    popup.cancel()
  }
};
AdfDhtmlRichDialogService.__unloadDocument = function(popup) {
  AdfAssert.assertPrototype(popup, AdfRichPopup);
  var page = AdfPage.PAGE;
  var inlineFrameId = popup.getProperty("_inlineFrameId");
  var inlineFrame = page.findComponent(inlineFrameId);
  var inlineFramePeer = inlineFrame.getPeer();
  inlineFramePeer.bind(inlineFrame);
  var frameDom = inlineFramePeer.__getIframe();
  AdfAssert.assertDomElement(frameDom, "IFRAME");
  var blankPageURL = "about:blank";
  frameDom.setAttribute("src", blankPageURL)
};
AdfDhtmlRichDialogService._getOpenDialogCount = function() {
  var n = 0;
  var stateMap = AdfDhtmlRichDialogService.getInstance().StateMap;
  if(stateMap) {
    for(rtnId in stateMap) {
      n++
    }
  }
  return n
};
AdfDhtmlRichDialogService._setDialogStateToken = function(rtnId, state) {
  var key = "" + rtnId;
  var stateMap = AdfDhtmlRichDialogService.getInstance().StateMap;
  if(!stateMap) {
    stateMap = new Object;
    AdfDhtmlRichDialogService.getInstance().StateMap = stateMap
  }
  stateMap[key] = state
};
AdfDhtmlRichDialogService._getDialogStateToken = function(rtnId) {
  var stateMap = AdfDhtmlRichDialogService.getInstance().StateMap;
  if(!stateMap) {
    return null
  }
  var key = "" + rtnId;
  return stateMap[key]
};
AdfDhtmlRichDialogService._removeDialogStateToken = function(rtnId) {
  var stateMap = AdfDhtmlRichDialogService.getInstance().StateMap;
  if(stateMap) {
    var key = "" + rtnId;
    delete stateMap[key]
  }
};
AdfDhtmlRichDialogService._openWindow = function(srcURL, windowName, features, rtnId) {
  var page = AdfPage.PAGE;
  var domWindow = page.getDomWindow();
  AdfCollections.union(AdfDhtmlRichDialogService._WINDOW_DEFAULT_FEATURES_MAP, features, features);
  var featureString = AdfDhtmlRichDialogService._buildFeatureString(features);
  var targetURL = AdfDhtmlRichDialogService._encodeURL(srcURL, rtnId);
  var childWindow = domWindow.open(targetURL, windowName, featureString);
  try {
    childWindow.opener = domWindow
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsWarning(e, " error setting opener of child window.")
  }
  return childWindow
};
AdfDhtmlRichDialogService._buildFeatureString = function(features) {
  var featureString = "";
  for(var k in features) {
    if(featureString.length > 0) {
      featureString += ","
    }
    featureString += k + "=" + features[k]
  }
  return featureString
};
AdfDhtmlRichDialogService._encodeURL = function(srcURL, rtnId) {
  AdfAssert.assertString(srcURL);
  AdfAssert.assertNumeric(rtnId);
  return srcURL + "&_rtrnId=" + rtnId
};
AdfDhtmlRichDialogService._showModalGlass = function() {
  var page = AdfPage.PAGE;
  var modalityManager = page.getModalityManager();
  var zorderManager = page.getZOrderManager();
  var domDocument = page.getDomDocument();
  var dummyLayer = domDocument.createElement("div");
  zorderManager.addElementToLayer(dummyLayer, AdfDhtmlZOrderManager.FLOATINGTYPE_WINDOW);
  modalityManager.pushModal(dummyLayer);
  zorderManager.removeElement(dummyLayer)
};
AdfDhtmlRichDialogService._hideModalGlass = function() {
  var modalityManager = AdfPage.PAGE.getModalityManager();
  modalityManager.popModal()
};
AdfDhtmlRichDialogService.hasModalDialogsOpen = function() {
  var stateMap = AdfDhtmlRichDialogService.getInstance().StateMap;
  if(stateMap) {
    var page = AdfPage.PAGE;
    for(rtnId in stateMap) {
      var state = stateMap[rtnId];
      if(state && state.modal) {
        return true
      }else {
        if(state.popupId) {
          var popup = page.findComponent(state.popupId);
          var popupPeer = popup.getPeer();
          popupPeer.bind(popup);
          var panelWindowId = popup.getProperty("_panelWindowId");
          AdfAssert.assertString(panelWindowId);
          var panelWindow = page.findComponent(panelWindowId);
          AdfAssert.assertPrototype(panelWindow, AdfRichPanelWindow);
          if(panelWindow.getModal()) {
            return true
          }
        }
      }
    }
  }
  return false
};
AdfDhtmlRichDialogService._popupOpenedHandler = function(event) {
  var agent = AdfAgent.AGENT;
  var page = AdfPage.PAGE;
  var popup = event.getSource();
  var popupPeer = popup.getPeer();
  popupPeer.bind(popup);
  var popupDom = popupPeer.getDomElement();
  var panelWindowId = popup.getProperty("_panelWindowId");
  var inlineFrameId = popup.getProperty("_inlineFrameId");
  var inlineFrame = page.findComponent(inlineFrameId);
  var inlineFramePeer = inlineFrame.getPeer();
  inlineFramePeer.bind(inlineFrame);
  var frameDom = inlineFramePeer.__getIframe();
  AdfAssert.assertDomElement(frameDom, "IFRAME");
  var rtnId = popup.getProperty("_rtnId");
  agent.setExpandoProperty(frameDom, "_panelWindowId", panelWindowId);
  agent.setExpandoProperty(popupDom, "_inlineFrameId", inlineFrameId);
  agent.setExpandoProperty(frameDom, "_rtnId", rtnId);
  agent.addBubbleEventListener(frameDom, "load", AdfDhtmlRichDialogService._iframeLoadHandler);
  var dialogURL = popup.getProperty("_dialogURL");
  frameDom.src = dialogURL;
  if(0 != (page.getPPRNavigationOptions() & AdfDhtmlPage.PPR_NAVIGATION_ON)) {
    AdfDhtmlRichDialogService._checkForIframeTitleChangeWithPPRNavOn(rtnId)
  }
};
AdfDhtmlRichDialogService._popupClosedHandler = function(event) {
  var agent = AdfAgent.AGENT;
  var popup = event.getSource();
  var popupPeer = popup.getPeer();
  popupPeer.bind(popup);
  var popupDom = popupPeer.getDomElement();
  var inlineFrameId = agent.getExpandoProperty(popupDom, "_inlineFrameId");
  var rtnId = popup.getProperty("_rtnId");
  var inlineFrame = AdfPage.PAGE.findComponent(inlineFrameId);
  AdfAssert.assertPrototype(inlineFrame, AdfRichInlineFrame);
  var inlineFramePeer = inlineFrame.getPeer();
  inlineFramePeer.bind(inlineFrame);
  var frameDom = inlineFramePeer.__getIframe();
  AdfAssert.assertDomElement(frameDom, "IFRAME");
  agent.removeBubbleEventListener(frameDom, "load", AdfDhtmlRichDialogService._iframeLoadHandler);
  AdfDhtmlRichDialogService._removeDialogStateToken(rtnId);
  AdfDhtmlRichDialogService._notifyWindowClosed(rtnId)
};
AdfDhtmlRichDialogService._iframeLoadHandler = function(event) {
  var agent = AdfAgent.AGENT;
  var page = AdfPage.PAGE;
  var frameDom = agent.getEventTarget(event);
  if(!frameDom) {
    frameDom = event.currentTarget
  }
  AdfAssert.assertDomElement(frameDom, "IFRAME");
  var panelWindowId = agent.getExpandoProperty(frameDom, "_panelWindowId");
  AdfAssert.assertString(panelWindowId);
  var panelWindow = page.findComponent(panelWindowId);
  AdfAssert.assertPrototype(panelWindow, AdfRichPanelWindow);
  var contentWindow = frameDom.contentWindow;
  var title = contentWindow.document.title;
  if(title) {
    panelWindow.setTitle(title)
  }
};
AdfDhtmlRichDialogService._checkForIframeTitleChangeWithPPRNavOn = function(rtnId) {
  AdfAssert.assertNumeric(rtnId);
  var state = AdfDhtmlRichDialogService._getDialogStateToken(rtnId);
  if(!state) {
    return
  }
  var page = AdfPage.PAGE;
  var popupId = state.popupId;
  AdfAssert.assertString(popupId);
  var popup = page.findComponent(popupId);
  if(!popup) {
    return
  }
  AdfAssert.assertPrototype(popup, AdfRichPopup);
  var popupPeer = popup.getPeer();
  popupPeer.bind(popup);
  var popupDom = popupPeer.getDomElement();
  var agent = AdfAgent.AGENT;
  var inlineFrameId = agent.getExpandoProperty(popupDom, "_inlineFrameId");
  var inlineFrame = AdfPage.PAGE.findComponent(inlineFrameId);
  AdfAssert.assertPrototype(inlineFrame, AdfRichInlineFrame);
  var inlineFramePeer = inlineFrame.getPeer();
  inlineFramePeer.bind(inlineFrame);
  var frameDom = inlineFramePeer.__getIframe();
  AdfAssert.assertDomElement(frameDom, "IFRAME");
  var panelWindowId = agent.getExpandoProperty(frameDom, "_panelWindowId");
  AdfAssert.assertString(panelWindowId);
  var panelWindow = page.findComponent(panelWindowId);
  AdfAssert.assertPrototype(panelWindow, AdfRichPanelWindow);
  var contentWindow = frameDom.contentWindow;
  var title = contentWindow.document.title;
  if(title) {
    panelWindow.setTitle(title)
  }
  page.scheduleTimer(page, AdfDhtmlRichDialogService._checkForIframeTitleChangeWithPPRNavOn, rtnId, 3E3)
};
AdfDhtmlRichDialogService._notifyWindowClosed = function(returnId) {
  var page = AdfPage.PAGE;
  page.__notifyWindowCloseImmediately(true, returnId)
};
AdfDhtmlRichDialogService._WINDOW_MODALITY_TYPE_APPLICATION_MODAL = "applicationModal";
AdfDhtmlRichDialogService._WINDOW_DEFAULT_FEATURES_MAP = {alwayslowered:1, alwaysraised:1, channelmode:0, copyhistory:0, dependent:1, directories:0, fullscreen:0, hotkeys:1, location:0, menubar:0, resizable:1, scrollbars:1, status:1, titlebar:1, toolbar:1, "z-lock":1};

function AdfRichInlineEditor() {
}
AdfObject.createSubclass(AdfRichInlineEditor);
AdfRichInlineEditor.FILTER_UNSELECTABLE = 0;
AdfRichInlineEditor.FILTER_SELECTABLE = 1;
AdfRichInlineEditor.FILTER_EDITABLE = 2;
AdfRichInlineEditor.prototype.Init = function() {
  AdfRichInlineEditor.superclass.Init.call(this);
  this._component = null
};
AdfRichInlineEditor.prototype.preEdit = function(component) {
  var oldComponent = this._component;
  var canEdit = false;
  try {
    this._component = component;
    canEdit = this.PreEdit()
  }finally {
    this._component = oldComponent
  }
  return canEdit
};
AdfRichInlineEditor.prototype.startEdit = function(component, event) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assert(this._component == null, "start called on an already started inline editor");
  this._component = component
};
AdfRichInlineEditor.prototype.getEditedComponent = function() {
  return this._component
};
AdfRichInlineEditor.prototype.getEditedProperty = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfRichInlineEditor.prototype.handleEvent = function(event) {
};
AdfRichInlineEditor.prototype.stopEdit = function() {
  this._component = null
};
AdfRichInlineEditor.prototype.GetEditedPeer = function() {
  var component = this._component;
  var peer = component.getPeer();
  peer.bind(component);
  return peer
};
AdfRichInlineEditor.prototype.PreEdit = function() {
  AdfAssert.failedInAbstractFunction()
};

function AdfDhtmlTestEngine() {
}
AdfObject.createSubclass(AdfDhtmlTestEngine);
AdfDhtmlTestEngine.getEngine = function() {
  if(AdfDhtmlTestEngine._engine) {
    return AdfDhtmlTestEngine._engine
  }
  if(!AdfPage.PAGE.isAutomationEnabled()) {
    AdfDhtmlTestEngine._engine = new AdfDhtmlTestEngine;
    return AdfDhtmlTestEngine._engine
  }
  if(AdfDhtmlTestEngine._ENGINE) {
    var domWindow = AdfAgent.AGENT.getDomWindow();
    var userEngine = domWindow[AdfDhtmlTestEngine._ENGINE];
    if(typeof userEngine == "function" && AdfDhtmlTestEngine.prototype.isPrototypeOf(userEngine.prototype)) {
      AdfDhtmlTestEngine._engine = new userEngine
    }else {
      AdfLogger.LOGGER.warning("Unable to instantiate provided TEST_ENGINE: " + AdfDhtmlTestEngine._ENGINE);
      AdfDhtmlTestEngine._engine = new AdfDhtmlTestEngine
    }
  }else {
    if(AdfPage.PAGE.isAutomationEnabled()) {
      AdfDhtmlTestEngine._engine = new AdfWebDriverTestEngine
    }else {
      AdfDhtmlTestEngine._engine = new AdfDhtmlTestEngine
    }
  }
  return AdfDhtmlTestEngine._engine
};
AdfDhtmlTestEngine.prototype.simulateDomMouse = function(domElement, mouseEvent) {
  AdfLogger.LOGGER.warning("Call to AdfDhtmlTestEngine method, but no valid test engine is assigned. " + "Is automation mode on? If an alternate test engine was provided, was it valid?");
  AdfAssert.failedInAbstractFunction()
};
