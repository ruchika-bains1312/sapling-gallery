function AdfDataFlavor(stringForm) {
  this.Init(stringForm)
}
AdfObject.createSubclass(AdfDataFlavor);
AdfDataFlavor.getRowKeyDataFlavor = function(discriminant) {
  AdfAssert.assertStringOrNull(discriminant);
  if(!discriminant || discriminant.length == 0) {
    return AdfDataFlavor._GENERIC_ROWDATA_FLAVOR
  }
  var rowDataFlavor = AdfDataFlavor._ROWDATA_FLAVOR_MAP[discriminant];
  if(!rowDataFlavor) {
    rowDataFlavor = new AdfDataFlavor("rowKey/" + discriminant);
    rowDataFlavor._isRowKey = true;
    AdfDataFlavor._ROWDATA_FLAVOR_MAP[discriminant] = rowDataFlavor
  }
  return rowDataFlavor
};
AdfDataFlavor.isRowKeyDataFlavor = function(flavor) {
  return flavor._isRowKey
};
AdfDataFlavor.getObjectFlavor = function(dataObject, discriminant) {
  AdfAssert.assert(dataObject != null, "Can't create AdfDataFlavor without dataObject");
  AdfAssert.assertStringOrNull(discriminant);
  var className = AdfDataFlavor._TYPE_MAP[typeof dataObject];
  if(className === "Object") {
    className = AdfObject.prototype.isPrototypeOf(dataObject) ? dataObject.getTypeName() : AdfAssert.getFunctionName(dataObject.constructor)
  }
  if(className) {
    return AdfDataFlavor.getDataFlavorForClassName(className, discriminant)
  }else {
    return null
  }
};
AdfDataFlavor.getDataFlavorForClass = function(clazz, discriminant) {
  AdfAssert.assertFunction(clazz);
  AdfAssert.assertStringOrNull(discriminant);
  var className = AdfObject.prototype.isPrototypeOf(clazz) ? AdfObject.getTypeName(clazz) : AdfAssert.getFunctionName(clazz);
  return AdfDataFlavor.getDataFlavorForClassName(className, discriminant)
};
AdfDataFlavor.getDataFlavorForClassName = function(className, discriminant) {
  AdfAssert.assertString(className);
  AdfAssert.assertStringOrNull(discriminant);
  var dataFlavor;
  if(!discriminant) {
    dataFlavor = AdfDataFlavor._OBJECT_FLAVOR_MAP[className];
    if(!dataFlavor) {
      dataFlavor = new AdfDataFlavor(AdfDataFlavor._JSOBJECT_PREFIX_STRING + className);
      AdfDataFlavor._OBJECT_FLAVOR_MAP[className] = dataFlavor;
      AdfLogger.LOGGER.fine("DataFlavor className:", className, "-> data flavor:", dataFlavor)
    }
  }else {
    var stringForm = AdfDataFlavor._JSOBJECT_PREFIX_STRING + className + "/" + discriminant;
    dataFlavor = new AdfDataFlavor(stringForm)
  }
  return dataFlavor
};
AdfDataFlavor.prototype.getStringForm = function() {
  return this._stringForm
};
AdfDataFlavor.prototype.equals = function(object) {
  return this === object || this._stringForm == object._stringForm
};
AdfDataFlavor.prototype.Init = function(stringForm) {
  AdfDataFlavor.superclass.Init.call(this);
  this._stringForm = stringForm;
  this._isRowKey = false
};
AdfDataFlavor.prototype.toDebugString = function() {
  return AdfDataFlavor.superclass.toDebugString.call(this) + ":" + this._stringForm
};
AdfDataFlavor._OBJECT_FLAVOR_MAP = new Object;
AdfDataFlavor._ROWDATA_FLAVOR_MAP = new Object;
AdfDataFlavor._GENERIC_ROWDATA_FLAVOR = new AdfDataFlavor("rowKey/");
AdfDataFlavor._TYPE_MAP = {"object":"Object", "boolean":"Boolean", "number":"Number", "string":"String", "function":"Function", "undefined":null};
AdfDataFlavor._JSOBJECT_PREFIX_STRING = "jsObject/";
AdfDataFlavor.STRING_FLAVOR = AdfDataFlavor.getObjectFlavor("");
AdfDataFlavor.OBJECT_FLAVOR = AdfDataFlavor.getObjectFlavor(new Object);
AdfDataFlavor.ANY_FLAVOR = new AdfDataFlavor("*");

function AdfDhtmlZOrderManager() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlZOrderManager);
AdfDhtmlZOrderManager.InitClass = function() {
  var LAYERIDS = ["__af_Z_maskingframe", "__af_Z_window", "__af_Z_tooltip"];
  this.LAYERCONTAINER = "DhtmlZOrderManagerLayerContainer";
  this.FLOATINGTYPE_WINDOW = LAYERIDS[1];
  this.FLOATINGTYPE_TOOLTIP = LAYERIDS[2];
  this.FLOATINGTYPE_MASKINGFRAME = LAYERIDS[0];
  this.LAYERIDS = LAYERIDS;
  this._LAYER_CONTAINER_STYLECLASS = "AFZOrderLayerContainer";
  this.LAYER_STYLECLASS = "AFZOrderLayer";
  this._MAXZ = Math.pow(2, 31) - 2;
  this._SHADOWDECORATORZINDEX = 3;
  this._BLANK_PAGE_RESOURCE = "about:blank"
};
AdfDhtmlZOrderManager.prototype.Init = function() {
  AdfDhtmlZOrderManager.superclass.Init.call(this);
  this._layerHash = {};
  this._isGecko = AdfAgent.AGENT.getPlatform() == AdfAgent.GECKO_PLATFORM
};
AdfDhtmlZOrderManager.getMaxZIndex = function() {
  return AdfDhtmlZOrderManager._MAXZ
};
AdfDhtmlZOrderManager.prototype.dispose = function() {
  this._layerContainerId = null;
  this._layerHash = null
};
AdfDhtmlZOrderManager.prototype.addElementToLayer = function(element, layerId, priorElement) {
  this._assertLayers();
  var layer = this._getLayer(layerId);
  layer.addElement(element, priorElement)
};
AdfDhtmlZOrderManager.prototype.raiseToFront = function(element) {
  this._assertLayers();
  var layerId = element.parentNode.getAttribute("id");
  this._getLayer(layerId).raiseToFront(element);
  AdfPopupScopingUtils.scope(element)
};
AdfDhtmlZOrderManager.prototype._getLayer = function(id) {
  return this._layerHash[id]
};
AdfDhtmlZOrderManager.prototype._createLayers = function() {
  var page = AdfPage.PAGE;
  var maxFormCount = page.isScreenReaderMode() ? 2 : 1;
  var LAYERIDS = AdfDhtmlZOrderManager.LAYERIDS;
  var layerContainer = this._createLayerElement(AdfDhtmlZOrderManager.LAYERCONTAINER);
  AdfDomUtils.addCSSClassName(layerContainer, AdfDhtmlZOrderManager._LAYER_CONTAINER_STYLECLASS);
  for(var i = 0;i < LAYERIDS.length;i++) {
    var id = LAYERIDS[i];
    var layerElement = this._createLayerElement(id);
    var layer = new AdfDhtmlZOrderLayer(layerElement);
    this._addLayer(layerContainer, layer);
    AdfDomUtils.addCSSClassName(layerElement, AdfDhtmlZOrderManager.LAYER_STYLECLASS)
  }
  this._layerContainerId = layerContainer.id;
  return layerContainer
};
AdfDhtmlZOrderManager.prototype._createLayerElement = function(id) {
  if(this._layerHash[id]) {
    return this._layerHash[id]
  }
  var domDocument = AdfPage.PAGE.getDomDocument();
  var layer = domDocument.createElement("div");
  layer.setAttribute("id", id);
  layer.style.zIndex = AdfDhtmlZOrderManager._MAXZ;
  return layer
};
AdfDhtmlZOrderManager.prototype._addLayer = function(layerContainer, layer) {
  var id = layer.getId();
  this._layerHash[id] = layer;
  layerContainer.appendChild(layer.getContainerElement())
};
AdfDhtmlZOrderManager.prototype._assertLayers = function() {
  var layerContainer = this._getLayerContainer();
  if(!layerContainer) {
    this._layerHash = {};
    layerContainer = this._createLayers()
  }
  var domDocument = AdfPage.PAGE.getDomDocument();
  if(AdfDhtmlZOrderManager._getFormOrBody(domDocument).lastChild != layerContainer) {
    this._repairLayers(layerContainer)
  }
};
AdfDhtmlZOrderManager.prototype._repairLayers = function(layerContainer) {
  var domDocument = AdfPage.PAGE.getDomDocument();
  var documentForm = AdfDhtmlZOrderManager._getFormOrBody(domDocument);
  if(layerContainer.parentNode != documentForm) {
    this._positionLayerContainer(layerContainer);
    return
  }
  for(var el = layerContainer.nextSibling;el;el = layerContainer.nextSibling) {
    documentForm.insertBefore(el, layerContainer)
  }
};
AdfDhtmlZOrderManager.prototype._positionLayerContainer = function(layerContainer) {
  var domDocument = AdfPage.PAGE.getDomDocument();
  var documentForm = AdfDhtmlZOrderManager._getFormOrBody(domDocument);
  if(layerContainer.parentNode != documentForm) {
    documentForm.appendChild(layerContainer);
    AdfAgent.AGENT.elementsAdded(layerContainer)
  }
};
AdfDhtmlZOrderManager.prototype.containsElement = function(element) {
  if(element == null) {
    return false
  }
  var layerContainer = this._getLayerContainer();
  for(element = element.parentNode;element;element = element.parentNode) {
    if(element == layerContainer) {
      return true
    }
  }
  return false
};
AdfDhtmlZOrderManager.prototype.getElementCount = function() {
  var count = 0;
  var LAYERIDS = AdfDhtmlZOrderManager.LAYERIDS;
  var layerHash = this._layerHash;
  for(var i = 1;i < LAYERIDS.length;i++) {
    var layer = layerHash[LAYERIDS[i]];
    if(layer) {
      count += layer.getContainerElementCount()
    }
  }
  return count
};
AdfDhtmlZOrderManager.prototype.removeElement = function(element) {
  if(element.parentNode) {
    AdfPopupScopingUtils.unscope(element);
    var layerContainer = element.parentNode;
    var layerId = layerContainer.getAttribute("id");
    this._layerHash[layerId].removeElement(element)
  }
};
AdfDhtmlZOrderManager.prototype._getLayerContainer = function() {
  var layerContainerId = this._layerContainerId;
  if(layerContainerId == null) {
    return null
  }
  return AdfAgent.AGENT.getElementById(layerContainerId)
};
AdfDhtmlZOrderManager._getFormOrBody = function(domDocument) {
  if(domDocument.forms && domDocument.forms.length) {
    return domDocument.forms[0]
  }
  return domDocument.body
};
AdfDhtmlZOrderManager.prototype.prepareMaskingFrame = function() {
  this._assertLayers();
  var agent = AdfAgent.AGENT;
  var layer = this._getLayer(AdfDhtmlZOrderManager.FLOATINGTYPE_MASKINGFRAME);
  delete layer._unusedMaskingFrame;
  layer.visitElements(AdfDhtmlZOrderManager._findMaskingFramesInUse);
  var maskFrame = layer._unusedMaskingFrame;
  delete layer._unusedMaskingFrame;
  if(!maskFrame) {
    var maskNodeType = this._isGecko ? "DIV" : "IFRAME";
    maskFrame = layer.getContainerElement().ownerDocument.createElement(maskNodeType);
    this.removeMaskingFrame(maskFrame);
    if(maskFrame.tagName == "IFRAME") {
      maskFrame.src = AdfDhtmlZOrderManager._BLANK_PAGE_RESOURCE
    }
    agent.setExpandoProperty(maskFrame, "_inUse", false);
    this.addElementToLayer(maskFrame, AdfDhtmlZOrderManager.FLOATINGTYPE_MASKINGFRAME)
  }
  return maskFrame
};
AdfDhtmlZOrderManager._findMaskingFramesInUse = function(layer, element) {
  var agent = AdfAgent.AGENT;
  if(!agent.getExpandoProperty(element, "_inUse")) {
    layer._unusedMaskingFrame = element;
    return true
  }
  return false
};
AdfDhtmlZOrderManager.prototype.createMaskingFrame = function() {
  var agent = AdfAgent.AGENT;
  var maskFrame = this.prepareMaskingFrame();
  agent.setExpandoProperty(maskFrame, "_inUse", true);
  var maskFrameStyle = maskFrame.style;
  maskFrameStyle.zIndex = 1;
  return maskFrame
};
AdfDhtmlZOrderManager.prototype.removeMaskingFrame = function(maskFrame) {
  var agent = AdfAgent.AGENT;
  maskFrame.frameBorder = "0";
  maskFrame.className = "AFMaskingFrame";
  var maskFrameStyle = maskFrame.style;
  maskFrameStyle.visibility = "hidden";
  maskFrameStyle.width = "0px";
  maskFrameStyle.height = "0px";
  maskFrameStyle.left = "0px";
  maskFrameStyle.top = "0px";
  maskFrameStyle.zIndex = 0;
  agent.setExpandoProperty(maskFrame, "_inUse", false)
};
AdfObject.ensureClassInitialization(AdfDhtmlZOrderManager);

function AdfXMLRequest() {
  this.Init()
}
AdfObject.createSubclass(AdfXMLRequest);
AdfXMLRequest.UNINITIALIZED = 0;
AdfXMLRequest.LOADING = 1;
AdfXMLRequest.LOADED = 2;
AdfXMLRequest.INTERACTIVE = 3;
AdfXMLRequest.COMPLETED = 4;
AdfXMLRequest._CHECKPOINT = AdfCheckpoint.getCheckpoint("send", "postback");
AdfXMLRequest._CHECKPOINT.setDescription("A measurement of how long is spend processing an XMLHttpRequest");
AdfXMLRequest._startCheckpoint = function() {
  if(AdfXMLRequest._checkpointId == undefined) {
    AdfXMLRequest._checkpointId = AdfXMLRequest._CHECKPOINT.start()
  }
};
AdfXMLRequest._stopCheckpoint = function() {
  if(AdfXMLRequest._checkpointId != undefined) {
    AdfXMLRequest._CHECKPOINT.stop(AdfXMLRequest._checkpointId);
    AdfXMLRequest._checkpointId = undefined
  }
};
AdfXMLRequest.prototype.Init = function() {
  AdfXMLRequest.superclass.Init.call(this);
  this.isSynchronous = false;
  this.callback = null;
  this._state = AdfXMLRequest.UNINITIALIZED;
  this.headers = new Object;
  this.xmlhttp = AdfAgent.AGENT.createXMLHttpRequest();
  if(!this.xmlhttp) {
    var xmlhttpWarningMessage = AdfPage.PAGE.getLookAndFeel().getTranslatedString("af_document.XMLHTTP_UNSUPPORTED");
    alert(xmlhttpWarningMessage)
  }
};
AdfXMLRequest.prototype.toString = function() {
  return AdfXMLRequest.superclass.toString.call(this) + " completionState:" + this.getCompletionState()
};
AdfXMLRequest.prototype.setSynchronous = function(isSynch) {
  this.isSynchronous = isSynch
};
AdfXMLRequest.prototype.setCallback = function(_callback) {
  this.callback = _callback
};
AdfXMLRequest.prototype.addEventListener = function(event, listener) {
  if(this.xmlhttp.upload) {
    this.xmlhttp.upload.addEventListener(event, listener, false)
  }
};
AdfXMLRequest.prototype.getCompletionState = function() {
  return this._state
};
AdfXMLRequest.prototype.getStatus = function() {
  return this.xmlhttp.status
};
AdfXMLRequest.prototype.getResponseXML = function() {
  return this.xmlhttp.responseXML
};
AdfXMLRequest.prototype.getResponseText = function() {
  return this.xmlhttp.responseText
};
AdfXMLRequest.prototype.send = function(url, content, omitAdfRichMessage) {
  var xmlhttp = this.xmlhttp;
  if(!this.isSynchronous && this.callback) {
    var cb = new Function("arguments.callee.obj.__onReadyStateChange();");
    cb.obj = this;
    xmlhttp.onreadystatechange = cb
  }
  AdfXMLRequest._startCheckpoint();
  var method = content ? "POST" : "GET";
  xmlhttp.open(method, url, !this.isSynchronous);
  for(var name in this.headers) {
    xmlhttp.setRequestHeader(name, this.headers[name])
  }
  if(!omitAdfRichMessage) {
    xmlhttp.setRequestHeader("Adf-Rich-Message", "true")
  }
  xmlhttp.send(content);
  if(this.isSynchronous) {
    this.__onReadyStateChange()
  }
};
AdfXMLRequest.prototype.abort = function() {
  var xmlhttp = this.xmlhttp;
  if(xmlhttp) {
    xmlhttp.abort()
  }
};
AdfXMLRequest.prototype.getResponseHeader = function(name) {
  return this.xmlhttp.getResponseHeader(name)
};
AdfXMLRequest.prototype.getAllResponseHeaders = function() {
  return this.xmlhttp.getAllResponseHeaders()
};
AdfXMLRequest.prototype.setRequestHeader = function(name, value) {
  this.headers[name] = value
};
AdfXMLRequest.prototype.__onReadyStateChange = function() {
  this._state = this.xmlhttp.readyState;
  if(this._state == AdfXMLRequest.COMPLETED) {
    AdfXMLRequest._stopCheckpoint();
    if(AdfPage.PAGE && AdfPage.PAGE.isUserActivityMonitoringOn()) {
      if(this.xmlhttp.responseXML) {
        AdfUserActivityInfo.setResponseReceivedTime()
      }
    }
  }
  if(this.callback) {
    this.callback(this)
  }
};
AdfXMLRequest.prototype.cleanup = function() {
  this.callback = null;
  delete this.headers;
  delete this.xmlhttp
};

function AdfDnDContext() {
  this.Init()
}
AdfObject.createSubclass(AdfDnDContext);
AdfDnDContext.ACTION_NONE = 0;
AdfDnDContext.ACTION_COPY = 1;
AdfDnDContext.ACTION_MOVE = 2;
AdfDnDContext.ACTION_LINK = 4;
AdfDnDContext.ACTION_COPY_OR_MOVE = AdfDnDContext.ACTION_COPY | AdfDnDContext.ACTION_MOVE;
AdfDnDContext.ACTIONS_ALL = AdfDnDContext.ACTION_COPY_OR_MOVE | AdfDnDContext.ACTION_LINK;
AdfDnDContext.assertUserAction = function(userAction) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assertNumber(userAction);
    AdfAssert.assertInSet(userAction, AdfDnDContext._VALID_USER_ACTIONS)
  }
};
AdfDnDContext.prototype.__addComponentTarget = function(component) {
};
AdfDnDContext.prototype.__removeComponentTarget = function(component) {
};
AdfDnDContext.prototype.isDragging = function() {
  return this._draggingContext != null
};
AdfDnDContext.prototype.getDragSource = function() {
  return this._dragSource
};
AdfDnDContext.prototype.getTransferable = function() {
  return null
};
AdfDnDContext.prototype.getSourceActions = function() {
  return AdfDnDContext.ACTION_NONE
};
AdfDnDContext.prototype.getUserAction = function() {
  return AdfDnDContext.ACTION_NONE
};
AdfDnDContext.prototype.setDropTargetProperty = function(name, value) {
};
AdfDnDContext.prototype.getDropTargetProperty = function(name) {
  return null
};
AdfDnDContext.prototype.getTriggerEvent = function() {
  return null
};
AdfDnDContext.prototype.startDrag = function(triggerEvent, transferable, allowedActions, defaultAction, dragOverNode, cursorOffsetX, cursorOffsetY, cursor) {
};
if(AdfAssert.DEBUG) {
  AdfDnDContext._VALID_USER_ACTIONS = {"0":1, "1":1, "2":1, "4":1}
}
;
function AdfAutoDismissalManager() {
  this.Init()
}
AdfObject.createSubclass(AdfAutoDismissalManager);
AdfAutoDismissalManager.prototype.Init = function() {
  AdfAutoDismissalManager.superclass.Init.call(this);
  this._componentStack = new Array;
  this._defaultPopupTimeout = 500
};
AdfAutoDismissalManager.prototype.getBehaviorCount = function() {
  return this._componentStack.length
};
AdfAutoDismissalManager.prototype.dispose = function() {
  this.closeAll();
  this._unregisterEventHandlers()
};
AdfAutoDismissalManager.prototype.addBehavior = function(component, hints) {
  if(this.hasComponent(component, hints)) {
    return
  }
  var type = hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS];
  switch(type) {
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU:
    ;
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_ALWAYS:
    ;
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT:
    ;
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_INACTIVATE:
    ;
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_TIMEOUT:
      this._addComponent(component, type, hints);
      break
  }
};
AdfAutoDismissalManager.prototype.removeBehavior = function(component, popupId) {
  var id = component.getClientId();
  var componentStack = this._componentStack;
  if(!popupId) {
    popupId = id
  }
  for(var i = 0;i < componentStack.length;i++) {
    var stackedObj = componentStack[i];
    if(!stackedObj) {
      continue
    }
    var stackedId = stackedObj["id"];
    var stackPopupId = stackedObj["popupId"] ? stackedObj["popupId"] : id;
    if(stackedId == id && stackPopupId == popupId) {
      if(component instanceof AdfRichPopup) {
        for(var j = componentStack.length - 1;j > i;j--) {
          var descendantObj = componentStack[j];
          if(!descendantObj) {
            continue
          }
          var descendantId = descendantObj["id"];
          var descendantComp = page.findComponent(descendantId);
          if(descendantComp.isDescendant(component)) {
            var dismissalBehavior = descendantObj.dismissalBehavior;
            AdfAssert.assertFunction(dismissalBehavior);
            AdfLogger.LOGGER.logMessage(AdfLogger.FINE, "force autodismissal for descendant popupId: '" + descendantId + "' of parent popupId: '" + stackedId + "'");
            dismissalBehavior(j)
          }
        }
      }
      AdfLogger.LOGGER.logMessage(AdfLogger.FINE, "unregistering autodismissal for popupId: '" + stackedId + "'");
      componentStack.splice(i, 1);
      if(componentStack.length == 0) {
        this._unregisterEventHandlers()
      }
      break
    }
  }
};
AdfAutoDismissalManager.prototype.changeBehavior = function(component, hints) {
  var id = component.getClientId();
  var componentStack = this._componentStack;
  var stackLength = componentStack.length;
  var type = hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS];
  for(var i = 0;i < stackLength;i++) {
    var stackedObj = componentStack[i];
    var stackedId = stackedObj["id"];
    if(stackedId == id) {
      stackedObj["type"] = type;
      break
    }
  }
};
AdfAutoDismissalManager.prototype.hasComponents = function() {
  return this._componentStack.length > 0
};
AdfAutoDismissalManager.prototype.hasComponent = function(component, hints) {
  var componentId = component.getClientId();
  var componentStack = this._componentStack;
  var stackLength = componentStack.length;
  for(var i = 0;i < stackLength;i++) {
    if(componentStack[i]["id"] == componentId) {
      if(hints["popupId"]) {
        if(componentStack[i]["popupId"] == hints["popupId"]) {
          return true
        }
      }else {
        return true
      }
    }
  }
  return false
};
AdfAutoDismissalManager.prototype.closeAll = function() {
  var page = AdfPage.PAGE;
  var componentStack = this._componentStack;
  for(var i = componentStack.length - 1;i > -1;i--) {
    var stackedObj = componentStack[i];
    var id = stackedObj["id"];
    var peer;
    var component = page.findComponent(id);
    if(component && (peer = component.getPeer())) {
      peer.cancelAllPopups(component, true)
    }
  }
};
AdfAutoDismissalManager.prototype._addComponent = function(component, type, hints) {
  var id = component.getClientId();
  var page = AdfPage.PAGE;
  var componentStack = this._componentStack;
  if(!(component instanceof AdfRichDocument)) {
    for(var i = componentStack.length - 1;i >= 0;i--) {
      var stackedObj = componentStack[i];
      if(!stackedObj) {
        continue
      }
      var stackedComp = page.findComponent(stackedObj["id"]);
      if(id != stackedObj["id"] && !component.isDescendant(stackedComp)) {
        var dismissalBehavior = stackedObj.dismissalBehavior;
        AdfAssert.assertFunction(dismissalBehavior);
        dismissalBehavior(i)
      }
    }
  }
  var wrapper = new Object;
  wrapper["id"] = id;
  wrapper["type"] = type;
  wrapper[AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT_ID] = hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT_ID];
  wrapper[AdfRichPopup.HINT_LAUNCH_ID] = hints[AdfRichPopup.HINT_LAUNCH_ID];
  wrapper["popupId"] = hints["popupId"] ? hints["popupId"] : id;
  if(type == AdfDhtmlPopupWindow.HINT_AUTODISMISS_TIMEOUT) {
    wrapper.dismissalBehavior = this.createCallback(this._cancelTimeoutDismissalBehavior);
    var autoDismissalTimeout = hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS_TIMEOUT];
    var state = {stackObj:wrapper, myself:this};
    wrapper["timer"] = page.scheduleTimer(this, AdfAutoDismissalManager._timeoutDismissalBehavior, state, autoDismissalTimeout)
  }else {
    if(type == AdfDhtmlPopupWindow.HINT_AUTODISMISS_INACTIVATE) {
      wrapper.dismissalBehavior = this.createCallback(this._inactivateDismissalBehavior)
    }else {
      wrapper.dismissalBehavior = this.createCallback(this._hideDismissalBehavior)
    }
    if(hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT] > 0 && !hints[AdfDhtmlPopupWindow.HINT_MODAL]) {
      wrapper[AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT] = hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT];
      var state = {stackObj:wrapper, myself:this};
      wrapper["timer"] = page.scheduleTimer(this, AdfAutoDismissalManager._timeoutDismissalBehavior, state, hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT])
    }
  }
  if(componentStack.length == 0) {
    this._registerEventHandlers()
  }
  componentStack.push(wrapper)
};
AdfAutoDismissalManager.prototype.dismiss = function(target) {
  var componentStack = this._componentStack;
  for(var i = componentStack.length - 1;i >= 0;i--) {
    var stackedObj = componentStack[i];
    if(!stackedObj) {
      continue
    }
    if(this._cancelDismissal(target, stackedObj)) {
      continue
    }else {
      var dismissalBehavior = stackedObj.dismissalBehavior;
      AdfAssert.assertFunction(dismissalBehavior);
      dismissalBehavior(i)
    }
  }
};
AdfAutoDismissalManager.prototype._dismissOnMouseOver = function(target) {
  var componentStack = this._componentStack;
  for(var i = componentStack.length - 1;i >= 0;i--) {
    var stackedObj = componentStack[i];
    if((stackedObj.type == AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT || stackedObj.type == AdfDhtmlPopupWindow.HINT_AUTODISMISS_TIMEOUT) && !this._cancelDismissal(target, stackedObj)) {
      var dismissalBehavior = stackedObj.dismissalBehavior;
      AdfAssert.assertFunction(dismissalBehavior);
      dismissalBehavior(i)
    }
  }
};
AdfAutoDismissalManager.prototype._adjustPopupTimeout = function(target) {
  var componentStack = this._componentStack;
  var page = AdfPage.PAGE;
  var domDocument = AdfAgent.AGENT.getDomDocument();
  var activeElement = domDocument.activeElement;
  for(var i = componentStack.length - 1;i >= 0;i--) {
    var stackedObj = componentStack[i];
    if(stackedObj[AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT]) {
      if(stackedObj["timer"] && (this._cancelDismissal(target, stackedObj) || this._cancelDismissal(activeElement, stackedObj))) {
        page.cancelTimer(stackedObj["timer"]);
        delete stackedObj["timer"]
      }else {
        if(!stackedObj["timer"] && !this._cancelDismissal(target, stackedObj) && !this._cancelDismissal(activeElement, stackedObj)) {
          var state = {stackObj:stackedObj, myself:this};
          stackedObj["timer"] = page.scheduleTimer(this, AdfAutoDismissalManager._timeoutDismissalBehavior, state, this._defaultPopupTimeout)
        }
      }
    }
  }
};
AdfAutoDismissalManager.prototype.stopPopupDismissTimeout = function(component) {
  var componentId = component.getClientId();
  var componentStack = this._componentStack;
  var stackLength = componentStack.length;
  var page = AdfPage.PAGE;
  for(var i = 0;i < stackLength;i++) {
    if(componentStack[i]["timer"] && componentStack[i]["id"] == componentId) {
      page.cancelTimer(componentStack[i]["timer"]);
      delete componentStack[i]["timer"]
    }
  }
};
AdfAutoDismissalManager.prototype.restartPopupDismissTimeout = function(component) {
  var componentId = component.getClientId();
  var componentStack = this._componentStack;
  var stackLength = componentStack.length;
  var page = AdfPage.PAGE;
  for(var i = 0;i < stackLength;i++) {
    if(componentStack[i]["id"] == componentId && componentStack[i][AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT] && !componentStack[i]["timer"]) {
      var state = {stackObj:componentStack[i], myself:this};
      componentStack[i]["timer"] = page.scheduleTimer(this, AdfAutoDismissalManager._timeoutDismissalBehavior, state, this._defaultPopupTimeout)
    }
  }
};
AdfAutoDismissalManager.prototype.cancelPopupDismissTimeout = function(component) {
  var componentId = component.getClientId();
  var componentStack = this._componentStack;
  var stackLength = componentStack.length;
  var page = AdfPage.PAGE;
  for(var i = 0;i < stackLength;i++) {
    if(componentStack[i]["id"] == componentId) {
      if(componentStack[i]["timer"]) {
        page.cancelTimer(componentStack[i]["timer"]);
        delete componentStack[i]["timer"]
      }
      if(componentStack[i][AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT]) {
        delete componentStack[i][AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT]
      }
    }
  }
};
AdfAutoDismissalManager.prototype._undismissDueToActiveIframe = function(activeElement) {
  var componentStack = this._componentStack;
  for(var i = componentStack.length - 1;i >= 0;i--) {
    var stackedObj = componentStack[i];
    var page = AdfPage.PAGE;
    if(stackedObj.type == AdfDhtmlPopupWindow.HINT_AUTODISMISS_INACTIVATE) {
      var stackedId = stackedObj["id"];
      var popupOwner = page.findComponent(stackedId);
      var popupOwnerPeer = popupOwner.getPeer();
      popupOwnerPeer.bind(popupOwner);
      var popupList = popupOwnerPeer.getAllPopups(popupOwner);
      if(popupList != null) {
        var popupWindow = popupList[stackedId];
        var popupElement = popupWindow.getElement();
        if(AdfDomUtils.isAncestor(popupElement, activeElement)) {
          popupWindow.handleActivate(false);
          return
        }
      }
    }else {
      this.dismiss(activeElement)
    }
  }
};
AdfAutoDismissalManager.prototype._cancelDismissal = function(target, stackedObj) {
  var stackedId = stackedObj["id"];
  var autodismissMouseOutId = stackedObj[AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT_ID];
  var sourceId = stackedObj[AdfRichPopup.HINT_LAUNCH_ID];
  var popupOwner = AdfPage.PAGE.findComponent(stackedId);
  var popupOwnerPeer = popupOwner.getPeer();
  popupOwnerPeer.bind(popupOwner);
  var popupList = popupOwnerPeer.getAllPopups(popupOwner);
  if(popupList == null) {
    return false
  }
  var defaultCancelCondition = this._isTargetInPopup(target, popupList) || this._popupUnderneathGlassPane(popupList);
  var cancel;
  switch(stackedObj["type"]) {
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_ALWAYS:
      cancel = defaultCancelCondition;
      if(!cancel && sourceId && AdfDomUtils.isAncestorOrSelf(AdfAgent.AGENT.getElementById(sourceId), target)) {
        cancel = true
      }
      break;
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU:
      cancel = defaultCancelCondition || this._isTargetInOwner(target, popupOwner);
      break;
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT:
      if(autodismissMouseOutId) {
        cancel = defaultCancelCondition || AdfDomUtils.isAncestorOrSelf(AdfAgent.AGENT.getElementById(autodismissMouseOutId), target)
      }else {
        cancel = defaultCancelCondition || this._isTargetInOwner(target, popupOwner)
      }
      break;
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_INACTIVATE:
      cancel = defaultCancelCondition;
      break;
    case AdfDhtmlPopupWindow.HINT_AUTODISMISS_TIMEOUT:
      cancel = !this._isTargetInPopup(target, popupList);
      break
  }
  return cancel
};
AdfAutoDismissalManager.prototype._isTargetInPopup = function(target, popupList) {
  var targetComponent = null;
  for(var popupId in popupList) {
    var popupWindow = popupList[popupId];
    var popupElement = popupWindow.getElement();
    if(AdfDomUtils.isAncestorOrSelf(popupElement, target)) {
      return true
    }
    if(targetComponent == null) {
      targetComponent = this._getContainingComponent(target)
    }
    if(popupId && this._isComponentAncestor(popupId, targetComponent)) {
      return true
    }
  }
  return false
};
AdfAutoDismissalManager.prototype._getContainingComponent = function(domElement) {
  var page = AdfPage.PAGE;
  while(domElement) {
    id = domElement.id;
    if(!id && domElement.nodeType == 1) {
      id = domElement.getAttribute(AdfDhtmlPopupWindow.__POPUPID_EXPANDO)
    }
    var component = id ? page.findComponent(id) : null;
    if(component) {
      return component
    }
    domElement = domElement.parentNode
  }
  return null
};
AdfAutoDismissalManager.prototype._isComponentAncestor = function(ancestorClientId, component) {
  while(component) {
    if(ancestorClientId == component.getClientId()) {
      return true
    }
    component = component.getParent()
  }
  return false
};
AdfAutoDismissalManager.prototype._popupUnderneathGlassPane = function(popupList) {
  for(var popupId in popupList) {
    var popupWindow = popupList[popupId];
    var popupElement = popupWindow.getElement();
    var modalityManager = AdfPage.PAGE.getModalityManager();
    if(modalityManager.isGlassPaneVisible()) {
      if(!modalityManager.isAboveTopGlassPane(popupElement)) {
        return true
      }
    }
  }
  return false
};
AdfAutoDismissalManager.prototype._isTargetInOwner = function(target, popupOwner) {
  var popupOwnerPeer = popupOwner.getPeer();
  popupOwnerPeer.bind(popupOwner);
  var popupOwnerRootElement = popupOwnerPeer.getDomElement();
  return AdfDomUtils.isAncestorOrSelf(popupOwnerRootElement, target)
};
AdfAutoDismissalManager.prototype._inactivateDismissalBehavior = function(index) {
  AdfAssert.assertNumber(index);
  var componentStack = this._componentStack;
  var obj = componentStack[index];
  var id = obj["id"];
  var popupId = obj["popupId"];
  var component = AdfPage.PAGE.findComponent(id);
  var popupWindow = component.getPeer().getPopupWindow(component, popupId);
  if(popupWindow && popupWindow instanceof AdfDhtmlSimpleFloat) {
    var dialogManager = AdfDhtmlDialogManager.getInstance();
    if(dialogManager.getActiveDialog() == popupWindow) {
      dialogManager.deactivateCurrentDialog()
    }
  }
};
AdfAutoDismissalManager.prototype._hideDismissalBehavior = function(index) {
  AdfAssert.assertNumber(index);
  var page = AdfPage.PAGE;
  var componentStack = this._componentStack;
  var obj = componentStack[index];
  var id = obj["id"];
  var component = page.findComponent(id);
  this._hideComponentPopups(component)
};
AdfAutoDismissalManager.prototype._cancelTimeoutDismissalBehavior = function(index) {
  AdfAssert.assertNumber(index);
  var page = AdfPage.PAGE;
  var componentStack = this._componentStack;
  var stackedObj = componentStack[index];
  var timer = stackedObj["timer"];
  AdfAssert.assertNumber(timer);
  page.cancelTimer(timer);
  stackedObj["type"] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU;
  stackedObj.dismissalBehavior = this.createCallback(this._hideDismissalBehavior);
  delete stackedObj["timer"]
};
AdfAutoDismissalManager._timeoutDismissalBehavior = function(state) {
  var stackObj = state.stackObj;
  var type = stackObj["type"];
  var popupTimeout = stackObj[AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT];
  if(type != AdfDhtmlPopupWindow.HINT_AUTODISMISS_TIMEOUT && !popupTimeout) {
    return
  }
  var myself = state.myself;
  var id = stackObj["id"];
  var component = AdfPage.PAGE.findComponent(id);
  myself._hideComponentPopups(component)
};
AdfAutoDismissalManager.prototype._hideComponentPopups = function(component) {
  var peer = component.getPeer();
  if(component instanceof AdfRichMenu) {
    peer.cancelPopup()
  }else {
    peer.cancelAllPopups(component)
  }
};
AdfAutoDismissalManager.prototype._registerEventHandlers = function() {
  var agent = AdfAgent.AGENT;
  var isIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
  var isWebkit = agent.getPlatform() == AdfAgent.WEBKIT_PLATFORM;
  var domDocument = agent.getDomDocument();
  var keyupCallback = this._keyupCallback = this.createCallback(this._handleKeyUp);
  agent.addBubbleEventListener(domDocument, "keyup", keyupCallback);
  var mousedownCallback = this._mousedownCallback = this.createCallback(this._handleMouseDown);
  agent.addBubbleEventListener(domDocument.body, "mousedown", mousedownCallback);
  var touchStartCallback = this._touchStartCallback = this.createCallback(this._handleTouchStart);
  agent.addBubbleEventListener(domDocument.body, "touchstart", touchStartCallback);
  if(isIE) {
    var focusinCallback = this._focusinCallback = this.createCallback(this._handleFocusIn);
    agent.addBubbleEventListener(domDocument, "focusin", focusinCallback)
  }else {
    if(isWebkit) {
      var domWindow = agent.getDomWindow();
      var blurCallbackWin = this._blurCallback = this.createCallback(this._handleBlur);
      agent.addBubbleEventListener(domWindow, "blur", blurCallbackWin)
    }else {
      var blurCallback = this._blurCallback = this.createCallback(this._handleBlur);
      agent.addBubbleEventListener(domDocument, "blur", blurCallback)
    }
  }
  var mouseoverCallback = this._mouseoverCallback = this.createCallback(this._handleMouseOver);
  agent.addBubbleEventListener(domDocument, "mouseover", mouseoverCallback)
};
AdfAutoDismissalManager.prototype._unregisterEventHandlers = function() {
  var agent = AdfAgent.AGENT;
  var isIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
  var isWebkit = agent.getPlatform() == AdfAgent.WEBKIT_PLATFORM;
  var domDocument = agent.getDomDocument();
  var keyupCallback = this._keyupCallback;
  if(keyupCallback) {
    agent.removeBubbleEventListener(domDocument, "keyup", keyupCallback);
    delete this._keyupCallback
  }
  var mousedownCallback = this._mousedownCallback;
  if(mousedownCallback) {
    agent.removeBubbleEventListener(domDocument.body, "mousedown", mousedownCallback);
    delete this._mousedownCallback
  }
  var touchStartCallback = this._touchStartCallback;
  if(touchStartCallback) {
    agent.removeBubbleEventListener(domDocument.body, "touchstart", touchStartCallback);
    delete this._touchStartCallback
  }
  if(isIE) {
    var focusinCallback = this._focusinCallback;
    if(focusinCallback) {
      agent.removeBubbleEventListener(domDocument, "focusin", focusinCallback);
      delete this._focusinCallback
    }
  }else {
    if(isWebkit) {
      var blurCallbackWin = this._blurCallback;
      if(blurCallbackWin) {
        var domWindow = agent.getDomWindow();
        agent.removeBubbleEventListener(domWindow, "blur", blurCallbackWin)
      }
    }else {
      var blurCallback = this._blurCallback;
      if(blurCallback) {
        agent.removeBubbleEventListener(domDocument, "blur", blurCallback);
        delete this._blurCallback
      }
    }
  }
  var mouseoverCallback = this._mouseoverCallback;
  if(mouseoverCallback) {
    agent.removeBubbleEventListener(domDocument, "mouseover", mouseoverCallback);
    delete this._mouseoverCallback
  }
};
AdfAutoDismissalManager.prototype._handleFocusIn = function(evt) {
  var evtTarget = AdfAgent.AGENT.getEventTarget(evt);
  if(evtTarget && evtTarget.tagName == "IFRAME") {
    this.dismiss(evtTarget)
  }
};
AdfAutoDismissalManager.prototype._handleMouseDown = function(evt) {
  if(!AdfAgent.AGENT.isDefaultPrevented(evt)) {
    this.dismiss(AdfAgent.AGENT.getEventTarget(evt))
  }
};
AdfAutoDismissalManager.prototype._handleTouchStart = function(evt) {
  return this._handleMouseDown(evt)
};
AdfAutoDismissalManager.prototype._handleKeyUp = function(evt) {
  var agent = AdfAgent.AGENT;
  var keyCode = agent.getKeyCode(evt);
  if(keyCode == AdfKeyStroke.TAB_KEY) {
    var target = agent.getEventTarget(evt);
    this.dismiss(target)
  }
};
AdfAutoDismissalManager.prototype._handleBlur = function(evt) {
  var handleBlurTimeout = this._handleBlurTimeout;
  if(!handleBlurTimeout && (evt.target instanceof HTMLDocument || evt.target.location ? true : false)) {
    var state = {myself:this, blurringElement:evt.target};
    var page = AdfPage.PAGE;
    this._handleBlurTimeout = page.scheduleTimer(this, AdfAutoDismissalManager._dismissBlurringElement, state, 100)
  }
};
AdfAutoDismissalManager._dismissBlurringElement = function(state) {
  var activeTagName;
  var domDocument = AdfAgent.AGENT.getDomDocument();
  var activeElement = domDocument.activeElement;
  if(activeElement) {
    try {
      activeTagName = activeElement.tagName
    }catch(e) {
      AdfLogger.LOGGER.logErrorAsInfo(e, "unable to detect the activeElement")
    }
  }
  var myself = state.myself;
  if(activeTagName == "IFRAME" || activeTagName == "BODY") {
    myself._undismissDueToActiveIframe(activeElement)
  }
  delete this._handleBlurTimeout
};
AdfAutoDismissalManager.prototype.cancelBlurTimeout = function() {
  var handleBlurTimeout = this._handleBlurTimeout;
  if(handleBlurTimeout) {
    var page = AdfPage.PAGE;
    page.cancelTimer(handleBlurTimeout);
    delete this._handleBlurTimeout
  }
};
AdfAutoDismissalManager.prototype._handleMouseOver = function(evt) {
  var page = AdfPage.PAGE;
  var moTimeout = this._moTimeout;
  if(moTimeout) {
    page.cancelTimer(moTimeout);
    delete this._moTimeout
  }
  var state = {myself:this, lastMOTarget:AdfAgent.AGENT.getEventTarget(evt)};
  this._moTimeout = page.scheduleTimer(this, AdfAutoDismissalManager._handleMouseOverTimeout, state, 300)
};
AdfAutoDismissalManager._handleMouseOverTimeout = function(state) {
  var myself = state.myself;
  var lastMOTarget = state.lastMOTarget;
  myself._dismissOnMouseOver(lastMOTarget);
  myself._adjustPopupTimeout(lastMOTarget);
  delete this._moTimeout
};

function AdfClientBehavior() {
}
AdfObject.createSubclass(AdfClientBehavior);
AdfClientBehavior.prototype.initialize = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfClientBehavior.prototype.destroy = function(component) {
};

var AdfCollections = new Object;
AdfCollections.EMPTY_ARRAY = new Array;
AdfCollections.isArray = function(array) {
  if(array) {
    return Array.prototype.isPrototypeOf(array)
  }
  return false
};
AdfCollections.clear = function(target) {
  if(!target) {
    return
  }
  for(var i in target) {
    delete target[i]
  }
};
AdfCollections.isEmpty = function(collection) {
  var empty = true;
  for(var k in collection) {
    empty = false;
    break
  }
  return empty
};
AdfCollections.clearArray = function(array) {
  array.length = 0
};
AdfCollections.cloneArray = function(source) {
  if(!source) {
    return null
  }
  var clone = new Array(source.length);
  return AdfCollections.copyInto(clone, source)
};
AdfCollections.copyInto = function(target, source, keyConverter) {
  if(target && source && target !== source) {
    for(var k in source) {
      var targetKey;
      if(keyConverter) {
        targetKey = keyConverter(k)
      }else {
        targetKey = k
      }
      try {
        target[targetKey] = source[k]
      }catch(e) {
      }
    }
  }
  return target
};
AdfCollections.copyProperties = function(target, source, sourceKeys, keyConverter) {
  if(!target || !source || !sourceKeys || target === source) {
    return
  }
  var keyCount = sourceKeys.length;
  for(var i = 0;i < keyCount;i++) {
    var currKey = sourceKeys[i];
    var sourceValue = source[currKey];
    if(sourceValue) {
      var targetKey;
      if(keyConverter) {
        targetKey = keyConverter(currKey)
      }else {
        targetKey = currKey
      }
      try {
        target[targetKey] = sourceValue
      }catch(e) {
      }
    }
  }
  return target
};
AdfCollections.removeAll = function(targetCollection, removeCollection, outCollection) {
  if(outCollection) {
    if(outCollection !== targetCollection) {
      outCollection.clear()
    }
  }else {
    outCollection = new Object
  }
  if(!targetCollection) {
    return outCollection
  }
  AdfCollections.copyInto(outCollection, targetCollection);
  if(removeCollection) {
    for(var k in removeCollection) {
      delete outCollection[k]
    }
  }
  return outCollection
};
AdfCollections.union = function(inUnion1, inUnion2, outUnion) {
  if(inUnion1 == null || inUnion2 == null) {
    var outTarget = inUnion1 == null ? inUnion2 : inUnion1;
    if(outUnion) {
      AdfCollections.clear(outUnion);
      AdfCollections.copyInto(outUnion, outTarget)
    }
    return outTarget
  }
  if(!outUnion) {
    outUnion = new Object
  }else {
    if(outUnion !== inUnion1 && outUnion !== inUnion2) {
      AdfCollections.clear(outUnion)
    }
  }
  AdfCollections.copyInto(outUnion, inUnion1);
  AdfCollections.copyInto(outUnion, inUnion2);
  return outUnion
};
AdfCollections.getKeyOf = function(collection, value) {
  if(collection) {
    for(var k in collection) {
      if(collection[k] === value) {
        return k
      }
    }
  }
};
AdfCollections.removeValue = function(collection, value) {
  var key = AdfCollections.getKeyOf(collection, value);
  if(key) {
    delete collection[key]
  }
  return key
};
AdfCollections.removeArrayValue = function(array, value) {
  if(array) {
    AdfAssert.assertArray(array);
    var length = array.length;
    for(var i = 0;i < length;i++) {
      if(array[i] == value) {
        array.splice(i, 1);
        return i
      }
    }
  }
  return-1
};
AdfCollections.removeArrayKey = function(array, key) {
  var index = parseInt(key);
  if(isNaN(index)) {
    delete array[key]
  }else {
    array.splice(index, 1)
  }
};
AdfCollections.addArrayKey = function(array, key, value) {
  var index = parseInt(key);
  if(isNaN(index)) {
    array[key] = value
  }else {
    array.splice(index, 0, value)
  }
};
AdfCollections.indexOf = function(array, object) {
  AdfAssert.assertArrayOrNull(array);
  if(!array) {
    return-1
  }
  var index = -1;
  var arraySize = array.length;
  for(var i = 0;i < arraySize;i++) {
    if(array[i] == object) {
      index = i;
      break
    }
  }
  return index
};

function AdfMarshalingService() {
  this.Init()
}
AdfObject.createSubclass(AdfMarshalingService);
AdfMarshalingService.prototype.Init = function() {
  AdfMarshalingService.superclass.Init.call(this);
  this._typeMap = new Object;
  this._nameMap = new Object
};
AdfMarshalingService.prototype.registerEncoder = function(encoder) {
  var encoderNamespace = encoder.getNamespace();
  var encoderTypeMap = encoder.getTypeMap();
  var typeMap = this._typeMap;
  for(var type in encoderTypeMap) {
    var name = encoderTypeMap[type];
    typeMap[type] = {"name":name, "encoder":encoder}
  }
};
AdfMarshalingService.prototype.marshal = function(parentElem, obj, objStack) {
  var encoderEntry = this._getEncoderEntryByType(obj.constructor);
  if(encoderEntry == null) {
    encoderEntry = this._getEncoderEntryByType(Object)
  }
  if(objStack == null) {
    objStack = new AdfMarshalingService._ObjectStack
  }else {
    if(objStack.isParent(obj)) {
      return null
    }
  }
  objStack.push(obj);
  var encoder = encoderEntry.encoder;
  var name = encoderEntry.name;
  var node = AdfMarshalingService._createElementNS(parentElem.ownerDocument, encoder.getNamespace(), name);
  parentElem.appendChild(node);
  encoder.encode(node, obj, objStack, this);
  objStack.pop(obj);
  return node
};
AdfMarshalingService.getDefault = function() {
  var service = AdfMarshalingService._defaultService;
  if(!service) {
    service = new AdfMarshalingService;
    var encoder = new AdfMarshalingService._DE;
    service.registerEncoder(encoder);
    AdfMarshalingService._defaultService = service
  }
  return service
};
AdfMarshalingService.prototype._getEncoderEntryByType = function(type) {
  var typeName;
  if(type === String) {
    typeName = "String"
  }else {
    if(type === Boolean) {
      typeName = "Boolean"
    }else {
      if(type === Number) {
        typeName = "Number"
      }else {
        if(type === Array) {
          typeName = "Array"
        }else {
          if(type === Date) {
            typeName = "Date"
          }else {
            if(AdfUIComponent.prototype.isPrototypeOf(type.prototype)) {
              typeName = "AdfUIComponent"
            }else {
              if(AdfKeyStroke === type) {
                typeName = "AdfKeyStroke"
              }else {
                typeName = "Object"
              }
            }
          }
        }
      }
    }
  }
  return this._typeMap[typeName]
};
AdfMarshalingService._createElementNS = function(doc, nmspace, name) {
  var agent = AdfAgent.AGENT;
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM && agent.getVersion() < 11) {
    return doc.createNode(1, name, nmspace)
  }else {
    return doc.createElementNS(nmspace, name)
  }
};
AdfMarshalingService._ObjectStack = function() {
  this.stack = new Array
};
AdfMarshalingService._ObjectStack.prototype.push = function(obj) {
  this.stack.push(obj)
};
AdfMarshalingService._ObjectStack.prototype.pop = function() {
  return this.stack.pop()
};
AdfMarshalingService._ObjectStack.prototype.isParent = function(obj) {
  var stack = this.stack;
  var stackSize = stack.length;
  for(var i = 0;i < stackSize;i++) {
    var stackObj = stack[i];
    if(stackObj === obj) {
      var type = obj.constructor;
      var stacktype = stackObj.constructor;
      if(type === stacktype) {
        return true
      }
    }
  }
  return false
};
AdfMarshalingService._DE = function() {
  var typeMap = {};
  typeMap["Number"] = AdfMarshalingService._DE.NUMBER;
  typeMap["Boolean"] = AdfMarshalingService._DE.BOOLEAN;
  typeMap["String"] = AdfMarshalingService._DE.STRING;
  typeMap["Date"] = AdfMarshalingService._DE.DATE;
  typeMap["Array"] = AdfMarshalingService._DE.ARRAY;
  typeMap["Object"] = AdfMarshalingService._DE.MAP;
  typeMap["AdfUIComponent"] = AdfMarshalingService._DE.ADFUICOMPONENT;
  typeMap["AdfKeyStroke"] = AdfMarshalingService._DE.ADFKEYSTROKE;
  this._typeMap = typeMap
};
AdfMarshalingService._DE.ARRAY_NULL_ELEM = "o";
AdfMarshalingService._DE.KEY_ELEM = "k";
AdfMarshalingService._DE.VALUE_ATTR = "v";
AdfMarshalingService._DE.COUNT_ATTR = "n";
AdfMarshalingService._DE.NUMBER = "n";
AdfMarshalingService._DE.BOOLEAN = "b";
AdfMarshalingService._DE.STRING = "s";
AdfMarshalingService._DE.DATE = "d";
AdfMarshalingService._DE.ARRAY = "a";
AdfMarshalingService._DE.MAP = "m";
AdfMarshalingService._DE.ADFUICOMPONENT = "AdfUIComponent";
AdfMarshalingService._DE.ADFKEYSTROKE = "AdfKeyStroke";
AdfMarshalingService._DE.prototype.getNamespace = function() {
  return"http://oracle.com/richClient/comm"
};
AdfMarshalingService._DE.prototype.getTypeMap = function() {
  return this._typeMap
};
AdfMarshalingService._DE.prototype.encode = function(elem, obj, objStack, service) {
  var value = null;
  var doc = elem.ownerDocument;
  var type = obj.constructor;
  if(type == String || type == Number) {
    value = obj
  }else {
    if(type == Boolean) {
      value = obj ? "1" : "0"
    }else {
      if(type == Date) {
        value = obj.getTime()
      }else {
        if(type == Array) {
          for(var i = 0;i < obj.length;i++) {
            var node = null;
            if(obj[i] != null) {
              node = service.marshal(elem, obj[i], objStack)
            }
            if(node == null) {
              elem.appendChild(AdfMarshalingService._createElementNS(doc, this.getNamespace(), AdfMarshalingService._DE.ARRAY_NULL_ELEM))
            }
          }
          elem.setAttribute(AdfMarshalingService._DE.COUNT_ATTR, obj.length)
        }else {
          if(type == Object) {
            for(var j in obj) {
              var keyNode = AdfMarshalingService._createElementNS(doc, this.getNamespace(), AdfMarshalingService._DE.KEY_ELEM);
              keyNode.setAttribute(AdfMarshalingService._DE.VALUE_ATTR, j);
              elem.appendChild(keyNode);
              if(obj[j] != null) {
                service.marshal(keyNode, obj[j], objStack)
              }
            }
          }else {
            if(AdfUIComponent.prototype.isPrototypeOf(obj)) {
              value = obj.getClientId()
            }else {
              if(AdfKeyStroke.prototype.isPrototypeOf(obj)) {
                value = obj.toMarshalledString()
              }else {
                for(var k in obj) {
                  try {
                    var propObj = obj[k];
                    if(propObj != null && typeof propObj != "function") {
                      var objKeyNode = AdfMarshalingService._createElementNS(doc, this.getNamespace(), AdfMarshalingService._DE.KEY_ELEM);
                      objKeyNode.setAttribute(AdfMarshalingService._DE.VALUE_ATTR, k);
                      elem.appendChild(objKeyNode);
                      service.marshal(objKeyNode, propObj, objStack)
                    }
                  }catch(exp) {
                    AdfLogger.LOGGER.logError(exp, AdfLogger.WARNING, "Error in marshaling object")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if(value != null) {
    elem.appendChild(doc.createTextNode(value.toString()))
  }
};

function AdfDataTransferRequestEvent(status, context, request) {
  this.Init(status, context, request)
}
AdfDataTransferRequestEvent.STATUS_QUEUED = 1;
AdfDataTransferRequestEvent.STATUS_SEND_BEFORE = 2;
AdfDataTransferRequestEvent.STATUS_SEND_AFTER = 3;
AdfDataTransferRequestEvent.STATUS_COMPLETE = 4;
AdfDataTransferRequestEvent.STATUS_ABORTED = 5;
AdfObject.createSubclass(AdfDataTransferRequestEvent);
AdfDataTransferRequestEvent.prototype.Init = function(status, context, request) {
  AdfDataTransferRequestEvent.superclass.Init.call(this);
  this._status = status;
  this._context = context;
  this._request = request
};
AdfDataTransferRequestEvent.prototype.getStatus = function() {
  return this._status
};
AdfDataTransferRequestEvent.prototype.getContext = function() {
  return this._context
};
AdfDataTransferRequestEvent.prototype.getResponseXML = function() {
  AdfAssert.assert(this._status == AdfDataTransferRequestEvent.STATUS_COMPLETE, "invalid call to getResponseXML, request is not complete");
  return this._request.getResponseXML()
};
AdfDataTransferRequestEvent.prototype.toDebugString = function() {
  var debugString = AdfDataTransferRequestEvent.superclass.toDebugString.call(this);
  debugString += ", status=" + this._status;
  debugString += ", context=" + this._context;
  debugString += ", request=" + this._request;
  return debugString
};
AdfDataTransferRequestEvent.prototype._isResponseValidXML = function() {
  var responseDocument = this._request.getResponseXML();
  return responseDocument != null && responseDocument.documentElement != null && AdfAgent.AGENT.getNodeName(responseDocument.documentElement) != "parsererror"
};
AdfDataTransferRequestEvent.prototype.getResponseText = function() {
  AdfAssert.assert(this._status == AdfDataTransferRequestEvent.STATUS_COMPLETE, "invalid call to getResponseText, request is not complete");
  return this._request.getResponseText()
};
AdfDataTransferRequestEvent.prototype.getResponseStatusCode = function() {
  AdfAssert.assert(this._status == AdfDataTransferRequestEvent.STATUS_COMPLETE, "invalid call to getResponseStatusCode, request is not complete");
  var status = 0;
  try {
    status = this._request.getStatus()
  }catch(e) {
  }
  return status
};
AdfDataTransferRequestEvent.prototype._getAllResponseHeaders = function() {
  AdfAssert.assert(this._status == AdfDataTransferRequestEvent.STATUS_COMPLETE, "invalid call to getAllResponseHeaders, request is not complete");
  return this._request.getAllResponseHeaders()
};
AdfDataTransferRequestEvent.prototype.getResponseHeader = function(name) {
  AdfAssert.assert(this._status == AdfDataTransferRequestEvent.STATUS_COMPLETE, "invalid call to getResponseHeader, request is not complete");
  var allHeaders = this._request.getAllResponseHeaders();
  return allHeaders.indexOf(name) != -1 ? this._request.getResponseHeader(name) : null
};
AdfDataTransferRequestEvent.prototype.isRichResponse = function() {
  AdfAssert.assert(this._status == AdfDataTransferRequestEvent.STATUS_COMPLETE, "invalid call to isRichResponse, request is not complete");
  return this._isResponseValidXML()
};
AdfDataTransferRequestEvent.prototype.getResponseContentType = function() {
  this.getResponseHeader("Content-Type")
};

function AdfIFrameDataTransferRequestEvent(iframeDoc, context) {
  this.Init(iframeDoc, context)
}
AdfObject.createSubclass(AdfIFrameDataTransferRequestEvent);
AdfIFrameDataTransferRequestEvent.prototype.Init = function(iframeDoc, context) {
  this._iframeDoc = iframeDoc;
  this._context = context
};
AdfIFrameDataTransferRequestEvent.prototype.getStatus = function() {
  return AdfDataTransferRequestEvent.STATUS_COMPLETE
};
AdfIFrameDataTransferRequestEvent.prototype.getContext = function() {
  return this._context
};
AdfIFrameDataTransferRequestEvent.prototype.getResponseXML = function() {
  var agentIsIE = AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM;
  var iframeDoc = this._iframeDoc;
  if(agentIsIE && iframeDoc.XMLDocument) {
    return iframeDoc.XMLDocument
  }else {
    return iframeDoc
  }
};
AdfIFrameDataTransferRequestEvent.prototype.getResponseText = function() {
  var agentIsIE = AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM;
  var iframeDoc = this._iframeDoc, xmlDocument = null;
  if(agentIsIE && iframeDoc.XMLDocument) {
    xmlDocument = iframeDoc.XMLDocument
  }else {
    if(window.XMLDocument && iframeDoc instanceof XMLDocument) {
      xmlDocument = iframeDoc
    }
  }
  if(xmlDocument) {
    return AdfAgent.AGENT.getNodeXml(xmlDocument)
  }else {
    return iframeDoc.documentElement.innerHTML
  }
};
AdfIFrameDataTransferRequestEvent.prototype._isResponseValidXML = function() {
  var agentIsIE = AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM;
  var iframeDoc = this._iframeDoc;
  if(agentIsIE && iframeDoc.XMLDocument) {
    return true
  }else {
    if(window.XMLDocument && iframeDoc instanceof XMLDocument) {
      return true
    }else {
      return false
    }
  }
};
AdfIFrameDataTransferRequestEvent.prototype.getResponseStatusCode = function() {
  return 200
};
AdfIFrameDataTransferRequestEvent.prototype.isRichResponse = function() {
  var agentIsIE = AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM;
  var iframeDoc = this._iframeDoc;
  var isRichReponse = false;
  if(agentIsIE && iframeDoc.XMLDocument) {
    var xmlDocument = iframeDoc.XMLDocument, childNodes = xmlDocument.childNodes;
    if(childNodes.length >= 2 && childNodes[1].nodeName == "Adf-Rich-Response-Type") {
      isRichReponse = true
    }
  }else {
    if(iframeDoc.firstChild && iframeDoc.firstChild.nodeName == "Adf-Rich-Response-Type") {
      isRichReponse = true
    }
  }
  return isRichReponse
};
AdfIFrameDataTransferRequestEvent.prototype.getResponseContentType = function() {
  if(this._isResponseValidXML()) {
    return"text/xml"
  }
  return"text/html"
};

function AdfDataTransferService() {
}
AdfObject.createSubclass(AdfDataTransferService);
AdfDataTransferService.InitClass = function() {
  this.STATE_READY = 0;
  this.TRANSFER_COMPLETE = 1;
  this.STATE_BUSY = 2
};
AdfDataTransferService.prototype.dispose = function() {
};
AdfDataTransferService.prototype.pageUnloading = function() {
};
AdfDataTransferService.prototype.sendRequest = function(context, actionURL, headerParams, content, listeners) {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.prototype.sendPollingRequest = function(actionURL, listeners) {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.prototype.sendMultiPartRequest = function(context, actionURL, headerParams, htmlForm, params, listeners, eventListeners) {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.prototype.sendStreamingRequest = function(actionURL, params) {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.prototype.streamingResponsesOutstanding = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.prototype.processStreamingResponse = function(script) {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.prototype.notifyStreamingRequestComplete = function() {
};
AdfDataTransferService.prototype.addStateChangeListener = function(listener, instance) {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.prototype.removeStateChangeListener = function(listener, instance) {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.prototype.getDTSState = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfDataTransferService.getInstance = function() {
  return AdfPage.PAGE.getDataTransferService()
};

function AdfXmlHttpDataTransferService(domWindow) {
  this.Init(domWindow)
}
AdfObject.createSubclass(AdfXmlHttpDataTransferService, AdfDataTransferService);
AdfXmlHttpDataTransferService.InitClass = function() {
  this._MULTIPART_FRAME = "_afrDTSFrame";
  this._ADF_STREAMING_IFRAME_ID = "_adfStreamingIframe";
  this._XMLHTTP_TYPE = 0;
  this._MULTIPART_TYPE = 1;
  this._STREAMING_TYPE = 2;
  this._POLLING_TYPE = 3
};
AdfXmlHttpDataTransferService.prototype.Init = function(domWindow) {
  AdfXmlHttpDataTransferService.superclass.Init.call(this);
  this._state = AdfDataTransferService.STATE_READY;
  this._requestQueue = new Array;
  this._stateChangeListeners = null;
  this._window = domWindow;
  this._streamingCount = 0;
  this._reqCount = 0;
  this._pageUnloading = false
};
AdfXmlHttpDataTransferService.prototype.dispose = function() {
  this.pageUnloading();
  this._requestQueue = null;
  this._stateChangeListeners = null;
  this._window = null
};
AdfXmlHttpDataTransferService.prototype.pageUnloading = function() {
  this._pageUnloading = true
};
AdfXmlHttpDataTransferService.__broadcastRequestStatusChanged = function(listeners, event) {
  AdfLogger.LOGGER.fine("Broadcasting:", event);
  var listenerCount = listeners ? listeners.length : 0;
  for(var i = 0;i < listenerCount;i++) {
    var currListener = listeners[i];
    if(currListener.requestStatusChanged) {
      try {
        currListener.requestStatusChanged(event)
      }catch(e) {
        AdfLogger.LOGGER.logError(e, AdfLogger.WARNING, "Error delivering Datatransfer request status changed to:", currListener)
      }
    }
  }
};
AdfXmlHttpDataTransferService.prototype._addRequestToQueue = function(type, context, actionURL, headerParams, content, listeners, eventListeners, minBusyState) {
  var newRequest = new AdfXmlHttpDataTransferRequest(type, context, actionURL, headerParams, content, listeners, eventListeners);
  this._requestQueue.push(newRequest);
  newRequest.setStatus(AdfDataTransferRequestEvent.STATUS_QUEUED);
  try {
    var dtsRequestEvent = new AdfDataTransferRequestEvent(AdfDataTransferRequestEvent.STATUS_QUEUED, context, null);
    AdfXmlHttpDataTransferService.__broadcastRequestStatusChanged(listeners, dtsRequestEvent)
  }catch(e) {
    AdfLogger.LOGGER.severe("Error on listener callback invocation - STATUS_QUEUED\n")
  }
  if(this._state <= minBusyState && this._requestQueue.length == 1) {
    this._broadcastStateChangeEvent(AdfDataTransferService.STATE_BUSY);
    this._doTransfer()
  }
  return newRequest
};
AdfXmlHttpDataTransferService.prototype.sendRequest = function(context, actionURL, headerParams, content, listeners) {
  return this._addRequestToQueue(AdfXmlHttpDataTransferService._XMLHTTP_TYPE, context, actionURL, headerParams, content, listeners, null, AdfDataTransferService.STATE_READY)
};
AdfXmlHttpDataTransferService.prototype.sendPollingRequest = function(actionURL, listeners) {
  return this._addRequestToQueue(AdfXmlHttpDataTransferService._POLLING_TYPE, null, actionURL, null, null, listeners, null, AdfDataTransferService.STATE_READY)
};
AdfXmlHttpDataTransferService.prototype.sendMultiPartRequest = function(context, actionURL, headerParams, htmlForm, params, listeners, eventListeners) {
  var newRequest = null;
  if(context == null) {
    context = {"_htmlForm":htmlForm}
  }else {
    context._htmlForm = htmlForm
  }
  if(htmlForm["nodeType"] != null && htmlForm.nodeName == "FORM") {
    if(params) {
      var domDocument;
      if(htmlForm.ownerDocument) {
        domDocument = htmlForm.ownerDocument
      }else {
        domDocument = this._getDomDocument()
      }
      for(var key in params) {
        this._appendParamNode(domDocument, htmlForm, key, params[key])
      }
    }
    newRequest = this._addRequestToQueue(AdfXmlHttpDataTransferService._MULTIPART_TYPE, context, actionURL, headerParams, null, listeners, eventListeners, AdfDataTransferService.STATE_READY)
  }else {
    if(params) {
      for(var key in params) {
        htmlForm.append(key, params[key])
      }
    }
    context._formData = true;
    newRequest = this._addRequestToQueue(AdfXmlHttpDataTransferService._MULTIPART_TYPE, context, actionURL, headerParams, htmlForm, listeners, eventListeners, AdfDataTransferService.STATE_READY)
  }
  return newRequest
};
AdfXmlHttpDataTransferService.prototype.sendStreamingRequest = function(actionURL, params) {
  if(actionURL.indexOf("?") == -1) {
    actionURL += "?"
  }else {
    actionURL += "&"
  }
  actionURL += "Adf-Rich-Message=true&unique=";
  actionURL += (new Date).getTime();
  for(var name in params) {
    actionURL += "&" + name + "=" + params[name]
  }
  var agent = AdfAgent.AGENT;
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM && agent.getVersion() < 9) {
    actionURL += "&oracle.adf.view.rich.forceHTML=true"
  }
  return this._addRequestToQueue(AdfXmlHttpDataTransferService._STREAMING_TYPE, null, actionURL, null, null, null, null, AdfDataTransferService.TRANSFER_COMPLETE)
};
AdfXmlHttpDataTransferService.prototype.streamingResponsesOutstanding = function() {
  return this._streamingCount > 0
};
AdfXmlHttpDataTransferService.prototype.notifyStreamingRequestComplete = function() {
  var iframeDoc = this._streamingFrame.contentWindow.document;
  iframeDoc.removeChild(iframeDoc.documentElement);
  this._streamingFrame = null;
  this._streamingCount--;
  AdfAssert.assert(this._streamingCount >= 0, "Streaming request underflow");
  this._requestDone()
};
AdfXmlHttpDataTransferService.prototype.processStreamingResponse = function(script) {
  if(this._reqCount > 1) {
    if(!this._streamingMsgQueue) {
      this._streamingMsgQueue = new Array
    }
    this._streamingMsgQueue.push(script)
  }else {
    this._processedQueuedStreamingMessages();
    AdfAgent.AGENT.execScript(this._streamingFrame.contentWindow, script)
  }
};
AdfXmlHttpDataTransferService.prototype._processedQueuedStreamingMessages = function() {
  if(this._streamingMsgQueue) {
    var agent = AdfAgent.AGENT;
    while(this._streamingMsgQueue && this._streamingMsgQueue.length > 0) {
      agent.execScript(this._streamingFrame.contentWindow, this._streamingMsgQueue.shift())
    }
    this._streamingMsgQueue = null
  }
};
AdfXmlHttpDataTransferService.prototype._doTransfer = function() {
  var requestItem = this._requestQueue.shift();
  if(requestItem.getStatus() == AdfDataTransferRequestEvent.STATUS_ABORTED) {
    AdfLogger.LOGGER.fine("Transfer request aborted beforing sending to server:", requestItem);
    return
  }
  requestItem.setStatus(AdfDataTransferRequestEvent.STATUS_SEND_BEFORE);
  AdfLogger.LOGGER.fine("Transfer start:", requestItem);
  this._reqCount++;
  AdfAssert.assert(this._reqCount <= 2, "Request count overflow");
  switch(requestItem.getType()) {
    case AdfXmlHttpDataTransferService._XMLHTTP_TYPE:
      this._doXmlHttpTransfer(requestItem);
      break;
    case AdfXmlHttpDataTransferService._POLLING_TYPE:
      this._doXmlHttpTransfer(requestItem, AdfDhtmlActiveDataSupport._requestCallback);
      break;
    case AdfXmlHttpDataTransferService._MULTIPART_TYPE:
      if(requestItem.getContent() != null) {
        this._doXmlHttpTransfer(requestItem, AdfDhtmlMultipartUpload._requestCallback)
      }else {
        this._doTransferThroughIframe(requestItem)
      }
      break;
    case AdfXmlHttpDataTransferService._STREAMING_TYPE:
      page.scheduleTimer(this, this._doStreamingTransfer, requestItem, 0);
      break;
    default:
      AdfAssert.assert(false, "Unknown transfer type");
      this._reqCount--
  }
  requestItem.setStatus(AdfDataTransferRequestEvent.STATUS_SEND_AFTER)
};
AdfXmlHttpDataTransferService.prototype._doXmlHttpTransfer = function(requestItem, callback) {
  var xmlHttp = new AdfXMLRequest;
  var context = xmlHttp.__dtsRequestContext = requestItem.getContext();
  xmlHttp.__dtsRequestListeners = requestItem.getListeners();
  requestItem.setAdfXMLRequest(xmlHttp);
  if(callback !== undefined) {
    xmlHttp.setCallback(callback)
  }else {
    xmlHttp.setCallback(AdfXmlHttpDataTransferService._requestCallback)
  }
  var isFormData = false;
  if(context != null && context._formData) {
    isFormData = true
  }
  if(!isFormData) {
    xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
  }
  var headerParams = requestItem.getHeaderParams();
  if(headerParams != null) {
    for(var headerName in headerParams) {
      var currHeader = headerParams[headerName];
      if(AdfCollections.isArray(currHeader)) {
        currHeader = currHeader.join(",")
      }
      xmlHttp.setRequestHeader(headerName, currHeader)
    }
  }
  var actionUrl = requestItem.getActionURL();
  var eventListeners = requestItem.getEventListeners();
  if(eventListeners != null) {
    for(var i = 0;i < eventListeners.length;i = i + 2) {
      xmlHttp.addEventListener(eventListeners[i], eventListeners[i + 1])
    }
  }
  AdfPage.PAGE.__perfTimings(false, false, true, "Request sent to server: ", actionUrl);
  var logger = AdfLogger.LOGGER;
  logger.fine("Request sent to server:", requestItem);
  logger.getLogWriter().flush();
  xmlHttp.send(actionUrl, requestItem.getContent())
};
AdfXmlHttpDataTransferService.prototype._doTransferThroughIframe = function(requestItem) {
  var context = requestItem.getContext();
  var htmlForm = context._htmlForm;
  var actionURL = requestItem.getActionURL();
  AdfAssert.assert(htmlForm.action, "form action cannot be null for multiform post");
  var frameName = AdfXmlHttpDataTransferService._MULTIPART_FRAME;
  var agent = AdfAgent.AGENT;
  var domDocument = this._getDomDocument();
  var hiddenFrame = domDocument.getElementById(frameName), iframeDoc;
  var agentIsIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
  if(this._iframeLoadCallback == null) {
    this._iframeLoadCallback = this.createCallback(this._handleIFrameLoad)
  }
  if(!hiddenFrame) {
    hiddenFrame = domDocument.createElement("iframe");
    hiddenFrame.name = frameName;
    hiddenFrame.id = frameName;
    var frameStyle = hiddenFrame.style;
    frameStyle.top = frameStyle.left = "0px";
    frameStyle.width = frameStyle.height = "1px";
    frameStyle.position = "absolute";
    frameStyle.visibility = "hidden";
    domDocument.body.appendChild(hiddenFrame);
    hiddenFrame.onload = this._iframeLoadCallback
  }
  if(agentIsIE) {
    hiddenFrame = domDocument.frames[frameName];
    hiddenFrame.name = frameName;
    iframeDoc = hiddenFrame.document
  }else {
    iframeDoc = hiddenFrame.contentDocument
  }
  if(iframeDoc.firstChild) {
    iframeDoc.removeChild(iframeDoc.firstChild)
  }
  this._dtsContext = context;
  this._dtsRequestlisteners = requestItem.getListeners();
  this._htmlForm = htmlForm;
  this._savedActionUrl = htmlForm.action;
  this._savedTarget = htmlForm.target;
  htmlForm.method = "POST";
  htmlForm.action = actionURL;
  htmlForm.target = frameName;
  this._appendParamNode(domDocument, htmlForm, "Adf-Rich-Message", "true");
  this._appendParamNode(domDocument, htmlForm, "partial", "true");
  AdfAgent.AGENT.autoCompleteForm(htmlForm);
  try {
    htmlForm.submit();
    if(agentIsIE && agent.getVersion() < 9) {
      this._window.setTimeout(this._iframeLoadCallback, 50)
    }
  }catch(e) {
    AdfInputFileUtils.addUploadErrorMessage();
    this._requestDone()
  }
};
AdfXmlHttpDataTransferService.prototype._appendParamNode = function(domDocument, form, name, value) {
  AdfAssert.assert(form != null);
  var nodes = this._paramNodes;
  if(!nodes) {
    nodes = new Array;
    this._paramNodes = nodes
  }
  var node = domDocument.createElement("input");
  node.type = "hidden";
  node.name = name;
  node.value = value;
  nodes.push(node);
  form.insertBefore(node, form.firstChild)
};
AdfXmlHttpDataTransferService.prototype._clearParamNodes = function() {
  var nodes = this._paramNodes;
  if(nodes) {
    var form = nodes[0].parentNode;
    var count = nodes.length;
    for(var i = 0;i < count;i++) {
      if(form) {
        form.removeChild(nodes[i])
      }
    }
    delete this._paramNodes
  }
};
AdfXmlHttpDataTransferService.prototype._doStreamingTransfer = function(requestItem) {
  this._streamingCount++;
  this._streamingMsgQueue = null;
  var doc = this._getDomDocument();
  var div = doc.getElementById(AdfXmlHttpDataTransferService._ADF_STREAMING_IFRAME_ID);
  if(!div) {
    div = doc.createElement("DIV");
    div.id = AdfXmlHttpDataTransferService._ADF_STREAMING_IFRAME_ID;
    div.style.display = "none";
    doc.body.appendChild(div)
  }
  div.innerHTML = '<IFRAME src="' + requestItem._actionURL + '" onload="AdfPage.PAGE.getDataTransferService().processStreamingResponse(' + "'parent.AdfPage.PAGE.streamingResponseComplete();');\"></IFRAME>";
  this._streamingFrame = div.firstChild;
  AdfAssert.assertDomElement(this._streamingFrame);
  AdfAssert.assert(this._streamingFrame.tagName == "IFRAME");
  requestItem.setStreamingIFrame(div.firstChild)
};
AdfXmlHttpDataTransferService.prototype._handleIFrameLoad = function() {
  var domDocument = this._getDomDocument();
  var agentIsIE = AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM;
  var frameName = AdfXmlHttpDataTransferService._MULTIPART_FRAME;
  var hiddenFrame;
  var iframeDoc;
  if(agentIsIE) {
    hiddenFrame = domDocument.frames[frameName];
    iframeDoc = hiddenFrame.document
  }else {
    hiddenFrame = domDocument.getElementById(frameName);
    iframeDoc = hiddenFrame.contentDocument
  }
  try {
    if(!iframeDoc.documentElement || !iframeDoc.documentElement.firstChild || agentIsIE && iframeDoc.readyState != "complete") {
      this._window.setTimeout(this._iframeLoadCallback, 50)
    }else {
      this._onIFrameLoadComplete(iframeDoc, this._dtsContext, this._dtsRequestlisteners)
    }
  }catch(e) {
    if(!this._pageUnloading) {
      AdfXmlHttpDataTransferService._alertError("unknown");
      AdfLogger.LOGGER.logErrorAsSevere(e, "Error (" + e.message + ") while performing Data Transfer request")
    }
    this._htmlForm.action = this._savedActionUrl;
    this._htmlForm.target = this._savedTarget
  }
};
AdfXmlHttpDataTransferService.prototype._onIFrameLoadComplete = function(iframeDoc, context, requestListeners) {
  try {
    var dtsRequestEvent = new AdfIFrameDataTransferRequestEvent(iframeDoc, context);
    AdfXmlHttpDataTransferService.__broadcastRequestStatusChanged(requestListeners, dtsRequestEvent)
  }finally {
    while(iframeDoc.firstChild) {
      if(iframeDoc.firstChild) {
        iframeDoc.removeChild(iframeDoc.firstChild)
      }
    }
    this._htmlForm.action = this._savedActionUrl;
    this._htmlForm.target = this._savedTarget;
    this._clearParamNodes();
    this._requestDone()
  }
};
AdfXmlHttpDataTransferService.prototype._handleRequestCallback = function(xmlHttp) {
  var httpState = xmlHttp.getCompletionState();
  if(httpState != AdfXMLRequest.COMPLETED) {
    return
  }
  var statusCode = 0;
  try {
    statusCode = xmlHttp.getStatus()
  }catch(e) {
  }
  try {
    if(statusCode != 200 && statusCode != 302 && statusCode != 0) {
      if(!this._pageUnloading) {
        AdfXmlHttpDataTransferService._alertError(statusCode);
        AdfLogger.LOGGER.severe("Error StatusCode(", statusCode, ") while performing Data Transfer request\n")
      }
    }else {
      if(!this._pageUnloading) {
        this._broadcastStateChangeEvent(AdfDataTransferService.TRANSFER_COMPLETE);
        var dtsRequestEvent = new AdfDataTransferRequestEvent(AdfDataTransferRequestEvent.STATUS_COMPLETE, xmlHttp.__dtsRequestContext, xmlHttp);
        AdfXmlHttpDataTransferService.__broadcastRequestStatusChanged(xmlHttp.__dtsRequestListeners, dtsRequestEvent)
      }
    }
  }finally {
    try {
      if(!this._pageUnloading) {
        this._setResponseIdentifierFromResponseHeader(xmlHttp)
      }
    }catch(e) {
      var warningMsg = "Not able to retrieve response id from header.";
      warningMsg += "Error (";
      warningMsg += e.message;
      warningMsg += "). The response id in page object will not be up-to-date.";
      AdfLogger.LOGGER.warning(warningMsg)
    }
    xmlHttp.cleanup();
    delete xmlHttp;
    xmlHttp = null;
    if(!this._pageUnloading) {
      this._requestDone()
    }
  }
};
AdfXmlHttpDataTransferService.prototype._setResponseIdentifierFromResponseHeader = function(request) {
  if(AdfPage.PAGE.getResponseIdentifier() == null) {
    return
  }
  if(request.getResponseHeader) {
    var responseId = request.getResponseHeader("Adf-Context-Id");
    if(!responseId) {
      responseId = request.getResponseHeader("X-ORACLE-DMS-ECID")
    }
    if(responseId) {
      AdfPage.PAGE.__setResponseIdentifier(responseId)
    }
  }
};
AdfXmlHttpDataTransferService.prototype._requestDone = function() {
  if(!this._requestQueue) {
    return
  }
  this._reqCount--;
  AdfAssert.assert(this._reqCount >= 0, "Request count underflow");
  if(this._reqCount == 1 && this._streamingCount == 1) {
    this._processedQueuedStreamingMessages()
  }
  if(this._reqCount > 0) {
    return
  }
  if(this._requestQueue.length > 0) {
    this._doTransfer()
  }else {
    if(this._state != AdfDataTransferService.TRANSFER_COMPLETE) {
      this._broadcastStateChangeEvent(AdfDataTransferService.TRANSFER_COMPLETE)
    }
    this._broadcastStateChangeEvent(AdfDataTransferService.STATE_READY)
  }
};
AdfXmlHttpDataTransferService._requestCallback = function(xmlRequest) {
  AdfLogger.LOGGER.finer("Request complete:", xmlRequest);
  var dts;
  if(AdfPage.PAGE) {
    dts = AdfPage.PAGE.getDataTransferService(true)
  }
  if(AdfPage.PAGE && dts) {
    dts._handleRequestCallback(xmlRequest)
  }
};
AdfXmlHttpDataTransferService.prototype.addStateChangeListener = function(listener, instance) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assertObjectOrNull(instance);
  var stateChangeListeners = this._stateChangeListeners;
  if(!stateChangeListeners) {
    stateChangeListeners = new Array;
    this._stateChangeListeners = stateChangeListeners
  }
  stateChangeListeners.push(listener);
  stateChangeListeners.push(instance)
};
AdfXmlHttpDataTransferService.prototype.removeStateChangeListener = function(listener, instance) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assertObjectOrNull(instance);
  var stateChangeListeners = this._stateChangeListeners;
  AdfAssert.assert(stateChangeListeners, "stateChangeListeners must exist");
  var length = stateChangeListeners.length;
  for(var i = 0;i < length;i++) {
    var currListener = stateChangeListeners[i];
    i++;
    if(currListener == listener) {
      var currInstance = stateChangeListeners[i];
      if(currInstance === instance) {
        stateChangeListeners.splice(i - 1, 2)
      }
    }
  }
  if(stateChangeListeners.length == 0) {
    this._stateChangeListeners = null
  }
};
AdfXmlHttpDataTransferService.prototype.getDTSState = function() {
  return this._state
};
AdfXmlHttpDataTransferService.prototype._broadcastStateChangeEvent = function(state) {
  this._state = state;
  var stateChangeListeners = this._stateChangeListeners;
  if(stateChangeListeners) {
    var listenerCount = stateChangeListeners.length;
    for(var i = 0;i < listenerCount;i++) {
      try {
        var currListener = stateChangeListeners[i];
        i++;
        var currInstance = stateChangeListeners[i];
        var result;
        if(currInstance != null) {
          result = currListener.call(currInstance, state)
        }else {
          result = currListener(state)
        }
        if(false == result) {
          break
        }
      }catch(e) {
        AdfLogger.LOGGER.logError(e, AdfLogger.WARNING, "Error on DTS State Change Listener")
      }
    }
  }
};
AdfXmlHttpDataTransferService.prototype._getDomDocument = function() {
  return this._window.document
};
AdfXmlHttpDataTransferService._alertError = function(statusCode) {
  var failedConnectionText = AdfPage.PAGE.getFailedConnectionText();
  if(failedConnectionText != null) {
    var message = failedConnectionText;
    message += " (status=";
    message += statusCode;
    var ecid = AdfPage.PAGE.getResponseIdentifier();
    if(ecid) {
      message += ",ecid=";
      message += ecid
    }
    message += ")";
    alert(message)
  }
};

function AdfDataTransferRequest() {
}
AdfObject.createSubclass(AdfDataTransferRequest);
AdfDataTransferRequest.UNSENT = 0;
AdfDataTransferRequest.OPENED = 1;
AdfDataTransferRequest.HEADERS_RECEIVED = 2;
AdfDataTransferRequest.LOADING = 3;
AdfDataTransferRequest.DONE = 4;
AdfDataTransferRequest.prototype.abort = function() {
  AdfAssert.failedInAbstractFunction()
};

function AdfXmlHttpDataTransferRequest(type, context, actionURL, headerParams, content, listeners, eventListeners) {
  this.Init(type, context, actionURL, headerParams, content, listeners, eventListeners)
}
AdfObject.createSubclass(AdfXmlHttpDataTransferRequest, AdfDataTransferRequest);
AdfXmlHttpDataTransferRequest.prototype.Init = function(type, context, actionURL, headerParams, content, listeners, eventListeners) {
  AdfXmlHttpDataTransferRequest.superclass.Init.call(this);
  this._type = type;
  this._context = context;
  this._actionURL = actionURL;
  this._headerParams = headerParams;
  this._content = content;
  this._listeners = listeners;
  this._eventListeners = eventListeners;
  this._adfXMLRequest = null;
  this._status = null;
  this._streamingIFrame = null
};
AdfXmlHttpDataTransferRequest.prototype.toString = function() {
  return AdfKeyStroke.superclass.toString.call(this) + " type:" + this._type + " context:" + this._context + " url:" + this._actionURL + " headers:" + this._headerParams + " content:" + this._content + " status:" + this._status
};
AdfXmlHttpDataTransferRequest.prototype.getType = function() {
  return this._type
};
AdfXmlHttpDataTransferRequest.prototype.getContext = function() {
  return this._context
};
AdfXmlHttpDataTransferRequest.prototype.getActionURL = function() {
  return this._actionURL
};
AdfXmlHttpDataTransferRequest.prototype.getHeaderParams = function() {
  return this._headerParams
};
AdfXmlHttpDataTransferRequest.prototype.getContent = function() {
  return this._content
};
AdfXmlHttpDataTransferRequest.prototype.getListeners = function() {
  return this._listeners
};
AdfXmlHttpDataTransferRequest.prototype.getEventListeners = function() {
  return this._eventListeners
};
AdfXmlHttpDataTransferRequest.prototype.getAdfXMLRequest = function() {
  return this._adfXMLRequest
};
AdfXmlHttpDataTransferRequest.prototype.setAdfXMLRequest = function(adfXMLRequest) {
  this._adfXMLRequest = adfXMLRequest
};
AdfXmlHttpDataTransferRequest.prototype.getStatus = function(status) {
  return this._status
};
AdfXmlHttpDataTransferRequest.prototype.setStatus = function(status) {
  this._status = status
};
AdfXmlHttpDataTransferRequest.prototype.setStreamingIFrame = function(streamingIFrameEle) {
  this._streamingIFrame = streamingIFrameEle
};
AdfXmlHttpDataTransferRequest.prototype.abort = function() {
  var state = AdfDataTransferRequest.UNSENT;
  if(this._status == null || this._status == AdfDataTransferRequestEvent.STATUS_QUEUED) {
    this._status = AdfDataTransferRequestEvent.STATUS_ABORTED
  }else {
    var iframe = this._streamingIFrame;
    if(iframe) {
      var documentState = iframe.contentDocument.readyState;
      iframe.src = "";
      if(documentState == "loading" || documentState == "interactive") {
        state = AdfDataTransferRequest.LOADING
      }else {
        if(documentState == "complete") {
          state = AdfDataTransferRequest.DONE
        }
      }
    }else {
      var request = this._adfXMLRequest;
      if(request) {
        try {
          var xmlhttp = request.xmlhttp;
          if(xmlhttp) {
            state = xmlhttp.readyState
          }
          if(state != AdfDataTransferRequest.DONE) {
            request.abort()
          }
        }catch(e) {
          var warningMsg = "Failed to abort an XmlHttp Data Transfer request. ";
          warningMsg += "Error (";
          warningMsg += e.message;
          warningMsg += ").";
          AdfLogger.LOGGER.warning(warningMsg);
          throw e;
        }
      }
    }
  }
  if(state != AdfDataTransferRequest.DONE) {
    try {
      var dtsRequestEvent = new AdfDataTransferRequestEvent(AdfDataTransferRequestEvent.STATUS_ABORTED, this._content, null);
      AdfXmlHttpDataTransferService.__broadcastRequestStatusChanged(this._listeners, dtsRequestEvent)
    }catch(e) {
      AdfLogger.LOGGER.warning("Error on listener callback invocation - STATUS_ABORTED\n")
    }
  }
  return state
};

function AdfOfflineDataTransferService(domWindow) {
  this.Init(domWindow)
}
AdfObject.createSubclass(AdfOfflineDataTransferService, AdfDataTransferService);
AdfOfflineDataTransferService.prototype.pageUnloading = function() {
};
AdfOfflineDataTransferService.prototype.sendRequest = function(context, actionURL, headerParams, content, listeners) {
  this._warn()
};
AdfOfflineDataTransferService.prototype.sendPollingRequest = function(actionURL, listeners) {
  this._warn()
};
AdfOfflineDataTransferService.prototype.sendMultiPartRequest = function(context, actionURL, htmlForm, params, listeners) {
  this._warn()
};
AdfOfflineDataTransferService.prototype.sendStreamingRequest = function(actionURL, params) {
  this._warn()
};
AdfOfflineDataTransferService.prototype.streamingResponsesOutstanding = function() {
  return false
};
AdfOfflineDataTransferService.prototype.processStreamingResponse = function(script) {
  this._warn()
};
AdfOfflineDataTransferService.prototype.notifyStreamingRequestComplete = function() {
  this._warn()
};
AdfOfflineDataTransferService.prototype.addStateChangeListener = function(listener, instance) {
};
AdfOfflineDataTransferService.prototype.removeStateChangeListener = function(listener, instance) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assertObjectOrNull(instance)
};
AdfOfflineDataTransferService.prototype.getDTSState = function() {
  return AdfDataTransferService.STATE_READY
};
AdfOfflineDataTransferService.prototype._warn = function() {
  AdfLogger.LOGGER.warning("Call to DataTransferService when offline at" + AdfAssert.getStackString())
};

function AdfCustomEvent(source, type, params, immediate, discrete) {
  if(arguments.length) {
    this.Init(source, type, params, immediate, discrete)
  }
}
AdfObject.createSubclass(AdfCustomEvent, AdfComponentEvent);
AdfCustomEvent.prototype.Init = function(source, type, params, immediate, discrete) {
  AdfAssert.assertString(type);
  if(immediate === undefined) {
    immediate = true
  }
  AdfCustomEvent.superclass.Init.call(this, source, type);
  this.setPartial(true);
  this._params = params;
  this._immediate = immediate;
  this._isDiscrete = discrete || false;
  this.setRoot(source)
};
AdfCustomEvent.prototype.GetParams = function() {
  return this._params
};
AdfCustomEvent.prototype.propagatesToServer = function() {
  return true
};
AdfCustomEvent.prototype.isImmediate = function() {
  return this._immediate
};
AdfCustomEvent.prototype.AddMarshalledProperties = function(properties) {
  properties["_custom"] = true;
  if(this._params) {
    AdfCollections.copyInto(properties, this._params)
  }
  if(this.isImmediate()) {
    properties.immediate = true
  }
};
AdfCustomEvent.prototype.toDebugString = function() {
  var superString = AdfCustomEvent.superclass.toDebugString.call(this);
  return superString.substring(0, superString.length - 1) + AdfUIUtils.getPropertiesAsString(this._params, undefined, false, false) + "]"
};
AdfCustomEvent.queue = function(component, type, params, immediate, discrete) {
  (new AdfCustomEvent(component, type, params, immediate, discrete)).queue()
};
AdfCustomEvent.prototype.setMaxTimeBeforePropagation = function(millis) {
  AdfAssert.assertNumber(millis);
  this._maxTimeout = millis
};
AdfCustomEvent.prototype.getMaxTimeBeforePropagation = function() {
  if(this._maxTimeout === undefined) {
    return AdfCustomEvent.superclass.getMaxTimeBeforePropagation.call(this)
  }
  return this._maxTimeout
};
AdfCustomEvent.prototype.IsDeleveryDiscrete = function() {
  return this._isDiscrete
};

function AdfRowKeySetChangeEvent(source, eventType, removedSet, addedSet) {
  if(arguments.length) {
    this.Init(source, eventType, removedSet, addedSet)
  }
}
AdfObject.createSubclass(AdfRowKeySetChangeEvent, AdfComponentEvent);
AdfRowKeySetChangeEvent.createRowKeySetChangeEvent = function(source, eventType, removedSet, addedSet) {
  var added = null;
  var removed = null;
  if(removedSet) {
    if(addedSet) {
      for(var key in removedSet) {
        if(!addedSet[key]) {
          if(!removed) {
            removed = new Object
          }
          removed[key] = true
        }
      }
    }else {
      removed = new Object;
      AdfCollections.copyInto(removed, removedSet)
    }
  }
  if(addedSet) {
    if(removedSet) {
      for(var key in addedSet) {
        if(!removedSet[key]) {
          if(!added) {
            added = new Object
          }
          added[key] = true
        }
      }
    }else {
      added = new Object;
      AdfCollections.copyInto(added, addedSet)
    }
  }
  if(added || removed) {
    var eventObject = null;
    switch(eventType) {
      default:
        break;
      case AdfRowDisclosureEvent.ROW_DISCLOSURE_EVENT_TYPE:
        eventObject = new AdfRowDisclosureEvent(source, removed, added);
        break;
      case AdfSelectionEvent.SELECTION_EVENT_TYPE:
        eventObject = new AdfSelectionEvent(source, removed, added);
        break
    }
    return eventObject
  }else {
    return null
  }
};
AdfRowKeySetChangeEvent.createOrderedRowKeySetChangeEvent = function(source, eventType, removedSet, addedSet) {
  var added = null;
  var removed = null;
  if(removedSet && !removedSet.length) {
    removedSet = null
  }
  if(addedSet && !addedSet.length) {
    addedSet = null
  }
  if(removedSet) {
    AdfAssert.assertArray(removedSet);
    if(addedSet) {
      var keyCount = removedSet.length;
      for(var i = 0;i < keyCount;i++) {
        var currRemovedKey = removedSet[i];
        if(!addedSet[currRemovedKey]) {
          if(!removed) {
            removed = new Array
          }
          removed[currRemovedKey] = removed.length;
          removed.push(currRemovedKey)
        }
      }
    }else {
      removed = AdfCollections.cloneArray(removedSet)
    }
  }
  if(addedSet) {
    AdfAssert.assertArray(addedSet);
    if(removedSet) {
      var keyCount = addedSet.length;
      for(var i = 0;i < keyCount;i++) {
        var currAddedKey = addedSet[i];
        if(!removedSet[currAddedKey]) {
          if(!added) {
            added = new Array
          }
          added[currAddedKey] = added.length;
          added.push(currAddedKey)
        }
      }
    }else {
      added = AdfCollections.cloneArray(addedSet)
    }
  }
  if(added || removed) {
    var eventObject = null;
    switch(eventType) {
      default:
        break;
      case AdfRowDisclosureEvent.ROW_DISCLOSURE_EVENT_TYPE:
        eventObject = new AdfRowDisclosureEvent(source, removed, added);
        break;
      case AdfSelectionEvent.SELECTION_EVENT_TYPE:
        eventObject = new AdfSelectionEvent(source, removed, added);
        break
    }
    return eventObject
  }else {
    return null
  }
};
AdfRowKeySetChangeEvent.prototype.getRemovedSet = function() {
  return this._removedSet
};
AdfRowKeySetChangeEvent.prototype.getAddedSet = function() {
  return this._addedSet
};
AdfRowKeySetChangeEvent.prototype.toDebugString = function() {
  var superString = AdfRowKeySetChangeEvent.superclass.toDebugString.call(this);
  return superString.substring(0, superString.length - 1) + ", removed=" + this._removedSet + ", added=" + this._addedSet + "]"
};
AdfRowKeySetChangeEvent.prototype.Init = function(source, type, removedSet, addedSet) {
  AdfRowKeySetChangeEvent.superclass.Init.call(this, source, type);
  this._removedSet = removedSet;
  this._addedSet = addedSet;
  this.setPartial(true)
};
AdfRowKeySetChangeEvent.prototype.propagatesToServer = function() {
  return true
};

function AdfFocusEvent(source, rowKey) {
  this.Init(source, rowKey)
}
AdfObject.createSubclass(AdfFocusEvent, AdfComponentEvent);
AdfFocusEvent.FOCUS_EVENT_TYPE = "rowFocus";
AdfFocusEvent.prototype.Init = function(source, rowKey) {
  AdfAssert.assertPrototype(source, AdfUIComponent);
  this._rowKey = rowKey;
  AdfFocusEvent.superclass.Init.call(this, source, AdfFocusEvent.FOCUS_EVENT_TYPE);
  this.setPartial(true);
  this.setRoot(source)
};
AdfFocusEvent.prototype.propagatesToServer = function() {
  return true
};
AdfFocusEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.rowKey = this._rowKey ? this._rowKey : "_afrTreeRoot"
};
AdfFocusEvent.queue = function(component, rowKey) {
  (new AdfFocusEvent(component, rowKey)).queue()
};
AdfFocusEvent.prototype.isValidationNeeded = function() {
  return true
};
AdfFocusEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};

function AdfSelectionEvent(source, removedSet, addedSet) {
  if(arguments.length) {
    this.Init(source, removedSet, addedSet)
  }
}
AdfObject.createSubclass(AdfSelectionEvent, AdfRowKeySetChangeEvent);
AdfSelectionEvent.SELECTION_EVENT_TYPE = "selection";
AdfSelectionEvent.prototype.Init = function(source, removedSet, addedSet) {
  AdfSelectionEvent.superclass.Init.call(this, source, AdfSelectionEvent.SELECTION_EVENT_TYPE, removedSet, addedSet);
  this.setRoot(source)
};
AdfSelectionEvent.prototype.setSelectionRange = function(startRowKey, endRowKey) {
  if(startRowKey != null) {
    this._selectKeyRange = {start:startRowKey, end:endRowKey}
  }else {
    delete this._selectKeyRange
  }
};
AdfSelectionEvent.prototype.propagatesToServer = function() {
  return this.getSource().getProperty("afrSelListener") != null || this._selectKeyRange != null
};
AdfSelectionEvent.prototype.AddMarshalledProperties = function(properties) {
  AdfSelectionEvent.superclass.AddMarshalledProperties.call(this, properties);
  if(this._selectKeyRange) {
    properties["startRowKey"] = this._selectKeyRange.start;
    properties["endRowKey"] = this._selectKeyRange.end
  }
};

function AdfColumnSelectionEvent(source, addedColumns, removedColumns) {
  this.Init(source, addedColumns, removedColumns)
}
AdfObject.createSubclass(AdfColumnSelectionEvent, AdfComponentEvent);
AdfColumnSelectionEvent.EVENT_TYPE = "columnSelection";
AdfColumnSelectionEvent.prototype.Init = function(source, addedColumns, removedColumns) {
  this._addedColumns = addedColumns;
  this._removedColumns = removedColumns;
  AdfColumnSelectionEvent.superclass.Init.call(this, source, AdfColumnSelectionEvent.EVENT_TYPE)
};
AdfColumnSelectionEvent.prototype.propagatesToServer = function() {
  return true
};
AdfColumnSelectionEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.addedColumns = this._addedColumns;
  properties.removedColumns = this._removedColumns
};
AdfColumnSelectionEvent.queue = function(component, addedColumns, removedColumns) {
  (new AdfColumnSelectionEvent(component, addedColumns, removedColumns)).queue(true)
};
AdfColumnSelectionEvent.prototype.getAddedColumns = function() {
  return AdfCollections.cloneArray(this._addedColumns)
};
AdfColumnSelectionEvent.prototype.getRemovedColumns = function() {
  return AdfCollections.cloneArray(this._removedColumns)
};

function AdfRowDisclosureEvent(source, removedSet, addedSet) {
  if(arguments.length) {
    this.Init(source, removedSet, addedSet)
  }
}
AdfObject.createSubclass(AdfRowDisclosureEvent, AdfRowKeySetChangeEvent);
AdfRowDisclosureEvent.ROW_DISCLOSURE_EVENT_TYPE = "rowDisclosure";
AdfRowDisclosureEvent.prototype.Init = function(source, removedSet, addedSet) {
  AdfRowDisclosureEvent.superclass.Init.call(this, source, AdfRowDisclosureEvent.ROW_DISCLOSURE_EVENT_TYPE, removedSet, addedSet);
  this.setRoot(source)
};
AdfRowDisclosureEvent.prototype.propagatesToServer = function() {
  if(AdfPage.PAGE.isScreenReaderMode()) {
    return true
  }
  var propagate = AdfPage.PAGE.getDomWindow().AdfUITree ? this.getSource().getProperty(AdfUITree.DISCLOSURE_LISTENER_KEY) != null : true;
  return propagate
};
AdfRowDisclosureEvent.prototype.isValidationNeeded = function() {
  return true
};
AdfRowDisclosureEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};

function AdfDropEvent(targetComponent, dragSource, transferable, proposedAction, dropX, dropY, dropOrientation, dropSite, dropSiteIndex) {
  if(arguments.length) {
    if(!dropOrientation) {
      dropOrientation = AdfDropEvent.DROP_ORIENTATION_ON
    }
    if(dropSite === undefined) {
      dropSite = null
    }
    if(dropSiteIndex === undefined) {
      dropSiteIndex = -1
    }
    this.Init(targetComponent, dragSource, transferable, proposedAction, dropX, dropY, dropOrientation, dropSite, dropSiteIndex)
  }
}
AdfObject.createSubclass(AdfDropEvent, AdfCustomEvent);
AdfDropEvent.DROP_EVENT_TYPE = "drop";
AdfDropEvent.DROP_ORIENTATION_ON = "ON";
AdfDropEvent.DROP_ORIENTATION_INSIDE = "INSIDE";
AdfDropEvent.DROP_ORIENTATION_BEFORE = "BEFORE";
AdfDropEvent.DROP_ORIENTATION_AFTER = "AFTER";
AdfDropEvent.prototype.Init = function(targetComponent, dragSource, transferable, proposedAction, dropX, dropY, dropOrientation, dropSite, dropSiteIndex) {
  AdfAssert.assertPrototype(targetComponent, AdfUIComponent);
  AdfAssert.assertPrototype(dragSource, AdfDragSource);
  AdfAssert.assertPrototype(transferable, AdfTransferable);
  AdfAssert.assertNumber(proposedAction);
  AdfAssert.assertNumber(dropX);
  AdfAssert.assertNumber(dropY);
  AdfAssert.assertString(dropOrientation);
  AdfAssert.assertNumber(dropSiteIndex);
  var params = new Object;
  params.dragSource = dragSource.getComponent().getClientId();
  params.dropX = dropX;
  params.dropY = dropY;
  params.dropOrientation = dropOrientation;
  params.dropSite = dropSite;
  params.dropSiteIndex = dropSiteIndex;
  var stringAction = null;
  switch(proposedAction) {
    case AdfDnDContext.ACTION_COPY:
      stringAction = "COPY";
      break;
    case AdfDnDContext.ACTION_MOVE:
      stringAction = "MOVE";
      break;
    case AdfDnDContext.ACTION_LINK:
      stringAction = "LINK";
      break;
    default:
      throw new Error("Unknown drag action:" + proposedAction);
  }
  params.proposedAction = stringAction;
  var dataFlavors = transferable.getTransferDataFlavors();
  var flavorCount = dataFlavors.length;
  var marshalledArray = new Array(flavorCount * 2);
  var index = 0;
  for(var flavorIndex = 0;flavorIndex < flavorCount;flavorIndex++) {
    var dataFlavor = dataFlavors[flavorIndex];
    marshalledArray[index] = dataFlavor.getStringForm();
    index++;
    var data = transferable.getTransferData(dataFlavor);
    if(data.length == 1 && !AdfDataFlavor.isRowKeyDataFlavor(dataFlavor)) {
      data = data[0]
    }
    marshalledArray[index] = data;
    index++
  }
  params.transferable = marshalledArray;
  AdfDropEvent.superclass.Init.call(this, targetComponent, AdfDropEvent.DROP_EVENT_TYPE, params, true)
};

function AdfMissingConverter() {
  this._class = "AdfMissingConverter"
}
AdfMissingConverter.prototype = new TrConverter;
AdfMissingConverter.prototype.getAsString = function(value, label) {
  return undefined
};
AdfMissingConverter.prototype.getAsObject = function(value, label) {
  return undefined
};
AdfMissingConverter.MISSING_CONVERTER = new AdfMissingConverter;

function AdfSessionTimeoutHelper() {
  this.Init()
}
AdfObject.createSubclass(AdfSessionTimeoutHelper);
AdfSessionTimeoutHelper.TimeoutWindowStates = {NONE:0, CANCEL:1, LAUNCHED:2};
AdfSessionTimeoutHelper.prototype.getTimeoutWindowState = function() {
  return this._timeoutWindowState
};
AdfSessionTimeoutHelper.prototype.Init = function() {
  AdfSessionTimeoutHelper.superclass.Init.call(this);
  this._timeoutWindowState = AdfSessionTimeoutHelper.TimeoutWindowStates.NONE;
  this._AFTimeOutGlassPane = "AFTimeOutGlassPane"
};
AdfSessionTimeoutHelper.prototype.__initializeSessionTimeoutTimer = function(timeout, warningBeforeTimeout, newSessionURL) {
  this._setSessionTimeoutInWebLocalStorage(timeout);
  this._cancelAndRescheduleSessionTimeoutTimer(timeout, warningBeforeTimeout, newSessionURL);
  this._timeout = timeout;
  this._warningBeforeTimeout = warningBeforeTimeout;
  this._newSessionURL = newSessionURL;
  var agent = AdfAgent.AGENT;
  var localStorageSessionKeysCleaned = agent.isSessionStorageEnabled() ? agent.getSessionStorageProperty("oracle.adfinternal.view.rich.sessionKeysCleaned") : null;
  if(localStorageSessionKeysCleaned == null) {
    this._timeoutWarningTimer = AdfPage.PAGE.scheduleTimer(this, this._cleanupLocalStorageSessionKeys, null, 6E4);
    if(agent.isSessionStorageEnabled()) {
      agent.setSessionStorageProperty("oracle.adfinternal.view.rich.sessionKeysCleaned", "scheduled")
    }
  }
};
AdfSessionTimeoutHelper.prototype.__cancelSessionTimeoutTimer = function() {
  var logger = AdfLogger.LOGGER;
  if(this._timeoutWarningTimer) {
    AdfPage.PAGE.cancelTimer(this._timeoutWarningTimer);
    if(logger.isLoggable(AdfLogger.INFO)) {
      logger.info("Cancelled session timeout warning dialog timer with id ", this._timeoutWarningTimer)
    }
    this._timeoutWarningTimer = null
  }
  if(this._timeoutTimer) {
    AdfPage.PAGE.cancelTimer(this._timeoutTimer);
    if(logger.isLoggable(AdfLogger.INFO)) {
      logger.info("Cancelled final session timeout dialog timer with id ", this._timeoutTimer)
    }
    this._timeoutTimer = null
  }
};
AdfSessionTimeoutHelper.prototype.__startSessionTimeoutTimer = function() {
  this._setSessionTimeoutInWebLocalStorage(this._timeout);
  this._startSessionTimeoutTimer(this._timeout, this._warningBeforeTimeout, this._newSessionURL)
};
AdfSessionTimeoutHelper.prototype.__recordUserActivity = function(event) {
  if(event.type == "click" || event.type == "keypress") {
    this._setActivityTimeInWebLocalStorage()
  }
};
AdfSessionTimeoutHelper.prototype._cleanupLocalStorageSessionKeys = function() {
  var agentHelper = AdfAgentHelper.getInstance();
  if(agentHelper.isLocalStorageEnabled()) {
    var currentTimeValue = (new Date).getTime();
    var localStorageKeys = agentHelper.getLocalStorageKeys();
    AdfLogger.LOGGER.info("Cleaning expired session info from web local storage");
    for(var i = 0;i < localStorageKeys.length;i++) {
      if(localStorageKeys[i].indexOf("oracle.adfinternal.view.rich.sessionKey_") == 0) {
        var valueInStore = agentHelper.getLocalStorageProperty(localStorageKeys[i]);
        if(currentTimeValue - valueInStore > 36E4) {
          agentHelper.removeLocalStorageProperty(localStorageKeys[i]);
          var userActivityKey = "oracle.adfinternal.view.rich.userActivityKey_" + localStorageKeys[i].split("_")[1];
          agentHelper.removeLocalStorageProperty(userActivityKey)
        }
      }
    }
    var agent = AdfAgent.AGENT;
    if(agent.isSessionStorageEnabled()) {
      agent.setSessionStorageProperty("oracle.adfinternal.view.rich.sessionKeysCleaned", "complete")
    }else {
      AdfLogger.LOGGER.info("Could not mark that we cleaned web local storage because session storage is not enabled")
    }
  }
};
AdfSessionTimeoutHelper.prototype._startSessionTimeoutTimer = function(timeout, warningBeforeTimeout, newSessionURL) {
  var currentTimeVal = (new Date).getTime();
  var logger = AdfLogger.LOGGER;
  var timeToWarn = timeout - warningBeforeTimeout;
  this._timeoutWindowState = AdfSessionTimeoutHelper.TimeoutWindowStates.NONE;
  if(timeToWarn > 0 && warningBeforeTimeout >= 12E4) {
    this._timeoutWarningTimer = AdfPage.PAGE.scheduleTimer(this, this._showSessionTimeoutWarningDialog, null, timeToWarn);
    if(logger.isLoggable(AdfLogger.INFO)) {
      logger.info("Scheduled session timeout warning dialog timer with id ", this._timeoutWarningTimer, " to be shown at : ", new Date(currentTimeVal + timeToWarn))
    }
  }else {
    this._timeoutTimer = AdfPage.PAGE.scheduleTimer(this, this._showFinalSessionTimeoutAlertDialog, null, timeout);
    if(logger.isLoggable(AdfLogger.INFO)) {
      logger.info("Scheduled final session timeout dialog timer with id ", this._timeoutTimer, " to be shown at : ", new Date(currentTimeVal + timeout))
    }
  }
};
AdfSessionTimeoutHelper.prototype._cancelAndRescheduleSessionTimeoutTimer = function(timeout, warningBeforeTimeout, newSessionURL) {
  this.__cancelSessionTimeoutTimer();
  this._startSessionTimeoutTimer(timeout, warningBeforeTimeout, newSessionURL)
};
AdfSessionTimeoutHelper.prototype._setSessionTimeoutInWebLocalStorage = function(timeout) {
  var agentHelper = AdfAgentHelper.getInstance();
  if(agentHelper.isLocalStorageEnabled()) {
    var timeValueAtTimeout = (new Date).getTime() + timeout;
    var sessionKey = "oracle.adfinternal.view.rich.sessionKey_" + AdfPage.PAGE.getSessionIdentifier();
    var storedSessionTimeoutVal = agentHelper.getLocalStorageProperty(sessionKey);
    if(storedSessionTimeoutVal == null || storedSessionTimeoutVal < timeValueAtTimeout) {
      agentHelper.setLocalStorageProperty(sessionKey, timeValueAtTimeout);
      var logger = AdfLogger.LOGGER;
      if(logger.isLoggable(AdfLogger.INFO)) {
        logger.info("Web local storage for key ", sessionKey, " reset to : ", new Date(timeValueAtTimeout))
      }
    }
  }
};
AdfSessionTimeoutHelper.prototype._setActivityTimeInWebLocalStorage = function() {
  var agentHelper = AdfAgentHelper.getInstance();
  if(agentHelper.isLocalStorageEnabled()) {
    var userActivityTime = new Date;
    var userActivityKey = "oracle.adfinternal.view.rich.userActivityKey_" + AdfPage.PAGE.getSessionIdentifier();
    agentHelper.setLocalStorageProperty(userActivityKey, userActivityTime.getTime());
    var logger = AdfLogger.LOGGER;
    if(logger.isLoggable(AdfLogger.INFO)) {
      logger.info("Last user activity on client for ", userActivityKey, " at ", userActivityTime)
    }
  }
};
AdfSessionTimeoutHelper.prototype._isUserActiveOnClient = function(duration) {
  var agentHelper = AdfAgentHelper.getInstance();
  if(agentHelper.isLocalStorageEnabled()) {
    var userActivityKey = "oracle.adfinternal.view.rich.userActivityKey_" + AdfPage.PAGE.getSessionIdentifier();
    var lastActiveTime = agentHelper.getLocalStorageProperty(userActivityKey);
    if(lastActiveTime) {
      var timeSinceLastActivity = (new Date).getTime() - lastActiveTime;
      if(timeSinceLastActivity < duration) {
        var logger = AdfLogger.LOGGER;
        if(logger.isLoggable(AdfLogger.INFO)) {
          logger.info("User activity on client ", timeSinceLastActivity / 1E3, " seconds ago. Duration checked for activity ", duration / 1E3, " seconds")
        }
        return true
      }
    }
  }
  return false
};
AdfSessionTimeoutHelper.prototype._getTimeLeftToSessionTimeout = function() {
  var agentHelper = AdfAgentHelper.getInstance();
  if(agentHelper.isLocalStorageEnabled()) {
    var sessionKey = "oracle.adfinternal.view.rich.sessionKey_" + AdfPage.PAGE.getSessionIdentifier();
    var timeoutValInStorage = agentHelper.getLocalStorageProperty(sessionKey);
    if(timeoutValInStorage) {
      return timeoutValInStorage - (new Date).getTime()
    }
  }
  return null
};
AdfSessionTimeoutHelper.prototype._showSessionTimeoutWarningDialog = function() {
  var timeLeftToTimeout = this._getTimeLeftToSessionTimeout();
  if(timeLeftToTimeout && (timeLeftToTimeout < this._warningBeforeTimeout - 2E3 || timeLeftToTimeout > this._warningBeforeTimeout + 2E3)) {
    this._cancelAndRescheduleSessionTimeoutTimer(timeLeftToTimeout, this._warningBeforeTimeout, this._newSessionURL);
    return-1
  }
  if(this._isUserActiveOnClient(this._timeout - this._warningBeforeTimeout)) {
    this._extendSessionInServer();
    return-1
  }
  this._timeoutWarningTimer = null;
  var page = AdfPage.PAGE;
  if(this._timeoutTimer) {
    page.cancelTimer(this._timeoutTimer);
    this._timeoutTimer = null
  }
  var laf = AdfPage.PAGE.getLookAndFeel();
  var preTimeoutMsg;
  if(this._warningBeforeTimeout >= 6E4) {
    preTimeoutMsg = laf.getTranslatedString("af_document.PRE_SESSION_TIMEOUT_MSG", Math.floor(this._warningBeforeTimeout / 6E4))
  }else {
    preTimeoutMsg = laf.getTranslatedString("af_document.PRE_SESSION_TIMEOUT_MSG_SECOND", this._warningBeforeTimeout / 1E3)
  }
  var preTimeoutTitle = laf.getTranslatedString("af_document.PRE_SESSION_TIMEOUT_CONFIRM_TITLE");
  if(preTimeoutTitle == null) {
    preTimeoutTitle = "Expiration Warning"
  }
  var callback = this.createCallback(this._handleSessionTimeoutWarningDialogOutcome);
  this._timeoutWindowState = AdfSessionTimeoutHelper.TimeoutWindowStates.LAUNCHED;
  this._addAFTimeOutGlassPane();
  this._preSessionTimeoutWarningTime = (new Date).getTime();
  page.__confirm(preTimeoutTitle, preTimeoutMsg, callback, this._warningBeforeTimeout, true);
  return-1
};
AdfSessionTimeoutHelper.prototype._handleSessionTimeoutWarningDialogOutcome = function(adfDialogEvent) {
  this._removeAFTimeOutGlassPane();
  this._timeoutWindowState = AdfSessionTimeoutHelper.TimeoutWindowStates.NONE;
  if(adfDialogEvent.getOutcome() == AdfDialogEvent.OUTCOME_OK) {
    this._extendSessionInServer()
  }else {
    if(adfDialogEvent.getOutcome() == AdfDialogEvent.OUTCOME_CANCEL) {
      var timeLeftToTimeout = this._getTimeLeftToSessionTimeout();
      if(!timeLeftToTimeout) {
        var currentTimeValue = (new Date).getTime();
        timeLeftToTimeout = this._warningBeforeTimeout - (currentTimeValue - this._preSessionTimeoutWarningTime);
        this._preSessionTimeoutWarningTime = null
      }
      this._cancelAndRescheduleSessionTimeoutTimer(timeLeftToTimeout, this._warningBeforeTimeout, this._newSessionURL)
    }
  }
};
AdfSessionTimeoutHelper.prototype._showFinalSessionTimeoutAlertDialog = function() {
  var timeLeftToTimeout = this._getTimeLeftToSessionTimeout();
  if(timeLeftToTimeout && timeLeftToTimeout > 0) {
    if(timeLeftToTimeout > 0) {
      this._cancelAndRescheduleSessionTimeoutTimer(timeLeftToTimeout, this._warningBeforeTimeout, this._newSessionURL);
      return-1
    }
  }
  if(this._isUserActiveOnClient(this._timeout)) {
    this._extendSessionInServer();
    return-1
  }
  this._timeoutTimer = null;
  var page = AdfPage.PAGE;
  if(this._timeoutWarningTimer) {
    page.cancelTimer(this._timeoutWarningTimer);
    this._timeoutWarningTimer = null
  }
  var laf = page.getLookAndFeel();
  var postTimeoutMsg = laf.getTranslatedString("af_document.POST_SESSION_TIMEOUT_MSG");
  if(this._newSessionURL) {
    postTimeoutMsg += " " + laf.getTranslatedString("af_document.POST_SESSION_TIMEOUT_MSG_CONTINUE")
  }
  var postTimeoutTitle = laf.getTranslatedString("af_document.POST_SESSION_TIMEOUT_ALERT_TITLE");
  if(postTimeoutTitle == null) {
    postTimeoutTitle = "Page Expired"
  }
  this._notifyOfUnload = false;
  this._pageExpired = true;
  var documentClientId = page.__getDocumentClientId();
  var docComp = page.findComponent(documentClientId);
  var docTitle = docComp.getTitle();
  if(docTitle && docTitle.length > 0) {
    docTitle = docTitle.length > 22 ? docTitle.substring(0, 22) + "..." : docTitle;
    postTimeoutTitle += " - " + docTitle
  }
  page.setPageProperty("oracle$adfinternal$pagePageExpired", true);
  var callback = this.createCallback(this._handleFinalSessionTimeoutAlert);
  this._addAFTimeOutGlassPane();
  this._timeoutWindowState = AdfSessionTimeoutHelper.TimeoutWindowStates.LAUNCHED;
  page.__alert(postTimeoutTitle, postTimeoutMsg, callback);
  return-1
};
AdfSessionTimeoutHelper.prototype._handleFinalSessionTimeoutAlert = function(adfDialogEvent) {
  this._removeAFTimeOutGlassPane();
  this._timeoutTimer = null;
  var page = AdfPage.PAGE;
  this._timeoutWindowState = AdfSessionTimeoutHelper.TimeoutWindowStates.NONE;
  var agent = AdfAgent.AGENT;
  var documentClientId = page.__getDocumentClientId();
  var docDom = agent.getElementById(documentClientId);
  AdfDomUtils.setVisible(docDom, false);
  var laf = page.getLookAndFeel();
  var postTimeoutMsg = laf.getTranslatedString("af_document.POST_SESSION_TIMEOUT_MSG");
  var documentDom = page.getDomDocument();
  var deadDom = documentDom.createElement("div");
  AdfDomUtils.setVisible(deadDom, false);
  agent.setTextContent(deadDom, postTimeoutMsg);
  docDom.parentNode.appendChild(deadDom);
  AdfDomUtils.setVisible(deadDom, true);
  if(this._newSessionURL) {
    page.getDomWindow().location.replace(this._newSessionURL)
  }else {
    page.getDomWindow().setTimeout(page.createCallback(page.Dispose), 1)
  }
};
AdfSessionTimeoutHelper.prototype._extendSessionInServer = function() {
  this._touchServerSession();
  AdfLogger.LOGGER.info("Extended session lifetime");
  this._setSessionTimeoutInWebLocalStorage(this._timeout);
  this._cancelAndRescheduleSessionTimeoutTimer(this._timeout, this._warningBeforeTimeout, this._newSessionURL)
};
AdfSessionTimeoutHelper.prototype._touchServerSession = function() {
  var actionURL = AdfPage.PAGE.getDomDocument().location.href;
  if(actionURL.indexOf("?") == -1) {
    actionURL += "?"
  }else {
    actionURL += "&"
  }
  actionURL += "_afrTS=" + (new Date).getTime();
  var xmlr = new AdfXMLRequest;
  xmlr.setSynchronous(false);
  xmlr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  xmlr.send(actionURL, null);
  xmlr.cleanup();
  delete xmlr
};
AdfSessionTimeoutHelper.prototype._addAFTimeOutGlassPane = function() {
  var domDocument = AdfPage.PAGE.getDomDocument();
  var bodyElement = domDocument.getElementsByTagName("body")[0];
  AdfDomUtils.addCSSClassName(bodyElement, this._AFTimeOutGlassPane)
};
AdfSessionTimeoutHelper.prototype._removeAFTimeOutGlassPane = function() {
  var domDocument = AdfPage.PAGE.getDomDocument();
  var bodyElement = domDocument.getElementsByTagName("body")[0];
  AdfDomUtils.removeCSSClassName(bodyElement, this._AFTimeOutGlassPane)
};

function AdfAgentHelper() {
  this.Init()
}
AdfObject.createSubclass(AdfAgentHelper);
AdfAgentHelper.prototype.Init = function() {
  AdfAgentHelper.superclass.Init.call(this)
};
AdfAgentHelper.getInstance = function() {
  if(AdfAgentHelper._instance == null) {
    AdfAgentHelper._instance = new AdfAgentHelper
  }
  return AdfAgentHelper._instance
};
AdfAgentHelper.prototype.isLocalStorageEnabled = function() {
  if(this._isLocalStorageEnabled === undefined) {
    var window = AdfAgent.AGENT.getDomWindow();
    if(typeof window.localStorage === "undefined") {
      this._isLocalStorageEnabled = false
    }else {
      try {
        window.localStorage.setItem("_adfTestKey", "on");
        window.localStorage.removeItem("_adfTestKey");
        this._isLocalStorageEnabled = true
      }catch(e) {
        AdfLogger.LOGGER.logErrorAsInfo(e, "Cannot store data to browser's localStore.");
        this._isLocalStorageEnabled = false
      }
    }
  }
  return this._isLocalStorageEnabled
};
AdfAgentHelper.prototype.setLocalStorageProperty = function(propKey, propValue) {
  if(this.isLocalStorageEnabled()) {
    AdfAgent.AGENT.getDomWindow().localStorage.setItem(propKey, propValue)
  }
};
AdfAgentHelper.prototype.getLocalStorageKeys = function() {
  if(this.isLocalStorageEnabled()) {
    var keys = new Array;
    for(var i = 0;i < AdfAgent.AGENT.getDomWindow().localStorage.length;i++) {
      keys.push(AdfAgent.AGENT.getDomWindow().localStorage.key(i))
    }
    return keys
  }
  return null
};
AdfAgentHelper.prototype.getLocalStorageProperty = function(propKey) {
  if(this.isLocalStorageEnabled()) {
    return AdfAgent.AGENT.getDomWindow().localStorage.getItem(propKey)
  }
  return null
};
AdfAgentHelper.prototype.removeLocalStorageProperty = function(propKey) {
  if(this.isLocalStorageEnabled()) {
    AdfAgent.AGENT.getDomWindow().localStorage.removeItem(propKey)
  }
};

function AdfAutoSubmitEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfAutoSubmitEvent, AdfComponentEvent);
AdfAutoSubmitEvent.AUTO_SUBMIT_TYPE = "autoSubmit";
AdfAutoSubmitEvent.queue = function(component) {
  var autoSubmitEvent = new AdfAutoSubmitEvent(component);
  autoSubmitEvent.setPartial(true);
  component.queueEvent(autoSubmitEvent)
};
AdfAutoSubmitEvent.prototype.isValidationNeeded = function() {
  return false
};
AdfAutoSubmitEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};
AdfAutoSubmitEvent.prototype.propagatesToServer = function() {
  return true
};
AdfAutoSubmitEvent.prototype.Init = function(source) {
  AdfAutoSubmitEvent.superclass.Init.call(this, source, AdfAutoSubmitEvent.AUTO_SUBMIT_TYPE);
  this.setRoot(source)
};
AdfAutoSubmitEvent.prototype.getShowMessages = function() {
  return AdfPage.PAGE.isScreenReaderMode()
};
AdfAutoSubmitEvent.prototype.getMaxTimeBeforePropagation = function() {
  if(AdfPage.PAGE.getDomWindow().AdfUIInputPopup && this.getSource() instanceof AdfUIInputPopup) {
    return 200
  }
  return AdfAutoSubmitEvent.superclass.getMaxTimeBeforePropagation.call(this)
};

AdfRedirectEvent.REDIRECT_EVENT_TYPE = "redirect";
function AdfRedirectEvent(source, url, noNavigation) {
  this.Init(source, url, noNavigation)
}
AdfObject.createSubclass(AdfRedirectEvent, AdfComponentEvent);
AdfRedirectEvent.prototype.Init = function(source, url, noNavigation) {
  AdfAssert.assertString(url);
  AdfAssert.assertPrototype(source, AdfUIComponent);
  this._url = url;
  this._noNavigation = noNavigation;
  AdfRedirectEvent.superclass.Init.call(this, source, AdfRedirectEvent.REDIRECT_EVENT_TYPE)
};
AdfRedirectEvent.prototype.getURL = function() {
  return this._url
};
AdfRedirectEvent.prototype.getNavigationSuppressed = function() {
  return this._noNavigation
};

var AdfUIUtils = new Object;
AdfUIUtils.dumpHtmlDom = function(target, targetName) {
  AdfUIUtils.dump(target, targetName, {innerText:1, outerText:1, outerHTML:1, innerHTML:1})
};
AdfUIUtils.dump = function(target, targetName, suppressedProps) {
  var propText = "";
  if(target) {
    var targetType = typeof target;
    var isObject = targetType == "object";
    var isFunction = targetType == "function";
    if(!isObject && !isFunction) {
      propText = targetType + ":" + target.valueOf()
    }else {
      if(isFunction) {
        propText = targetType + ":" + target.valueOf()
      }else {
        if(AdfCollections.isArray(target)) {
          propText = "Array length=" + target.length + " contents=[" + target.valueOf() + "] "
        }
      }
      if(!targetName) {
        try {
          targetName = target["name"]
        }catch(e) {
        }
      }
      var currPropNameIndex = 0;
      var propNames = new Array;
      try {
        for(var currPropName in target) {
          if((!suppressedProps || !suppressedProps[currPropName]) && !currPropName.match(/DOM/)) {
            propNames[currPropNameIndex] = currPropName;
            currPropNameIndex++
          }
        }
      }catch(e) {
        return"Unable to retrieve iterator on " + targetName + ":" + e
      }
      propNames.sort();
      var propCount = propNames.length;
      var propColumns = Math.ceil(propCount / AdfUIUtils._MAX_ALERT_ROWS);
      for(var propIndex = 0;propIndex < propCount;propIndex++) {
        var currPropText = "";
        currPropText = AdfUIUtils._getKeyValueString(target, propNames[propIndex]);
        currPropText += AdfUIUtils.getTabbedSpacer(propIndex, propColumns);
        propText += currPropText
      }
      if(!targetName) {
        targetName = "" + target
      }
    }
  }else {
    if(!targetName) {
      targetName = "(Undefined)"
    }
  }
  if(propText == "") {
    propText = "No properties"
  }
  alert("Dump of " + targetName + ":\n" + propText)
};
AdfUIUtils._getKeyValueString = function(target, key) {
  var value;
  try {
    value = target[key]
  }catch(e) {
    value = e
  }
  if(typeof value == "function") {
    value = "[function]"
  }
  return key + ":" + value
};
AdfUIUtils.getTabbedSpacer = function(propertyIndex, columns) {
  if(!columns) {
    columns = 3
  }
  var indent = AdfAgent.AGENT.isGecko ? (propertyIndex + 1) % columns == 0 ? "\n" : "    " : "\t";
  return indent
};
AdfUIUtils.getSingleSpacer = function() {
  return" "
};
AdfUIUtils.getCommaSpacer = function() {
  return","
};
AdfUIUtils.getPropertiesAsString = function(target, spaceFunction, showFunctions, showConstants) {
  if(!target) {
    return"No target"
  }
  var outString = "";
  if(showFunctions == null) {
    showFunctions = true
  }
  if(showConstants == null) {
    showConstants = true
  }
  var targetType = typeof target;
  var isObject = targetType == "object";
  var isFunction = targetType == "function";
  if(!isObject && !isFunction) {
    outString = targetType + ":" + target.valueOf()
  }else {
    if(isFunction) {
      outString = targetType + ":" + target.valueOf()
    }else {
      if(AdfCollections.isArray(target)) {
        outString = "Array length=" + target.length + " contents=[" + target.valueOf() + "] "
      }
    }
    if(spaceFunction == undefined) {
      spaceFunction = AdfUIUtils.getTabbedSpacer
    }
    var index = 0;
    for(var currPropName in target) {
      var currPropText = "";
      if(!showConstants) {
        if(currPropName == currPropName.toUpperCase()) {
          continue
        }
      }
      try {
        var value = target[currPropName];
        if(typeof value == "function") {
          if(!showFunctions) {
            continue
          }
          value = "[function]"
        }
        currPropText = currPropName + ":" + value;
        if(spaceFunction) {
          currPropText += spaceFunction(index++)
        }
      }catch(e) {
      }
      outString += currPropText
    }
    if(!outString.length) {
      outString = "Unknown:" + target.valueOf()
    }
  }
  return outString
};
AdfUIUtils.compareArrays = function(array1, array2) {
  AdfAssert.assert(Array.prototype.isPrototypeOf(array1));
  AdfAssert.assert(Array.prototype.isPrototypeOf(array2));
  if(array1.length == array2.length) {
    for(var index in array1) {
      var value1 = array1[index];
      var value2 = array2[index];
      if(!AdfUIUtils.compareValues(value1, value2)) {
        return false
      }
    }
    return true
  }else {
    return false
  }
};
AdfUIUtils.compareObjects = function(object1, object2) {
  AdfAssert.assert(Object.prototype.isPrototypeOf(object1));
  AdfAssert.assert(Object.prototype.isPrototypeOf(object2));
  var equalsFunc = object1["equals"];
  if(equalsFunc && typeof equalsFunc == "function") {
    return equalsFunc.call(object1, object2)
  }
  for(var index in object1) {
    var value1 = object1[index];
    var value2 = object2[index];
    if(!AdfUIUtils.compareValues(value1, value2)) {
      return false
    }
  }
  for(var index in object2) {
    var value1 = object1[index];
    var value2 = object2[index];
    if(!AdfUIUtils.compareValues(value2, value1)) {
      return false
    }
  }
  return true
};
AdfUIUtils.compareValues = function(value1, value2) {
  var equal = value1 === value2;
  if(!equal && value1 != null && value2 != null) {
    if(Array.prototype.isPrototypeOf(value1) && Array.prototype.isPrototypeOf(value2)) {
      equal = AdfUIUtils.compareArrays(value1, value2)
    }else {
      if(AdfObject.prototype.isPrototypeOf(value1) && AdfObject.prototype.isPrototypeOf(value2)) {
        equal = value1.equals(value2)
      }else {
        if(Object.prototype.isPrototypeOf(value1) && Object.prototype.isPrototypeOf(value2)) {
          equal = AdfUIUtils.compareObjects(value1, value2)
        }
      }
    }
  }
  return equal
};
AdfUIUtils.trim = function(data) {
  if(data != null && typeof data == "string") {
    return data.replace(AdfUIUtils._TRIM_ALL_RE, "")
  }
  return data
};
AdfUIUtils.trimLeading = function(data) {
  if(data != null && typeof data == "string") {
    return data.replace(AdfUIUtils._TRIM_BEGINNING_RE, "")
  }
  return data
};
AdfUIUtils.trimTrailing = function(data) {
  if(data != null && typeof data == "string") {
    return data.replace(AdfUIUtils._TRIM_ENDING_RE, "")
  }
  return data
};
AdfUIUtils._MAX_ALERT_ROWS = 28;
AdfUIUtils._TRIM_ALL_RE = /^\s*|\s*$/g;
AdfUIUtils._TRIM_BEGINNING_RE = /^\s*/g;
AdfUIUtils._TRIM_END_RE = /\s*$/g;

var AdfShuttleUtils = new Object;
AdfShuttleUtils.getLastSelectionChange = function(component, oldSelection) {
  var newValues = component.getSelection();
  if(oldSelection === undefined) {
    return newValues[0]
  }else {
    var oldSelectionValues = AdfCollections.cloneArray(oldSelection);
    var newSelectionValues = AdfCollections.cloneArray(newValues);
    var removeCnt = 0;
    for(i = 0;i < oldSelectionValues.length;i++) {
      var value = oldSelectionValues[i];
      if(AdfCollections.removeArrayValue(newSelectionValues, value) != -1) {
        removeCnt++
      }
    }
    if(newSelectionValues.length > 0) {
      return newSelectionValues[0]
    }else {
      if(oldSelectionValues.length == removeCnt) {
        return null
      }else {
        newSelectionValues = AdfCollections.cloneArray(newValues);
        for(i = 0;i < newSelectionValues.length;i++) {
          var value = newSelectionValues[i];
          AdfCollections.removeArrayValue(oldSelectionValues, value)
        }
        return oldSelectionValues[0]
      }
    }
  }
};
AdfShuttleUtils.isSelected = function(component, value) {
  var selection = component.getSelection();
  return AdfCollections.indexOf(selection, value) >= 0
};
AdfShuttleUtils.isLeading = function(component, value) {
  var componentValue = component.getValue();
  return AdfCollections.indexOf(componentValue, value) < 0
};
AdfShuttleUtils.getLeadSelection = function(component) {
  var leads = new Array;
  var allSelections = component.getSelection();
  if(!allSelections) {
    return leads
  }
  for(i = 0;i < allSelections.length;i++) {
    if(AdfShuttleUtils.isLeading(component, allSelections[i])) {
      leads.push(allSelections[i])
    }
  }
  return leads
};
AdfShuttleUtils.getTrailSelection = function(component) {
  var trails = new Array;
  var allSelections = component.getSelection();
  if(!allSelections) {
    return trails
  }
  for(i = 0;i < allSelections.length;i++) {
    if(AdfShuttleUtils.getSide(component, allSelections[i]) == AdfShuttleUtils.TRAILING) {
      trails.push(allSelections[i])
    }
  }
  return trails
};

function AdfTransferable() {
}
AdfObject.createSubclass(AdfTransferable);
AdfTransferable.prototype.Init = function() {
  AdfTransferable.superclass.Init.call(this)
};
AdfTransferable.prototype.getTransferData = function(dataFlavor) {
  return null
};
AdfTransferable.prototype.getTransferDataFlavors = function() {
  return null
};
AdfTransferable.prototype.isDataFlavorSupported = function(dataFlavor) {
  return this.getTransferData(dataFlavor) != null
};

function AdfObjectTransferable(objectsForFlavors, dataFlavors, baseObjects, converters) {
  this.Init(objectsForFlavors, dataFlavors, baseObjects, converters)
}
AdfObject.createSubclass(AdfObjectTransferable, AdfTransferable);
AdfObjectTransferable.createSingleObjectTransferable = function(data, dataFlavor) {
  AdfAssert.assert(data);
  AdfAssert.assertPrototypeOrNull(dataFlavor, AdfDataFlavor);
  var dataFlavors;
  if(dataFlavor) {
    AdfAssert.assertPrototype(dataFlavor, AdfDataFlavor);
    dataFlavors = [dataFlavor]
  }
  return new AdfObjectTransferable([[data]], dataFlavors)
};
AdfObjectTransferable.createMultiObjectTransferable = function(dataObjects, dataFlavor) {
  AdfAssert.assertArray(dataObjects);
  AdfAssert.assertPrototype(dataFlavor, AdfDataFlavor);
  return new AdfObjectTransferable([dataObjects], [dataFlavor])
};
AdfObjectTransferable.prototype.Init = function(objectsForFlavors, dataFlavors, baseObjects, converters) {
  AdfObjectTransferable.superclass.Init.call(this);
  AdfAssert.assertArrayOrNull(objectsForFlavors);
  AdfAssert.assertArrayOrNull(dataFlavors);
  AdfAssert.assertArrayOrNull(baseObjects);
  AdfAssert.assertArrayOrNull(converters);
  AdfAssert.assert(objectsForFlavors != null || baseObjects != null && converters != null && dataFlavors != null, "Either the objects for the AdfTransferable have to be specified, or base objects and converters must be specified");
  AdfAssert.assert(!dataFlavors || objectsForFlavors.length == dataFlavors.length, "data Objects and AdfDataFlavor arrays lengths must be identical:" + "data objects:[" + objectsForFlavors + "] data flavors:[" + dataFlavors + "]");
  this._baseObjects = baseObjects;
  this._converters = converters;
  this._dataFlavors = AdfObjectTransferable._createDataFlavors(objectsForFlavors, dataFlavors);
  AdfLogger.LOGGER.fine("data flavors for:", objectsForFlavors, "=", this._dataFlavors);
  if(objectsForFlavors == null) {
    objectsForFlavors = new Array
  }
  this._objectsForFlavors = objectsForFlavors
};
AdfObjectTransferable.prototype.getTransferData = function(dataFlavor) {
  var dataObjectIndex = this._dataFlavors[dataFlavor.getStringForm()];
  if(dataObjectIndex === undefined && dataFlavor === AdfDataFlavor.ANY_FLAVOR) {
    dataObjectIndex = 0
  }
  if(dataObjectIndex != undefined) {
    var transferData = this._objectsForFlavors[dataObjectIndex];
    if(transferData == null) {
      var baseObjects = this._baseObjects;
      if(baseObjects != null) {
        var converter = this._converters[dataObjectIndex];
        var baseObjectCount = baseObjects.length;
        transferData = new Array(baseObjectCount);
        for(var i = 0;i < baseObjectCount;i++) {
          transferData[i] = converter(baseObjects[i])
        }
        this._objectsForFlavors[dataObjectIndex] = transferData
      }
    }
    return transferData
  }else {
    return undefined
  }
};
AdfObjectTransferable.prototype.getTransferDataFlavors = function() {
  return this._dataFlavors
};
AdfObjectTransferable.prototype.isDataFlavorSupported = function(dataFlavor) {
  if(dataFlavor === AdfDataFlavor.ANY_FLAVOR) {
    return true
  }else {
    return dataFlavor.getStringForm() in this._dataFlavors
  }
};
AdfObjectTransferable.prototype.toDebugString = function() {
  return AdfObjectTransferable.superclass.toDebugString.call(this) + "[" + " dataObjects:" + this._objectsForFlavors + " dataFlavors:" + this._dataFlavors + "]"
};
AdfObjectTransferable._createDataFlavors = function(objectsForFlavors, dataFlavors) {
  var dataObjectCount = objectsForFlavors.length;
  var associativeFlavors = new Array;
  for(var dataObjectIndex = 0;dataObjectIndex < dataObjectCount;dataObjectIndex++) {
    var objectsForFlavor = objectsForFlavors[dataObjectIndex];
    AdfAssert.assertArray(objectsForFlavor);
    var currDataFlavor = dataFlavors ? dataFlavors[dataObjectIndex] : null;
    if(!currDataFlavor) {
      currDataFlavor = AdfDataFlavor.getObjectFlavor(objectsForFlavor[0])
    }
    AdfAssert.assertPrototype(currDataFlavor, AdfDataFlavor);
    AdfObjectTransferable._addSuperclassFlavors(currDataFlavor, associativeFlavors, dataObjectIndex)
  }
  return associativeFlavors
};
AdfObjectTransferable._addSuperclassFlavors = function(baseDataFlavor, associativeFlavors, dataObjectIndex) {
  AdfObjectTransferable._addFlavorIfNecessary(baseDataFlavor, associativeFlavors, dataObjectIndex);
  if(baseDataFlavor === AdfDataFlavor.ANY_FLAVOR) {
    return
  }
  var flavorString = baseDataFlavor.getStringForm();
  var prefixString = AdfDataFlavor._JSOBJECT_PREFIX_STRING;
  if(!flavorString.indexOf(prefixString)) {
    var objectFlavor = AdfDataFlavor.OBJECT_FLAVOR;
    var objectType = flavorString.substr(prefixString.length);
    var flavorClass = window[objectType];
    if(flavorClass) {
      if(AdfObject.prototype.isPrototypeOf(flavorClass)) {
        flavorClass = flavorClass.superclass;
        while(flavorClass) {
          var currFlavor = AdfDataFlavor.getDataFlavorForClass(flavorClass);
          AdfObjectTransferable._addFlavorIfNecessary(currFlavor, associativeFlavors, dataObjectIndex);
          flavorClass = flavorClass.superclass
        }
      }
    }
    AdfObjectTransferable._addFlavorIfNecessary(objectFlavor, associativeFlavors, dataObjectIndex)
  }
};
AdfObjectTransferable._addFlavorIfNecessary = function(dataFlavor, associativeFlavors, dataObjectIndex) {
  var flavorString = dataFlavor.getStringForm();
  if(!(flavorString in associativeFlavors)) {
    associativeFlavors.push(dataFlavor);
    associativeFlavors[flavorString] = dataObjectIndex
  }
};

function AdfBusyStateEvent(source, busy) {
  this.Init(source, busy)
}
AdfObject.createSubclass(AdfBusyStateEvent, AdfBaseEvent);
AdfBusyStateEvent.BUSY_STATE_TYPE = "busyState";
AdfBusyStateEvent.prototype.isBusy = function() {
  return this._busy
};
AdfBusyStateEvent.prototype.isCancelable = function() {
  return false
};
AdfBusyStateEvent.prototype.toDebugString = function() {
  var superString = AdfBusyStateEvent.superclass.toDebugString.call(this);
  return superString.substring(0, superString.length - 1) + ", busy=" + this._busy + "]"
};
AdfBusyStateEvent.prototype.Init = function(source, busy) {
  AdfBusyStateEvent.superclass.Init.call(this, source, AdfBusyStateEvent.BUSY_STATE_TYPE);
  this._busy = busy
};

function AdfPropertyChangeEvent(source, propertyName, oldValue, newValue) {
  this.Init(source, propertyName, oldValue, newValue)
}
AdfObject.createSubclass(AdfPropertyChangeEvent, AdfBaseEvent);
AdfPropertyChangeEvent.PROPERTY_CHANGE_TYPE = "propertyChange";
AdfPropertyChangeEvent.prototype.getPropertyName = function() {
  return this._propertyName
};
AdfPropertyChangeEvent.prototype.getOldValue = function() {
  return this._oldValue
};
AdfPropertyChangeEvent.prototype.getNewValue = function() {
  return this._newValue
};
AdfPropertyChangeEvent.prototype.isCancelable = function() {
  return false
};
AdfPropertyChangeEvent.prototype.toDebugString = function() {
  var superString = AdfPropertyChangeEvent.superclass.toDebugString.call(this);
  return superString.substring(0, superString.length - 1) + ", propertyName=" + this._propertyName + ", oldValue=" + this._oldValue + ", newValue=" + this._newValue + "]"
};
AdfPropertyChangeEvent.prototype.Init = function(source, propertyName, oldValue, newValue) {
  AdfPropertyChangeEvent.superclass.Init.call(this, source, AdfPropertyChangeEvent.PROPERTY_CHANGE_TYPE);
  AdfAssert.assert(propertyName, "propertyName must be specified");
  this._propertyName = propertyName;
  this._oldValue = oldValue;
  this._newValue = newValue
};

function AdfUIComponent(componentType) {
  this.Init(componentType)
}
AdfObject.createSubclass(AdfUIComponent);
AdfUIComponent._COMPONENT_FACTORY = new Object;
AdfUIComponent.USAGE_PRIVATE_CHILD = 1;
AdfUIComponent.STATE_LOADING = 1;
AdfUIComponent.STATE_COMPLETE = 4;
AdfUIComponent.createComponent = function(componentType) {
  AdfAssert.assert(componentType, "component type  required when creating components");
  var componentConstructor = AdfUIComponent._COMPONENT_FACTORY[componentType];
  if(!componentConstructor) {
    AdfLogger.LOGGER.warning("No component for:", componentType);
    return null
  }else {
    return new componentConstructor
  }
};
AdfUIComponent.registerComponent = function(componentType, componentClass) {
  AdfAssert.assert(componentClass, "constructor required when registering components for " + componentType);
  AdfAssert.assert(componentType, "componentType required when registering " + componentClass);
  AdfUIComponent._COMPONENT_FACTORY[componentType] = componentClass
};
AdfUIComponent.prototype.addEventListener = function(eventType, listener, instance) {
  var listeners = AdfEventUtils.addEventListener(this._getClientListeners(), eventType, listener, instance);
  this.setProperty("clientListeners", listeners)
};
AdfUIComponent.prototype.removeEventListener = function(eventType, listener, instance) {
  var listeners = AdfEventUtils.removeEventListener(this._getClientListeners(), eventType, listener, instance);
  this.setProperty("clientListeners", listeners)
};
AdfUIComponent.prototype.getProperty = function(propName) {
  var value = this._props[propName];
  if(value === undefined) {
    var peer = this._peer;
    if(peer != null) {
      value = peer.getComponentProperty(this, propName)
    }
    if(value === undefined) {
      var key = this.getPropertyKeys()[propName];
      if(key != null) {
        var defaultValue = key[AdfUIComponent.PROPERTY_KEY_DEFAULT];
        value = defaultValue;
        if(defaultValue === undefined) {
          defaultValue = AdfUIComponent._DEFAULT_VALUE_UNDEFINED
        }
        this._props[propName] = defaultValue
      }
    }
  }else {
    if(value === AdfUIComponent._DEFAULT_VALUE_UNDEFINED) {
      value = undefined
    }
  }
  return value
};
AdfUIComponent.prototype.getPropertyValue = function(propName) {
  return this.getProperty(propName)
};
AdfUIComponent.prototype.getPropertyKeys = function() {
  return this.constructor[AdfUIComponent._CLASS_PROPERTY_KEYS]
};
AdfUIComponent.prototype.getComponentType = function() {
  return this._componentType
};
AdfUIComponent.prototype.satisfiesUsage = function(usage) {
  AdfAssert.assertNumber(usage);
  var usageFlags = this._componentUsageFlags;
  return(usage & usageFlags) != 0
};
AdfUIComponent.prototype.dontPropagateDescendantMessageChanges = function() {
  return false
};
AdfUIComponent.prototype.initializeProperty = function(propName, newValue) {
  if(AdfAssert.DEBUG) {
    AdfAssert.assert(this._props[propName] === undefined, "Property '" + propName + "' is already defined as " + this._props[propName])
  }
  this._props[propName] = newValue
};
AdfUIComponent.prototype.setProperty = function(propName, newValue, persist, propagate) {
  AdfAssert.assertString(propName);
  var oldValue = this.getProperty(propName);
  if(AdfUIComponent.isSecureProperty(this, propName)) {
    AdfLogger.LOGGER.severe("Ignoring attempt to set secured property[" + propName + "] to:" + newValue);
    return oldValue
  }
  if(oldValue === newValue) {
    return oldValue
  }
  var valueChanged = oldValue == null || !this.ComparePropertyValues(propName, oldValue, newValue);
  if(!valueChanged) {
    return oldValue
  }
  this._props[propName] = newValue;
  var propertyKey = this.getPropertyKeys()[propName];
  if(propagate != AdfUIComponent.PROPAGATE_NEVER && propagate != AdfUIComponent.PROPAGATE_LOCALLY && (propertyKey ? !propertyKey[AdfUIComponent.PROPERTY_DISCONNECTED] : propagate == AdfUIComponent.PROPAGATE_ALWAYS)) {
    AdfPage.PAGE.addChangedComponent(this);
    var propertyChanges = this._propChanges;
    if(propertyChanges == undefined) {
      propertyChanges = new Object;
      this._propChanges = propertyChanges
    }
    var flaggedPropertyKey = propName + AdfUIComponent._FLAG_PERSISTENCE;
    if(persist) {
      propertyChanges[flaggedPropertyKey] = true;
      if(propertyChanges[propName]) {
        propertyChanges[propName] = false
      }
    }else {
      propertyChanges[propName] = true;
      if(propertyChanges[flaggedPropertyKey]) {
        propertyChanges[flaggedPropertyKey] = false
      }
    }
  }
  this.SetPropertyImpl(propName, oldValue, newValue);
  if(propagate != AdfUIComponent.PROPAGATE_NEVER) {
    var hasPeer = this._peer != null;
    var clientListeners = this._getClientListeners();
    var propListeners = clientListeners ? clientListeners["propertyChange"] : null;
    if(hasPeer || propListeners) {
      var changeEvent = new AdfPropertyChangeEvent(this, propName, oldValue, newValue);
      if(hasPeer) {
        try {
          this._peer.ComponentPropertyChanged(changeEvent)
        }catch(e) {
          AdfLogger.LOGGER.logError(e, AdfLogger.WARNING, "Error delivering property changed event:" + changeEvent);
          throw e;
        }
      }
      if(propListeners) {
        this._deliverEventToListeners(changeEvent, propListeners)
      }
    }
    this.DeliverDerivedPropertyEvents(propName, oldValue, newValue)
  }
  return oldValue
};
AdfUIComponent.isSecureProperty = function(component, propName) {
  var propertyKey = component.getPropertyKeys()[propName];
  var isSecureProperty = false;
  if(propertyKey) {
    isSecureProperty = !propertyKey[AdfUIComponent.PROPERTY_DISCONNECTED];
    if(isSecureProperty) {
      isSecureProperty = propertyKey[AdfUIComponent.PROPERTY_KEY_SECURED]
    }
    if(isSecureProperty) {
      var unsecurePropNames = component.getProperty("unsecure");
      isSecureProperty = unsecurePropNames == null || !(propName in unsecurePropNames)
    }
  }
  return isSecureProperty
};
AdfUIComponent.prototype.setInlineStyleProperty = function(propName, propValue) {
  this.getPeer().setInlineStyleProperty(this, propName, propValue)
};
AdfUIComponent.prototype.getInlineStyleProperty = function(propName) {
  return this.getPeer().getInlineStyleProperty(this, propName)
};
AdfUIComponent.prototype.getReadyState = function() {
  return this.getPeer().getReadyState(this)
};
AdfUIComponent.prototype.getClientId = function() {
  return this._clientId
};
AdfUIComponent.prototype.getAbsoluteId = function() {
  var absoluteId = this._absoluteId;
  if(absoluteId == null) {
    absoluteId = this._peer.getAbsoluteId(this, this._clientId);
    this._absoluteId = absoluteId
  }
  return absoluteId
};
AdfUIComponent.prototype.getAbsoluteLocator = function() {
  var absoluteLocator = this._absoluteLocator;
  if(absoluteLocator == null) {
    absoluteLocator = this._peer.getAbsoluteLocator(this, this._clientId);
    this._absoluteLocator = absoluteLocator
  }
  return absoluteLocator
};
AdfUIComponent.prototype.getAccessibleName = function() {
  var peer = this.getPeer();
  var accessibleName = null;
  if(peer) {
    accessibleName = peer.getAccessibleName(this)
  }
  return accessibleName
};
AdfUIComponent.prototype.findComponent = function(expr, skipDeprecation) {
  return AdfUIComponent.__findComponent(expr, this, skipDeprecation)
};
AdfUIComponent.__findComponent = function(expr, component, skipDeprecation) {
  AdfAssert.assertNonEmptyString(expr);
  var leadingQualifiers = expr.match(/^:+/);
  if(leadingQualifiers != null) {
    leadingQualifiers = leadingQualifiers[0]
  }
  var upCount = 0;
  var relative = false;
  var searchScopedId = expr;
  if(leadingQualifiers != null) {
    var qualifierLength = leadingQualifiers.length;
    if(expr.length <= qualifierLength) {
      AdfLogger.LOGGER.severe('Error - Illegal argument - invalid expression = "', expr, '"; the expression must be more than just leading qualifiers.');
      return undefined
    }
    if(qualifierLength == 1) {
      searchScopedId = expr.substring(1)
    }else {
      upCount = qualifierLength;
      relative = true;
      searchScopedId = expr.substring(qualifierLength)
    }
  }else {
    relative = true;
    upCount = 1
  }
  var relativeSeatchString;
  var componentAbsoluteId;
  var prefixId;
  var isNamingContainer;
  if(relative) {
    isNamingContainer = AdfUIComponent.__isNamingContainer(component.constructor);
    var foundComponent = AdfUIComponent._findRelativeComponent(component.getClientId(), isNamingContainer, upCount > 0 ? upCount - 1 : 0, searchScopedId, ":", expr, skipDeprecation);
    if(foundComponent) {
      return foundComponent
    }
    if(isNamingContainer) {
      upCount--
    }
    componentAbsoluteId = component.getAbsoluteId();
    relativeSeatchString = searchScopedId;
    prefixId = AdfUIComponent._trimAbsoluteScopedId(componentAbsoluteId, upCount);
    searchScopedId = prefixId + relativeSeatchString
  }
  foundComponent = AdfUIComponent._findAbsoluteComponent(searchScopedId);
  if(!foundComponent && relative) {
    if(!skipDeprecation) {
      var deprecationUpCount = upCount;
      if(isNamingContainer) {
        deprecationUpCount++
      }else {
        deprecationUpCount--
      }
      prefixId = AdfUIComponent._trimAbsoluteScopedId(componentAbsoluteId, deprecationUpCount);
      searchScopedId = prefixId + relativeSeatchString;
      foundComponent = AdfUIComponent._findAbsoluteComponent(searchScopedId);
      if(foundComponent) {
        AdfLogger.LOGGER.warning("Use of deprecated findComponent search string:", expr, " on ", component)
      }
    }
    if(!foundComponent) {
      var prefixIds = componentAbsoluteId.split(":");
      var remainingUpCount = upCount;
      var idIndex = prefixIds.length - 1;
      while(!foundComponent && idIndex && remainingUpCount) {
        var currId = prefixIds[idIndex];
        if(!isNaN(currId)) {
          prefixIds.splice(idIndex, 1);
          remainingUpCount--;
          prefixId = AdfUIComponent._trimAbsoluteScopedId(prefixIds.join(":"), upCount);
          searchScopedId = prefixId + relativeSeatchString;
          foundComponent = AdfUIComponent._findAbsoluteComponent(searchScopedId)
        }
        idIndex--
      }
    }
  }
  return foundComponent
};
AdfUIComponent._findRelativeComponent = function(clientId, isNamingContainer, ncCount, searchClientId, separator, expr, skipDeprecation) {
  var poppedNcCount = 0;
  var component, index;
  var baseId = clientId;
  var numberPopped = 0;
  var lastBaseId = null;
  var lastSearched = false;
  if(!isNamingContainer) {
    index = baseId.lastIndexOf(separator);
    if(index == -1) {
      return AdfPage.PAGE.findComponent(searchClientId)
    }
    baseId = baseId.substring(0, index)
  }
  while(poppedNcCount <= ncCount) {
    if(numberPopped >= ncCount) {
      component = AdfPage.PAGE.findComponent(baseId + separator + searchClientId);
      if(component != null) {
        return component
      }
      lastSearched = true
    }
    index = baseId.lastIndexOf(separator);
    if(index == -1) {
      component = AdfPage.PAGE.findComponent(searchClientId);
      if(component == null) {
        lastBaseId = baseId;
        baseId = null;
        break
      }
      return component
    }
    component = AdfPage.PAGE.findComponent(baseId);
    if(component != null && AdfUIComponent.__isNamingContainer(component.constructor)) {
      ++poppedNcCount
    }
    lastBaseId = baseId;
    baseId = baseId.substring(0, index);
    ++numberPopped
  }
  if(!skipDeprecation) {
    if(!isNamingContainer && ncCount > 0 && lastBaseId != null && !lastSearched) {
      component = AdfPage.PAGE.findComponent(lastBaseId + separator + searchClientId);
      if(component != null) {
        AdfLogger.LOGGER.warning("Component found using deprecated relative find of excessive number colons. " + "Search string: " + expr);
        return component
      }
    }
    if(ncCount == 0 && isNamingContainer) {
      index = clientId.lastIndexOf(separator);
      component = index == -1 ? AdfPage.PAGE.findComponent(searchClientId) : AdfPage.PAGE.findComponent(clientId.substring(0, index) + separator + searchClientId);
      if(component != null) {
        AdfLogger.LOGGER.warning("Component found using deprecated relative find using the parent component. " + "Search string: " + expr);
        return component
      }
    }
  }
  return null
};
AdfUIComponent._trimAbsoluteScopedId = function(absoluteScopedId, trimCount) {
  if(absoluteScopedId && !trimCount) {
    return absoluteScopedId + ":"
  }
  var currStartIndex = absoluteScopedId.length;
  while(trimCount--) {
    currStartIndex = absoluteScopedId.lastIndexOf(":", currStartIndex - 1);
    if(currStartIndex == -1) {
      if(trimCount) {
        AdfLogger.LOGGER.warning("Insufficient naming containers for expression:", absoluteScopedId)
      }
      return""
    }
  }
  return absoluteScopedId.substring(0, currStartIndex + 1)
};
AdfUIComponent._findAbsoluteComponent = function(searchScopedId) {
  var thePage = AdfPage.PAGE;
  var matchComponent = thePage.findComponent(searchScopedId);
  if(matchComponent) {
    return matchComponent
  }
  var callbackState = {matchScopedId:searchScopedId, matchComponent:null};
  var ancestorScopedId = searchScopedId;
  var fragmentStart = ancestorScopedId.lastIndexOf(":");
  while(fragmentStart != -1) {
    ancestorScopedId = ancestorScopedId.substring(0, fragmentStart);
    matchComponent = thePage.findComponent(ancestorScopedId);
    if(matchComponent) {
      matchComponent.visitChildren(AdfUIComponent._matchAbsoluteIdCallback, callbackState, false);
      return callbackState.matchComponent
    }
    fragmentStart = ancestorScopedId.lastIndexOf(":")
  }
  return null
};
AdfUIComponent.prototype.findComponentByLocator = function(locator) {
  return AdfUIComponent.__findComponentByLocator(locator, this)
};
AdfUIComponent.__findComponentByLocator = function(locator, component) {
  AdfAssert.assertNonEmptyString(locator);
  var thePage = AdfPage.PAGE;
  return thePage.findComponentByAbsoluteLocator(locator)
};
AdfUIComponent._matchAbsoluteIdCallback = function(component) {
  if(this.matchScopedId == component.getAbsoluteId()) {
    this.matchComponent = component;
    return 2
  }else {
    return 0
  }
};
AdfUIComponent.prototype.isShowing = function() {
  var parent = this.getParent();
  var parentShowing = parent ? parent.isShowing() : true;
  return parentShowing && this.getVisible()
};
AdfUIComponent.prototype.isEventRoot = function() {
  return false
};
AdfUIComponent.prototype.queueEvent = function(event) {
  AdfAssert.assertPrototype(event, AdfBaseEvent);
  AdfPage.PAGE.queueEvent(event)
};
AdfUIComponent.prototype.broadcast = function(event) {
  AdfAssert.assertPrototype(event, AdfBaseEvent);
  var source = event.getSource();
  if(source == this) {
    if(event.getDoesBubbles()) {
      if(event.getEventPhase() == AdfBaseEvent.CAPTURING_PHASE) {
        event.nextEventPhase()
      }
      if(event.getEventPhase() == AdfBaseEvent.AT_TARGET_PHASE) {
        event.setCurrentTarget(source);
        this._deliverEvent(event);
        event.nextEventPhase()
      }
      if(event.getEventPhase() == AdfBaseEvent.BUBBLING_PHASE) {
        this._bubbleEvent(event)
      }
    }else {
      this._deliverEvent(event)
    }
    if(!event.isCanceled()) {
      var peer = this.getPeer();
      var postponed = false;
      if(peer) {
        postponed = peer.DispatchUncanceledComponentEvent(event)
      }
      if(!postponed && !event.isCanceled()) {
        this.HandleEvent(event)
      }
    }
  }else {
    var phase = event.getEventPhase();
    AdfAssert.assert(phase == AdfBaseEvent.BUBBLING_PHASE, "invalid event phase");
    if(phase == AdfBaseEvent.BUBBLING_PHASE) {
      this.HandleBubbledEvent(event);
      this._bubbleEvent(event)
    }
  }
};
AdfUIComponent.prototype.processPushData = function(payload, changeCount) {
  AdfAssert.assert(payload !== undefined);
  AdfAssert.assertNumber(changeCount);
  return this.getPeer().processPushData(this, payload, changeCount)
};
AdfUIComponent.prototype.registerADSAccessibility = function() {
  this.getPeer().registerADSAccessibility(this)
};
AdfUIComponent.prototype.clone = function() {
  var clone = AdfUIComponent.superclass.clone.call(this);
  clone._peer = null;
  clone._source = undefined;
  clone._parent = undefined;
  clone._propChanges = undefined;
  clone._propListeners = null;
  var props = new Object;
  AdfCollections.copyInto(props, this._props);
  clone._props = props;
  return clone
};
AdfUIComponent.prototype.resizeNotify = function(oldWidth, oldHeight, newWidth, newHeight) {
  var peer = this.getPeer();
  if(peer) {
    peer.resizeNotify(this, oldWidth, oldHeight, newWidth, newHeight)
  }
};
AdfUIComponent.prototype.scrollIntoView = function(focus, subTargetId) {
  var peer = this.getPeer();
  if(peer) {
    peer.scrollIntoView(this, focus, subTargetId)
  }
};
AdfUIComponent.prototype._deliverEvent = function(event) {
  AdfAssert.assertPrototype(event, AdfBaseEvent);
  var peer = this.getPeer();
  if(peer) {
    peer.DispatchComponentEvent(event)
  }
  var props = this._getClientListeners();
  if(props) {
    var listeners = props[event.getType()];
    if(listeners) {
      this._deliverEventToListeners(event, listeners)
    }
  }
};
AdfUIComponent.prototype._deliverEventToListeners = function(event, listeners) {
  AdfAssert.assertPrototype(event, AdfBaseEvent);
  if(listeners) {
    if(AdfCollections.isArray(listeners)) {
      var listenerCount = listeners.length;
      for(var i = 0;i < listenerCount;i++) {
        var value = listeners[i];
        var instance;
        var listener;
        if(typeof value == "function") {
          listener = value
        }else {
          instance = value;
          i++;
          listener = listeners[i]
        }
        this._deliverEventToListener(event, instance, listener)
      }
    }else {
      this._deliverEventToListener(event, null, listeners)
    }
  }
};
AdfUIComponent.prototype._deliverEventToListener = function(event, instance, listener) {
  AdfAssert.assertPrototype(event, AdfBaseEvent);
  AdfAssert.assertObjectOrNull(instance);
  AdfAssert.assertFunction(listener);
  try {
    if(instance == null) {
      listener(event)
    }else {
      listener.call(instance, event)
    }
  }catch(e) {
    AdfLogger.LOGGER.logError(e, AdfLogger.WARNING, "Error delivering event:" + event + " to " + listener + " on instance " + instance)
  }
};
AdfUIComponent.prototype._getClientListeners = function() {
  return this._props["clientListeners"]
};
AdfUIComponent.prototype.HandleEvent = function(event) {
  AdfAssert.assert(!event.isCanceled());
  if(event.propagatesToServer()) {
    AdfPage.PAGE.queueEventToServer(event)
  }
};
AdfUIComponent.prototype.HandleBubbledEvent = function(event) {
  if(event.getRoot() === undefined && this.isEventRoot()) {
    event.setRoot(this)
  }
  var peer = this.getPeer();
  if(peer) {
    peer.DispatchComponentEvent(event)
  }
};
AdfUIComponent._initAccessors = function(ourClass, propertyNames, constantSuffix, accessorPrefix, mutatorPrefix) {
  if(!propertyNames) {
    return
  }
  var constantCache = AdfUIComponent._CONSTANT_CACHE;
  var accessorNameCache = AdfUIComponent._ACCESSOR_NAME_CACHE;
  var accessorCache = AdfUIComponent._ACCESSOR_CACHE;
  var mutatorNameCache = AdfUIComponent._MUTATOR_NAME_CACHE;
  var mutatorCache = AdfUIComponent._MUTATOR_CACHE;
  var ourPrototype = ourClass.prototype;
  for(var currProperty in propertyNames) {
    var propertyConstant = constantSuffix ? currProperty + constantSuffix : currProperty;
    var constantName = constantCache[propertyConstant];
    if(!constantName) {
      constantName = AdfStrings.createConstantName(propertyConstant);
      constantCache[propertyConstant] = constantName
    }
    ourPrototype[constantName] = currProperty;
    ourClass[constantName] = currProperty;
    var accessorName = accessorNameCache[propertyConstant];
    var accessorFunction;
    if(!accessorName) {
      accessorName = AdfUIComponent._createAccessorName(currProperty);
      accessorNameCache[propertyConstant] = accessorName;
      var accessorBody = accessorPrefix + "(this." + constantName + ");";
      accessorFunction = new Function(accessorBody);
      accessorCache[propertyConstant] = accessorFunction
    }else {
      accessorFunction = accessorCache[propertyConstant];
      AdfAssert.assertFunction(accessorFunction)
    }
    ourPrototype[accessorName] = accessorFunction;
    var propertyKey = propertyNames[currProperty];
    if(!propertyKey[AdfUIComponent.PROPERTY_KEY_SECURED]) {
      var mutatorName = mutatorNameCache[propertyConstant];
      var mutatorFunction;
      if(!mutatorName) {
        mutatorName = AdfUIComponent._createMutatorName(currProperty);
        mutatorNameCache[propertyConstant] = mutatorName;
        var mutatorBody = mutatorPrefix + "(this." + constantName + ",v);";
        mutatorFunction = new Function("v", mutatorBody);
        mutatorCache[propertyConstant] = mutatorFunction
      }else {
        mutatorFunction = mutatorCache[propertyConstant];
        AdfAssert.assertFunction(mutatorFunction)
      }
      ourPrototype[mutatorName] = mutatorFunction
    }
  }
};
AdfUIComponent.InitClass = function() {
  AdfUIComponent.PROPERTY_KEY_DEFAULT = "default";
  AdfUIComponent.PROPERTY_KEY_SECURED = "secured";
  AdfUIComponent.PROPERTY_DISCONNECTED = "disconnected";
  AdfUIComponent.PROPAGATE_IF_KNOWN_PROPERTY = 0;
  AdfUIComponent.PROPAGATE_ALWAYS = 1;
  AdfUIComponent.PROPAGATE_NEVER = 2;
  AdfUIComponent.PROPAGATE_LOCALLY = 3;
  var subclassPropertyKeys = this.GetSubclassPropertyKeys();
  var superclass = this.superclass.constructor;
  var propertyKeys = superclass[AdfUIComponent._CLASS_PROPERTY_KEYS];
  if(subclassPropertyKeys) {
    AdfUIComponent._initAccessors(this, subclassPropertyKeys, null, "return this.getPropertyValue", "return this.setProperty");
    propertyKeys = propertyKeys ? AdfCollections.union(propertyKeys, subclassPropertyKeys) : subclassPropertyKeys
  }
  this[AdfUIComponent._CLASS_PROPERTY_KEYS] = propertyKeys;
  var subclassInitializer = this["InitSubclass"];
  if(subclassInitializer != null) {
    subclassInitializer.call(this)
  }
};
AdfUIComponent.SetDisconnectedProperty = function(componentClass, propName) {
  AdfUIComponent._setPropertyInfo(componentClass, propName, AdfUIComponent.PROPERTY_DISCONNECTED, true)
};
AdfUIComponent.SetPropertyType = function(componentClass, propName, typeName) {
  AdfUIComponent._setPropertyInfo(componentClass, propName, "type", typeName)
};
AdfUIComponent._setPropertyInfo = function(componentClass, propName, metadataProp, metadataValue) {
  if(propName) {
    var propertyKeys = componentClass[AdfUIComponent._CLASS_PROPERTY_KEYS];
    var propertyMetadaData = propertyKeys[propName];
    if(propertyMetadaData) {
      var superclass = componentClass.superclass;
      if(superclass && propertyKeys === superclass[AdfUIComponent._CLASS_PROPERTY_KEYS]) {
        var newPropertyKeys = {};
        for(var oldMetadata in propertyKeys) {
          newPropertyKeys[oldMetadata] = propertyKeys[oldMetadata]
        }
        componentClass[AdfUIComponent._CLASS_PROPERTY_KEYS] = newPropertyKeys;
        propertyKeys = newPropertyKeys
      }
      if(metadataValue != propertyMetadaData[metadataProp]) {
        var newPropertyMetaData = AdfCollections.copyInto({}, propertyMetadaData);
        newPropertyMetaData[metadataProp] = metadataValue;
        propertyKeys[propName] = newPropertyMetaData
      }
    }
  }
};
AdfUIComponent.prototype.Init = function(componentType, clientId, properties, usageFlags) {
  AdfAssert.assertStringOrNull(componentType);
  AdfAssert.assertStringOrNull(clientId);
  AdfAssert.assertObjectOrNull(properties);
  AdfAssert.assertNumberOrNull(usageFlags);
  AdfUIComponent.superclass.Init.call(this);
  if(componentType != undefined) {
    this._componentType = componentType
  }
  this._clientId = clientId;
  var behaviors;
  if(properties != null) {
    behaviors = properties[AdfUIComponent._BEHAVIORS_KEY]
  }else {
    properties = {}
  }
  this._props = properties;
  if(behaviors) {
    this._initBehaviors(behaviors)
  }
  if(usageFlags) {
    this._componentUsageFlags = usageFlags
  }
};
AdfUIComponent.prototype.SetPropertyImpl = function(propName, oldValue, newValue) {
};
AdfUIComponent.prototype.DeliverDerivedPropertyEvents = function(propName, oldValue, newValue) {
};
AdfUIComponent.GetSubclassPropertyKeys = function() {
  return{"id":{"name":"id", "type":"String", "default":null, "secured":true, "disconnected":true}, "visible":{"name":"visible", "type":"Boolean", "default":true}, "styleClass":{"name":"styleClass", "type":"String", "default":null}, "inlineStyle":{"name":"inlineStyle", "type":"String", "default":null}}
};
AdfUIComponent.prototype.GetChanges = function() {
  var propChanges = this._propChanges;
  var props = this._props;
  var changes = new Object;
  var undefinedValue = AdfUIComponent._DEFAULT_VALUE_UNDEFINED;
  for(var propName in propChanges) {
    if(propChanges[propName]) {
      var propName1 = AdfUIComponent._removePersistedFlag(propName);
      var currValue = props[propName1];
      if(currValue === undefinedValue) {
        currValue = undefined
      }
      changes[propName] = currValue
    }
  }
  return changes
};
AdfUIComponent.prototype.clearChanges = function() {
  this._propChanges = undefined
};
AdfUIComponent.prototype.AddNotify = function() {
  if(!this._peer) {
    var thePage = AdfPage.PAGE;
    var peer = thePage.getLookAndFeel().getPeer(this);
    this._peer = peer;
    peer.initialize(this);
    if(this._dropTarget) {
      thePage.getDnDContext().__addComponentTarget(this)
    }
    if(peer.needsResizeNotify(this)) {
      thePage.registerResizeNotifyComponent(this)
    }
  }
};
AdfUIComponent.prototype.RemoveNotify = function() {
  var thePage = AdfPage.PAGE;
  thePage.removeChangedComponent(this);
  var clientId = this.getClientId();
  thePage.clearMessages(clientId);
  var activeComponentId = thePage.getActiveComponentId();
  if(clientId == activeComponentId) {
    thePage._setActiveComponentId(null)
  }
  var peer = this._peer;
  if(peer) {
    if(this._dropTarget) {
      thePage.getDnDContext().__removeComponentTarget(this)
    }
    if(this._dragSource) {
      thePage.getDnDContext().__removeDragSource(this);
      this._dragSource.__setComponent(null)
    }
    if(peer.needsResizeNotify(this)) {
      thePage.unregisterResizeNotifyComponent(this)
    }
    peer.componentRemoved(this);
    this._peer = null
  }
  var behaviors = this.getBehaviors();
  if(behaviors) {
    this._destroyBehaviors(behaviors)
  }
  this._dead = true
};
AdfUIComponent.prototype._bubbleEvent = function(event) {
  if(event.isBubblingStopped()) {
    return
  }
  var currentTarget = event.getCurrentTarget();
  var parent = currentTarget.getParent();
  if(parent) {
    event.setCurrentTarget(parent);
    parent.broadcast(event)
  }else {
    AdfAgent.AGENT.showTooltip(event)
  }
};
AdfUIComponent.prototype._setSource = function(source) {
  this._source = source
};
AdfUIComponent.prototype.getParent = function() {
  var parent = this._parent;
  if(parent === undefined) {
    var peer = this._peer;
    if(peer != null) {
      parent = peer.getComponentParent(this);
      this._parent = parent
    }
  }
  return parent
};
AdfUIComponent.prototype.getDescendantComponents = function(children) {
  return this.getPeer().getDescendantComponents(this, children)
};
AdfUIComponent.prototype.visitChildren = function(callback, context, ignoreHidden) {
  var peer = this._peer;
  if(peer != null) {
    peer.visitChildren(this, callback, context, ignoreHidden)
  }
  return 0
};
AdfUIComponent.prototype.__setParent = function(newParent) {
  this._parent = newParent
};
AdfUIComponent.prototype.isDescendant = function(possibleAncestor) {
  if(possibleAncestor) {
    var currParent = this.getParent();
    while(currParent) {
      if(currParent == possibleAncestor) {
        return true
      }
      currParent = currParent.getParent()
    }
  }
  return false
};
AdfUIComponent.prototype.focus = function() {
  var peer = this._peer;
  if(peer != null) {
    peer.focus(this)
  }
};
AdfUIComponent.prototype.getDragSource = function() {
  return this._dragSource
};
AdfUIComponent.prototype.setDragSource = function(dragSource) {
  AdfAssert.assertPrototypeOrNull(dragSource, AdfDragSource);
  var oldDragSource = this._dragSource;
  if(oldDragSource) {
    oldDragSource.__setComponent(null)
  }
  this._dragSource = dragSource;
  if(dragSource) {
    dragSource.__setComponent(this)
  }
};
AdfUIComponent.prototype.getDropTarget = function() {
  return this._dropTarget
};
AdfUIComponent.prototype.setDropTarget = function(dropTarget) {
  AdfAssert.assertPrototypeOrNull(dropTarget, AdfDropTarget);
  var oldDropTarget = this._dropTarget;
  if(dropTarget != oldDropTarget) {
    var dndContext = AdfPage.PAGE.getDnDContext();
    if(oldDropTarget) {
      oldDropTarget.__setComponent(null);
      if(this._peer) {
        dndContext.__removeComponentTarget(this)
      }
    }
    this._dropTarget = dropTarget;
    if(dropTarget) {
      dropTarget.__setComponent(this);
      if(this._peer) {
        dndContext.__addComponentTarget(this)
      }
    }
  }
};
AdfUIComponent.prototype.getBehaviors = function(filterCriteria) {
  var behaviors = this._props ? this._props[AdfUIComponent._BEHAVIORS_KEY] : null;
  if(behaviors && filterCriteria) {
    if(behaviors instanceof filterCriteria) {
      return behaviors
    }else {
      if(behaviors instanceof Array) {
        var filteredBehaviors = [];
        for(var i = 0, length = behaviors.length;i < length;i++) {
          if(behaviors[i] instanceof filterCriteria) {
            filteredBehaviors.push(behaviors[i])
          }
        }
        if(filteredBehaviors.length == 0) {
          return null
        }else {
          if(filteredBehaviors.length == 1) {
            return filteredBehaviors[0]
          }else {
            return filteredBehaviors
          }
        }
      }
    }
    return null
  }
  return behaviors
};
AdfUIComponent.prototype.toDebugString = function() {
  var baseString = this.getTypeName() + " [" + this.getComponentType() + "]";
  var id = this.getClientId();
  if(id) {
    baseString += " id=" + id
  }
  if(this._dead) {
    baseString += " , DEAD!"
  }
  return baseString
};
AdfUIComponent.prototype.isDead = function() {
  return this._dead
};
AdfUIComponent.prototype.getPeer = function() {
  return this._peer
};
AdfUIComponent.prototype.ComparePropertyValues = function(propName, oldValue, newValue) {
  var equal = newValue === oldValue;
  if(!equal && newValue != null && oldValue != null) {
    var keys = this.getPropertyKeys();
    var propKey = keys[propName];
    if(propKey != null) {
      var propType = propKey.type;
      if(propType == "Array") {
        equal = AdfUIUtils.compareArrays(oldValue, newValue)
      }else {
        if(AdfObject.prototype.isPrototypeOf(oldValue) && AdfObject.prototype.isPrototypeOf(newValue)) {
          equal = newValue.equals(oldValue)
        }else {
          if(propType == "Object") {
            if(Object.prototype.isPrototypeOf(oldValue) && Object.prototype.isPrototypeOf(newValue)) {
              equal = AdfUIUtils.compareObjects(oldValue, newValue)
            }
          }else {
            if(propType == "Date") {
              equal = oldValue.getTime() == newValue.getTime()
            }
          }
        }
      }
    }
  }
  return equal
};
AdfUIComponent.prototype._initBehaviors = function(behaviors) {
  AdfAssert.assert(behaviors != null);
  if(AdfCollections.isArray(behaviors)) {
    var length = behaviors.length;
    for(var i = 0;i < length;i++) {
      var behavior = behaviors[i];
      AdfAssert.assertFunction(behavior.initialize, "Missing client behvavior initialize()");
      behavior.initialize(this)
    }
  }else {
    AdfAssert.assertFunction(behaviors.initialize, "Missing client behvavior initialize()");
    behaviors.initialize(this)
  }
};
AdfUIComponent.prototype._destroyBehaviors = function(behaviors) {
  if(behaviors instanceof AdfClientBehavior) {
    behaviors.destroy()
  }else {
    for(var i in behaviors) {
      behaviors[i].destroy()
    }
  }
};
AdfUIComponent._createAccessorName = function(propertyName) {
  return"get" + AdfStrings.initUpperCase(propertyName)
};
AdfUIComponent._createMutatorName = function(propertyName, constantName) {
  return"set" + AdfStrings.initUpperCase(propertyName)
};
AdfUIComponent._removePersistedFlag = function(propertyName) {
  var suffixPosition = propertyName.length - 2;
  if(propertyName.lastIndexOf(AdfUIComponent._FLAG_PERSISTENCE) == suffixPosition) {
    return propertyName.substr(0, suffixPosition)
  }
  return propertyName
};
AdfUIComponent.__isNamingContainer = function(constructorFunction) {
  return true === constructorFunction._namingContainer
};
AdfUIComponent.__setNamingContainer = function(constructorFunction, isNC) {
  constructorFunction._namingContainer = isNC
};
AdfUIComponent.prototype.simulateMouse = function(subId, mouseEvent) {
  this.getPeer().simulateMouse(this, subId, mouseEvent)
};
AdfUIComponent._DEFAULT_VALUE_UNDEFINED = new Object;
AdfUIComponent._CLASS_PROPERTY_KEYS = "_propertyKeys";
AdfUIComponent._FLAG_PERSISTENCE = "|p";
AdfUIComponent._CONSTANT_CACHE = new Object;
AdfUIComponent._ACCESSOR_CACHE = new Object;
AdfUIComponent._MUTATOR_CACHE = new Object;
AdfUIComponent._ADD_LISTENER_CACHE = new Object;
AdfUIComponent._REMOVE_LISTENER_CACHE = new Object;
AdfUIComponent._ACCESSOR_NAME_CACHE = new Object;
AdfUIComponent._MUTATOR_NAME_CACHE = new Object;
AdfUIComponent._ADD_LISTENER_NAME_CACHE = new Object;
AdfUIComponent._REMOVE_LISTENER_NAME_CACHE = new Object;
AdfUIComponent._BEHAVIORS_KEY = "behaviors";

var AdfUIComponents = new Object;
AdfUIComponents.CreateArrayToObjectFunction = function(propertyNames) {
  var funcBody = "return {'";
  var propNames = propertyNames.join("':1,'");
  funcBody += propNames + "':1};";
  return new Function(funcBody)
};
AdfUIComponents.CreatePropertiesFunction = function(propertyKeys) {
  var properties = {};
  for(var i = 0;i < propertyKeys.length;i++) {
    var key = propertyKeys[i];
    if(typeof key == "string") {
      key = {"name":key}
    }else {
      AdfAssert.assertObject(key)
    }
    if(!key["type"]) {
      key.type = "Object"
    }
    if(key["default"] === undefined) {
      key["default"] = null
    }
    properties[key.name] = key
  }
  return function() {
    return properties
  }
};
AdfUIComponents._nullFunction = function() {
  return null
};
AdfUIComponents.createComponentClass = function(componentName, componentDef) {
  var conString = "this.Init(" + componentName + "._COMPONENT_TYPE, i, p, u);";
  var constructorFunction = new Function(AdfUIComponents._ID_PARAM_NAME, AdfUIComponents._PROPERTIES_PARAM_NAME, AdfUIComponents._USAGE_PARAM_NAME, conString);
  var componentType = componentDef["componentType"];
  constructorFunction._COMPONENT_TYPE = componentType;
  var theSuperclass = componentDef["superclass"];
  if(!theSuperclass) {
    theSuperclass = AdfUIComponent
  }
  AdfObject.createSubclass(constructorFunction, theSuperclass, componentName);
  if(componentName) {
    window[componentName] = constructorFunction
  }
  var subclassPropertyFunc = AdfUIComponents._nullFunction;
  var propertyKeys = componentDef["propertyKeys"];
  if(propertyKeys && propertyKeys.length) {
    subclassPropertyFunc = AdfUIComponents.CreatePropertiesFunction(propertyKeys)
  }
  var namingContainer = componentDef["namingContainer"];
  if(namingContainer || AdfUIComponent.__isNamingContainer(theSuperclass)) {
    AdfUIComponent.__setNamingContainer(constructorFunction, true)
  }
  constructorFunction.GetSubclassPropertyKeys = subclassPropertyFunc;
  constructorFunction.InitClass = AdfUIComponent.InitClass;
  AdfUIComponent.registerComponent(componentType, constructorFunction);
  return constructorFunction
};
AdfUIComponents._PROPERTIES_PARAM_NAME = "p";
AdfUIComponents._ID_PARAM_NAME = "i";
AdfUIComponents._USAGE_PARAM_NAME = "u";

AdfUIComponents.createComponentClass("AdfUIPopup", {componentType:"oracle.adf.Popup"});

AdfUIPopup.prototype.isEventRoot = function() {
  return true
};
AdfUIPopup.prototype.dontPropagateDescendantMessageChanges = function() {
  return true
};

AdfUIComponents.createComponentClass("AdfRichPopup", {componentType:"oracle.adf.RichPopup", propertyKeys:[{name:"contentDelivery", type:"String", "default":"lazy"}, {name:"animate", type:"String", "default":"default"}, {name:"eventContext", type:"String", "default":"self", secured:true}, {name:"launcherVar", type:"String", secured:true}, "popupFetchListener", "popupCanceledListener", {name:"visible", type:"Boolean", "default":true, secured:true}, {name:"autoCancel", type:"String", "default":"enabled"}, 
{name:"childCreation", type:"String", "default":"immediate"}, {name:"autoDismissalTimeout", type:"Number"}], eventNames:["popupFetch", "popupCanceled"], superclass:AdfUIPopup});

AdfRichPopup.CONTENT_DELIVERY_IMMEDIATE = "immediate";
AdfRichPopup.CONTENT_DELIVERY_LAZY = "lazy";
AdfRichPopup.CONTENT_DELIVERY_LAZY_UNCACHED = "lazyUncached";
AdfRichPopup.HINT_LAUNCH_ID = "launchId";
AdfRichPopup.HINT_TAIL = "tail";
AdfRichPopup.TAIL_NONE = "none";
AdfRichPopup.TAIL_SIMPLE = "simple";
AdfRichPopup.HINT_ALIGN = "align";
AdfRichPopup.ALIGN_AFTER_START = "after_start";
AdfRichPopup.ALIGN_AFTER_END = "after_end";
AdfRichPopup.ALIGN_AFTER_CENTER = "after_center";
AdfRichPopup.ALIGN_BEFORE_START = "before_start";
AdfRichPopup.ALIGN_BEFORE_END = "before_end";
AdfRichPopup.ALIGN_BEFORE_CENTER = "before_center";
AdfRichPopup.ALIGN_END_AFTER = "end_after";
AdfRichPopup.ALIGN_END_BEFORE = "end_before";
AdfRichPopup.ALIGN_END_CENTER = "end_center";
AdfRichPopup.ALIGN_START_AFTER = "start_after";
AdfRichPopup.ALIGN_START_BEFORE = "start_before";
AdfRichPopup.ALIGN_START_CENTER = "start_center";
AdfRichPopup.ALIGN_OVERLAP = "overlap";
AdfRichPopup.ALIGN_OVERLAP_END_BEFORE = "overlap_end_before";
AdfRichPopup.ALIGN_OVERLAP_START_BEFORE = "overlap_start_before";
AdfRichPopup.ALIGN_BEFORE_AFTER = "before_after";
AdfRichPopup.HINT_ALIGN_ID = "alignId";
AdfRichPopup.AUTO_CANCEL_DISABLED = "disabled";
AdfRichPopup.AUTO_CANCEL_ENABLED = "enabled";
AdfRichPopup.ANIMATE_DEFAULT = "default";
AdfRichPopup.ANIMATE_TRUE = "true";
AdfRichPopup.ANIMATE_FALSE = "false";
AdfRichPopup.prototype.show = function(hints) {
  AdfAssert.assertObjectOrNull(hints);
  this.getPeer().show(this, hints)
};
AdfRichPopup.prototype.hide = function() {
  var peer = this.getPeer();
  if(peer.fetchCanceled(this)) {
    AdfLogger.LOGGER.finest("Lazy popup content fetch cancled for popupId ", this.getClientId(), ", because popup hide was called.");
    return
  }
  var isScreenReaderMode = AdfPage.PAGE.isScreenReaderMode();
  if(isScreenReaderMode) {
    this[AdfDhtmlPopupPeer.SKIP_OUT_OF_SCOPE_CHECK] = true
  }
  if(!this.isPopupVisible()) {
    AdfLogger.LOGGER.finest("Popup hide request ignored for popupId ", this.getClientId(), ", because popup is not visible.");
    return
  }
  var menuPeer = this._getFirstMenuPeer(this);
  if(menuPeer) {
    menuPeer.hidePopup()
  }else {
    peer.hide(this)
  }
  if(isScreenReaderMode) {
    delete this[AdfDhtmlPopupPeer.SKIP_OUT_OF_SCOPE_CHECK]
  }
};
AdfRichPopup.prototype.cancel = function() {
  var peer = this.getPeer();
  if(peer.fetchCanceled(this)) {
    AdfLogger.LOGGER.finest("Lazy popup content fetch cancled for popupId ", this.getClientId(), ", because popup cancel was called.");
    return
  }
  var isScreenReaderMode = AdfPage.PAGE.isScreenReaderMode();
  if(isScreenReaderMode) {
    this[AdfDhtmlPopupPeer.SKIP_OUT_OF_SCOPE_CHECK] = true
  }
  if(!this.isPopupVisible()) {
    AdfLogger.LOGGER.finest("Popup cancel request ignored for popupId ", this.getClientId(), ", because popup is not visible.");
    return
  }
  var menuPeer = this._getFirstMenuPeer(this);
  if(menuPeer) {
    menuPeer.cancelPopup()
  }else {
    peer.cancel(this)
  }
  if(isScreenReaderMode) {
    delete this[AdfDhtmlPopupPeer.SKIP_OUT_OF_SCOPE_CHECK]
  }
};
AdfRichPopup.prototype.isPopupVisible = function() {
  var menuPeer = this._getFirstMenuPeer(this);
  if(menuPeer) {
    return menuPeer.isPopupVisible(menuPeer.getComponent(), menuPeer.getComponent().getClientId())
  }else {
    return this.getPeer().isVisible(this)
  }
};
AdfRichPopup.prototype._getFirstMenuPeer = function(component) {
  var menuPeer = null;
  component.visitChildren(this._visitChildrenForMenu, this, true);
  if(this._firstMenuChild) {
    menuPeer = this._firstMenuChild.getPeer();
    delete this._firstMenuChild
  }
  return menuPeer
};
AdfRichPopup.prototype._visitChildrenForMenu = function(component) {
  if(component instanceof AdfRichMenu) {
    this._firstMenuChild = component
  }
  return 2
};

AdfUIComponents.createComponentClass("AdfUIValue", {componentType:"org.apache.myfaces.trinidad.Value", propertyKeys:["value", {name:"converter", type:"Object", secured:true}]});

AdfUIValue.prototype.isConvertible = function() {
  if(this._failedConversion) {
    AdfLogger.LOGGER.info("AdfUIValue.isConvertible: false");
    return false
  }
  return true
};
AdfUIValue.prototype.getValue = function() {
  if(!this.isConvertible()) {
    AdfLogger.LOGGER.info("AdfUIValue.getValue: last attempt to convert failed, returning undefined ", this);
    return undefined
  }else {
    return AdfUIValue.superclass.getValue.call(this)
  }
};
AdfUIValue.prototype.GetConvertedValue = function(value) {
  AdfLogger.LOGGER.fine("Converting: ", value);
  var newValue = this.getPeer().getConvertedValue(this, value);
  if(newValue === undefined) {
    this._failedConversion = true
  }else {
    this._failedConversion = false
  }
  return newValue
};
AdfUIValue.prototype.SetPropertyImpl = function(propName, oldValue, newValue) {
  if(propName == AdfUIValue.VALUE) {
    this._failedConversion = false
  }
  AdfUIValue.superclass.SetPropertyImpl.call(this, propName, oldValue, newValue)
};
AdfUIValue.prototype.GetChanges = function() {
  var changes = AdfUIValue.superclass.GetChanges.call(this);
  var value = changes[AdfUIValue.VALUE];
  if(!(value === undefined)) {
    delete changes[AdfUIValue.VALUE];
    if(value != null) {
      var converter = this.getConverter();
      if(converter != null) {
        value = converter.getAsString(value);
        if(value === undefined) {
          return changes
        }
      }
    }
    changes["_unconvertedValue"] = value
  }
  return changes
};

AdfUIComponents.createComponentClass("AdfUIOutput", {componentType:"org.apache.myfaces.trinidad.Output", superclass:AdfUIValue});

AdfUIComponents.createComponentClass("AdfRichOutputLabel", {componentType:"oracle.adf.RichOutputLabel", propertyKeys:[{name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true}, {name:"accessKey", type:"String"}, {name:"for", type:"String"}, {name:"showRequired", type:"Boolean", "default":false}], superclass:AdfUIOutput});

AdfUIComponents.createComponentClass("AdfUIEditableValue", {componentType:"org.apache.myfaces.trinidad.EditableValue", propertyKeys:[{name:"immediate", type:"Boolean", "default":false, secured:true}, {name:"valid", type:"Boolean", "default":true, secured:true}, {name:"required", type:"Boolean", "default":false, secured:true}, {name:"localValueSet", type:"Boolean", secured:true}, {name:"submittedValue", type:"Object", secured:true}, {name:"requiredMessageDetail", type:"String", secured:true}, {name:"protectionKey", 
type:"String", secured:true}], eventNames:["valueChange"], superclass:AdfUIValue});

AdfUIEditableValue.InitSubclass = function() {
  AdfUIComponent.SetDisconnectedProperty(this, AdfUIValue.VALUE);
  AdfUIComponent.SetDisconnectedProperty(this, AdfUIEditableValue.SUBMITTED_VALUE);
  AdfUIComponent.SetDisconnectedProperty(this, AdfUIEditableValue.VALID)
};
AdfUIEditableValue.prototype.isEventRoot = function() {
  return true
};
AdfUIEditableValue.prototype.resetValue = function() {
  this.setProperty("submittedValue", undefined);
  this.setProperty("value", null);
  this.setProperty("valid", true);
  AdfPage.PAGE.clearMessages(this.getClientId())
};
AdfUIEditableValue.prototype.validate = function(submittedValue) {
  if(submittedValue == null) {
    submittedValue = this.getSubmittedValue();
    if(submittedValue == null) {
      return
    }
  }
  this.setProperty("valid", true);
  var newValue = null;
  try {
    newValue = this.GetConvertedValue(submittedValue)
  }catch(e) {
    this.setProperty("valid", false);
    if(typeof e["getFacesMessage"] == "function") {
      this._addFacesMessage(e.getFacesMessage(), this.getLabel())
    }else {
      AdfLogger.LOGGER.logErrorAsSevere(e, "Unexpected exception occured while converting the submitted value: '" + submittedValue + "'.")
    }
  }
  if(newValue === undefined) {
    AdfLogger.LOGGER.info("AdfUIEditableValue.validate: converter not able to do conversion");
    if(this.getRequired() && this.getPeer().isEmpty && this.getPeer().isEmpty(submittedValue)) {
      this.setProperty("valid", false);
      this._addRequiredFacesMessage();
      return
    }
    AdfPage.PAGE.markDirty(this.getClientId());
    if(this.getAutoSubmit() && this.getPeer().autoSubmit) {
      this.getPeer().autoSubmit(this)
    }
  }else {
    this.ValidateValue(newValue);
    var previous = this.getProperty(AdfUIValue.VALUE);
    var isPreviousEmpty = this.IsEmpty(previous);
    var isCurrentEmpty = this.IsEmpty(newValue);
    if(!isPreviousEmpty || !isCurrentEmpty) {
      if(this.getValid()) {
        var oldValue = this.setProperty(AdfUIValue.VALUE, newValue);
        if(this.ComparePropertyValues(AdfUIValue.VALUE, oldValue, newValue)) {
          var peer = this.getPeer();
          var convertedValue = peer.getConvertedObject(this, newValue);
          if(submittedValue != convertedValue) {
            peer.setDisplayValue(this, convertedValue)
          }
        }
      }else {
        AdfPage.PAGE.markDirty(this.getClientId())
      }
    }
  }
};
AdfUIEditableValue.prototype.getValue = function() {
  if(!this.getValid()) {
    AdfLogger.LOGGER.info("AdfUIEditableValue.getValue: valid is false, undefined will be returned for component ", this);
    return null
  }else {
    return AdfUIEditableValue.superclass.getValue.call(this)
  }
};
AdfUIEditableValue.prototype.setValue = function(value) {
  var readOnly = this.getReadOnly();
  var disabled = this.getDisabled();
  if(readOnly || disabled) {
    AdfLogger.LOGGER.warning("AdfUIEditableValue.setValue called when readOnly or disabled true. New value ignored.")
  }else {
    this.setProperty("valid", true);
    AdfUIEditableValue.superclass.setValue.call(this, value)
  }
};
AdfUIEditableValue.prototype.getValidators = function() {
  return this.getProperty("validators")
};
AdfUIEditableValue.prototype.addValidator = function(validator) {
  AdfAssert.assertObject(validator);
  var validators = this.getValidators();
  if(validators === undefined) {
    validators = new Array
  }
  validators.push(validator);
  this.setProperty("validators", validators, false)
};
AdfUIEditableValue.prototype.DeliverDerivedPropertyEvents = function(propName, oldValue, newValue) {
  if(propName == AdfUIValue.VALUE) {
    var isAutoSubmit = this.getAutoSubmit();
    AdfValueChangeEvent.queue(this, oldValue, newValue, isAutoSubmit)
  }
  AdfUIEditableValue.superclass.DeliverDerivedPropertyEvents.call(this, propName, oldValue, newValue)
};
AdfUIEditableValue.prototype.SetPropertyImpl = function(propName, oldValue, newValue) {
  if(propName == AdfUIEditableValue.SUBMITTED_VALUE && newValue != undefined) {
    AdfLogger.LOGGER.severe("AdfUIEditableValue: do not set the submittedValue property. The submittedValue property should come from the dom.")
  }
  AdfUIEditableValue.superclass.SetPropertyImpl.call(this, propName, oldValue, newValue)
};
AdfUIEditableValue.prototype.ValidateValue = function(value) {
  if(!this.getValid()) {
    return
  }
  var isEmptyValue = this.IsEmpty(value);
  if(isEmptyValue && this.getRequired()) {
    this._addRequiredFacesMessage();
    this.setProperty("valid", false)
  }
  if(!isEmptyValue || AdfPage.PAGE.shouldValidateEmptyFields()) {
    var validators = this.getValidators();
    if(validators != null) {
      for(var i = 0;i < validators.length;i++) {
        var validator = validators[i];
        try {
          validator.validate(value, this.getProperty("label"), this.getConverter())
        }catch(e) {
          this.setProperty("valid", false);
          this._addFacesMessage(e.getFacesMessage(), this.getLabel())
        }
      }
    }
  }
};
AdfUIEditableValue.prototype.IsEmpty = function(value) {
  if(value == null) {
    return true
  }
  value = AdfUIUtils.trim(value);
  return value.length == 0
};
AdfUIEditableValue.prototype.GetRequiredKey = function() {
  return"org.apache.myfaces.trinidad.UIXEditableValue.REQUIRED"
};
AdfUIEditableValue.prototype._addRequiredFacesMessage = function() {
  var requiredKey = this.GetRequiredKey();
  var requiredDetail = this.getRequiredMessageDetail();
  var label = this.getLabel();
  var message = TrMessageFactory.createFacesMessage(requiredKey, requiredDetail, label);
  this._addFacesMessage(message, label)
};
AdfUIEditableValue.prototype._addFacesMessage = function(message, label) {
  var clientId = this.getClientId();
  var page = AdfPage.PAGE;
  page.addMessage(clientId, message, label)
};

AdfUIComponents.createComponentClass("AdfUIForm", {componentType:"org.apache.myfaces.trinidad.Form", propertyKeys:[]});

AdfUIComponents.createComponentClass("AdfRichForm", {componentType:"oracle.adf.RichForm", propertyKeys:[{name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true}, {name:"usesUpload", type:"Boolean", "default":false, secured:true}, {name:"defaultCommand", type:"String"}], superclass:AdfUIForm});

AdfUIComponents.createComponentClass("AdfUISubform", {componentType:"org.apache.myfaces.trinidad.Subform", propertyKeys:[{name:"default", type:"Boolean", "default":false, secured:true}], namingContainer:true});

AdfUIComponents.createComponentClass("AdfRichSubform", {componentType:"oracle.adf.RichSubform", propertyKeys:[{name:"defaultCommand", type:"String"}], namingContainer:true, superclass:AdfUISubform});

AdfUIComponents.createComponentClass("AdfUIMessage", {componentType:"org.apache.myfaces.trinidad.Message", propertyKeys:[{name:"for", type:"String", secured:true}]});

AdfUIComponents.createComponentClass("AdfRichMessage", {componentType:"oracle.adf.RichMessage", propertyKeys:[{name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true}, {name:"message", type:"String"}, {name:"messageType", type:"String", "default":"none"}], superclass:AdfUIMessage});

AdfUIComponents.createComponentClass("AdfUIDocument", {componentType:"org.apache.myfaces.trinidad.Document"});

AdfUIComponents.createComponentClass("AdfRichDocument", {componentType:"oracle.adf.RichDocument", propertyKeys:[{name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true}, {name:"theme", type:"String"}, {name:"title", type:"String"}, {name:"stateSaving", type:"String", "default":"default"}, {name:"initialFocusId", type:"String", secured:true}, {name:"failedConnectionText", 
type:"String", secured:true}, {name:"maximized", type:"Boolean", "default":true}, {name:"uncommittedDataWarning", type:"String", "default":"off"}, {name:"smallIconSource", type:"String", secured:true}, {name:"largeIconSource", type:"String", secured:true}], superclass:AdfUIDocument});

AdfUIComponents.createComponentClass("AdfUIPanel", {componentType:"org.apache.myfaces.trinidad.Panel"});

AdfUIComponents.createComponentClass("AdfRichMenu", {componentType:"oracle.adf.RichMenu", propertyKeys:[{name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true}, {name:"iconDelivery", type:"String", "default":"auto"}, {name:"contentDelivery", type:"String", "default":"immediate"}, {name:"disabled", type:"Boolean", "default":false, secured:true}, {name:"text", 
type:"String"}, {name:"accessKey", type:"String"}, {name:"detachable", type:"Boolean", "default":false}, {name:"icon", type:"String"}], superclass:AdfUIPanel});

AdfRichMenu.prototype.show = function(hints) {
  AdfAssert.assertObjectOrNull(hints);
  this.getPeer().show(this, hints)
};
AdfRichMenu.prototype.isContentLoaded = function() {
  return this.getPeer().isContentLoaded(this)
};

function AdfActionEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfActionEvent, AdfComponentEvent);
AdfActionEvent.ACTION_EVENT_TYPE = "action";
AdfActionEvent.prototype.Init = function(source) {
  AdfAssert.assertPrototype(source, AdfUIComponent);
  AdfActionEvent.superclass.Init.call(this, source, AdfActionEvent.ACTION_EVENT_TYPE)
};
AdfActionEvent.prototype.propagatesToServer = function() {
  return true
};
AdfActionEvent.prototype.isValidationNeeded = function() {
  return true
};
AdfActionEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};
AdfActionEvent.queue = function(component, partial) {
  (new AdfActionEvent(component)).queue(partial)
};

function AdfDisclosureEvent(source, isExpanded, disclosureCounterpart, propagatesToServer) {
  this.Init(source, isExpanded, disclosureCounterpart, propagatesToServer)
}
AdfObject.createSubclass(AdfDisclosureEvent, AdfComponentEvent);
AdfDisclosureEvent.EVENT_TYPE = "disclosure";
AdfDisclosureEvent.prototype.Init = function(source, isExpanded, disclosureCounterpart, propagatesToServer) {
  AdfAssert.assertPrototype(source, AdfUIComponent);
  AdfAssert.assertBoolean(isExpanded);
  AdfDisclosureEvent.superclass.Init.call(this, source, AdfDisclosureEvent.EVENT_TYPE);
  this._isExpanded = isExpanded;
  this._disclosureCounterpart = disclosureCounterpart;
  this._propagatesToServer = propagatesToServer !== undefined ? propagatesToServer : isExpanded || !disclosureCounterpart;
  this.setRoot(source)
};
AdfDisclosureEvent.prototype.isExpanded = function() {
  return this._isExpanded
};
AdfDisclosureEvent.prototype.getDisclosureCounterpart = function() {
  return this._disclosureCounterpart
};
AdfDisclosureEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.expand = this._isExpanded
};
AdfDisclosureEvent.prototype.propagatesToServer = function() {
  return this._propagatesToServer
};
AdfDisclosureEvent.prototype.isValidationNeeded = function() {
  if(this.isExpanded()) {
    return false
  }
  return true
};
AdfDisclosureEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};

function AdfMaximizeEvent(source, isMaximized, propagatesToServer) {
  this.Init(source, isMaximized, propagatesToServer)
}
AdfObject.createSubclass(AdfMaximizeEvent, AdfComponentEvent);
AdfMaximizeEvent.EVENT_TYPE = "maximize";
AdfMaximizeEvent.prototype.Init = function(source, isMaximized, propagatesToServer) {
  AdfAssert.assertPrototype(source, AdfUIComponent);
  AdfAssert.assertBoolean(isMaximized);
  this._propagatesToServer = propagatesToServer !== false;
  this._isMaximized = isMaximized;
  AdfMaximizeEvent.superclass.Init.call(this, source, AdfMaximizeEvent.EVENT_TYPE);
  this.setRoot(null)
};
AdfMaximizeEvent.prototype.isMaximized = function() {
  return this._isMaximized
};
AdfMaximizeEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.maximized = this._isMaximized
};
AdfMaximizeEvent.prototype.propagatesToServer = function() {
  return this._propagatesToServer
};
AdfMaximizeEvent.prototype.isValidationNeeded = function() {
  return false
};
AdfMaximizeEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};

function AdfDialogEvent(source, outcome) {
  this.Init(source, outcome)
}
AdfObject.createSubclass(AdfDialogEvent, AdfComponentEvent);
AdfDialogEvent.EVENT_TYPE = "dialog";
AdfDialogEvent.OUTCOME_OK = "ok";
AdfDialogEvent.OUTCOME_YES = "yes";
AdfDialogEvent.OUTCOME_NO = "no";
AdfDialogEvent.OUTCOME_CANCEL = "cancel";
AdfDialogEvent.prototype.Init = function(source, outcome) {
  AdfDialogEvent.superclass.Init.call(this, source, AdfDialogEvent.EVENT_TYPE);
  this._outcome = outcome;
  this.setPartial(true)
};
AdfDialogEvent.prototype.getOutcome = function() {
  return this._outcome
};
AdfDialogEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.outcome = this._outcome
};
AdfDialogEvent.prototype.propagatesToServer = function() {
  return this.getOutcome() != AdfDialogEvent.OUTCOME_CANCEL
};
AdfDialogEvent.prototype.isValidationNeeded = AdfDialogEvent.prototype.propagatesToServer;

function AdfLaunchPopupEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfLaunchPopupEvent, AdfComponentEvent);
AdfLaunchPopupEvent.LAUNCH_EVENT_TYPE = "launchPopup";
AdfLaunchPopupEvent.prototype.propagatesToServer = function() {
  return true
};
AdfLaunchPopupEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};
AdfLaunchPopupEvent.prototype.Init = function(source) {
  AdfLaunchPopupEvent.superclass.Init.call(this, source, AdfLaunchPopupEvent.LAUNCH_EVENT_TYPE);
  this.setRoot(source)
};
AdfLaunchPopupEvent.queue = function(component, partial) {
  (new AdfLaunchPopupEvent(component)).queue(partial)
};

function AdfReturnPopupDataEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfReturnPopupDataEvent, AdfComponentEvent);
AdfReturnPopupDataEvent.LAUNCH_EVENT_TYPE = "returnPopupData";
AdfReturnPopupDataEvent.prototype.Init = function(source) {
  AdfReturnPopupDataEvent.superclass.Init.call(this, source, AdfReturnPopupDataEvent.LAUNCH_EVENT_TYPE);
  this.setRoot(source)
};
AdfReturnPopupDataEvent.prototype.propagatesToServer = function() {
  return false
};
AdfReturnPopupDataEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};
AdfReturnPopupDataEvent.queue = function(component, partial) {
  (new AdfReturnPopupDataEvent(component)).queue(partial)
};

function AdfPollEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfPollEvent, AdfComponentEvent);
AdfPollEvent.POLL_EVENT_TYPE = "poll";
AdfPollEvent.prototype.Init = function(source) {
  AdfAssert.assertPrototype(source, AdfUIComponent);
  AdfPollEvent.superclass.Init.call(this, source, AdfPollEvent.POLL_EVENT_TYPE);
  this.setPartial(true);
  if(source.getImmediate && source.getImmediate()) {
    this.setRoot(source)
  }
};
AdfPollEvent.prototype.propagatesToServer = function() {
  return true
};
AdfPollEvent.queue = function(component) {
  (new AdfPollEvent(component)).queue()
};
AdfPollEvent.prototype.getClearMessages = function() {
  var source = this.getSource();
  if(source.getImmediate && source.getImmediate()) {
    return false
  }
  return AdfPollEvent.superclass.getClearMessages.call(this)
};
AdfPollEvent.prototype.isResponseAnnounced = function() {
  return false
};

function AdfPopupCanceledEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfPopupCanceledEvent, AdfComponentEvent);
AdfPopupCanceledEvent.POPUP_CANCELED_EVENT_TYPE = "popupCanceled";
AdfPopupCanceledEvent._OPTIMIZED_PROPAGATION_PROPERTY = "_hasPopupCanceledListeners";
AdfPopupCanceledEvent.prototype.Init = function(source) {
  AdfPopupCanceledEvent.superclass.Init.call(this, source, AdfPopupCanceledEvent.POPUP_CANCELED_EVENT_TYPE);
  this.setRoot(source)
};
AdfPopupCanceledEvent.prototype.propagatesToServer = function() {
  var propagatesToServer = this._propagatesToServer;
  if(!propagatesToServer) {
    var propertyName = AdfPopupCanceledEvent._OPTIMIZED_PROPAGATION_PROPERTY;
    var source = this.getSource();
    this._propagatesToServer = propagatesToServer = source.getProperty(propertyName) ? true : false
  }
  return propagatesToServer
};
AdfPopupCanceledEvent.prototype.IsDeleveryDiscrete = function() {
  return true
};
AdfPopupCanceledEvent.prototype.isImmediate = function() {
  return true
};
AdfPopupCanceledEvent.prototype.getClearMessages = function() {
  return false
};

function AdfPopupClosedEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfPopupClosedEvent, AdfComponentEvent);
AdfPopupClosedEvent.POPUP_CLOSED_EVENT_TYPE = "popupClosed";
AdfPopupClosedEvent.prototype.Init = function(source) {
  AdfPopupClosedEvent.superclass.Init.call(this, source, AdfPopupClosedEvent.POPUP_CLOSED_EVENT_TYPE)
};
AdfPopupClosedEvent.prototype.isCancelable = function() {
  return false
};

function AdfPopupOpeningEvent(source, hints) {
  this.Init(source, hints)
}
AdfObject.createSubclass(AdfPopupOpeningEvent, AdfComponentEvent);
AdfPopupOpeningEvent.POPUP_OPENING_EVENT_TYPE = "popupOpening";
AdfPopupOpeningEvent.prototype.Init = function(source, hints) {
  AdfPopupOpeningEvent.superclass.Init.call(this, source, AdfPopupOpeningEvent.POPUP_OPENING_EVENT_TYPE);
  this._hints = hints
};
AdfPopupOpeningEvent.prototype.getHints = function() {
  return this._hints
};

function AdfPopupOpenedEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfPopupOpenedEvent, AdfComponentEvent);
AdfPopupOpenedEvent.POPUP_OPENED_EVENT_TYPE = "popupOpened";
AdfPopupOpenedEvent.prototype.Init = function(source) {
  AdfPopupOpenedEvent.superclass.Init.call(this, source, AdfPopupOpenedEvent.POPUP_OPENED_EVENT_TYPE)
};
AdfPopupOpenedEvent.prototype.isCancelable = function() {
  return false
};

function AdfQueryEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfQueryEvent, AdfComponentEvent);
AdfQueryEvent.EVENT_TYPE = "query";
AdfQueryEvent.prototype.Init = function(source) {
  AdfAssert.assertPrototype(source, AdfUIComponent);
  AdfQueryEvent.superclass.Init.call(this, source, AdfQueryEvent.EVENT_TYPE);
  this.setPartial(true);
  this.setRoot(source)
};
AdfQueryEvent.prototype.setClearAll = function(clearAll) {
  this._clearAll = clearAll
};
AdfQueryEvent.prototype.isClearAll = function() {
  return this._clearAll
};
AdfQueryEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.clearAll = this._clearAll
};
AdfQueryEvent.prototype.propagatesToServer = function() {
  return true
};
AdfQueryEvent.queue = function(component, partial) {
  (new AdfQueryEvent(component)).queue(partial)
};

function AdfQueryOperationEvent(source, operation, value) {
  this.Init(source, operation, value)
}
AdfObject.createSubclass(AdfQueryOperationEvent, AdfComponentEvent);
AdfQueryOperationEvent.EVENT_TYPE = "queryOperation";
AdfQueryOperationEvent.OPERATION_CREATE = "CREATE";
AdfQueryOperationEvent.OPERATION_DELETE = "DELETE";
AdfQueryOperationEvent.OPERATION_DUPLICATE = "DUPLICATE";
AdfQueryOperationEvent.OPERATION_MODE_CHANGE = "MODE_CHANGE";
AdfQueryOperationEvent.OPERATION_RESET = "RESET";
AdfQueryOperationEvent.OPERATION_SELECT = "SELECT";
AdfQueryOperationEvent.OPERATION_UPDATE = "UPDATE";
AdfQueryOperationEvent.OPERATION_OVERRIDE = "OVERRIDE";
AdfQueryOperationEvent.OPERATION_REORDER_FIELDS = "REORDER_FIELDS";
AdfQueryOperationEvent.OPERATION_ADDFIELDS = "ADD_FIELDS";
AdfQueryOperationEvent.prototype.Init = function(source, operation, value) {
  AdfAssert.assertPrototype(source, AdfUIComponent);
  AdfQueryOperationEvent.superclass.Init.call(this, source, AdfQueryOperationEvent.EVENT_TYPE);
  this._operation = operation;
  this._value = value;
  this.setPartial(true);
  this.setRoot(source)
};
AdfQueryOperationEvent.prototype.getOperation = function() {
  return this._operation
};
AdfQueryOperationEvent.prototype.getValue = function() {
  return this._value
};
AdfQueryOperationEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.operation = this._operation;
  if(this._value != null && this._value != "") {
    properties.value = this._value
  }
};
AdfQueryOperationEvent.prototype.propagatesToServer = function() {
  return true
};
AdfQueryOperationEvent.queue = function(component, operation, value, partial) {
  (new AdfQueryOperationEvent(component, operation, value)).queue(partial)
};

function AdfReturnEvent(source) {
  this.Init(source)
}
AdfObject.createSubclass(AdfReturnEvent, AdfComponentEvent);
AdfReturnEvent.RETURN_EVENT_TYPE = "return";
AdfReturnEvent.prototype.Init = function(source) {
  AdfReturnEvent.superclass.Init.call(this, source, AdfReturnEvent.RETURN_EVENT_TYPE);
  this.setPartial(true);
  this.setRoot(source)
};
AdfReturnEvent.prototype.propagatesToServer = function() {
  return true
};

function AdfReturnPopupEvent(source, value) {
  this.Init(source, value)
}
AdfObject.createSubclass(AdfReturnPopupEvent, AdfComponentEvent);
AdfReturnPopupEvent.RETURN_POPUP_TYPE = "returnPopup";
AdfReturnPopupEvent.prototype.Init = function(source, value) {
  AdfReturnPopupEvent.superclass.Init.call(this, source, AdfReturnPopupEvent.RETURN_POPUP_TYPE);
  this._value = value;
  this.setRoot(source);
  this.setPartial(true)
};
AdfReturnPopupEvent.prototype.getValue = function() {
  return this._value
};
AdfReturnPopupEvent.prototype.toDebugString = function() {
  var superString = AdfReturnPopupEvent.superclass.toDebugString.call(this);
  return superString.substring(0, superString.length - 1) + ", value=" + this._value + "]"
};
AdfReturnPopupEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.value = this._value
};
AdfReturnPopupEvent.prototype.propagatesToServer = function() {
  return true
};
AdfReturnPopupEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};
AdfReturnPopupEvent.queue = function(component, value, partial) {
  (new AdfReturnPopupEvent(component, value)).queue(partial)
};

function AdfValueChangeEvent(source, oldValue, newValue, autoSubmit) {
  this.Init(source, oldValue, newValue, autoSubmit)
}
AdfObject.createSubclass(AdfValueChangeEvent, AdfComponentEvent);
AdfValueChangeEvent.VALUE_CHANGE_TYPE = "valueChange";
AdfValueChangeEvent.prototype.getOldValue = function() {
  return this._oldValue
};
AdfValueChangeEvent.prototype.getNewValue = function() {
  return this._newValue
};
AdfValueChangeEvent.prototype.isValidationNeeded = function() {
  return this._autoSubmit == true
};
AdfValueChangeEvent.prototype.isImmediate = function() {
  var source = this.getSource();
  return source.getImmediate && source.getImmediate()
};
AdfValueChangeEvent.prototype.toDebugString = function() {
  var superString = AdfValueChangeEvent.superclass.toDebugString.call(this);
  return superString.substring(0, superString.length - 1) + ", oldValue=" + this._oldValue + ", newValue=" + this._newValue + "]"
};
AdfValueChangeEvent.prototype.Init = function(source, oldValue, newValue, autoSubmit) {
  AdfValueChangeEvent.superclass.Init.call(this, source, AdfValueChangeEvent.VALUE_CHANGE_TYPE);
  this._oldValue = oldValue;
  this._newValue = newValue;
  this._autoSubmit = autoSubmit;
  this.setRoot(source)
};
AdfValueChangeEvent.prototype.propagatesToServer = function() {
  return this._autoSubmit == true
};
AdfValueChangeEvent.prototype.getClearMessages = function() {
  return true
};
AdfValueChangeEvent.queue = function(component, oldValue, newValue, autoSubmit) {
  (new AdfValueChangeEvent(component, oldValue, newValue, autoSubmit)).queue(true)
};
AdfValueChangeEvent.prototype.getShowMessages = function() {
  return AdfPage.PAGE.isScreenReaderMode()
};
AdfValueChangeEvent.prototype.getMaxTimeBeforePropagation = function() {
  if(AdfPage.PAGE.getDomWindow().AdfUIInputPopup && this.getSource() instanceof AdfUIInputPopup) {
    return 200
  }
  return AdfValueChangeEvent.superclass.getMaxTimeBeforePropagation.call(this)
};
AdfValueChangeEvent.prototype.AddMarshalledProperties = function(properties) {
  AdfValueChangeEvent.superclass.AddMarshalledProperties.call(this, properties);
  if(this._autoSubmit == true) {
    properties["autoSubmit"] = true
  }
};

function AdfSortEvent(source, properties, orders) {
  this.Init(source, null, properties, orders)
}
AdfObject.createSubclass(AdfSortEvent, AdfComponentEvent);
AdfSortEvent.SORT_EVENT_TYPE = "sort";
AdfSortEvent.prototype.Init = function(source, type, properties, orders) {
  AdfSortEvent.superclass.Init.call(this, source, AdfSortEvent.SORT_EVENT_TYPE);
  this.setPartial(true);
  if(!(properties instanceof Array)) {
    this._properties = [properties];
    this._orders = [orders]
  }else {
    this._properties = properties;
    this._orders = orders
  }
  this.setRoot(source)
};
AdfSortEvent.prototype.getProperty = function(i) {
  var properties = this._properties, property = null;
  if(!i) {
    property = properties[0]
  }else {
    if(i > 0 && i < properties.length) {
      property = properties[i]
    }
  }
  return property
};
AdfSortEvent.prototype.setProperty = function(property, i) {
  if(!i) {
    this._properties[0] = property
  }else {
    this._properties[i] = property
  }
};
AdfSortEvent.prototype.getCriteriaCount = function() {
  return this._properties.length
};
AdfSortEvent.prototype.getOrder = function(i) {
  var orders = this._orders, order = null;
  if(!i) {
    order = orders[0]
  }else {
    if(i > 0 && i < orders.length) {
      order = orders[i]
    }
  }
  return order
};
AdfSortEvent.prototype.setOrder = function(order, i) {
  if(!i) {
    this._orders[0] = order
  }else {
    this._orders[i] = order
  }
};
AdfSortEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.orders = this._orders;
  properties.properties = this._properties
};
AdfSortEvent.prototype.propagatesToServer = function() {
  return true
};
AdfSortEvent.prototype.isValidationNeeded = function() {
  return true
};
AdfSortEvent.prototype.isImmediate = function() {
  return this.getSource().getImmediate()
};

function AdfItemEvent(source, itemAction) {
  this.Init(source, itemAction)
}
AdfObject.createSubclass(AdfItemEvent, AdfComponentEvent);
AdfItemEvent.ITEM_EVENT_TYPE = "item";
AdfItemEvent.ITEM_ACTION_REMOVE = "remove";
AdfItemEvent.prototype.Init = function(source, itemAction) {
  AdfItemEvent.superclass.Init.call(this, source, AdfItemEvent.ITEM_EVENT_TYPE);
  AdfAssert.assert(itemAction, "itemAction must be specified");
  this._itemAction = itemAction
};
AdfItemEvent.prototype.getItemAction = function() {
  return this._itemAction
};
AdfItemEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.itemAction = this._itemAction
};
AdfItemEvent.prototype.propagatesToServer = function() {
  return true
};
AdfItemEvent.prototype.isCancelable = function() {
  return true
};
AdfItemEvent.queueItemRemoveEvent = function(component) {
  var event = new AdfItemEvent(component, AdfItemEvent.ITEM_ACTION_REMOVE);
  event.queue(true)
};

function AdfScrollEvent(source, type, event, scrollStart, scrollTop) {
  this.Init(source, type, event, scrollStart, scrollTop)
}
AdfObject.createSubclass(AdfScrollEvent, AdfDomComponentEvent);
AdfScrollEvent.prototype.Init = function(source, type, event, scrollStart, scrollTop) {
  AdfScrollEvent.superclass.Init.call(this, source, type, event);
  this._scrollStart = parseInt(scrollStart);
  this._scrollStart = this._scrollStart < 0 ? this._scrollStart * -1 : this._scrollStart;
  this._scrollTop = scrollTop
};
AdfScrollEvent.prototype.getScrollStart = function() {
  return this._scrollStart
};
AdfScrollEvent.prototype.getScrollTop = function() {
  return this._scrollTop
};

function AdfSafariUIInputEvent(sourceComponent, type, event) {
  this.Init(sourceComponent, type, event)
}
AdfObject.createSubclass(AdfSafariUIInputEvent, AdfDomUIInputEvent);
AdfSafariUIInputEvent.prototype.clone = function() {
  var myClone = AdfSafariUIInputEvent.superclass.clone.call(this);
  var cloneNativeEvent = myClone.Event;
  if(cloneNativeEvent && !cloneNativeEvent.target && this.Event.target) {
    myClone._target = this.Event.target
  }
  return myClone
};
AdfSafariUIInputEvent.prototype.getNativeEventTarget = function() {
  return AdfSafariUIInputEvent.superclass.getNativeEventTarget.call(this) || this._target
};
AdfSafariUIInputEvent.prototype.getOffsetX = function() {
  var eventTarget = this.getNativeEventTarget();
  return this.getClientX() - AdfAgent.AGENT.getElementLeft(eventTarget)
};
AdfSafariUIInputEvent.prototype.getOffsetY = function() {
  var eventTarget = this.getNativeEventTarget();
  return this.getClientY() - AdfAgent.AGENT.getElementTop(eventTarget)
};

function AdfDragSource(allowedActions, defaultAction) {
  if(arguments.length) {
    this.Init(allowedActions, defaultAction)
  }
}
AdfObject.createSubclass(AdfDragSource);
AdfDragSource.prototype.Init = function(allowedActions, defaultAction) {
  AdfDragSource.superclass.Init.call(this);
  if(allowedActions == undefined) {
    allowedActions = defaultAction;
    if(allowedActions == undefinded) {
      allowedActions = AdfDnDContext.ACTION_COPY
    }
  }
  AdfAssert.assertNumeric(allowedActions);
  AdfAssert.assert(allowedActions != AdfDnDContext.ACTION_NONE, "allowed actions must be specified");
  AdfAssert.assert((allowedActions & ~AdfDnDContext.ACTIONS_ALL) == 0, "invalid allowedActions:" + allowedActions);
  if(defaultAction == undefined) {
    defaultAction = allowedActions & AdfDnDContext.ACTION_COPY ? AdfDnDContext.ACTION_COPY : allowedActions & AdfDnDContext.ACTION_MOVE ? AdfDnDContext.ACTION_MOVE : AdfDnDContext.ACTION_LINK
  }
  AdfAssert.assert((allowedActions & defaultAction) != 0, "Default action not an allowed action");
  this._allowedActions = allowedActions;
  this._defaultAction = defaultAction;
  this._dragRecognizer = this.CreateDragRecognizer();
  this._component = null
};
AdfDragSource.prototype.initiateDrag = function(dndContext, triggerEvent) {
  AdfAssert.assertPrototype(dndContext, AdfDnDContext);
  AdfAssert.assertPrototype(triggerEvent, AdfUIInputEvent);
  var transferable = this.GetDragTransferable(triggerEvent);
  if(transferable) {
    AdfAssert.assertPrototype(transferable, AdfTransferable);
    var dragOffset = this.GetDragOffset(triggerEvent);
    dndContext.startDrag(triggerEvent, transferable, this.getAllowedActions(), this.getDefaultAction(), this.GetDragOverFeedback(triggerEvent), dragOffset.x, dragOffset.y, this.GetDefaultDragCursor());
    this._component.getPeer().initiateDrag(dndContext, triggerEvent)
  }
};
AdfDragSource.prototype.getDragRecognizer = function() {
  if(!this._dragRecognizer) {
    var component = this._component;
    AdfAssert.assert(component != null, "Unexpected null component for drag recognizer.");
    var peer = component.getPeer();
    AdfAssert.assert(peer != null, "Unexpected null peer for drag recognizer.");
    this._dragRecognizer = peer.getDefaultDragRecognizer(component)
  }
  return this._dragRecognizer
};
AdfDragSource.prototype.getComponent = function() {
  return this._component
};
AdfDragSource.prototype.isAvailable = function(inputEvent) {
  return this.GetDragTransferable(inputEvent) != null
};
AdfDragSource.prototype.dragDropEnd = function(dndContext, dropAction) {
  AdfLogger.LOGGER.finer("dragDropEnd:", this, " action:", dropAction)
};
AdfDragSource.prototype.dragEnter = function(dndContext) {
  AdfLogger.LOGGER.finer("dragEnter:", this)
};
AdfDragSource.prototype.dragExit = function(dndContext) {
  AdfLogger.LOGGER.finer("dragExit:", this)
};
AdfDragSource.prototype.dragOver = function(dndContext) {
  AdfLogger.LOGGER.finest("dragOver:", this)
};
AdfDragSource.prototype.dropActionChanged = function(dndContext) {
  AdfLogger.LOGGER.finer("dropActionChanged:", this)
};
AdfDragSource.prototype.toDebugString = function() {
  return AdfDragSource.superclass.toDebugString.call(this) + "[" + "sourceComponent:" + this._component + "]"
};
AdfDragSource.prototype.GetDragTransferable = function(inputEvent) {
  var component = this._component;
  return component.getPeer().getDragTransferable(component, inputEvent)
};
AdfDragSource.prototype.GetDefaultDragCursor = function() {
  return"auto"
};
AdfDragSource.prototype.getAllowedActions = function() {
  return this._allowedActions
};
AdfDragSource.prototype.getDefaultAction = function() {
  return this._defaultAction
};
AdfDragSource.prototype.GetDragOverFeedback = function(inputEvent) {
  var component = this._component;
  return component.getPeer().getDragOverFeedback(component, inputEvent)
};
AdfDragSource.prototype.applyDragReadyState = function(inputEvent) {
  var component = this._component;
  return component.getPeer().applyDragReadyState(component, inputEvent)
};
AdfDragSource.prototype.clearDragReadyState = function(dragReadyObj) {
  var component = this._component;
  return component.getPeer().clearDragReadyState(component, dragReadyObj)
};
AdfDragSource.prototype.applyDragSourceState = function(inputEvent) {
  var component = this._component;
  return component.getPeer().applyDragSourceState(component, inputEvent)
};
AdfDragSource.prototype.clearDragSourceState = function(dragSourceObj) {
  var component = this._component;
  return component.getPeer().clearDragSourceState(component, dragSourceObj)
};
AdfDragSource.prototype.CreateDragRecognizer = function() {
  return null
};
AdfDragSource.prototype.GetDragOffset = function(inputEvent) {
  return{x:inputEvent.getOffsetX(), y:inputEvent.getOffsetY()}
};
AdfDragSource.prototype.__setComponent = function(component) {
  this._component = component
};

function AdfDropTarget() {
  this.Init()
}
AdfObject.createSubclass(AdfDropTarget);
AdfDropTarget.prototype.Init = function() {
  AdfDropTarget.superclass.Init.call(this);
  this._component = null
};
AdfDropTarget.prototype.getComponent = function() {
  return this._component
};
AdfDropTarget.prototype.toDebugString = function() {
  return AdfDropTarget.superclass.toDebugString.call(this) + "[source component:" + this._component + "]"
};
AdfDropTarget.prototype.acceptDragEnter = function(dndContext, proposedAction, pageX, pageY) {
  AdfLogger.LOGGER.finer("dragEnter:", this);
  var acceptedAction = this._acceptDrag(dndContext, proposedAction, pageX, pageY);
  if(acceptedAction != AdfDnDContext.ACTION_NONE) {
    this.AcceptedDragEnter(dndContext, acceptedAction, pageX, pageY)
  }
  return acceptedAction
};
AdfDropTarget.prototype.dragExit = function(dndContext) {
  AdfLogger.LOGGER.finer("dragExit:", this)
};
AdfDropTarget.prototype.acceptDragOver = function(dndContext, proposedAction, pageX, pageY) {
  AdfLogger.LOGGER.finest("dragOver:", this);
  return this._acceptDrag(dndContext, proposedAction, pageX, pageY)
};
AdfDropTarget.prototype.drop = function(dndContext, proposedAction, pageX, pageY) {
  AdfAssert.assert(proposedAction != AdfDnDContext.ACTION_NONE);
  AdfLogger.LOGGER.finer("drop:", this);
  var component = this._component;
  var pagePosition = component.getPeer().getPagePosition(component);
  var componentX = pageX - pagePosition.x;
  var componentY = pageY - pagePosition.y;
  var dropEvent = new AdfDropEvent(component, dndContext.getDragSource(), dndContext.getTransferable(), proposedAction, componentX, componentY);
  dropEvent.queue();
  return AdfDnDContext.ACTION_NONE
};
AdfDropTarget.prototype.acceptDropActionChanged = function(dndContext, proposedAction, pageX, pageY) {
  AdfLogger.LOGGER.finest("dropActionChanged:", this, " proposed:", proposedAction);
  return this._acceptDrag(dndContext, proposedAction, pageX, pageY)
};
AdfDropTarget.prototype.AcceptDrag = function(dndContext, possibleActions, proposedAction, pageX, pageY) {
  var flavorAcceptance = dndContext.getDropTargetProperty("DropTarget:flavorAcceptance");
  if(flavorAcceptance == null) {
    flavorAcceptance = this.CalculateFlavorAcceptance(dndContext);
    dndContext.setDropTargetProperty("DropTarget:flavorAcceptance", flavorAcceptance)
  }
  AdfAssert.assertBoolean(flavorAcceptance);
  if(!flavorAcceptance) {
    return AdfDnDContext.ACTION_NONE
  }else {
    if(proposedAction & possibleActions) {
      return proposedAction
    }else {
      if(possibleActions & AdfDnDContext.ACTION_MOVE) {
        return AdfDnDContext.ACTION_MOVE
      }else {
        if(possibleActions & AdfDnDContext.ACTION_COPY) {
          return AdfDnDContext.ACTION_COPY
        }else {
          if(possibleActions & AdfDnDContext.ACTION_LINK) {
            return AdfDnDContext.ACTION_LINK
          }else {
            return AdfDnDContext.ACTION_NONE
          }
        }
      }
    }
  }
};
AdfDropTarget.prototype.CalculateFlavorAcceptance = function(dndContext) {
  var allowedFlavors = this.GetAllowedFlavors(dndContext);
  AdfAssert.assertArrayOrNull(allowedFlavors);
  var allowedCount = allowedFlavors ? allowedFlavors.length : 0;
  var transferable = dndContext.getTransferable();
  for(var i = 0;i < allowedCount;i++) {
    var currFlavor = allowedFlavors[i];
    if(transferable.isDataFlavorSupported(currFlavor)) {
      return true
    }
  }
  return false
};
AdfDropTarget.prototype.AcceptedDragEnter = function(dndContext, userAction, pageX, pageY) {
};
AdfDropTarget.prototype.GetAllowedActions = function(dndContext) {
  return AdfDnDContext.ACTIONS_ALL
};
AdfDropTarget.prototype.GetAllowedFlavors = function(dndContext) {
  return null
};
AdfDropTarget.prototype.__setComponent = function(component) {
  this._component = component
};
AdfDropTarget.prototype._acceptDrag = function(dndContext, proposedAction, pageX, pageY) {
  AdfAssert.assertNumber(pageX);
  AdfAssert.assertNumber(pageY);
  var possibleActions = this.GetAllowedActions() & dndContext.getSourceActions();
  if(possibleActions) {
    return this.AcceptDrag(dndContext, possibleActions, proposedAction, pageX, pageY)
  }else {
    return AdfDnDContext.ACTION_NONE
  }
};

function AdfDragRecognizer() {
  if(this != window) {
    this.Init()
  }
}
AdfObject.createSubclass(AdfDragRecognizer);
AdfDragRecognizer.prototype.prepDrag = function(dndContext, dragSource, inputEvent) {
  AdfAssert.assertPrototype(dragSource, AdfDragSource);
  AdfAssert.assertPrototype(inputEvent, AdfUIInputEvent);
  if(!AdfAgent.AGENT.isDragPrepEvent(inputEvent)) {
    return null
  }
  if(!dragSource.isAvailable(dndContext, inputEvent)) {
    return null
  }
  AdfLogger.LOGGER.finer("prep drag[ source:", dragSource, " event:", inputEvent, "]");
  var prepContext = {"triggerEvent":inputEvent.clone(), "startPageX":inputEvent.getPageX(), "startPageY":inputEvent.getPageY()};
  return prepContext
};
AdfDragRecognizer.prototype.abortPrep = function(prepContext, inputEvent) {
  AdfAssert.assertPrototype(inputEvent, AdfUIInputEvent);
  return inputEvent.getType() == AdfUIInputEvent.MOUSE_UP_EVENT_TYPE
};
AdfDragRecognizer.prototype.recognizeDrag = function(prepContext, inputEvent) {
  var newPageX = inputEvent.getPageX();
  var newPageY = inputEvent.getPageY();
  var agent = AdfAgent.AGENT;
  var isPrimarilyTouchDevice = agent.isTouchFirstDevice();
  if(inputEvent.getType() == AdfUIInputEvent.MOUSE_MOVE_EVENT_TYPE || inputEvent.getType() == AdfComponentTouchEvent.TOUCH_MOVE_EVENT_TYPE && inputEvent.getTouchCount() == 1) {
    AdfLogger.LOGGER.finer("recognizeDrag curr:", newPageX, ",", newPageY, " ", prepContext.startPageX, ",", prepContext.startPageY);
    var minDragOffset = isPrimarilyTouchDevice ? 10 : 3;
    if(Math.abs(prepContext.startPageX - newPageX) > minDragOffset || Math.abs(prepContext.startPageY - newPageY) > minDragOffset) {
      AdfLogger.LOGGER.fine("Drag recognized for:", inputEvent);
      return prepContext.triggerEvent
    }else {
      if(!isPrimarilyTouchDevice) {
        AdfAgent.AGENT.preventDefault(inputEvent.getNativeEvent())
      }
    }
  }
  return null
};

function AdfUIPeer() {
}
AdfObject.createSubclass(AdfUIPeer);
AdfUIPeer.createPeerClass = function(theSuperclass, peerName, classInitializationState) {
  var constructorFunction = new Function("c", "o", "if(arguments.length)this.Init(c, o);");
  AdfObject.createSubclass(constructorFunction, theSuperclass, peerName, classInitializationState);
  if(peerName) {
    window[peerName] = constructorFunction
  }
  return constructorFunction
};
AdfUIPeer.InitClass = function() {
  this._DRAG_RECOGNIZER = new AdfDragRecognizer
};
AdfUIPeer.prototype.initialize = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.componentRemoved = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getComponentParent = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getDescendantComponents = function(component, children) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getComponentProperty = function(component, propertyName) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getInlineStyleProperty = function(component, propName) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.setInlineStyleProperty = function(component, propName, propValue) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getComponent = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getReadyState = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getParentPeer = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getAbsoluteId = function(component, clientId) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getAbsoluteLocator = function(component, clientId) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.convertLocatorToClientId = function(component, stampKey) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.isVisible = function() {
  return this.getComponent().getPropertyValue(AdfUIComponent.VISIBLE)
};
AdfUIPeer.prototype.needsResizeNotify = function(component) {
  return false
};
AdfUIPeer.prototype.resizeNotify = function(component, oldWidth, oldHeight, newWidth, newHeight) {
};
AdfUIPeer.prototype.messageNotify = function(component, maxtype, messages) {
};
AdfUIPeer.prototype.messageShow = function(component, maxtype, messages) {
};
AdfUIPeer.prototype.focus = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.initiateDrag = function(dndContext, triggerEvent) {
  AdfAssert.assertPrototype(dndContext, AdfDnDContext);
  AdfAssert.assertPrototype(triggerEvent, AdfUIInputEvent)
};
AdfUIPeer.prototype.processPushData = function(component, payload, isLate) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assert(payload !== undefined);
  AdfAssert.assertBoolean(isLate);
  return false
};
AdfUIPeer.prototype.Init = function(component) {
  AdfAssert.assertPrototypeOrNull(component, AdfUIComponent);
  AdfUIPeer.superclass.Init.call(this)
};
AdfUIPeer.prototype.ComponentPropertyChanged = function(propertyChangeEvent) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.DispatchComponentEvent = function(componentEvent) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.DispatchUncanceledComponentEvent = function(componentEvent) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.visitChildren = function(component, callback, context, ignoreHidden) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getPagePosition = function(component) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getDefaultDragRecognizer = function(component) {
  return AdfUIPeer._DRAG_RECOGNIZER
};
AdfUIPeer.prototype.getDragOverFeedback = function(component, inputEvent) {
  AdfAssert.failedInAbstractFunction();
  return null
};
AdfUIPeer.prototype.applyDragReadyState = function(component, inputEvent) {
  AdfAssert.failedInAbstractFunction();
  return null
};
AdfUIPeer.prototype.clearDragReadyState = function(component, dragReadyObj) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.applyDragSourceState = function(component, inputEvent) {
  AdfAssert.failedInAbstractFunction();
  return null
};
AdfUIPeer.prototype.clearDragSourceState = function(component, dragSourceObj) {
  AdfAssert.failedInAbstractFunction()
};
AdfUIPeer.prototype.getDragTransferable = function(component, inputEvent) {
  AdfAssert.failedInAbstractFunction();
  return null
};

function AdfFacesMessage(messageType, summary, detail, properties) {
  this.Init(messageType, summary, detail, properties)
}
AdfObject.createSubclass(AdfFacesMessage);
AdfFacesMessage.TYPE_INFO = 1;
AdfFacesMessage.TYPE_CONFIRMATION = 2;
AdfFacesMessage.TYPE_WARNING = 3;
AdfFacesMessage.TYPE_ERROR = 4;
AdfFacesMessage.TYPE_FATAL = 5;
AdfFacesMessage.getType = function(severity) {
  switch(severity) {
    case TrFacesMessage.SEVERITY_WARNING:
      return AdfFacesMessage.TYPE_WARNING;
    case TrFacesMessage.SEVERITY_ERROR:
      return AdfFacesMessage.TYPE_ERROR;
    case TrFacesMessage.SEVERITY_FATAL:
      return AdfFacesMessage.TYPE_FATAL;
    case TrFacesMessage.SEVERITY_INFO:
    ;
    default:
      return AdfFacesMessage.TYPE_INFO
  }
};
AdfFacesMessage.getSeverity = function(type) {
  switch(type) {
    case AdfFacesMessage.TYPE_WARNING:
      return TrFacesMessage.SEVERITY_WARNING;
    case AdfFacesMessage.TYPE_ERROR:
      return TrFacesMessage.SEVERITY_ERROR;
    case AdfFacesMessage.TYPE_FATAL:
      return TrFacesMessage.SEVERITY_FATAL;
    case AdfFacesMessage.TYPE_INFO:
    ;
    case AdfFacesMessage.TYPE_CONFIRMATION:
    ;
    default:
      return TrFacesMessage.SEVERITY_INFO
  }
};
AdfFacesMessage.getTypeFromMessage = function(message) {
  if(message["getMessageType"] != null) {
    return message.getMessageType()
  }else {
    return AdfFacesMessage.getType(message["getSeverity"]())
  }
};
AdfFacesMessage.prototype.getDetail = function() {
  var detail = this._detail;
  if(!detail || AdfUIUtils.trim(detail).length < 1) {
    return this._summary
  }else {
    return detail
  }
};
AdfFacesMessage.prototype.getSummary = function() {
  return this._summary
};
AdfFacesMessage.prototype.getMessageType = function() {
  return this._messageType
};
AdfFacesMessage.prototype.getSeverity = function() {
  return AdfFacesMessage.getSeverity(this._messageType)
};
AdfFacesMessage.prototype.setDetail = function(detail) {
  this._detail = detail
};
AdfFacesMessage.prototype.setSummary = function(summary) {
  this._summary = summary
};
AdfFacesMessage.prototype.setMessageType = function(type) {
  this._type = type
};
AdfFacesMessage.prototype.setSeverity = function(severity) {
  this._messageType = AdfFacesMessage.getType(severity)
};
AdfFacesMessage.prototype.getProperty = function(propName) {
  if(this._properties != null) {
    return this._properties[propName]
  }
};
AdfFacesMessage.prototype.Init = function(messageType, summary, detail, properties) {
  AdfFacesMessage.superclass.Init.call(this, messageType, summary, detail, properties);
  this._messageType = messageType;
  this._summary = summary;
  this._detail = detail;
  this._properties = properties
};

var AdfFocusUtils = new Object;
AdfFocusUtils.containsFocus = function(element) {
  var focusElement = AdfPage.PAGE.getActiveDomElement();
  while(focusElement != null) {
    if(focusElement == element) {
      return true
    }
    focusElement = focusElement.parentNode
  }
  return false
};
AdfFocusUtils.focusElement = function(element) {
  AdfAssert.assertDomElement(element);
  AdfPopupScopingUtils.scope(element);
  AdfFocusUtils._focusElementImpl(element)
};
AdfFocusUtils.isFocusChangePending = function() {
  return AdfFocusUtils._delayFocusTimerId != null
};
AdfFocusUtils.focusFirstDocumentTabStop = function() {
  var body = AdfPage.PAGE.getDocument().body;
  var focusElement = AdfFocusUtils.getFirstTabStop(body, true);
  if(focusElement != null && focusElement.offsetTop < 0) {
    focusElement = AdfFocusUtils.getNextTabStop(focusElement)
  }
  if(focusElement != null) {
    AdfFocusUtils.focusElement(focusElement)
  }
  return focusElement
};
AdfFocusUtils.focusFirstTabStop = function(element, isExclusive) {
  AdfAssert.assertDomElement(element);
  var focusElement = AdfFocusUtils.getFirstTabStop(element, isExclusive);
  if(focusElement != null) {
    AdfFocusUtils.focusElement(focusElement)
  }
  return focusElement
};
AdfFocusUtils.focusLastTabStop = function(element, isExclusive) {
  AdfAssert.assertDomElement(element);
  var focusElement = AdfFocusUtils.getLastTabStop(element, isExclusive);
  if(focusElement != null) {
    AdfFocusUtils.focusElement(focusElement)
  }
  return focusElement
};
AdfFocusUtils.focusNextTabStop = function(element, contextElement, startOutside) {
  var focusElement = AdfFocusUtils.getNextTabStop(element, contextElement, startOutside);
  if(!focusElement) {
    if(!contextElement) {
      contextElement = element.ownerDocument.documentElement
    }
    focusElement = AdfFocusUtils.getFirstTabStop(contextElement)
  }
  if(focusElement) {
    AdfFocusUtils.focusElement(focusElement)
  }
  return focusElement
};
AdfFocusUtils.focusPreviousTabStop = function(element, contextElement, startOutside) {
  var focusElement = AdfFocusUtils.getPreviousTabStop(element, contextElement, startOutside);
  if(!focusElement) {
    if(!contextElement) {
      contextElement = element.ownerDocument.documentElement
    }
    focusElement = AdfFocusUtils.getLastTabStop(contextElement)
  }
  if(focusElement) {
    AdfFocusUtils.focusElement(focusElement)
  }
  return focusElement
};
AdfFocusUtils.getFirstTabStop = function(element, isExclusive) {
  return AdfDomUtils.getFirstElementMatch(element, isExclusive, AdfFocusUtils.isTabStop)
};
AdfFocusUtils.getLastTabStop = function(element, isExclusive) {
  return AdfDomUtils.getLastElementMatch(element, isExclusive, AdfFocusUtils.isTabStop)
};
AdfFocusUtils.getNextTabStop = function(element, contextElement, startOutside) {
  return AdfDomUtils.getNextElementMatch(element, contextElement, startOutside, AdfFocusUtils.isTabStop)
};
AdfFocusUtils.getPreviousTabStop = function(element, contextElement) {
  return AdfDomUtils.getPreviousElementMatch(element, contextElement, AdfFocusUtils.isTabStop)
};
AdfFocusUtils.isTabStop = function(el) {
  return el != null && el.tabIndex > -1 && AdfFocusUtils.isFocusable(el)
};
AdfFocusUtils.isFocusable = function(el, context) {
  if(el == null || el.nodeType != 1) {
    return false
  }
  if(el.disabled) {
    return false
  }
  var tabIdx = AdfDomUtils.getTabIndex(el);
  if(tabIdx < -1) {
    return false
  }
  var mayFocusable = true;
  switch(el.nodeName.toLowerCase()) {
    case "a":
      if(!el.href && tabIdx == undefined || el.offsetTop <= -999) {
        mayFocusable = false
      }
      break;
    case "input":
      if(el.type == "hidden" && el.isContentEditable != true) {
        mayFocusable = false
      }
      break;
    case "area":
    ;
    case "body":
    ;
    case "button":
    ;
    case "frame":
    ;
    case "iframe":
    ;
    case "isindex":
    ;
    case "object":
    ;
    case "select":
    ;
    case "textarea":
      mayFocusable = true;
      break;
    default:
      if(tabIdx >= -1) {
        mayFocusable = true
      }else {
        mayFocusable = false
      }
  }
  if(!mayFocusable) {
    return false
  }
  AdfFocusUtils._setupContext(context);
  return AdfFocusUtils.isConnectedAndVisible(el, context)
};
AdfFocusUtils._setupContext = function(context) {
  if(!context) {
    return
  }
  if(!context.positiveValue) {
    var timestamp = (new Date).getTime();
    context.positiveValue = "y" + timestamp;
    context.negativeValue = "n" + timestamp
  }
};
AdfFocusUtils.calculateCachedValue = function(el, context, expando) {
  if(!context || !el || !expando) {
    return undefined
  }
  var agent = AdfAgent.AGENT;
  var cachedValue = agent.getAttribute(el, expando);
  if(cachedValue == context.positiveValue) {
    return true
  }else {
    if(cachedValue == context.negativeValue) {
      return false
    }
  }
  return undefined
};
AdfFocusUtils.setCacheValue = function(el, context, expando, value) {
  if(!context || !el || !expando || value == undefined) {
    return
  }
  var agent = AdfAgent.AGENT;
  var cacheValue = value ? context.positiveValue : context.negativeValue;
  agent.setExpandoProperty(el, expando, cacheValue)
};
AdfFocusUtils.isConnectedAndVisible = function(el, context) {
  AdfAssert.assertDomElement(el);
  var agent = AdfAgent.AGENT;
  var documentElement = agent.getDomDocument().documentElement;
  var cachedValue = AdfFocusUtils.calculateCachedValue(el, context, "_afrFoc");
  if(cachedValue != undefined) {
    return cachedValue
  }
  if(!AdfFocusUtils._isVisible(el)) {
    AdfFocusUtils.setCacheValue(el, context, "_afrFoc", false);
    return false
  }
  if(el == documentElement) {
    AdfFocusUtils.setCacheValue(el, context, "_afrFoc", true);
    return true
  }else {
    var parentValue;
    if(el.parentNode == null || el.parentNode.nodeType != 1) {
      parentValue = false
    }else {
      parentValue = AdfFocusUtils.isConnectedAndVisible(el.parentNode, context)
    }
    AdfFocusUtils.setCacheValue(el, context, "_afrFoc", parentValue);
    return parentValue
  }
};
AdfFocusUtils._isVisible = function(el, currentStyle) {
  if(!currentStyle) {
    currentStyle = AdfAgent.AGENT.getComputedStyle(el)
  }
  if(AdfFocusUtils._isDisplayNone(el, currentStyle)) {
    return false
  }
  return!AdfFocusUtils._isVisibilityHidden(el, currentStyle)
};
AdfFocusUtils._isVisibilityHidden = function(el, currentStyle) {
  if(!currentStyle) {
    currentStyle = AdfAgent.AGENT.getComputedStyle(el)
  }
  return currentStyle && currentStyle.visibility == "hidden"
};
AdfFocusUtils._isDisplayNone = function(el, currentStyle) {
  if(!currentStyle) {
    currentStyle = AdfAgent.AGENT.getComputedStyle(el)
  }
  if(currentStyle && currentStyle.display == "none") {
    if(el.style.display == "none" || !AdfPopupScopingUtils.isScopingContainer(el) || !AdfPopupScopingUtils.isOutOfScope(el)) {
      return true
    }
  }
  return false
};
AdfFocusUtils._isFocusableType = function(el) {
  AdfAssert.assertDomElement(el);
  var tabIdx = AdfDomUtils.getTabIndex(el);
  switch(el.nodeName.toLowerCase()) {
    case "a":
      if(!el.href && tabIdx == undefined) {
        return false
      }
    ;
    case "input":
      if(el.type == "hidden" && el.isContentEditable != true) {
        return false
      }
    ;
    case "area":
    ;
    case "body":
    ;
    case "button":
    ;
    case "frame":
    ;
    case "iframe":
    ;
    case "isindex":
    ;
    case "object":
    ;
    case "select":
    ;
    case "textarea":
      return true;
    default:
      if(tabIdx >= -1) {
        return true
      }
      return false
  }
};
AdfFocusUtils.focusElementDelayed = function(element, timeout) {
  AdfAssert.assertDomElement(element);
  AdfAssert.assertNumber(timeout);
  var page = AdfPage.PAGE;
  var timerId = AdfFocusUtils._delayFocusTimerId;
  if(timerId) {
    page.cancelTimer(timerId)
  }
  AdfFocusUtils._delayFocusTimerId = page.scheduleTimer(null, AdfFocusUtils._focusElementDelayedCallback, element, timeout)
};
AdfFocusUtils._focusElementDelayedCallback = function(element) {
  AdfFocusUtils._delayFocusTimerId = null;
  AdfFocusUtils._focusElementImpl(element)
};
AdfFocusUtils._focusElementImpl = function(element) {
  try {
    if(element.setActive && AdfAgent.AGENT.getVersion() < 11) {
      element.setActive()
    }
    element.focus()
  }catch(e) {
  }
};
AdfFocusUtils.focusNextActiveDescendant = function(contextElement, currentActiveDescendant, wrap) {
  AdfAssert.assertDomElement(contextElement);
  AdfAssert.assertDomElement(currentActiveDescendant);
  var newActiveDescendant = AdfFocusUtils.getNextFocusableDescendant(contextElement, currentActiveDescendant);
  if(!newActiveDescendant) {
    if(wrap) {
      newActiveDescendant = AdfFocusUtils.getFirstFocusableDescendant(contextElement)
    }else {
      return newActiveDescendant
    }
  }
  if(newActiveDescendant && newActiveDescendant != currentActiveDescendant) {
    currentActiveDescendant.setAttribute("tabIndex", "-1");
    newActiveDescendant.setAttribute("tabIndex", "0");
    AdfFocusUtils.focusElement(newActiveDescendant)
  }
  return newActiveDescendant
};
AdfFocusUtils.focusPreviousActiveDescendant = function(contextElement, currentActiveDescendant, wrap) {
  AdfAssert.assertDomElement(contextElement);
  AdfAssert.assertDomElement(currentActiveDescendant);
  var newActiveDescendant = AdfFocusUtils.getPreviousFocusableDescendant(contextElement, currentActiveDescendant);
  if(!newActiveDescendant) {
    if(wrap) {
      newActiveDescendant = AdfFocusUtils.getLastFocusableDescendant(contextElement)
    }else {
      return newActiveDescendant
    }
  }
  if(newActiveDescendant && newActiveDescendant != currentActiveDescendant) {
    currentActiveDescendant.setAttribute("tabIndex", "-1");
    newActiveDescendant.setAttribute("tabIndex", "0");
    AdfFocusUtils.focusElement(newActiveDescendant)
  }
  return newActiveDescendant
};
AdfFocusUtils.setFirstActiveDescendant = function(contextElement, context) {
  AdfAssert.assertDomElement(contextElement);
  var newActiveDescendant = AdfFocusUtils.getFirstFocusableDescendant(contextElement, context);
  if(newActiveDescendant) {
    newActiveDescendant.setAttribute("tabIndex", "0")
  }
  return newActiveDescendant
};
AdfFocusUtils.setupCompositeWidget = function(contextElement) {
  AdfAssert.assertDomElement(contextElement);
  var context = {includeVisibilityHidden:true, includeDisplayNone:false, includeDisabled:true};
  var nextFocusableDescendant = AdfFocusUtils.getFirstFocusableDescendant(contextElement, context);
  while(nextFocusableDescendant) {
    nextFocusableDescendant.setAttribute("tabIndex", "-1");
    nextFocusableDescendant = AdfFocusUtils.getNextFocusableDescendant(contextElement, nextFocusableDescendant, context)
  }
  return AdfFocusUtils.setFirstActiveDescendant(contextElement)
};
AdfFocusUtils.getFirstFocusableDescendant = function(element, context) {
  AdfAssert.assertDomElement(element);
  return AdfDomUtils.getFirstFilteredElement(element, false, AdfFocusUtils.isFocusableDescendant, context)
};
AdfFocusUtils.getLastFocusableDescendant = function(element, context) {
  AdfAssert.assertDomElement(element);
  return AdfDomUtils.getLastFilteredElement(element, false, AdfFocusUtils.isFocusableDescendant, context)
};
AdfFocusUtils.getNextFocusableDescendant = function(contextElement, element, context) {
  AdfAssert.assertDomElement(contextElement);
  AdfAssert.assertDomElement(element);
  return AdfDomUtils.getNextFilteredElement(element, contextElement, true, AdfFocusUtils.isFocusableDescendant, context)
};
AdfFocusUtils.getPreviousFocusableDescendant = function(contextElement, element, context) {
  AdfAssert.assertDomElement(contextElement);
  AdfAssert.assertDomElement(element);
  return AdfDomUtils.getPreviousFilteredElement(element, contextElement, AdfFocusUtils.isFocusableDescendant, context)
};
AdfFocusUtils.getFirstUnmarkedTabstop = function(element) {
  AdfAssert.assertDomElement(element);
  return AdfDomUtils.getFirstFilteredElement(element, false, AdfFocusUtils.isUnmarkedTabstop)
};
AdfFocusUtils.isUnmarkedTabstop = function(element) {
  var logger = AdfLogger.LOGGER;
  if(element == null || element.nodeType != 1) {
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isUnmarkedTabstop: Null or not element node type")
    }
    return AdfDomUtils.FILTER_REJECT
  }
  var isDisplayNone = AdfFocusUtils._isDisplayNone(element);
  if(isDisplayNone) {
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isUnmarkedTabstop: Node display none: " + isDisplayNone + ", node tree: " + element.id + " " + element.nodeName)
    }
    return AdfDomUtils.FILTER_REJECT
  }
  var focusableAttribute = element.attributes[AdfFocusUtils.DESCENDANT_FOCUSABLE];
  if(focusableAttribute) {
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isUnmarkedTabstop: Node is a marked tabstop: " + element.id + " " + element.nodeName)
    }
    return AdfDomUtils.FILTER_REJECT
  }else {
    var isTabStop = AdfFocusUtils.isTabStop(element);
    if(isTabStop) {
      if(logger.isLoggable(AdfLogger.FINE)) {
        logger.fine("isUnmarkedTabstop: Found node that is an unmarked tabstop: " + element.id + " " + element.nodeName)
      }
      return AdfDomUtils.FILTER_ACCEPT
    }
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isUnmarkedTabstop: Node not a tabstop: " + element.id + " " + element.nodeName)
    }
    return AdfDomUtils.FILTER_SKIP
  }
};
AdfFocusUtils.isFocusableDescendant = function(element, context) {
  var logger = AdfLogger.LOGGER;
  context = context == null ? {includeVisibilityHidden:false, includeDisplayNone:false, includeDisabled:false} : context;
  if(element == null || element.nodeType != 1) {
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isFocusableDescendant? Skip and reject tree: Null or not element node type")
    }
    return AdfDomUtils.FILTER_REJECT
  }
  var elementStyle = AdfAgent.AGENT.getComputedStyle(element);
  var isVisibilityHidden = AdfFocusUtils._isVisibilityHidden(element, elementStyle);
  if(isVisibilityHidden && !Boolean(context.includeVisibilityHidden)) {
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isFocusableDescendant? Skip and reject tree, Node is visibility hidden, node: " + element.id + " " + element.nodeName)
    }
    return AdfDomUtils.FILTER_REJECT
  }
  var isDisplayNone = AdfFocusUtils._isDisplayNone(element, elementStyle);
  if(isDisplayNone && !Boolean(context.includeDisplayNone)) {
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isFocusableDescendant? Skip and reject tree, Node is display none, node: " + element.id + " " + element.nodeName)
    }
    return AdfDomUtils.FILTER_REJECT
  }
  var focusableAttribute = element.attributes[AdfFocusUtils.DESCENDANT_FOCUSABLE];
  if(!focusableAttribute) {
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isFocusableDescendant? Skip, node not focusable, node: " + element.id + " " + element.nodeName)
    }
    return AdfDomUtils.FILTER_SKIP
  }
  if(focusableAttribute.value == "true") {
    if(logger.isLoggable(AdfLogger.FINE)) {
      logger.fine("isFocusableDescendant? Accept, node focusable TRUE, node: " + element.id + " " + element.nodeName)
    }
    return AdfDomUtils.FILTER_ACCEPT
  }else {
    if(focusableAttribute.value == "false") {
      if(logger.isLoggable(AdfLogger.FINE)) {
        logger.fine("isFocusableDescendant? Node focusable FALSE, node: " + element.id + " " + element.nodeName)
      }
      return Boolean(context.includeDisabled) ? AdfDomUtils.FILTER_ACCEPT : AdfDomUtils.FILTER_REJECT
    }else {
      if(logger.isLoggable(AdfLogger.FINE)) {
        logger.fine("isFocusableDescendant? Skip, invalid value found: " + focusableAttribute.name + " " + focusableAttribute.value)
      }
      return AdfDomUtils.FILTER_SKIP
    }
  }
};
AdfFocusUtils.DESCENDANT_FOCUSABLE = "data-afr-fcs";

var AdfDomUtils = new Object;
AdfDomUtils.isVisible = function(domElement) {
  if(domElement == null) {
    return false
  }
  return domElement.style.display != "none"
};
AdfDomUtils.isInVisibleSubtree = function(node) {
  if(node == null) {
    return false
  }
  while(node != null) {
    if(node.style && node.style.display == "none") {
      return false
    }
    node = node.parentNode
  }
  return true
};
AdfDomUtils.stripScripts = function(domElement) {
  var children = domElement.childNodes;
  if(children != null) {
    var textNode = null;
    for(var i = children.length - 1;i > -1;i--) {
      textNode = children[i];
      if(textNode.nodeType == 1 && textNode.tagName == "SCRIPT") {
        domElement.removeChild(textNode)
      }
    }
  }
};
AdfDomUtils.setVisible = function(domElement, visible) {
  AdfAssert.assert(domElement != null);
  domElement.style.display = visible ? "" : "none"
};
AdfDomUtils.getOffsetSizeFromCssLength = function(container, cssLength) {
  if(cssLength.indexOf("px") != -1) {
    return parseInt(cssLength, 10)
  }
  var ourDocument = container.ownerDocument;
  var div = ourDocument.createElement("div");
  div.style.width = cssLength;
  container.appendChild(div);
  var offset = div.offsetWidth;
  container.removeChild(div);
  return offset
};
AdfDomUtils.isNodeInDocumentHierarchy = function(domDocument, node) {
  AdfAssert.assertDomNode(domDocument);
  AdfAssert.assertDomNode(node);
  if(node == domDocument) {
    return true
  }
  if(domDocument == node.ownerDocument) {
    while(node != null) {
      node = node.parentNode;
      if(node == domDocument) {
        return true
      }
    }
  }
  return false
};
AdfDomUtils.isAncestor = function(ancestorNode, node) {
  var parentNode = node ? node.parentNode : null;
  while(parentNode) {
    if(parentNode == ancestorNode) {
      return true
    }
    parentNode = parentNode.parentNode
  }
  return false
};
AdfDomUtils.isAncestorOrSelf = function(ancestorNode, node) {
  return node == ancestorNode ? true : AdfDomUtils.isAncestor(ancestorNode, node)
};
AdfDomUtils.getNodeDistance = function(nodeA, nodeB) {
  if(nodeA == nodeB) {
    return 0
  }
  var distance = 0;
  var parentNode;
  if(AdfDomUtils.isAncestor(nodeA, nodeB)) {
    parentNode = nodeB.parentNode;
    while(parentNode) {
      distance++;
      if(parentNode == nodeA) {
        return distance
      }
      parentNode = parentNode.parentNode
    }
  }else {
    if(AdfDomUtils.isAncestor(nodeB, nodeA)) {
      parentNode = nodeA.parentNode;
      while(parentNode) {
        distance++;
        if(parentNode == nodeB) {
          return distance
        }
        parentNode = parentNode.parentNode
      }
    }
  }
  var commonAncestor = AdfDomUtils.getCommonAncestor(nodeA, nodeB);
  if(commonAncestor) {
    return AdfDomUtils.getNodeDistance(commonAncestor, nodeA) + AdfDomUtils.getNodeDistance(commonAncestor, nodeB)
  }
  return Number.POSITIVE_INFINITY
};
AdfDomUtils.getCommonAncestor = function(nodeA, nodeB) {
  if(nodeA == nodeB) {
    return nodeA
  }
  var parentNode = nodeA;
  while(parentNode) {
    if(AdfDomUtils.isAncestor(parentNode, nodeB)) {
      return parentNode
    }
    parentNode = parentNode.parentNode
  }
  return null
};
AdfDomUtils.getFormElement = function(node) {
  AdfAssert.assertDomNode(node);
  var ourDocument = node.ownerDocument;
  var agent = AdfAgent.AGENT;
  while(node != ourDocument) {
    if(agent.getNodeName(node) == "FORM") {
      return node
    }
    node = node.parentNode;
    AdfAssert.assert(node, "Should never get this far with disconnected DOM")
  }
  return null
};
AdfDomUtils.getMultiPartForm = function(actionForm) {
  var inputs = actionForm.getElementsByTagName("input"), inputCount = inputs.length, multiPartForm = null;
  for(var i = 0;i < inputCount;++i) {
    var inputElem = inputs[i];
    if(inputElem.type == "file" && (inputElem.value || inputElem.getAttribute("_afrMultiFileUpload") == "true")) {
      multiPartForm = actionForm;
      break
    }
  }
  return multiPartForm
};
AdfDomUtils.getFirstElementByTagName = function(domElement, tagName) {
  if(domElement == null) {
    return null
  }
  var labelElements = domElement.getElementsByTagName(tagName);
  return labelElements.length ? labelElements[0] : null
};
AdfDomUtils.getLastElementByTagName = function(domElement, tagName) {
  if(domElement == null) {
    return null
  }
  var labelElements = domElement.getElementsByTagName(tagName);
  return labelElements.length ? labelElements[labelElements.length - 1] : null
};
AdfDomUtils.getFirstDescendentElement = function(parentElement, elementName) {
  return AdfDomUtils.getDescendentElement(parentElement, elementName, 0)
};
AdfDomUtils.getDescendentElement = function(parentElement, elementName, index) {
  AdfAssert.assertDomElement(parentElement);
  AdfAssert.assertString(elementName);
  AdfAssert.assertNumber(index);
  var elements = parentElement.getElementsByTagName(elementName);
  AdfAssert.assert(elements);
  var length = elements.length;
  if(length > index) {
    var firstElement = elements[0];
    if(firstElement == parentElement && length > index + 1) {
      index++
    }
    return elements[index]
  }
  return null
};
AdfDomUtils.getFirstChildElement = function(parentElement) {
  return AdfDomUtils.getFirstChildNodeByType(parentElement, 1)
};
AdfDomUtils.getElement = function(node) {
  if(node == null) {
    return null
  }
  for(var n = node;n != null;n = n.parentNode) {
    if(n.nodeType == 1) {
      return n
    }
  }
  return null
};
AdfDomUtils.getChildElements = function(parentElement) {
  var childNodes = parentElement.childNodes;
  var filteredNodes = [];
  if(childNodes) {
    var length = childNodes.length;
    for(var i = 0;i < length;i++) {
      var child = childNodes[i];
      if(child.nodeType == 1) {
        filteredNodes.push(child)
      }
    }
  }
  return filteredNodes
};
AdfDomUtils.getLastChildElement = function(parentElement) {
  var childNodes = parentElement.childNodes;
  if(childNodes) {
    var length = childNodes.length;
    for(var i = length - 1;i >= 0;i--) {
      var child = childNodes[i];
      if(child.nodeType == 1) {
        return child
      }
    }
  }
  return null
};
AdfDomUtils.getNonWhitespaceChildCount = function(parentElement) {
  var childCount = 0;
  var childNodes = parentElement.childNodes;
  if(childNodes) {
    var length = childNodes.length;
    for(var i = 0;i < length;i++) {
      var childNode = childNodes[i];
      var nodeType = childNode.nodeType;
      if(nodeType == 8) {
        continue
      }
      if(nodeType == 3) {
        var stripped = childNode.data.replace(/\s*/, "");
        if(stripped.length == 0) {
          continue
        }
        ++childCount
      }else {
        if(nodeType == 1) {
          if(childNode.style == null || childNode.style.display != "none") {
            ++childCount
          }
        }
      }
    }
  }
  return childCount
};
AdfDomUtils.getOnlyChildElement = function(parentElement) {
  var childElement = null;
  var childNodes = parentElement.childNodes;
  if(childNodes) {
    var length = childNodes.length;
    for(var i = 0;i < length;i++) {
      childNode = childNodes[i];
      var nodeType = childNode.nodeType;
      if(nodeType == 8) {
        continue
      }
      if(nodeType == 3) {
        var stripped = childNode.data.replace(/\s*/, "");
        if(stripped.length > 0) {
          return null
        }
      }else {
        if(nodeType == 1) {
          if(childNode.style == null || childNode.style.display != "none") {
            if(childElement) {
              return null
            }
            childElement = childNode
          }
        }else {
          return null
        }
      }
    }
  }
  return childElement
};
AdfDomUtils.getInputElementsInNode = function(node, getAll, extraTags) {
  var domDoc = AdfAgent.AGENT.getDomDocument();
  var inputElems = [];
  if(domDoc.evaluate) {
    var expr = ".//input|.//select|.//textarea|.//button|.//a";
    if(extraTags) {
      for(var i = 0;i < extraTags.length;i++) {
        expr = expr + "|.//" + extraTags[i]
      }
    }
    var nodes = domDoc.evaluate(expr, node, null, XPathResult.ANY_TYPE, null);
    var elem = nodes.iterateNext();
    while(elem) {
      if((getAll || !elem.disabled && elem.tabIndex != -1) && (elem.nodeName != "A" || elem.href)) {
        inputElems.push(elem)
      }
      elem = nodes.iterateNext()
    }
  }else {
    var nodes = node.getElementsByTagName("*");
    var nodeCount = nodes.length;
    var pattern = "^INPUT|SELECT|BUTTON|^A\\b|TEXTAREA";
    if(extraTags) {
      var newTag;
      for(var i = 0;i < extraTags.length;i++) {
        newTag = extraTags[i].toUpperCase();
        pattern = pattern + "|" + newTag
      }
    }
    var inputRegExp = new RegExp(pattern);
    for(var i = 0;i < nodeCount;i++) {
      var elem = nodes[i];
      if(elem.tagName.match(inputRegExp) && (getAll || !elem.disabled && elem.tabIndex != -1) && (elem.nodeName != "A" || elem.href)) {
        inputElems.push(elem)
      }
    }
  }
  return inputElems
};
AdfDomUtils.disableTabStop = function(domElement, disable) {
  var extraTags = ["ul"];
  var elems = AdfDomUtils.getInputElementsInNode(domElement, true, extraTags);
  for(var i = 0;i < elems.length;i++) {
    var elem = elems[i];
    if(disable) {
      if(elem._afrTabIndex === undefined && elem.tabIndex !== undefined && elem.tabIndex !== -1) {
        elem._afrTabIndex = elem.tabIndex;
        elem.tabIndex = -1
      }
      if(elem._afrOverflow === undefined && elem.tagName == "UL" && AdfAgent.AGENT.getPlatform() == AdfAgent.GECKO_PLATFORM) {
        elem._afrOverflow = elem.style.overflow;
        elem.style.overflow = "hidden"
      }
    }else {
      if(elem._afrTabIndex !== undefined) {
        elem.tabIndex = elem._afrTabIndex;
        delete elem._afrTabIndex
      }
      if(elem._afrOverflow !== undefined) {
        elem.style.overflow = elem._afrOverflow;
        delete elem._afrOverflow
      }
    }
  }
};
AdfDomUtils.getNextElement = function(currentElement) {
  if(currentElement) {
    var el = currentElement.nextSibling;
    while(el) {
      if(el.nodeType == 1) {
        return el
      }
      el = el.nextSibling
    }
  }
};
AdfDomUtils.getPreviousElement = function(currentElement) {
  if(currentElement) {
    var el = currentElement.previousSibling;
    while(el) {
      if(el.nodeType == 1) {
        return el
      }
      el = el.previousSibling
    }
  }
};
AdfDomUtils.getFirstChildNodeByType = function(parentElement, type) {
  var childNodes = parentElement.childNodes;
  if(childNodes) {
    var length = childNodes.length;
    for(var i = 0;i < length;i++) {
      var child = childNodes[i];
      if(child.nodeType == type) {
        return child
      }
    }
  }
  return null
};
AdfDomUtils.getRelativePosition = function(elem) {
  var currLeft = elem.offsetLeft, currTop = elem.offsetTop;
  var agent = AdfAgent.AGENT;
  elem = elem.offsetParent;
  while(elem) {
    var style = agent.getComputedStyle(elem);
    if(style.position != "static" && !(agent.getPlatform() == AdfAgent.GECKO_PLATFORM && elem.tagName == "TD" && style.position == "relative")) {
      break
    }
    currLeft += elem.offsetLeft;
    currTop += elem.offsetTop;
    elem = elem.offsetParent
  }
  return{x:currLeft, y:currTop}
};
AdfDomUtils.getElementPosition = function(currentElement) {
  var pos = -1;
  if(currentElement) {
    var el = currentElement;
    var type = currentElement.nodeType;
    while(el) {
      if(el.nodeType == type) {
        pos++
      }
      el = el.previousSibling
    }
  }
  return pos
};
AdfDomUtils.getChildElementByPosition = function(parentElement, type, position) {
  var el = null;
  if(parentElement) {
    var idx = -1;
    el = parentElement.firstChild;
    while(el && idx < position) {
      if(el.nodeType == type) {
        idx++
      }
      if(idx != position) {
        el = el.nextSibling
      }
    }
  }
  return el
};
AdfDomUtils.getElementDepth = function(element) {
  AdfAssert.assertDomElement(element);
  var depth = -1;
  do {
    depth++;
    element = element.parentNode
  }while(element);
  return depth
};
AdfDomUtils.getElementAtPoint = function(element, pageX, pageY, closestMatch, ignoreList) {
  var agent = AdfAgent.AGENT;
  var zeroOffsetHeight = element.offsetHeight == 0;
  var shouldIgnore = ignoreList && ignoreList[element.localName];
  if(!shouldIgnore && (zeroOffsetHeight || agent.pointInElementBounds(element, pageX, pageY))) {
    if(!zeroOffsetHeight) {
      closestMatch = element
    }
    var currChild = element.firstChild;
    while(currChild) {
      if(currChild.nodeType == 1) {
        var computedStyle = agent.getComputedStyle(currChild);
        if(!computedStyle || computedStyle.visibility != "hidden" && computedStyle.display != "none") {
          var newMatch = AdfDomUtils.getElementAtPoint(currChild, pageX, pageY, closestMatch, ignoreList);
          if(newMatch != closestMatch) {
            return newMatch
          }
        }
      }
      currChild = currChild.nextSibling
    }
  }
  return closestMatch
};
AdfDomUtils.canScroll = function(domNode, viewPortWidth, viewPortHeight) {
  return domNode.scrollWidth != viewPortWidth || domNode.scrollHeight != viewPortHeight
};
AdfDomUtils.getAutoScrollDeltas = function(target, clientX, clientY) {
  var clientWidth = target.clientWidth;
  var clientHeight = target.clientHeight;
  var deltaX = 0;
  var deltaY = 0;
  var scrollTop = target.scrollTop;
  var scrollLeft = target.scrollLeft;
  var viewPortX = clientX - scrollLeft;
  var viewPortY = clientY - scrollTop;
  if(scrollLeft && viewPortX < 5) {
    deltaX = -Math.min(scrollLeft, 10)
  }else {
    if(clientWidth - viewPortX < 5) {
      var maxScrollRight = target.scrollWidth - clientWidth;
      deltaX = Math.min(maxScrollRight, 10)
    }
  }
  if(scrollTop && viewPortY < 5) {
    deltaY = -Math.min(scrollTop, 10)
  }else {
    if(clientHeight - viewPortY < 5) {
      var maxScrollBottom = target.scrollHeight - clientHeight;
      deltaY = Math.min(maxScrollBottom, 10)
    }
  }
  if(deltaX || deltaY) {
    return{x:deltaX, y:deltaY}
  }else {
    return null
  }
};
AdfDomUtils.removeAllNodes = function(element) {
  var oldNodes = element.childNodes;
  for(var i = oldNodes.length - 1;i >= 0;i--) {
    element.removeChild(oldNodes[i])
  }
};
AdfDomUtils.scrollRightBy = function(domElement, deltaX) {
  AdfDomUtils.setScrollLeft(domElement, domElement.scrollLeft + deltaX)
};
AdfDomUtils.setScrollLeft = function(domElement, newScrollLeft) {
  newScrollLeft = Math.max(newScrollLeft, 0);
  var maxScrollLeft = domElement.scrollWidth - domElement.clientWidth;
  domElement.scrollLeft = Math.min(newScrollLeft, maxScrollLeft)
};
AdfDomUtils.scrollDownBy = function(domElement, deltaY) {
  AdfDomUtils.setScrollTop(domElement, domElement.scrollTop + deltaY)
};
AdfDomUtils.setScrollTop = function(domElement, newScrollTop) {
  newScrollTop = Math.max(newScrollTop, 0);
  var maxScrollTop = domElement.scrollHeight - domElement.clientHeight;
  domElement.scrollTop = Math.min(newScrollTop, maxScrollTop)
};
AdfDomUtils.scrollChildIntoViewY = function(childElement) {
  var offsetTop = childElement.offsetTop;
  var offsetHeight = childElement.offsetHeight;
  var offsetParent = childElement.offsetParent;
  var scrollParent = childElement.parentNode;
  while(scrollParent && scrollParent.scrollHeight <= scrollParent.offsetHeight) {
    if(scrollParent.offsetParent != offsetParent) {
      offsetTop += scrollParent.offsetTop;
      offsetParent = scrollParent.offsetParent
    }
    scrollParent = scrollParent.parentNode
  }
  if(scrollParent != null) {
    if(offsetTop < scrollParent.scrollTop) {
      scrollParent.scrollTop = offsetTop
    }else {
      if(offsetTop + offsetHeight > scrollParent.scrollTop + scrollParent.clientHeight) {
        scrollParent.scrollTop = offsetTop + offsetHeight - scrollParent.clientHeight
      }
    }
  }
};
AdfDomUtils.getNodeInfo = function(domNode) {
  var nodeInfo = "";
  if(domNode) {
    nodeInfo += domNode.nodeName;
    if(domNode.id) {
      nodeInfo += " id=" + domNode.id
    }
    if(domNode._afrpeerid) {
      nodeInfo += " peer id=" + domNode._afrpeerid
    }
    if(domNode.className) {
      nodeInfo += " class=" + domNode.className
    }
  }
  return nodeInfo
};
AdfDomUtils.suppressActionLinkBrowserContextMenu = function(componentContextMenuEvent) {
  var agent = AdfAgent.AGENT;
  var nativeEvent = componentContextMenuEvent.getNativeEvent();
  var eventTarget = AdfDomUtils.getElement(agent.getEventTarget(nativeEvent));
  var href = eventTarget.getAttribute("href", 2);
  if(href == null || href == "") {
    var eventTargetParent = eventTarget.parentNode;
    if(eventTargetParent != null) {
      href = eventTargetParent.getAttribute("href", 2)
    }
  }
  if(href != null) {
    if(href == "#" || href.indexOf("javascript:") == 0) {
      agent.preventDefault(nativeEvent)
    }
  }
};
AdfDomUtils.swapIcon = function(originalIcon, iconKey) {
  var laf = AdfPage.PAGE.getLookAndFeel();
  var rawIcon = laf.getRawIcon(iconKey);
  var agent = AdfAgent.AGENT;
  if(rawIcon != null && !agent.isEqualIcon(originalIcon, rawIcon)) {
    if(agent.getPlatform() == AdfAgent.IE_PLATFORM && originalIcon.tagName == rawIcon.tagName && rawIcon.tagName == "IMG") {
      originalIcon.src = rawIcon.src;
      originalIcon.alt = rawIcon.alt;
      originalIcon.title = originalIcon.title;
      originalIcon.border = rawIcon.border
    }else {
      var clone = rawIcon.cloneNode(true);
      agent.replaceNode(clone, originalIcon)
    }
  }
};
AdfDomUtils._getCSSClassNameIndex = function(currentClassName, className) {
  if(!currentClassName) {
    return-1
  }else {
    if(className === currentClassName) {
      return 0
    }else {
      var classNameLength = className.length;
      var currentClassNameLength = currentClassName.length;
      if(!currentClassName.indexOf) {
        return-1
      }
      var nameIndex = currentClassName.indexOf(className);
      if(nameIndex >= 0) {
        var hasStart = nameIndex == 0 || currentClassName.charAt(nameIndex - 1) == " ";
        var endIndex = nameIndex + classNameLength;
        var hasEnd = endIndex == currentClassNameLength || currentClassName.charAt(endIndex) == " ";
        if(hasStart && hasEnd) {
          return nameIndex
        }else {
          var lastNameIndex = currentClassName.lastIndexOf(className);
          if(lastNameIndex != nameIndex) {
            hasStart = currentClassName.charAt(lastNameIndex - 1);
            endIndex = lastNameIndex + classNameLength;
            hasEnd = endIndex == currentClassNameLength || currentClassName.charAt(endIndex) == " ";
            if(hasStart && hasEnd) {
              return lastNameIndex
            }else {
              return currentClassName.indexOf(" " + className + " ")
            }
          }
        }
      }
      return-1
    }
  }
};
AdfDomUtils.addCSSClassName = function(domElement, className) {
  AdfAssert.assertDomElement(domElement);
  var added = false;
  if(className != null) {
    AdfAssert.assertString(className);
    var currentClassName = domElement.className;
    var classNameIndex = AdfDomUtils._getCSSClassNameIndex(currentClassName, className);
    if(classNameIndex == -1) {
      var newClassName = currentClassName ? className + " " + currentClassName : className;
      domElement.className = newClassName;
      added = true
    }
  }
  return added
};
AdfDomUtils.removeCSSClassName = function(domElement, className) {
  AdfAssert.assertDomElement(domElement);
  var removed = false;
  if(className != null) {
    var currentClassName = domElement.className;
    var classNameIndex = AdfDomUtils._getCSSClassNameIndex(currentClassName, className);
    if(classNameIndex != -1) {
      var classNameEndIndex = classNameIndex + className.length;
      var beforeString = classNameIndex == 0 ? null : currentClassName.substring(0, classNameIndex);
      var afterString = classNameEndIndex == currentClassName.length ? null : currentClassName.substring(classNameEndIndex + 1);
      var newClassName;
      if(beforeString == null) {
        if(afterString == null) {
          newClassName = ""
        }else {
          newClassName = afterString
        }
      }else {
        if(afterString == null) {
          newClassName = beforeString
        }else {
          newClassName = beforeString + afterString
        }
      }
      domElement.className = newClassName;
      removed = true
    }
  }
  return removed
};
AdfDomUtils.addOrRemoveCSSClassName = function(add, domElement, className) {
  var func = add ? AdfDomUtils.addCSSClassName : AdfDomUtils.removeCSSClassName;
  return func(domElement, className)
};
AdfDomUtils.containsCSSClassName = function(domElement, className) {
  if(className != null) {
    return AdfDomUtils._getCSSClassNameIndex(domElement.className, className) != -1
  }else {
    return false
  }
};
AdfDomUtils.addInlineStyle = function(element, newStyle, takesPrecedence) {
  if(newStyle == null) {
    return
  }
  var existingStyle = element.style.cssText;
  if(existingStyle == null || existingStyle == "") {
    element.style.cssText = newStyle
  }else {
    if(takesPrecedence == true) {
      element.style.cssText = existingStyle + ";" + newStyle
    }else {
      element.style.cssText = newStyle + ";" + existingStyle
    }
  }
};
AdfDomUtils.fillEmptyCell = function(cell) {
  AdfAssert.assertDomElement(cell, "TD");
  if(cell.firstChild == null) {
    var div = cell.ownerDocument.createElement("div");
    cell.appendChild(div)
  }
};
AdfDomUtils.getElementsByClassName = function(domNode, className) {
  if(domNode == null) {
    domNode = AdfAgent.AGENT.getDomDocument().documentElement
  }
  var allElements = domNode.getElementsByTagName("*");
  var length = allElements.length;
  var classElements = [];
  for(var i = 0;i < length;i++) {
    element = allElements[i];
    if(AdfDomUtils.containsCSSClassName(element, className)) {
      classElements.push(element)
    }
  }
  return classElements
};
AdfDomUtils.setAccessibleState = function(component, state) {
  var subId = AdfRichUIPeer.CreateSubId(component.getClientId(), "state");
  AdfDomUtils.setAccessibleStateByElementId(subId, state)
};
AdfDomUtils.setAccessibleStateByElementId = function(elementId, state) {
  var agent = AdfAgent.AGENT;
  var element = agent.getElementById(elementId);
  AdfAssert.assertDomNode(element);
  if(state != null) {
    agent.setTextContent(element, " " + state + " ")
  }else {
    agent.setTextContent(element, "")
  }
};
AdfDomUtils.getFirstElementMatch = function(element, isExclusive, matchFunc, context) {
  AdfAssert.assertFunction(matchFunc);
  AdfAssert.assertDomElement(element);
  if(!isExclusive && matchFunc(element, context)) {
    return element
  }
  if(element.getElementsByTagName) {
    var elements = element.getElementsByTagName("*");
    var length = elements.length;
    for(var i = 0;i < length;i++) {
      var currElement = elements[i];
      if(matchFunc(currElement, context)) {
        return currElement
      }
    }
  }
  return null
};
AdfDomUtils.getNextElementMatch = function(element, contextElement, isExclusive, matchFunc, context) {
  AdfAssert.assertFunction(matchFunc);
  AdfAssert.assertDomElement(element);
  AdfAssert.assertDomElementOrNull(contextElement);
  var matchElement = null;
  if(!isExclusive) {
    matchElement = AdfDomUtils.getFirstElementMatch(element, true, matchFunc, context);
    if(matchElement != null) {
      return matchElement
    }
  }
  while(element && element != contextElement) {
    if(element.nextSibling) {
      element = element.nextSibling;
      if(element.nodeType == 1) {
        matchElement = AdfDomUtils.getFirstElementMatch(element, false, matchFunc, context);
        if(matchElement != null) {
          return matchElement
        }
      }
    }else {
      var parentElement = element.parentNode;
      if(matchFunc(parentElement, context)) {
        return parentElement
      }
      element = parentElement
    }
  }
  return null
};
AdfDomUtils.getLastElementMatch = function(element, isExclusive, matchFunc, context) {
  AdfAssert.assertFunction(matchFunc);
  AdfAssert.assertDomElement(element);
  if(element.getElementsByTagName) {
    var elements = element.getElementsByTagName("*");
    for(var i = elements.length - 1;i >= 0;i--) {
      var currElement = elements[i];
      if(matchFunc(currElement, context)) {
        return currElement
      }
    }
  }
  if(!isExclusive && matchFunc(element, context)) {
    return element
  }
  return null
};
AdfDomUtils.getPreviousElementMatch = function(element, contextElement, matchFunc, context) {
  AdfAssert.assertFunction(matchFunc);
  AdfAssert.assertDomElement(element);
  AdfAssert.assertDomElementOrNull(contextElement);
  while(element && element != contextElement) {
    var previousElement = element.previousSibling;
    while(previousElement && previousElement.nodeType != 1) {
      previousElement = previousElement.previousSibling
    }
    if(previousElement) {
      matchElement = AdfDomUtils.getLastElementMatch(previousElement, false, matchFunc, context);
      if(matchElement != null) {
        return matchElement
      }
      element = previousElement
    }else {
      var parentElement = element.parentNode;
      if(matchFunc(parentElement, context)) {
        return parentElement
      }
      element = parentElement
    }
  }
  return null
};
AdfDomUtils.getFirstFilteredElement = function(element, isExclusive, filterFunc, context) {
  AdfAssert.assertFunction(filterFunc);
  AdfAssert.assertDomElement(element);
  var filterResult = filterFunc(element, context);
  if(!isExclusive && filterResult == AdfDomUtils.FILTER_ACCEPT) {
    return element
  }else {
    if(filterResult == AdfDomUtils.FILTER_REJECT) {
      return null
    }
  }
  return AdfDomUtils.depthFirstFilter(element.firstChild, element, AdfDomUtils.TRAVERSE_DIRECTION_DOWN, filterFunc, context)
};
AdfDomUtils.depthFirstFilter = function(element, rootElement, direction, filterFunc, context) {
  if(element == null || element == rootElement) {
    return null
  }
  var filterResult = filterFunc(element, context);
  if(filterResult == AdfDomUtils.FILTER_ACCEPT) {
    AdfAssert.assert(direction != AdfDomUtils.TRAVERSE_DIRECTION_UP);
    return element
  }else {
    var nextSearchElement = null;
    if(filterResult != AdfDomUtils.FILTER_REJECT && direction != AdfDomUtils.TRAVERSE_DIRECTION_UP && element.firstChild) {
      nextSearchElement = element.firstChild;
      direction = AdfDomUtils.TRAVERSE_DIRECTION_DOWN
    }else {
      if(element.nextSibling) {
        nextSearchElement = element.nextSibling;
        direction = AdfDomUtils.TRAVERSE_DIRECTION_PARALLEL
      }else {
        nextSearchElement = element.parentNode;
        direction = AdfDomUtils.TRAVERSE_DIRECTION_UP
      }
    }
    return AdfDomUtils.depthFirstFilter(nextSearchElement, rootElement, direction, filterFunc, context)
  }
};
AdfDomUtils.getNextFilteredElement = function(element, contextElement, isExclusive, filterFunc, context) {
  AdfAssert.assertFunction(filterFunc);
  AdfAssert.assertDomElement(element);
  AdfAssert.assertDomElementOrNull(contextElement);
  var filteredElement = null;
  if(!isExclusive) {
    filteredElement = AdfDomUtils.getFirstFilteredElement(element, false, filterFunc, context);
    if(filteredElement != null) {
      return filteredElement
    }
  }
  while(element && element != contextElement) {
    if(element.nextSibling) {
      element = element.nextSibling;
      if(element.nodeType == 1) {
        filteredElement = AdfDomUtils.getFirstFilteredElement(element, false, filterFunc, context);
        if(filteredElement != null) {
          return filteredElement
        }
      }
    }else {
      var parentElement = element.parentNode;
      if(parentElement && parentElement != contextElement && parentElement.nodeType == 1 && filterFunc(parentElement, context) == AdfDomUtils.FILTER_ACCEPT) {
        return parentElement
      }
      element = parentElement
    }
  }
  return null
};
AdfDomUtils.reverseDepthFirstFilter = function(element, rootElement, direction, filterFunc, context) {
  if(element == null || element == rootElement) {
    return null
  }
  var filterResult = filterFunc(element, context);
  if(filterResult == AdfDomUtils.FILTER_ACCEPT && (direction == AdfDomUtils.TRAVERSE_DIRECTION_UP || !element.lastChild)) {
    return element
  }else {
    var nextSearchElement = null;
    if(direction != AdfDomUtils.TRAVERSE_DIRECTION_UP && filterResult != AdfDomUtils.FILTER_REJECT && element.lastChild) {
      nextSearchElement = element.lastChild;
      direction = AdfDomUtils.TRAVERSE_DIRECTION_DOWN
    }else {
      if(element.previousSibling) {
        nextSearchElement = element.previousSibling;
        direction = AdfDomUtils.TRAVERSE_DIRECTION_PARALLEL
      }else {
        nextSearchElement = element.parentNode;
        direction = AdfDomUtils.TRAVERSE_DIRECTION_UP
      }
    }
    return AdfDomUtils.reverseDepthFirstFilter(nextSearchElement, rootElement, direction, filterFunc, context)
  }
};
AdfDomUtils.getLastFilteredElement = function(element, isExclusive, filterFunc, context) {
  AdfAssert.assertFunction(filterFunc);
  AdfAssert.assertDomElement(element);
  var filteredElement = AdfDomUtils.reverseDepthFirstFilter(element.lastChild, element, AdfDomUtils.TRAVERSE_DIRECTION_DOWN, filterFunc, context);
  if(filteredElement != null) {
    return filteredElement
  }else {
    if(!isExclusive && filterFunc(element, context) == AdfDomUtils.FILTER_ACCEPT) {
      return element
    }
  }
  return null
};
AdfDomUtils.getPreviousFilteredElement = function(element, contextElement, filterFunc, context) {
  AdfAssert.assertFunction(filterFunc);
  AdfAssert.assertDomElement(element);
  AdfAssert.assertDomElementOrNull(contextElement);
  var acceptedElement = null;
  while(element && element != contextElement) {
    if(element.previousSibling) {
      element = element.previousSibling;
      if(element.nodeType == 1) {
        acceptedElement = AdfDomUtils.getLastFilteredElement(element, false, filterFunc, context);
        if(acceptedElement != null) {
          return acceptedElement
        }
      }
    }else {
      var parentElement = element.parentNode;
      if(parentElement && parentElement != contextElement && parentElement.nodeType == 1 && filterFunc(parentElement, context) == AdfDomUtils.FILTER_ACCEPT) {
        return parentElement
      }
      element = parentElement
    }
  }
  return null
};
AdfDomUtils.getFirstChildElementByAttributeValue = AdfDomUtils.getChildElementByAttributeValue = function(domElement, attrName, attrValue, tagName) {
  AdfAssert.assertNonEmptyString(attrName);
  AdfAssert.assertString(attrValue);
  AdfAssert.assertDomElement(domElement);
  if(!tagName) {
    tagName = "*"
  }
  var childElements = domElement.getElementsByTagName(tagName);
  var length = childElements.length;
  for(var i = 0;i < length;i++) {
    element = childElements[i];
    if(element.getAttribute(attrName) == attrValue) {
      return element
    }
  }
  return null
};
AdfDomUtils.getLastChildElementByAttributeValue = function(domElement, attrName, attrValue, tagName) {
  AdfAssert.assertNonEmptyString(attrName);
  AdfAssert.assertString(attrValue);
  AdfAssert.assertDomElement(domElement);
  if(!tagName) {
    tagName = "*"
  }
  var childElements = domElement.getElementsByTagName(tagName);
  var length = childElements.length;
  for(var i = length - 1;i >= 0;i--) {
    element = childElements[i];
    if(element.getAttribute(attrName) == attrValue) {
      return element
    }
  }
  return null
};
AdfDomUtils.getChildElementsByAttributeValue = function(domElement, attrName, attrValue, tagName) {
  AdfAssert.assertNonEmptyString(attrName);
  AdfAssert.assertNonEmptyString(attrValue);
  AdfAssert.assertDomElement(domElement);
  if(!tagName) {
    tagName = "*"
  }
  var allChildElements = domElement.getElementsByTagName(tagName);
  var length = allChildElements.length;
  var childElements = [];
  for(var i = 0;i < length;i++) {
    var element = allChildElements[i];
    if(element.getAttribute(attrName) == attrValue) {
      childElements.push(element)
    }
  }
  if(childElements.length > 0) {
    return childElements
  }
  return null
};
AdfDomUtils.getChildElementsByMatch = function(domElement, matchFunction, tagName, context) {
  AdfAssert.assertDomElement(domElement);
  AdfAssert.assertFunction(matchFunction);
  if(!tagName) {
    tagName = "*"
  }
  var allChildElements = domElement.getElementsByTagName(tagName);
  var length = allChildElements.length;
  var matchedChildElements = [];
  for(var i = 0;i < length;i++) {
    var element = allChildElements[i];
    if(matchFunction(element, context)) {
      matchedChildElements.push(element)
    }
  }
  return matchedChildElements.length > 0 ? matchedChildElements : null
};
AdfDomUtils.getChildElementByValueMap = function(domElement, keyValueArray, tagName) {
  AdfAssert.assertDomElement(domElement);
  AdfAssert.assertArray(keyValueArray);
  AdfAssert.assert(keyValueArray.length == 2);
  if(!tagName) {
    tagName = "*"
  }
  var attrKey = keyValueArray[0];
  var attrValue = keyValueArray[1];
  return AdfDomUtils.getChildElementByAttributeValue(domElement, attrKey, attrValue, tagName)
};
AdfDomUtils.getTabIndex = function(element) {
  AdfAssert.assertDomElement(element);
  var agent = AdfAgent.AGENT;
  var tabIndexAttr = element.attributes["tabIndex"];
  return tabIndexAttr == null || !agent.hasAttribute(element, tabIndexAttr) ? undefined : tabIndexAttr.value
};
AdfDomUtils.cleanHtml = function(domDocument, value) {
  var offSpan = domDocument.createElement("span");
  offSpan.innerHTML = value;
  if(value && value.indexOf("<") >= 0) {
    AdfDomUtils._cleanElementHtml(offSpan)
  }
  return offSpan
};
AdfDomUtils._cleanElementHtml = function(node) {
  var agent = AdfAgent.AGENT;
  var children = node.childNodes;
  var count = children.length - 1;
  while(count >= 0) {
    var child = children.item(count);
    if(child.nodeType == 1) {
      if(AdfDomUtils._LEGAL_ELEMENTS[child.nodeName]) {
        var attrs = child.attributes;
        for(var i = attrs.length - 1;i >= 0;i--) {
          var attr = attrs[i];
          if(agent.hasAttribute(child, attr)) {
            if(!AdfDomUtils._LEGAL_ATTRIBUTES[attr.name]) {
              child.removeAttribute(attr.nodeName)
            }
          }
        }
        AdfDomUtils._cleanElementHtml(child)
      }else {
        node.removeChild(child)
      }
    }
    count--
  }
};
AdfDomUtils.findAccessKeyDom = function(domElement, accessKeyValue) {
  if(accessKeyValue == null) {
    return null
  }
  var children = domElement.childNodes;
  for(var i = 0;i < children.length;++i) {
    if(AdfAgent.AGENT.getTextContent(children[i]) == accessKeyValue) {
      return children[i]
    }
  }
  return null
};
AdfDomUtils.handleTextChangeWithAccessKey = function(component, domElement, newValue) {
  if(domElement == null) {
    return false
  }
  var accessKeyValue = component.getPropertyValue("accessKey");
  var accessKeySpan = AdfDomUtils.findAccessKeyDom(domElement, accessKeyValue);
  if(accessKeyValue != null) {
    var doc = component.getPeer().getDomDocument();
    if(accessKeySpan != null) {
      var index = newValue.indexOf(accessKeyValue);
      if(index == -1) {
        AdfDomUtils._removeAccessKeyElement(domElement, accessKeySpan);
        AdfDomUtils._setTextContent(domElement, newValue)
      }else {
        AdfDomUtils._removeSiblings(accessKeySpan);
        if(index > 0) {
          domElement.insertBefore(doc.createTextNode(newValue.substring(0, index)), accessKeySpan)
        }
        AdfDomUtils._setTextContent(accessKeySpan, accessKeyValue);
        if(index + 1 < newValue.length) {
          domElement.appendChild(doc.createTextNode(newValue.substr(index + 1)))
        }
      }
      return true
    }else {
      return AdfDomUtils._setTextAndAccessKeySpan(component, domElement, accessKeyValue, accessKeySpan, newValue)
    }
  }else {
    if(accessKeySpan != null) {
      AdfDomUtils._removeAccessKeyElement(accessKeySpan)
    }
    AdfDomUtils._setTextContent(domElement, newValue);
    return true
  }
  return false
};
AdfDomUtils.launchHelpWindow = function(url) {
  var helpWindowName = AdfDomUtils._getHelpWindowName();
  if(helpWindowName == null) {
    helpWindowName = "RCFHelpWindow";
    AdfDomUtils._setHelpWindowName(helpWindowName)
  }
  var helpWindow = window.open(url, helpWindowName, "width=650,height=450,resizable=yes,scrollbars=yes,alwaysRaised");
  helpWindow.focus()
};
AdfDomUtils.writeAttributesToElement = function(domElement, attributesMap) {
  var agent = AdfAgent.AGENT;
  for(var attribute in attributesMap) {
    var value = attributesMap[attribute];
    if(value != undefined) {
      agent.setAttribute(domElement, attribute, value)
    }
  }
};
AdfDomUtils.copyAllAttributes = function(sourceElement, targetElement) {
  for(var i = 0;i < sourceElement.attributes.length;i++) {
    var attr = sourceElement.attributes[i];
    targetElement.setAttribute(attr.nodeName, attr.value)
  }
};
AdfDomUtils.getPopupAncestor = function(component) {
  var parent = null;
  try {
    parent = component.getParent()
  }catch(err) {
  }
  if(parent == null) {
    return null
  }
  while(parent != null) {
    if(parent instanceof AdfRichPopup) {
      return parent
    }else {
      try {
        parent = parent.getParent()
      }catch(err) {
        return false
      }
    }
    if(parent == null) {
      return false
    }
  }
};
AdfDomUtils.isInPopup = function(component) {
  var popupAncestor = AdfDomUtils.getPopupAncestor(component);
  if(popupAncestor == null) {
    return null
  }else {
    if(popupAncestor == false) {
      return false
    }else {
      return true
    }
  }
};
AdfDomUtils._getHelpWindowName = function() {
  var nameEQ = AdfDomUtils._HELP_WINDOW_NAME_COOKIE + "=";
  var ca = document.cookie.split(";");
  var caLen = ca.length;
  for(var i = 0;i < caLen;i++) {
    var c = ca[i];
    var strIdx = 0;
    while(c.charAt(strIdx) == " ") {
      strIdx++
    }
    c = c.substring(strIdx, c.length);
    if(c.indexOf(nameEQ) == 0) {
      return c.substring(nameEQ.length, c.length)
    }
  }
  return null
};
AdfDomUtils._setHelpWindowName = function(windowName) {
  document.cookie = AdfDomUtils._HELP_WINDOW_NAME_COOKIE + "=" + windowName + "; ; path=/"
};
AdfDomUtils._setTextAndAccessKeySpan = function(component, domElement, accessKeyValue, accessKeySpan, newValue) {
  var style = AdfAgent.AGENT.getExpandoProperty(domElement, "_adfAccessKeyStyleClass", null);
  if(style == null) {
    AdfDomUtils._setTextContent(domElement, newValue)
  }else {
    var index = newValue.indexOf(accessKeyValue);
    if(index >= 0) {
      if(index > 0) {
        AdfAgent.AGENT.setTextContent(domElement, newValue.substring(0, index))
      }else {
        while(domElement.lastChild != null) {
          domElement.removeChild(domElement.lastChild)
        }
      }
      var doc = component.getPeer().getDomDocument();
      accessKeySpan = doc.createElement("SPAN");
      accessKeySpan.className = style;
      AdfAgent.AGENT.setTextContent(accessKeySpan, accessKeyValue);
      domElement.appendChild(accessKeySpan);
      if(index + 1 < newValue.length) {
        domElement.appendChild(doc.createTextNode(newValue.substr(index + 1)))
      }
    }else {
      AdfAgent.AGENT.setTextContent(domElement, newValue)
    }
  }
  return true
};
AdfDomUtils._removeSiblings = function(domElement) {
  var node;
  var parent = domElement.parentNode;
  while((node = domElement.previousSibling) != null) {
    parent.removeChild(node)
  }
  while((node = domElement.nextSibling) != null) {
    parent.removeChild(node)
  }
};
AdfDomUtils._setTextContent = function(domElement, value) {
  if(domElement.tagName == "BUTTON") {
    AdfAgent.AGENT.setButtonTextContent(domElement, value)
  }else {
    AdfAgent.AGENT.setTextContent(domElement, value)
  }
};
AdfDomUtils._removeAccessKeyElement = function(domElement, accessKeyElement) {
  AdfAgent.AGENT.setExpandoProperty(domElement, "_adfAccessKeyStyleClass", accessKeyElement.className);
  accessKeyElement.parentNode.removeChild(accessKeyElement)
};
AdfDomUtils.__componentTextChanged = function(component, domElement, newValue, oldValue) {
  if(oldValue != null) {
    var spanElement = AdfDomUtils.getFirstDescendentElement(domElement, "SPAN");
    var accessKeyValue = component.getPropertyValue("accessKey");
    var accessKeySpan = accessKeyValue == null ? null : AdfDomUtils.findAccessKeyDom(domElement, accessKeyValue);
    var textElement = spanElement && spanElement != accessKeySpan ? spanElement : domElement;
    return AdfDomUtils.handleTextChangeWithAccessKey(component, textElement, newValue)
  }
  return false
};
AdfDomUtils._LEGAL_ELEMENTS = {SPAN:1, B:1, A:1, I:1, EM:1, BR:1, HR:1, LI:1, OL:1, UL:1, P:1, TT:1, BIG:1, SMALL:1, PRE:1};
AdfDomUtils._LEGAL_ATTRIBUTES = {"class":1, style:1, href:1};
AdfDomUtils._HELP_WINDOW_NAME_COOKIE = "ORA_ADF_HELPWINDOWNAME";
AdfDomUtils.FILTER_ACCEPT = 1;
AdfDomUtils.FILTER_REJECT = 0;
AdfDomUtils.FILTER_SKIP = -1;
AdfDomUtils.TRAVERSE_DIRECTION_UP = 0;
AdfDomUtils.TRAVERSE_DIRECTION_DOWN = 1;
AdfDomUtils.TRAVERSE_DIRECTION_PARALLEL = 2;

var AdfEventUtils = new Object;
AdfEventUtils.addListener = function(listenerArray, instance, listener) {
  AdfAssert.assertArrayOrNull(listenerArray);
  AdfAssert.assertFunction(listener);
  if(listenerArray == null) {
    listenerArray = new Array
  }
  listenerArray.push(instance);
  listenerArray.push(listener);
  return listenerArray
};
AdfEventUtils.removeListener = function(listenerArray, listener) {
  AdfAssert.assertArray(listenerArray);
  var size = listenerArray.length;
  for(var i = 1;i < size;i += 2) {
    if(listenerArray[i] == listener) {
      if(size == 2) {
        return null
      }else {
        listenerArray.splice(i - 1, 2);
        break
      }
    }
  }
  return listenerArray
};
AdfEventUtils.firePropertyChangeEvent = function(listenerArray, source, propertyName, oldValue, newValue) {
  AdfAssert.assertArrayOrNull(listenerArray);
  AdfAssert.assert(source != null);
  AdfAssert.assertString(propertyName);
  if(listenerArray && oldValue !== newValue) {
    AdfEventUtils.deliverEventToListeners(listenerArray, new AdfPropertyChangeEvent(source, propertyName, oldValue, newValue))
  }
};
AdfEventUtils.deliverEventToListeners = function(listenerArray, event) {
  AdfAssert.assertArray(listenerArray);
  AdfAssert.assertPrototype(event, AdfBaseEvent);
  var size = listenerArray.length;
  for(var i = 0;i < size;i += 2) {
    var instance = listenerArray[i];
    var listener = listenerArray[i + 1];
    try {
      if(instance != null) {
        listener.call(instance, event)
      }else {
        listener(event)
      }
    }catch(e) {
      AdfLogger.LOGGER.logErrorAsWarning(e, " delivering event:" + event + " to listener:" + listener)
    }
  }
};
AdfEventUtils.addEventListener = function(listeners, eventType, listener, instance) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assert(typeof instance != "function");
  if(!listeners) {
    listeners = new Object
  }
  var oldListener = listeners[eventType];
  if(oldListener != null || instance != null) {
    var array;
    if(AdfCollections.isArray(oldListener)) {
      array = oldListener
    }else {
      array = new Array;
      if(oldListener) {
        array.push(oldListener)
      }
    }
    AdfAssert.assertArray(array);
    if(instance != null) {
      array.push(instance)
    }
    array.push(listener);
    listeners[eventType] = array
  }else {
    listeners[eventType] = listener
  }
  return listeners
};
AdfEventUtils.removeEventListener = function(listeners, eventType, listener, instance) {
  AdfAssert.assertFunction(listener);
  AdfAssert.assert(typeof instance != "function");
  if(listeners != null) {
    var oldListeners = listeners[eventType];
    if(oldListeners != null) {
      if(!AdfCollections.isArray(oldListeners)) {
        if(oldListeners == listener) {
          listeners[eventType] = null
        }
      }else {
        AdfAssert.assertArray(oldListeners);
        var length = oldListeners.length;
        for(var i = 0;i < length;i++) {
          var value = oldListeners[i];
          if(typeof value != "function") {
            if(value == instance && oldListeners[i + 1] == listener) {
              oldListeners.splice(i, 2);
              break
            }
            i++
          }else {
            if(value == listener && instance == null) {
              oldListeners.splice(i, 1);
              break
            }
          }
        }
        var oldLength = oldListeners.length;
        if(oldLength == 1) {
          listeners[eventType] = oldListeners[0]
        }else {
          if(oldLength == 0) {
            listeners[eventType] = null
          }
        }
      }
    }
  }
  return listeners
};

var AdfStyleUtils = new Object;
AdfStyleUtils.convertToValidStyleClass = function(styleClassName) {
  if(styleClassName == null) {
    return null
  }
  styleClassName = styleClassName.replace("|", "_");
  return styleClassName.replace(/::/g, "_")
};

function AdfMessageUtils() {
  this.Init()
}
AdfObject.createSubclass(AdfMessageUtils);
AdfMessageUtils.getInstance = function() {
  if(AdfMessageUtils._instance == null) {
    AdfMessageUtils._instance = new AdfMessageUtils
  }
  return AdfMessageUtils._instance
};
AdfMessageUtils.hasMessages = function(page, globalMessageCount, globalOnly) {
  var clientIdsWithMessagesCount = page.getClientIdsWithMessages().length;
  if(clientIdsWithMessagesCount == 0 && globalMessageCount == 0 || globalOnly && globalMessageCount == 0) {
    return false
  }
  return true
};
AdfMessageUtils.isPageLevelBoxNeeded = function(page, pageLevelMessages, globalOnly) {
  var clientIdsWithMessagesCount = page.getClientIdsWithMessages().length;
  var pageLevelMessageCount = 0;
  if(pageLevelMessages != null) {
    pageLevelMessageCount = pageLevelMessages.length
  }
  var numCompMessagesIgnored = 1;
  if(page.isScreenReaderMode()) {
    numCompMessagesIgnored = 0
  }
  if(pageLevelMessageCount == 0 && (globalOnly || clientIdsWithMessagesCount <= numCompMessagesIgnored)) {
    return false
  }
  return true
};
AdfMessageUtils.getCombinedMessagesDom = function(messageHandlerClientId, messageOverride, globalOnly) {
  AdfMessageUtils._globalOnly = globalOnly;
  var page = AdfPage.PAGE;
  var allMessages = page.getAllMessages();
  var pageLevelMessages = allMessages[messageHandlerClientId];
  var compsWithMessages = page.getClientIdsWithMessages();
  var isSingleMessage = false;
  if(compsWithMessages.length == 1) {
    var size = page.getMessages(compsWithMessages[0]).length;
    if(size <= 1) {
      isSingleMessage = true
    }
  }else {
    if(globalOnly) {
      isSingleMessage = pageLevelMessages.length <= 1
    }
  }
  var doc = page.getDocument();
  var pageLevelTable;
  if(pageLevelMessages != null) {
    pageLevelTable = doc.createElement("table");
    pageLevelTable.cellSpacing = 0;
    pageLevelTable.cellPadding = 0;
    pageLevelTable.summary = "";
    pageLevelTable.role = "presentation";
    AdfMessageUtils._addMessageWrapper(doc, pageLevelTable, null, pageLevelMessages, null, isSingleMessage)
  }
  var componentLevelTable;
  if(!globalOnly) {
    for(var id in allMessages) {
      if(id != messageHandlerClientId) {
        var compMessages = allMessages[id];
        if(compMessages != null) {
          if(componentLevelTable == null) {
            componentLevelTable = doc.createElement("table");
            componentLevelTable.summary = "";
            componentLevelTable.role = "presentation"
          }
          var title = compMessages["title"];
          AdfMessageUtils._addMessageWrapper(doc, componentLevelTable, id, compMessages, title)
        }
      }
    }
  }
  var laf = page.getLookAndFeel();
  var intro = doc.createElement("div");
  AdfDomUtils.addCSSClassName(intro, laf.getStyleClass(AdfMessageUtils._MESSAGES_INTRO_STYLE_CLASS));
  if(messageOverride == null) {
    if(!isSingleMessage) {
      intro.appendChild(doc.createTextNode(laf.getTranslatedString(AdfMessageUtils._COMBINED_MESSAGES_INTRO_LABEL)));
      AdfDomUtils.addCSSClassName(intro, laf.getStyleClass(AdfMessageUtils._MESSAGES_INTRO_SEPARATOR_STYLE_CLASS))
    }
  }else {
    intro.appendChild(doc.createTextNode(messageOverride));
    AdfDomUtils.addCSSClassName(intro, laf.getStyleClass(AdfMessageUtils._MESSAGES_INTRO_SEPARATOR_STYLE_CLASS))
  }
  var wrapper = doc.createElement("div");
  wrapper.appendChild(intro);
  if(pageLevelTable != null) {
    wrapper.appendChild(pageLevelTable)
  }
  if(pageLevelTable != null) {
    AdfDomUtils.addCSSClassName(pageLevelTable, laf.getStyleClass(AdfMessageUtils._MESSAGES_LIST_PAGE_STYLE_CLASS));
    AdfDomUtils.addCSSClassName(pageLevelTable, laf.getStyleClass(AdfMessageUtils._CONTAINER_STYLE_CLASS))
  }
  if(pageLevelTable != null && componentLevelTable != null) {
    var separator = doc.createElement("hr");
    AdfDomUtils.addCSSClassName(separator, laf.getStyleClass(AdfMessageUtils._MESSAGE_GROUP_TYPE_SEPARATOR_STYLE_CLASS));
    wrapper.appendChild(separator)
  }
  if(componentLevelTable != null) {
    AdfDomUtils.addCSSClassName(componentLevelTable, laf.getStyleClass(AdfMessageUtils._COMPONENT_LEVEL_CONTAINER_STYLE_CLASS));
    wrapper.appendChild(componentLevelTable)
  }
  return wrapper
};
AdfMessageUtils.appendComponentMessageInlineDom = function(element, messagesArray) {
  if(messagesArray != null) {
    var messageDomParent = element;
    var count = messagesArray.length;
    var multiple = count > 1;
    var page = AdfPage.PAGE;
    var laf = page.getLookAndFeel();
    if(multiple) {
      var doc = page.getDocument();
      var domWindow = page.getDomWindow();
      var agent = AdfAgent.AGENT;
      var isMobileSafariAgent = domWindow.AdfSafariMobileAgent && agent instanceof AdfSafariMobileAgent;
      var table = doc.createElement("table");
      table.summary = "";
      table.role = "presentation";
      table.style["width"] = "100%";
      table.style["tableLayout"] = isMobileSafariAgent ? "auto" : "fixed";
      AdfDomUtils.addCSSClassName(table, laf.getStyleClass(AdfMessageUtils._CONTAINER_STYLE_CLASS));
      element.appendChild(table);
      var row = table.insertRow(-1);
      var cell = row.insertCell(-1);
      var maxType = null;
      for(var i = 0;i < count;i++) {
        var type = AdfFacesMessage.getTypeFromMessage(messagesArray[i]);
        if(maxType == null || type > maxType) {
          maxType = type
        }
      }
      var icon = AdfMessageUtils.getIcon(maxType, false);
      cell.appendChild(icon);
      AdfDomUtils.addCSSClassName(cell, laf.getStyleClass(AdfMessageUtils._ICON_CELL_STYLE_CLASS));
      cell = row.insertCell(-1);
      AdfDomUtils.addCSSClassName(cell, laf.getStyleClass(AdfMessageUtils._TYPE_STYLE_CLASS));
      var description = AdfMessageUtils.getString(maxType, false);
      agent.setTextContent(cell, description);
      row = table.insertRow(-1);
      cell = row.insertCell(-1);
      cell.colSpan = 2;
      AdfDomUtils.addCSSClassName(cell, laf.getStyleClass(AdfMessageUtils._INTRO_STYLE_CLASS));
      var intro = laf.getTranslatedString(AdfMessageUtils._COMPONENT_MESSAGES_INTRO_LABEL);
      agent.setTextContent(cell, intro);
      row = table.insertRow(-1);
      cell = row.insertCell(-1);
      agent.setTextContent(cell, " ");
      messageDomParent = row.insertCell(-1);
      AdfDomUtils.addCSSClassName(messageDomParent, laf.getStyleClass(AdfMessageUtils._MESSAGES_LIST_PAGE_STYLE_CLASS))
    }
    for(var k = AdfFacesMessage.TYPE_FATAL;k >= AdfFacesMessage.TYPE_INFO;k--) {
      var typedMessages = messagesArray.sorted[k];
      if(typedMessages) {
        var typedLength = typedMessages.length;
        for(var j = 0;j < typedLength;j++) {
          var table = AdfMessageUtils._getMessageDom(typedMessages[j], multiple, false);
          var domWindow = page.getDomWindow();
          var agent = AdfAgent.AGENT;
          var isMobileSafariAgent = domWindow.AdfSafariMobileAgent && agent instanceof AdfSafariMobileAgent;
          table.style["width"] = "100%";
          table.style["tableLayout"] = isMobileSafariAgent ? "auto" : "fixed";
          AdfDomUtils.addCSSClassName(table, laf.getStyleClass(AdfMessageUtils._CONTAINER_STYLE_CLASS));
          if(multiple) {
            AdfDomUtils.addCSSClassName(table, laf.getStyleClass(AdfMessageUtils._MESSAGE_LIST_COMPONENT_STYLE_CLASS))
          }
          messageDomParent.appendChild(table)
        }
      }
    }
  }
};
AdfMessageUtils.hasMessagePopupContent = function(componentId) {
  var page = AdfPage.PAGE;
  var messages = page.getMessages(componentId);
  if(messages != null && messages["overridden"] != true) {
    return true
  }
  return false
};
AdfMessageUtils.getComponentMessagePopupDom = function(componentId) {
  var page = AdfPage.PAGE;
  var messages = page.getMessages(componentId);
  var doc = page.getDocument();
  var inlineMessage = doc.createElement("div");
  var inlineMessageContent = doc.createElement("div");
  inlineMessageContent.style.overflow = "hidden";
  AdfDomUtils.addCSSClassName(inlineMessageContent, AdfMessageUtils._CONTENT_STYLE_CLASS);
  inlineMessage.appendChild(inlineMessageContent);
  var viewport = doc.createElement("div");
  inlineMessageContent.appendChild(viewport);
  AdfMessageUtils.appendComponentMessageInlineDom(viewport, messages);
  return inlineMessage
};
AdfMessageUtils.getComponentMessagePopupFooterDom = function(componentId) {
  var page = AdfPage.PAGE;
  var doc = page.getDocument();
  var agent = AdfAgent.AGENT;
  var laf = page.getLookAndFeel();
  var inlineMessage = null;
  var defaultMessageHandlerComponentId = page.getDefaultMessageHandlerComponentId();
  var messageHandlerComponent = page.findComponent(defaultMessageHandlerComponentId);
  var messageHandlerPeer = messageHandlerComponent.getPeer();
  messageHandlerPeer.bind(messageHandlerComponent);
  var globalMessagesPresent = messageHandlerPeer.isMessagesDialogShowable();
  if(AdfMessageUtils._globalOnly == true) {
    globalMessagesPresent = false
  }
  var allMessages = page.getAllMessages();
  var componentLevelClientIds = [];
  var currentClientIdIndex = -1;
  for(var id in allMessages) {
    var compMessages = allMessages[id];
    if(compMessages != null && compMessages["compId"] != null) {
      if(id == componentId) {
        currentClientIdIndex = componentLevelClientIds.length
      }
      if(id != defaultMessageHandlerComponentId) {
        var associatedMessages = page.getMessages(id);
        if(associatedMessages != null && associatedMessages["overridden"] != true) {
          componentLevelClientIds.push(id)
        }
      }
    }
  }
  var componentsHavingMessagesCount = componentLevelClientIds.length;
  if(globalMessagesPresent || componentsHavingMessagesCount > 1) {
    inlineMessage = doc.createElement("div");
    var inlineMessageFooter = doc.createElement("div");
    AdfDomUtils.addCSSClassName(inlineMessageFooter, AdfMessageUtils._FOOTER_STYLE_CLASS);
    inlineMessage.appendChild(inlineMessageFooter);
    table = doc.createElement("table");
    table.summary = "";
    table.role = "presentation";
    inlineMessageFooter.appendChild(table);
    table.cellPadding = 0;
    table.cellSpacing = 0;
    table.style.width = "100%";
    row = table.insertRow(-1);
    cell = row.insertCell(-1);
    AdfDomUtils.addCSSClassName(cell, AdfMessageUtils._FOOTER_START_STYLE_CLASS);
    cell = row.insertCell(-1);
    AdfDomUtils.addCSSClassName(cell, AdfMessageUtils._FOOTER_END_STYLE_CLASS);
    var navigator = doc.createElement("table");
    navigator.summary = "";
    navigator.role = "presentation";
    cell.appendChild(navigator);
    navigator.cellPadding = 0;
    navigator.cellSpacing = 0;
    AdfDomUtils.addCSSClassName(navigator, AdfMessageUtils._NAVIGATOR_STYLE_CLASS);
    row = navigator.insertRow(-1);
    if(componentsHavingMessagesCount > 1) {
      cell = row.insertCell(-1);
      var previousLink = doc.createElement("a");
      previousLink.title = laf.getTranslatedString(AdfMessageUtils._PREVIOUS_MESSAGE);
      var previousClientIdIndex = currentClientIdIndex - 1;
      if(previousClientIdIndex == -1) {
        previousClientIdIndex = componentsHavingMessagesCount - 1
      }
      previousLink.name = componentLevelClientIds[previousClientIdIndex];
      AdfDomUtils.addCSSClassName(previousLink, AdfMessageUtils._PREVIOUS_LINK_STYLE_CLASS);
      if(currentClientIdIndex == 0) {
        AdfDomUtils.addCSSClassName(previousLink, AdfMessageUtils._DISABLED_STYLE_CLASS)
      }else {
        previousLink.href = "javascript:;";
        agent.addBubbleEventListener(previousLink, "click", AdfMessageUtils.getInstance()._jumpToMessageHandlerStub);
        AdfDomUtils.removeCSSClassName(previousLink, AdfMessageUtils._DISABLED_STYLE_CLASS)
      }
      cell.appendChild(previousLink)
    }
    cell = row.insertCell(-1);
    var showAllLink = doc.createElement("a");
    AdfDomUtils.addCSSClassName(showAllLink, AdfMessageUtils._ALL_LINK_STYLE_CLASS);
    showAllLink.title = laf.getTranslatedString(AdfMessageUtils._SHOW_ALL_MESSAGES_TIP);
    showAllLink.href = "javascript:;";
    showAllLink.name = componentId;
    agent.addBubbleEventListener(showAllLink, "click", AdfMessageUtils.getInstance()._jumpToAllMessagesHandlerStub);
    showAllLink.appendChild(doc.createTextNode(laf.getTranslatedString(AdfMessageUtils._SHOW_ALL_MESSAGES)));
    cell.appendChild(showAllLink);
    if(componentsHavingMessagesCount > 1) {
      cell = row.insertCell(-1);
      var nextLink = doc.createElement("a");
      nextLink.title = laf.getTranslatedString(AdfMessageUtils._NEXT_MESSAGE);
      var nextClientIdIndex = currentClientIdIndex + 1;
      if(nextClientIdIndex == componentsHavingMessagesCount) {
        nextClientIdIndex = 0
      }
      nextLink.name = componentLevelClientIds[nextClientIdIndex];
      AdfDomUtils.addCSSClassName(nextLink, AdfMessageUtils._NEXT_LINK_STYLE_CLASS);
      if(currentClientIdIndex + 1 == componentsHavingMessagesCount) {
        AdfDomUtils.addCSSClassName(nextLink, AdfMessageUtils._DISABLED_STYLE_CLASS)
      }else {
        nextLink.href = "javascript:;";
        agent.addBubbleEventListener(nextLink, "click", AdfMessageUtils.getInstance()._jumpToMessageHandlerStub);
        AdfDomUtils.removeCSSClassName(nextLink, AdfMessageUtils._DISABLED_STYLE_CLASS)
      }
      cell.appendChild(nextLink)
    }
  }
  return inlineMessage
};
AdfMessageUtils.removeCSSClassName = function(elem, type) {
  AdfAssert.assert(elem != null);
  AdfAssert.assert(type != null);
  var prop = AdfMessageUtils._getStyleProperty(type);
  if(prop != null) {
    AdfDomUtils.removeCSSClassName(elem, prop)
  }
};
AdfMessageUtils.addCSSClassName = function(elem, type) {
  AdfAssert.assert(elem != null);
  AdfAssert.assert(type != null);
  var prop = AdfMessageUtils._getStyleProperty(type);
  if(prop != null) {
    AdfDomUtils.addCSSClassName(elem, prop)
  }
};
AdfMessageUtils.switchCSSClassName = function(elem, oldType, newType) {
  AdfAssert.assert(elem != null);
  if(oldType != null) {
    AdfMessageUtils.removeCSSClassName(elem, oldType)
  }
  if(newType != null) {
    AdfMessageUtils.addCSSClassName(elem, newType)
  }
};
AdfMessageUtils.switchIcon = function(elem, newType, isMessages) {
  var key = AdfMessageUtils._getIconKey(newType, isMessages);
  AdfDomUtils.swapIcon(elem, key)
};
AdfMessageUtils.getIcon = function(type, isMessages) {
  var key = AdfMessageUtils._getIconKey(type, isMessages);
  return AdfPage.PAGE.getLookAndFeel().getIcon(key)
};
AdfMessageUtils.getIconWithPrefix = function(type, prefix, isMessages) {
  AdfAssert.assert(prefix != null);
  var key = AdfMessageUtils._getIconKey(type, isMessages);
  return AdfPage.PAGE.getLookAndFeel().getIcon(prefix + key)
};
AdfMessageUtils.getIconForComponent = function(type, isMessages, component) {
  var icon = this.getIcon(type, isMessages);
  AdfMessageUtils.updateIconForComponent(icon, component);
  return icon
};
AdfMessageUtils.updateIconForComponent = function(icon, component) {
  if(component.getLabel) {
    var label = AdfMessageUtils._getLabel(component);
    if(label && label != "") {
      var labelTxt = ":" + label;
      if(icon.title) {
        icon.title += labelTxt
      }
      if(icon.alt) {
        icon.alt += labelTxt
      }
    }
  }
};
AdfMessageUtils.getString = function(type, isMessages) {
  var laf = AdfPage.PAGE.getLookAndFeel();
  var typeString = isMessages ? AdfMessageUtils._MESSAGES_TYPE_STRING[type] : AdfMessageUtils._TYPE_STRING[type];
  return laf.getTranslatedString(typeString)
};
AdfMessageUtils.messageGroupFocus = function(messageGroupClientId) {
  var page = AdfPage.PAGE;
  var focusComponent = page.findComponent(messageGroupClientId);
  if(focusComponent != null) {
    focusComponent.focus();
    AdfMessageUtils.HideMessagesDialog();
    page.showMessages(focusComponent.getClientId())
  }
};
AdfMessageUtils.HideMessagesDialog = function() {
  var page = AdfPage.PAGE;
  var defaultMessageHandlerComponentId = page.getDefaultMessageHandlerComponentId();
  var messageHandlerComponent = page.findComponent(defaultMessageHandlerComponentId);
  if(messageHandlerComponent) {
    var messageHandlerPeer = messageHandlerComponent.getPeer();
    messageHandlerPeer.bind(messageHandlerComponent);
    messageHandlerPeer.setMessagesDialogShown(false)
  }
};
AdfMessageUtils.prototype.Init = function() {
  AdfMessageUtils.superclass.Init.call(this);
  this._jumpToMessageHandlerStub = this.createCallback(this._jumpToMessageHandler);
  this._jumpToAllMessagesHandlerStub = this.createCallback(this._jumpToAllMessagesHandler);
  this._messageCloseHandlerStub = this.createCallback(this._messageCloseHandler)
};
AdfMessageUtils.prototype._jumpToMessageHandler = function(domEvent) {
  var agent = AdfAgent.AGENT;
  agent.preventDefault(domEvent);
  var target = agent.getEventTarget(domEvent);
  var clientId = target.name;
  AdfMessageUtils.messageGroupFocus(clientId)
};
AdfMessageUtils.prototype._jumpToAllMessagesHandler = function(domEvent) {
  AdfAgent.AGENT.preventDefault(domEvent);
  AdfMessageUtils.getInstance()._messageCloseHandler(domEvent);
  var page = AdfPage.PAGE;
  page.showMessages()
};
AdfMessageUtils.prototype._messageCloseHandler = function(domEvent) {
  var target = AdfAgent.AGENT.getEventTarget(domEvent);
  var clientId = target.name;
  var messageComponent = AdfPage.PAGE.findComponent(clientId);
  var associatedPeer = messageComponent.getPeer();
  associatedPeer.bind(messageComponent);
  if(associatedPeer.HideNoteWindow != null) {
    associatedPeer.HideNoteWindow()
  }
};
AdfMessageUtils._addMessageWrapper = function(doc, outerTable, componentClientId, messages, title, hideIcon) {
  var outerRow = outerTable.insertRow(-1);
  var outerCell = outerRow.insertCell(-1);
  var table = doc.createElement("table");
  var messageTitle = ".";
  var isScreenReaderMode = AdfPage.PAGE.isScreenReaderMode();
  for(var i = AdfFacesMessage.TYPE_FATAL;i >= AdfFacesMessage.TYPE_INFO;i--) {
    var typedMessages = messages.sorted[i];
    if(typedMessages) {
      var typedLength = typedMessages.length;
      for(var j = 0;j < typedLength;j++) {
        var typedMessage = typedMessages[j];
        AdfMessageUtils._addMessageDomToTable(table, typedMessage, true, true, hideIcon);
        if(isScreenReaderMode) {
          messageTitle += " " + typedMessage.getSummary()
        }
      }
    }
  }
  var page = AdfPage.PAGE;
  var laf = page.getLookAndFeel();
  if(componentClientId != null) {
    AdfDomUtils.addCSSClassName(outerCell, laf.getStyleClass(AdfMessageUtils._MESSAGE_GROUP_TITLE_STYLE_CLASS));
    var messageComponent = page.findComponent(componentClientId);
    var effectiveTitle = title;
    if(effectiveTitle == null) {
      effectiveTitle = AdfMessageUtils._getLabel(messageComponent);
      if(effectiveTitle == null || effectiveTitle.length == 0) {
        effectiveTitle = laf.getTranslatedString(AdfMessageUtils._COMPONENT_LEVEL_MESSAGE_LABEL)
      }
    }
    if(isScreenReaderMode) {
      effectiveTitle += messageTitle
    }
    var titleTextNode = doc.createTextNode(effectiveTitle);
    var titleRoot = titleTextNode;
    if(messageComponent != null) {
      titleRoot = doc.createElement("a");
      AdfDomUtils.addCSSClassName(titleRoot, laf.getStyleClass(AdfMessageUtils._COMPONENT_MESSAGE_LINK_STYLE_CLASS));
      var linkTitle = laf.getTranslatedString(AdfMessageUtils._SET_FOCUS_ON_COMPONENT, effectiveTitle);
      titleRoot.title = linkTitle;
      titleRoot.href = "javascript:;";
      titleRoot.name = componentClientId;
      AdfAgent.AGENT.addBubbleEventListener(titleRoot, "click", AdfMessageUtils.getInstance()._jumpToMessageHandlerStub);
      titleRoot.appendChild(titleTextNode)
    }
    if(isScreenReaderMode) {
      outerCell.style.whiteSpace = "normal"
    }
    outerCell.appendChild(titleRoot);
    outerCell = outerRow.insertCell(-1)
  }
  if(hideIcon) {
    table.cellSpacing = 0;
    table.cellPadding = 0
  }
  table.summary = "";
  table.role = "presentation";
  outerCell.appendChild(table);
  AdfDomUtils.addCSSClassName(outerCell, laf.getStyleClass(AdfMessageUtils._MESSAGE_GROUP_MESSAGE_LIST_STYLE_CLASS))
};
AdfMessageUtils._getLabel = function(component) {
  if(component == null) {
    return null
  }
  var label = null;
  if(component.getLabel != null) {
    label = component.getLabel()
  }else {
    if(component.getText != null) {
      label = component.getText()
    }
  }
  if(label == null || label.length == 0) {
    var document = null;
    var ancestor = component;
    while(ancestor && !document) {
      ancestor = ancestor.getParent();
      if(ancestor && ancestor instanceof AdfRichDocument) {
        document = ancestor
      }
    }
    if(document) {
      var context = new Object;
      context.id = component.getClientId();
      document.visitChildren(AdfMessageUtils._checkCompWithFor, context, false);
      label = context.label
    }
  }
  return label
};
AdfMessageUtils._checkCompWithFor = function(component) {
  if(component.getFor != null && !(component instanceof AdfRichMessage)) {
    var forValue = component.getFor();
    if(forValue != null && forValue == this.id) {
      if(component.getLabel) {
        this.label = component.getLabel()
      }else {
        if(component.getValue) {
          var displayValue = component.getValue();
          if(component.getConverter) {
            var converter = component.getConverter();
            if(converter) {
              displayValue = converter.getAsString(displayValue)
            }
          }
          this.label = displayValue
        }
      }
      return 2
    }
  }
};
AdfMessageUtils._getTextDom = function(text) {
  var doc = AdfPage.PAGE.getDocument();
  var textDom;
  if(text.indexOf("<html>") == 0 && text.lastIndexOf("</html>") == text.length - 7) {
    textDom = doc.createElement("div");
    textDom.appendChild(AdfDomUtils.cleanHtml(doc, text.substring(6, text.length - 7)))
  }else {
    textDom = doc.createElement("div");
    AdfAgent.AGENT.setTextContent(textDom, text)
  }
  return textDom
};
AdfMessageUtils._getStyleProperty = function(type) {
  return AdfMessageUtils._STYLE_PROP[type]
};
AdfMessageUtils._getIconKey = function(type, isMessages) {
  var key = isMessages ? AdfMessageUtils._MESSAGES_ICON[type] : AdfMessageUtils._MESSAGE_ICON[type];
  if(key == null) {
    key = isMessages ? AdfMessageUtils._MESSAGES_ICON[AdfFacesMessage.TYPE_INFO] : AdfMessageUtils._MESSAGE_ICON[AdfFacesMessage.TYPE_INFO]
  }
  return key
};
AdfMessageUtils._getMessageDom = function(message, compact) {
  var page = AdfPage.PAGE;
  var agent = AdfAgent.AGENT;
  var doc = page.getDocument();
  var domWindow = page.getDomWindow();
  var isMobileSafariAgent = domWindow.AdfSafariMobileAgent && agent instanceof AdfSafariMobileAgent;
  var table = doc.createElement("table");
  table.summary = "";
  table.role = "presentation";
  table.style["width"] = "100%";
  table.style["tableLayout"] = isMobileSafariAgent ? "auto" : "fixed";
  AdfMessageUtils._addMessageDomToTable(table, message, compact);
  return table
};
AdfMessageUtils._addMessageDomToTable = function(elem, message, compact, isMessages, hideIcon) {
  var page = AdfPage.PAGE;
  var doc = page.getDocument();
  var laf = page.getLookAndFeel();
  var agent = AdfAgent.AGENT;
  var msgType = AdfFacesMessage.getTypeFromMessage(message);
  AdfAssert.assertDomElement(elem, "TABLE");
  AdfDomUtils.addCSSClassName(elem, laf.getStyleClass(AdfMessageUtils._CONTAINER_STYLE_CLASS));
  var cell;
  var row;
  if(compact) {
    row = elem.insertRow(-1);
    cell = row.insertCell(-1);
    cell.vAlign = "top";
    if(hideIcon) {
      cell.style.width = "0px"
    }else {
      AdfDomUtils.addCSSClassName(cell, laf.getStyleClass(AdfMessageUtils._ICON_CELL_STYLE_CLASS));
      var icon = AdfMessageUtils.getIcon(msgType, isMessages);
      cell.appendChild(icon)
    }
    cell = row.insertCell(-1)
  }else {
    row = elem.insertRow(-1);
    cell = row.insertCell(-1);
    var icon = AdfMessageUtils.getIcon(msgType, isMessages);
    AdfDomUtils.addCSSClassName(cell, laf.getStyleClass(AdfMessageUtils._ICON_CELL_STYLE_CLASS));
    cell.appendChild(icon);
    cell = row.insertCell(-1);
    AdfDomUtils.addCSSClassName(cell, laf.getStyleClass(AdfMessageUtils._TYPE_STYLE_CLASS));
    var description = AdfMessageUtils.getString(msgType, isMessages);
    var summaryText = message.getSummary();
    if(summaryText != null) {
      var formatString = laf.getTranslatedString(AdfMessageUtils._COMPACT_TYPE_SUMMARY);
      description = TrFastMessageFormatUtils.format(formatString, description, summaryText)
    }
    agent.setTextContent(cell, description);
    row = elem.insertRow(-1);
    cell = row.insertCell(-1);
    agent.setTextContent(cell, " ");
    cell = row.insertCell(-1)
  }
  var text = message.getDetail();
  if(text != null) {
    var detail = AdfMessageUtils._getTextDom(text);
    var detailStyle = isMessages ? AdfMessageUtils._MESSAGES_DETAIL_STYLE_CLASS : AdfMessageUtils._DETAIL_STYLE_CLASS;
    AdfDomUtils.addCSSClassName(detail, laf.getStyleClass(detailStyle));
    cell.appendChild(detail);
    AdfDomUtils.addCSSClassName(cell, laf.getStyleClass(AdfMessageUtils._DETAIL_CELL_STYLE_CLASS))
  }
};
AdfMessageUtils._STYLE_PROP = Array();
AdfMessageUtils._STYLE_PROP[AdfFacesMessage.TYPE_FATAL] = "p_AFFatal";
AdfMessageUtils._STYLE_PROP[AdfFacesMessage.TYPE_ERROR] = "p_AFError";
AdfMessageUtils._STYLE_PROP[AdfFacesMessage.TYPE_WARNING] = "p_AFWarning";
AdfMessageUtils._STYLE_PROP[AdfFacesMessage.TYPE_CONFIRMATION] = "p_AFConfirmation";
AdfMessageUtils._STYLE_PROP[AdfFacesMessage.TYPE_INFO] = "p_AFInfo";
AdfMessageUtils._TYPE_STRING = Array();
AdfMessageUtils._TYPE_STRING[AdfFacesMessage.TYPE_FATAL] = "af_message.TIP_FATAL";
AdfMessageUtils._TYPE_STRING[AdfFacesMessage.TYPE_ERROR] = "af_message.TIP_ERROR";
AdfMessageUtils._TYPE_STRING[AdfFacesMessage.TYPE_WARNING] = "af_message.TIP_WARNING";
AdfMessageUtils._TYPE_STRING[AdfFacesMessage.TYPE_CONFIRMATION] = "af_message.TIP_CONFIRMATION";
AdfMessageUtils._TYPE_STRING[AdfFacesMessage.TYPE_INFO] = "af_message.TIP_INFO";
AdfMessageUtils._ICON_CELL_STYLE_CLASS = "af|message::icon-cell";
AdfMessageUtils._DETAIL_CELL_STYLE_CLASS = "af|message::detail-cell";
AdfMessageUtils._COMPONENT_MESSAGES_INTRO_LABEL = "af_message.LABEL_COMPONENT_MESSAGES_INTRO";
AdfMessageUtils._COMPACT_TYPE_SUMMARY = "af_message.LABEL_COMPACT_TYPE_SUMMARY";
AdfMessageUtils._MESSAGE_ICON = Array();
AdfMessageUtils._MESSAGE_ICON[AdfFacesMessage.TYPE_FATAL] = "af|message::fatal-icon";
AdfMessageUtils._MESSAGE_ICON[AdfFacesMessage.TYPE_ERROR] = "af|message::error-icon";
AdfMessageUtils._MESSAGE_ICON[AdfFacesMessage.TYPE_WARNING] = "af|message::warning-icon";
AdfMessageUtils._MESSAGE_ICON[AdfFacesMessage.TYPE_CONFIRMATION] = "af|message::confirmation-icon";
AdfMessageUtils._MESSAGE_ICON[AdfFacesMessage.TYPE_INFO] = "af|message::info-icon";
AdfMessageUtils._MESSAGES_ICON = Array();
AdfMessageUtils._MESSAGES_ICON[AdfFacesMessage.TYPE_FATAL] = "af|messages::fatal-icon";
AdfMessageUtils._MESSAGES_ICON[AdfFacesMessage.TYPE_ERROR] = "af|messages::error-icon";
AdfMessageUtils._MESSAGES_ICON[AdfFacesMessage.TYPE_WARNING] = "af|messages::warning-icon";
AdfMessageUtils._MESSAGES_ICON[AdfFacesMessage.TYPE_CONFIRMATION] = "af|messages::confirmation-icon";
AdfMessageUtils._MESSAGES_ICON[AdfFacesMessage.TYPE_INFO] = "af|messages::info-icon";
AdfMessageUtils._SUMMARY_STYLE_CLASS = "af|message::summary";
AdfMessageUtils._DETAIL_STYLE_CLASS = "af|message::detail";
AdfMessageUtils._TYPE_STYLE_CLASS = "af|message::type";
AdfMessageUtils._INTRO_STYLE_CLASS = "af|message::intro";
AdfMessageUtils._CONTAINER_STYLE_CLASS = "af|message::container";
AdfMessageUtils._COMPONENT_LEVEL_CONTAINER_STYLE_CLASS = "af|message::component-messages-list-container";
AdfMessageUtils._MESSAGE_LIST_COMPONENT_STYLE_CLASS = "af|message::message-list-component";
AdfMessageUtils._MESSAGES_SUMMARY_STYLE_CLASS = "af|messages::summary";
AdfMessageUtils._MESSAGES_DETAIL_STYLE_CLASS = "af|messages::detail";
AdfMessageUtils._COMBINED_MESSAGES_INTRO_LABEL = "af_messages.LABEL_COMBINED_MESSAGES_INTRO";
AdfMessageUtils._COMPONENT_LEVEL_MESSAGE_LABEL = "af_messages.LABEL_COMPONENT_LEVEL_MESSAGE";
AdfMessageUtils._SET_FOCUS_ON_COMPONENT = "af_messages.LABEL_SET_FOCUS_ON_COMPONENT";
AdfMessageUtils._MESSAGES_TYPE_STRING = Array();
AdfMessageUtils._MESSAGES_TYPE_STRING[AdfFacesMessage.TYPE_FATAL] = "af_messages.TIP_FATAL";
AdfMessageUtils._MESSAGES_TYPE_STRING[AdfFacesMessage.TYPE_ERROR] = "af_messages.TIP_ERROR";
AdfMessageUtils._MESSAGES_TYPE_STRING[AdfFacesMessage.TYPE_WARNING] = "af_messages.TIP_WARNING";
AdfMessageUtils._MESSAGES_TYPE_STRING[AdfFacesMessage.TYPE_CONFIRMATION] = "af_messages.TIP_CONFIRMATION";
AdfMessageUtils._MESSAGES_TYPE_STRING[AdfFacesMessage.TYPE_INFO] = "af_messages.TIP_INFO";
AdfMessageUtils._MESSAGES_INTRO_STYLE_CLASS = "af|messages::intro";
AdfMessageUtils._MESSAGES_INTRO_SEPARATOR_STYLE_CLASS = "af|messages::intro-separator";
AdfMessageUtils._MESSAGE_GROUP_TITLE_STYLE_CLASS = "af|messages::message-group-title";
AdfMessageUtils._MESSAGE_GROUP_MESSAGE_LIST_STYLE_CLASS = "af|messages::message-group-list";
AdfMessageUtils._MESSAGE_GROUP_TYPE_SEPARATOR_STYLE_CLASS = "af|messages::message-group-type-separator";
AdfMessageUtils._COMPONENT_MESSAGE_LINK_STYLE_CLASS = "af|messages::component-link";
AdfMessageUtils._MESSAGES_LIST_PAGE_STYLE_CLASS = "af|messages::message-list-page";
AdfMessageUtils._SHOW_ALL_MESSAGES_TIP = "af_message.TIP_SHOW_ALL_MESSAGES";
AdfMessageUtils._SHOW_ALL_MESSAGES = "af_message.LABEL_SHOW_ALL_MESSAGES";
AdfMessageUtils._PREVIOUS_MESSAGE = "af_message.TIP_PREVIOUS_MESSAGE";
AdfMessageUtils._NEXT_MESSAGE = "af_message.TIP_NEXT_MESSAGE";
AdfMessageUtils._CONTENT_STYLE_CLASS = "AFNoteWindowContent";
AdfMessageUtils._FOOTER_STYLE_CLASS = "AFNoteWindowFooter";
AdfMessageUtils._FOOTER_START_STYLE_CLASS = "AFNoteWindowFooterStart";
AdfMessageUtils._FOOTER_END_STYLE_CLASS = "AFNoteWindowFooterEnd";
AdfMessageUtils._NAVIGATOR_STYLE_CLASS = "AFNoteWindowNavigator";
AdfMessageUtils._PREVIOUS_LINK_STYLE_CLASS = "AFNoteWindowPreviousLink";
AdfMessageUtils._NEXT_LINK_STYLE_CLASS = "AFNoteWindowNextLink";
AdfMessageUtils._DISABLED_STYLE_CLASS = "p_AFDisabled";
AdfMessageUtils._ALL_LINK_STYLE_CLASS = "AFNoteWindowAllButton";

function AdfOverflowSupport(overflowId, peer, type, position, orientation, useRovingTabIndex) {
  this.Init(overflowId, peer, type, position, orientation, useRovingTabIndex)
}
AdfObject.createSubclass(AdfOverflowSupport);
AdfOverflowSupport.InitClass = function() {
  this._POPUP_ID_START = "_afrOfwSrt";
  this._POPUP_ID_END = "_afrOfwEnd";
  this._DEPRESSED_STYLE_CLASS = "p_AFDepressed"
};
AdfOverflowSupport.prototype.Init = function(overflowId, peer, type, position, orientation, useRovingTabIndex) {
  AdfOverflowSupport.superclass.Init.call(this);
  this._peer = peer;
  this._type = type || "end";
  this._position = position || "after";
  this._orientation = orientation || "horizontal";
  this._useRovingTabIndex = useRovingTabIndex;
  this._element = AdfAgent.AGENT.getElementById(overflowId);
  if(this._supportsStartOverflow()) {
    this._startContainer = this._getElement(overflowId, "soc");
    this._startIndicator = this._getElement(overflowId, "soi");
    if(this._startIndicator) {
      this._initStartButtonEventHandling()
    }
  }
  if(this._supportsEndOverflow()) {
    this._endContainer = this._getElement(overflowId, "eoc");
    this._endIndicator = this._getElement(overflowId, "eoi");
    if(this._endIndicator != null) {
      this._initEndButtonEventHandling()
    }
  }
  if(this._supportsDroplist()) {
    var dlcId = AdfRichUIPeer.CreateSubId(overflowId, "dlc");
    this._droplistContainer = AdfAgent.AGENT.getElementById(dlcId)
  }
  this._steps = [];
  this._firstVisibleStep = 0;
  this._lastVisibleStep = -1
};
AdfOverflowSupport.needsOverflow = function(overflowId) {
  if(AdfPage.PAGE.isScreenReaderMode()) {
    return false
  }
  var element = AdfAgent.AGENT.getElementById(overflowId);
  var contentWidth = Math.max(element.firstChild.offsetWidth, element.scrollWidth);
  if(contentWidth > element.offsetWidth) {
    return true
  }
  var contentHeight = Math.max(element.firstChild.offsetHeight, element.scrollHeight);
  if(contentHeight > element.offsetHeight) {
    return true
  }
  return false
};
AdfOverflowSupport.getOverflowChildComponents = function(baseComponent, children) {
  if(!children) {
    children = new Array
  }
  var agent = AdfAgent.AGENT;
  var clientId = baseComponent.getClientId();
  var parentEocId = AdfRichUIPeer.createSubId(clientId, "eoc");
  var parentSocId = AdfRichUIPeer.createSubId(clientId, "soc");
  var endOverflowContainer = agent.getElementById(parentEocId);
  if(endOverflowContainer) {
    agent.getDescendantComponentsForNode(endOverflowContainer, children)
  }
  var startOverflowContainer = agent.getElementById(parentSocId);
  if(startOverflowContainer) {
    agent.getDescendantComponentsForNode(startOverflowContainer, children)
  }
  return children
};
AdfOverflowSupport.prototype.removeOverflowSupport = function() {
  if(this._startContainer) {
    AdfPage.PAGE.removeComponentsInSubtree(this._startContainer)
  }
  if(this._endContainer) {
    AdfPage.PAGE.removeComponentsInSubtree(this._endContainer)
  }
  delete this._peer;
  delete this._element;
  if(this._supportsStartOverflow()) {
    delete this._startContainer;
    if(this._startIndicator) {
      this._removeStartButtonCallbacks();
      delete this._startIndicator;
      delete this._startHints
    }
    if(this._startContainerParent) {
      delete this._startContainerParent
    }
  }
  if(this._supportsEndOverflow()) {
    this._removeEndButtonCallbacks();
    delete this._endIndicator;
    delete this._endContainer;
    delete this._endHints;
    if(this._endContainerParent) {
      delete this._endContainerParent
    }
  }
  if(this._supportsDroplist()) {
    delete this._droplistContainer
  }
  this._removeSteps()
};
AdfOverflowSupport.prototype.createStep = function() {
  var step = {elements:[], overflowElements:[], swapElements:[]};
  this._steps.push(step);
  this._lastVisibleStep++
};
AdfOverflowSupport.prototype.addElement = function(element) {
  var stepIndex = this._steps.length - 1;
  this._steps[stepIndex].elements.push(element)
};
AdfOverflowSupport.prototype.addOverflowElement = function(element) {
  this._steps[this._steps.length - 1].overflowElements.push(element)
};
AdfOverflowSupport.prototype.createSwapPosition = function(element) {
  var stepIndex = this._steps.length - 1;
  var ownerDocument = element.ownerDocument;
  var overflowPosition = ownerDocument.createElement("a");
  overflowPosition.style.display = "none";
  var elementPosition = ownerDocument.createElement("a");
  elementPosition.style.display = "none";
  element.parentNode.insertBefore(elementPosition, element);
  this._steps[stepIndex].swapElements.push([element, elementPosition, overflowPosition]);
  return overflowPosition
};
AdfOverflowSupport.prototype.addDropListElements = function(elementArray) {
  var droplistContainer = this._droplistContainer;
  for(var i = 0;i < elementArray.length;i++) {
    var child = elementArray[i];
    droplistContainer.appendChild(child)
  }
};
AdfOverflowSupport.prototype.handleResize = function() {
  var grace = 3;
  var availableWidth = this._element.offsetWidth + grace;
  var availableHeight = this._element.offsetHeight + grace;
  if(this._supportsBothOverflow()) {
    this._handleResizeTypeBoth(availableWidth, availableHeight);
    return
  }
  var hasAvailableSpace;
  var totalSteps = this._steps.length;
  var visibleSteps = this._numberOfVisibleSteps();
  if(visibleSteps == totalSteps) {
    this._hideOverflowButtons();
    hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight);
    if(hasAvailableSpace) {
      return
    }
  }
  this._showOverflowButtons(true);
  if(this._orientation == "horizontal" && availableWidth <= 50 || this._orientation == "vertical" && availableHeight <= 50) {
    this._hideAllSteps();
    hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight)
  }else {
    if(hasAvailableSpace == null) {
      hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight)
    }
    var lowerRange = hasAvailableSpace ? visibleSteps : 0;
    var upperRange = hasAvailableSpace ? totalSteps : visibleSteps;
    hasAvailableSpace = this._binarySearchAdjustSteps(hasAvailableSpace, availableWidth, availableHeight, lowerRange, upperRange)
  }
  hasAvailableSpace = this._showSteps(availableWidth, availableHeight, hasAvailableSpace);
  if(this._numberOfVisibleSteps() == totalSteps) {
    if(hasAvailableSpace) {
      this._hideOverflowButtons();
      this._closeOverflowPopups();
      return
    }else {
      this._hideOverflowButtons();
      hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight);
      if(hasAvailableSpace) {
        this._closeOverflowPopups();
        return
      }
      this._showOverflowButtons(true)
    }
  }
  this._hideSteps(availableWidth, availableHeight, hasAvailableSpace);
  if(this._useRovingTabIndex) {
    this._resetActiveDescendant()
  }
};
AdfOverflowSupport.prototype.removeAllItemsFromOverflow = function() {
  this._hideOverflowButtons();
  this._showAllSteps();
  this._closeOverflowPopups()
};
AdfOverflowSupport.prototype.focusNextChild = function(popupContainer) {
  if(this._canMoveFocus(popupContainer)) {
    var nextItem = AdfFocusUtils.focusNextActiveDescendant(popupContainer, this._activeDescendant, true);
    AdfAssert.assertDomElement(nextItem);
    this._activeDescendant = nextItem
  }
};
AdfOverflowSupport.prototype.focusPreviousChild = function(popupContainer) {
  if(this._canMoveFocus(popupContainer)) {
    var prevItem = AdfFocusUtils.focusPreviousActiveDescendant(popupContainer, this._activeDescendant, true);
    AdfAssert.assertDomElement(prevItem);
    this._activeDescendant = prevItem
  }
};
AdfOverflowSupport.prototype._canMoveFocus = function(popupContainer) {
  AdfAssert.assert(this._useRovingTabIndex);
  AdfAssert.assertDomElement(popupContainer);
  AdfAssert.assertDomElement(this._activeDescendant);
  AdfAssert.assert(this._activeDescendant.getAttribute("tabindex") == "0", "The overflow popup's active descendant should have tabindex 0");
  if(!this._activeDescendant) {
    AdfLogger.LOGGER.warning("Overflow has lost its assigned activeDescendant!");
    this.resetActiveDescendant()
  }
  return this._activeDescendant != null
};
AdfOverflowSupport.prototype.updateActiveDescendant = function(newActiveDescendant) {
  AdfAssert.assertDomElement(newActiveDescendant);
  if(this._activeDescendant != newActiveDescendant) {
    if(this._activeDescendant) {
      this._activeDescendant.setAttribute("tabIndex", "-1")
    }
    newActiveDescendant.setAttribute("tabIndex", "0");
    this._activeDescendant = newActiveDescendant
  }
};
AdfOverflowSupport.prototype.isInOverflow = function(domElement) {
  if(this._supportsEndOverflow()) {
    if(AdfDomUtils.isAncestor(this._endContainer, domElement)) {
      return"end"
    }
  }
  if(this._supportsStartOverflow()) {
    if(AdfDomUtils.isAncestor(this._startContainer, domElement)) {
      return"start"
    }
  }
};
AdfOverflowSupport.prototype.showOverflowPopup = function(location) {
  var peer = this._peer;
  var component = this._peer.getComponent();
  var popupId = location == "start" ? AdfOverflowSupport._POPUP_ID_START : AdfOverflowSupport._POPUP_ID_END;
  if(peer.isPopupVisible(component, popupId)) {
    return
  }
  if(location == "start") {
    this._initializeStartContainerCallback();
    this._overflowButtonPressed(AdfOverflowSupport._POPUP_ID_START, this._startContainer, this._startHints)
  }else {
    this._initializeEndContainerCallback();
    if(this._supportsDroplist()) {
      this._overflowButtonPressed(AdfOverflowSupport._POPUP_ID_END, this._droplistContainer, this._endHints)
    }else {
      this._overflowButtonPressed(AdfOverflowSupport._POPUP_ID_END, this._endContainer, this._endHints)
    }
  }
};
AdfOverflowSupport.prototype.focusNextChild = function(popupContainer) {
  AdfAssert.assert(this._useRovingTabIndex);
  AdfAssert.assertDomElement(this._activeDescendant);
  AdfAssert.assertDomElement(popupContainer);
  if(!this._activeDescendant) {
    AdfLogger.LOGGER.warning("Overflow has lost its assigned activeDescendant!");
    this.resetActiveDescendant()
  }
  var nextItem = AdfFocusUtils.focusNextActiveDescendant(popupContainer, this._activeDescendant, true);
  AdfAssert.assertDomElement(nextItem);
  this._activeDescendant = nextItem
};
AdfOverflowSupport.prototype.focusPreviousChild = function(popupContainer) {
  AdfAssert.assert(this._useRovingTabIndex);
  AdfAssert.assertDomElement(this._activeDescendant);
  AdfAssert.assertDomElement(popupContainer);
  if(!this._activeDescendant) {
    AdfLogger.LOGGER.warning("Overflow has lost its assigned activeDescendant!");
    this.resetActiveDescendant()
  }
  var prevItem = AdfFocusUtils.focusPreviousActiveDescendant(popupContainer, this._activeDescendant, true);
  AdfAssert.assertDomElement(prevItem);
  this._activeDescendant = prevItem
};
AdfOverflowSupport.prototype.updateActiveDescendant = function(newActiveDescendant) {
  AdfAssert.assertDomElement(this._activeDescendant);
  AdfAssert.assertDomElement(newActiveDescendant);
  if(this._activeDescendant != newActiveDescendant) {
    this._activeDescendant.setAttribute("tabIndex", "-1");
    newActiveDescendant.setAttribute("tabIndex", "0");
    this._activeDescendant = newActiveDescendant
  }
};
AdfOverflowSupport.prototype._closeOverflowPopups = function() {
  var peer = this._peer;
  var component = peer.getComponent();
  if(peer.isPopupVisible(component, AdfOverflowSupport._POPUP_ID_START)) {
    peer.hidePopup(component, AdfOverflowSupport._POPUP_ID_START)
  }
  if(peer.isPopupVisible(component, AdfOverflowSupport._POPUP_ID_END)) {
    peer.hidePopup(component, AdfOverflowSupport._POPUP_ID_END)
  }
};
AdfOverflowSupport.prototype._supportsStartOverflow = function() {
  return this._type == "start" || this._type == "both" || this._type == "droplist"
};
AdfOverflowSupport.prototype._supportsEndOverflow = function() {
  return this._type == "end" || this._type == "both" || this._type == "droplist"
};
AdfOverflowSupport.prototype._supportsBothOverflow = function() {
  return this._type == "both" || this._type == "droplist"
};
AdfOverflowSupport.prototype._supportsDroplist = function() {
  return this._type == "droplist"
};
AdfOverflowSupport.prototype._getElement = function(overflowId, subString) {
  var id = AdfRichUIPeer.CreateSubId(overflowId, subString);
  return AdfAgent.AGENT.getElementById(id)
};
AdfOverflowSupport.prototype._initStartButtonEventHandling = function() {
  var agent = AdfAgent.AGENT;
  var startIndicator = this._startIndicator;
  var startHints = this._createOverflowPopupHints();
  startHints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT] = startIndicator;
  startHints[AdfRichPopup.HINT_ALIGN] = this._position == "before" ? AdfRichPopup["ALIGN_BEFORE_START"] : AdfRichPopup["ALIGN_AFTER_START"];
  this._startHints = startHints;
  this._startShowCall = this.createCallback(this._startOverflowButtonPressed);
  var startShowCall = this._startShowCall;
  agent.addBubbleEventListener(startIndicator, "mousedown", startShowCall);
  agent.addBubbleEventListener(startIndicator, "keydown", startShowCall);
  this._startButtonMouseUpCall = this.createCallback(this._startOverflowButtonMouseUp);
  agent.addBubbleEventListener(startIndicator, "mouseup", this._startButtonMouseUpCall);
  this._startButtonMouseOutCall = this.createCallback(this._startOverflowButtonMouseOut);
  agent.addBubbleEventListener(startIndicator, "mouseout", this._startButtonMouseOutCall)
};
AdfOverflowSupport.prototype._initEndButtonEventHandling = function() {
  var agent = AdfAgent.AGENT;
  var endIndicator = this._endIndicator;
  var endHints = this._createOverflowPopupHints();
  endHints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT] = this._endIndicator;
  endHints[AdfRichPopup.HINT_ALIGN] = this._position == "before" ? AdfRichPopup["ALIGN_BEFORE_END"] : AdfRichPopup["ALIGN_AFTER_END"];
  this._endHints = endHints;
  this._endShowCall = this.createCallback(this._endOverflowButtonPressed);
  var endShowCall = this._endShowCall;
  agent.addBubbleEventListener(endIndicator, "mousedown", endShowCall);
  agent.addBubbleEventListener(endIndicator, "keydown", endShowCall);
  this._endButtonMouseUpCall = this.createCallback(this._endOverflowButtonMouseUp);
  agent.addBubbleEventListener(endIndicator, "mouseup", this._endButtonMouseUpCall);
  this._endButtonMouseOutCall = this.createCallback(this._endOverflowButtonMouseOut);
  agent.addBubbleEventListener(endIndicator, "mouseout", this._endButtonMouseOutCall)
};
AdfOverflowSupport.prototype._createOverflowPopupHints = function() {
  var hints = new Object;
  hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_ALWAYS;
  hints[AdfDhtmlPopupWindow.HINT_FOCUS] = true;
  hints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_MENU;
  hints[AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE] = true;
  return hints
};
AdfOverflowSupport.prototype._startOverflowButtonPressed = function(event) {
  var agent = AdfAgent.AGENT;
  var eventType = event.type;
  var keyCode = event.keyCode;
  if(eventType == "keydown" && keyCode != AdfKeyStroke.ENTER_KEY && keyCode != AdfKeyStroke.ARROWDOWN_KEY && keyCode != AdfKeyStroke.SPACE_KEY) {
    return
  }
  this._initializeStartContainerCallback();
  this._overflowButtonPressed(AdfOverflowSupport._POPUP_ID_START, this._startContainer, this._startHints);
  if(eventType == "mousedown") {
    var targetElement = agent.getEventTarget(event);
    this._setDepressedStyle(targetElement, true)
  }
  agent.eatEvent(event)
};
AdfOverflowSupport.prototype._initializeStartContainerCallback = function() {
  if(this._hideStartContainerCallback == null) {
    this._hideStartContainerCallback = this.createCallback(this._hideStartContainer);
    AdfObject.ensureClassInitialization(AdfDhtmlPopupWindow);
    this._startHints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER] = this._hideStartContainerCallback;
    this._startContainerParent = this._startContainer.parentNode
  }
};
AdfOverflowSupport.prototype._startOverflowButtonMouseUp = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false)
};
AdfOverflowSupport.prototype._startOverflowButtonMouseOut = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false)
};
AdfOverflowSupport.prototype._endOverflowButtonPressed = function(event) {
  var agent = AdfAgent.AGENT;
  var eventType = event.type;
  var keyCode = event.keyCode;
  if(eventType == "keydown" && keyCode != AdfKeyStroke.ENTER_KEY && keyCode != AdfKeyStroke.ARROWDOWN_KEY && keyCode != AdfKeyStroke.SPACE_KEY) {
    return
  }
  this._initializeEndContainerCallback();
  if(this._supportsDroplist()) {
    this._overflowButtonPressed(AdfOverflowSupport._POPUP_ID_END, this._droplistContainer, this._endHints)
  }else {
    this._overflowButtonPressed(AdfOverflowSupport._POPUP_ID_END, this._endContainer, this._endHints)
  }
  if(eventType == "mousedown") {
    var targetElement = agent.getEventTarget(event);
    this._setDepressedStyle(targetElement, true)
  }
  agent.eatEvent(event)
};
AdfOverflowSupport.prototype._initializeEndContainerCallback = function() {
  if(this._hideEndContainerCallback == null) {
    this._hideEndContainerCallback = this.createCallback(this._hideEndContainer);
    AdfObject.ensureClassInitialization(AdfDhtmlPopupWindow);
    this._endHints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER] = this._hideEndContainerCallback;
    this._endContainerParent = this._endContainer.parentNode
  }
};
AdfOverflowSupport.prototype._endOverflowButtonMouseUp = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false)
};
AdfOverflowSupport.prototype._endOverflowButtonMouseOut = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false)
};
AdfOverflowSupport.prototype._setDepressedStyle = function(targetElement, depressed) {
  var className = AdfOverflowSupport._DEPRESSED_STYLE_CLASS;
  if(depressed) {
    AdfDomUtils.addCSSClassName(targetElement, className)
  }else {
    AdfDomUtils.removeCSSClassName(targetElement, className)
  }
};
AdfOverflowSupport.prototype._overflowButtonPressed = function(popupId, popupContainer, popupHints) {
  var peer = this._peer;
  var component = this._peer.getComponent();
  if(peer.isPopupVisible(component, popupId)) {
    this._peer.hidePopup(component, popupId)
  }else {
    if(this._useRovingTabIndex) {
      this._resetActiveDescendant(popupContainer)
    }
    this._peer.showPopup(component, popupContainer, popupHints, popupId)
  }
};
AdfOverflowSupport.prototype._hideStartContainer = function() {
  if(this._startContainer) {
    this._startContainerParent.appendChild(this._startContainer)
  }
};
AdfOverflowSupport.prototype._hideEndContainer = function() {
  if(this._supportsDroplist() && this._droplistContainer) {
    var droplistContainerParent = this._droplistContainer.parentNode;
    droplistContainerParent.appendChild(this._droplistContainer)
  }else {
    if(this._endContainer) {
      this._endContainerParent.appendChild(this._endContainer)
    }
  }
};
AdfOverflowSupport.prototype._handleResizeTypeBoth = function(availableWidth, availableHeight) {
  this._hideOverflowButtons();
  this._setActiveStep();
  var hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight);
  hasAvailableSpace = this._showSteps(availableWidth, availableHeight, hasAvailableSpace);
  this._showOverflowButtons();
  hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight);
  while(this._hideSteps(availableWidth, availableHeight, hasAvailableSpace)) {
    this._showOverflowButtons();
    hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight)
  }
  if(this._numberOfVisibleSteps() == this._steps.length) {
    this._closeOverflowPopups()
  }
};
AdfOverflowSupport.prototype._setActiveStep = function() {
  var steps = this._steps;
  for(var i = 0;i < steps.length;i++) {
    var step = steps[i];
    for(var j = 0;j < step.overflowElements.length;j++) {
      var overflowElement = step.overflowElements[j];
      if(AdfDomUtils.containsCSSClassName(overflowElement.firstChild, "p_AFSelected")) {
        this._activeStep = i;
        return
      }
    }
    for(var k = 0;k < step.elements.length;k++) {
      var element = step.elements[k];
      if(AdfDomUtils.containsCSSClassName(element, "p_AFSelected")) {
        this._activeStep = i;
        return
      }
    }
  }
};
AdfOverflowSupport.prototype._binarySearchAdjustSteps = function(hasAvailableSpace, availableWidth, availableHeight, lowerRange, upperRange) {
  var rangeToDivide = upperRange - lowerRange;
  if(rangeToDivide <= 2) {
    return hasAvailableSpace
  }
  var divider = Math.ceil(rangeToDivide / 2);
  for(var x = 0;x < divider;x++) {
    if(hasAvailableSpace) {
      this._showOneStep()
    }else {
      this._hideOneStep()
    }
  }
  hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight);
  if(hasAvailableSpace) {
    lowerRange = lowerRange + divider
  }else {
    upperRange = upperRange - divider
  }
  return this._binarySearchAdjustSteps(hasAvailableSpace, availableWidth, availableHeight, lowerRange, upperRange)
};
AdfOverflowSupport.prototype._showSteps = function(availableWidth, availableHeight, hasAvailableSpace) {
  while(this._numberOfVisibleSteps() < this._steps.length && (hasAvailableSpace || this._isActiveStepInOverflow())) {
    switch(this._type) {
      case "end":
        this._showEndStep();
        break;
      case "start":
        this._showStartStep();
        break;
      case "both":
      ;
      case "droplist":
        var startOffset = this._activeStep - this._firstVisibleStep;
        var endOffset = this._numberOfVisibleSteps() - startOffset - 1;
        var lastStep = this._steps.length - 1;
        if(startOffset < endOffset && this._firstVisibleStep != 0 || this._lastVisibleStep == lastStep) {
          this._showStartStep()
        }else {
          this._showEndStep()
        }
    }
    hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight)
  }
  return hasAvailableSpace
};
AdfOverflowSupport.prototype._showAllSteps = function() {
  while(this._numberOfVisibleSteps() < this._steps.length) {
    switch(this._type) {
      case "end":
        this._showEndStep();
        break;
      case "start":
        this._showStartStep();
        break;
      case "both":
      ;
      case "droplist":
        if(this._firstVisibleStep != 0) {
          this._showStartStep()
        }else {
          this._showEndStep()
        }
    }
  }
};
AdfOverflowSupport.prototype._hideAllSteps = function() {
  while(this._numberOfVisibleSteps() > 0) {
    switch(this._type) {
      case "end":
        this._hideEndStep();
        break;
      case "start":
      ;
      case "both":
      ;
      case "droplist":
        this._hideStartStep();
        break
    }
  }
};
AdfOverflowSupport.prototype._hideSteps = function(availableWidth, availableHeight, hasAvailableSpace) {
  var wasStepHidden = false;
  while(!hasAvailableSpace && this._numberOfVisibleSteps() > 0) {
    switch(this._type) {
      case "end":
        this._hideEndStep();
        break;
      case "start":
        this._hideStartStep();
        break;
      case "both":
      ;
      case "droplist":
        var startOffset = this._activeStep - this._firstVisibleStep;
        var endOffset = this._numberOfVisibleSteps() - startOffset - 1;
        if(startOffset >= endOffset || this._firstVisibleStep == -1) {
          this._hideStartStep()
        }else {
          this._hideEndStep()
        }
    }
    wasStepHidden = true;
    hasAvailableSpace = this._hasAvailableSpace(availableWidth, availableHeight)
  }
  return wasStepHidden
};
AdfOverflowSupport.prototype._isActiveStepInOverflow = function() {
  if(this._supportsBothOverflow()) {
    return this._activeStep < this._firstVisibleStep || this._activeStep > this._lastVisibleStep
  }else {
    return false
  }
};
AdfOverflowSupport.prototype._hasAvailableSpace = function(availableWidth, availableHeight) {
  var contentWidth = Math.max(this._element.firstChild.offsetWidth, this._element.scrollWidth);
  var agent = AdfAgent.getAgent();
  if(AdfPage.PAGE.getLocaleContext().isRightToLeft() && agent.getPlatform() == AdfAgent.IE_PLATFORM && agent.getVersion() < 8) {
    contentWidth = this._element.scrollWidth
  }
  var contentHeight = Math.max(this._element.firstChild.offsetHeight, this._element.scrollHeight);
  var hasAvailableWidth = contentWidth <= availableWidth;
  var hasAvailableHeight = contentHeight <= availableHeight;
  return hasAvailableWidth && hasAvailableHeight
};
AdfOverflowSupport.prototype._showOneStep = function() {
  if(this._type == "end") {
    this._showEndStep()
  }else {
    if(this._type == "start") {
      this._showStartStep()
    }
  }
};
AdfOverflowSupport.prototype._showStartStep = function() {
  var step = this._steps[this._firstVisibleStep - 1];
  this._showStep(step, true);
  this._firstVisibleStep--
};
AdfOverflowSupport.prototype._showEndStep = function() {
  var step = this._steps[this._lastVisibleStep + 1];
  this._showStep(step);
  this._lastVisibleStep++
};
AdfOverflowSupport.prototype._hideOneStep = function() {
  if(this._type == "end") {
    this._hideEndStep()
  }else {
    if(this._type == "start") {
      this._hideStartStep()
    }
  }
};
AdfOverflowSupport.prototype._hideStartStep = function() {
  var step = this._steps[this._firstVisibleStep];
  this._hideStep(step, true);
  this._firstVisibleStep++
};
AdfOverflowSupport.prototype._hideEndStep = function() {
  var step = this._steps[this._lastVisibleStep];
  this._hideStep(step);
  this._lastVisibleStep--
};
AdfOverflowSupport.prototype._showStep = function(step, isStart) {
  this._showElements(step.elements);
  this._hideOverflowElements(step.overflowElements, isStart);
  this._swapElements(step.swapElements, true)
};
AdfOverflowSupport.prototype._hideStep = function(step, isStart) {
  this._hideElements(step.elements);
  this._showOverflowElements(step.overflowElements, isStart);
  this._swapElements(step.swapElements)
};
AdfOverflowSupport.prototype._hideElements = function(elements) {
  var elementsLength = elements.length;
  for(var i = 0;i < elementsLength;i++) {
    var element = elements[i];
    element._display = element.style.display;
    element.style.display = "none"
  }
};
AdfOverflowSupport.prototype._showElements = function(elements) {
  var elementsLength = elements.length;
  for(var i = 0;i < elementsLength;i++) {
    var element = elements[i];
    element.style.display = element._display || ""
  }
};
AdfOverflowSupport.prototype._hideOverflowElements = function(elements, isStart) {
  var elementsLength = elements.length;
  for(var i = 0;i < elementsLength;i++) {
    var element = elements[i];
    element.parentNode.removeChild(element)
  }
};
AdfOverflowSupport.prototype._showOverflowElements = function(elements, isStart) {
  var elementsLength = elements.length;
  var container = isStart ? this._startContainer : this._endContainer;
  for(var i = 0;i < elementsLength;i++) {
    var element = elements[i];
    if(this._position == "before" || isStart && this._orientation == "vertical") {
      container.appendChild(element)
    }else {
      container.insertBefore(element, container.firstChild)
    }
  }
};
AdfOverflowSupport.prototype._swapElements = function(elements, show) {
  var elementsLength = elements.length;
  for(var i = 0;i < elementsLength;i++) {
    var swapElements = elements[i];
    var element = swapElements[0];
    var position = swapElements[show ? 1 : 2];
    position.parentNode.insertBefore(element, position)
  }
};
AdfOverflowSupport.prototype._removeStartButtonCallbacks = function() {
  var agent = AdfAgent.AGENT;
  var startIndicator = this._startIndicator;
  agent.removeBubbleEventListener(startIndicator, "mousedown", this._startShowCall);
  agent.removeBubbleEventListener(startIndicator, "keydown", this._startShowCall);
  agent.removeBubbleEventListener(startIndicator, "mouseup", this._startButtonMouseUpCall);
  agent.removeBubbleEventListener(startIndicator, "mouseout", this._startButtonMouseOutCall)
};
AdfOverflowSupport.prototype._removeEndButtonCallbacks = function() {
  var agent = AdfAgent.AGENT;
  var endIndicator = this._endIndicator;
  agent.removeBubbleEventListener(endIndicator, "mousedown", this._endShowCall);
  agent.removeBubbleEventListener(endIndicator, "keydown", this._endShowCall);
  agent.removeBubbleEventListener(endIndicator, "mouseup", this._endButtonMouseUpCall);
  agent.removeBubbleEventListener(endIndicator, "mouseout", this._endButtonMouseOutCall)
};
AdfOverflowSupport.prototype._removeSteps = function() {
  var steps = this._steps;
  while(steps.length > 0) {
    var step = steps.pop();
    AdfCollections.clear(step.elements);
    AdfCollections.clear(step.overflowElements);
    var swapElements = step.swapElements;
    while(swapElements.length > 0) {
      var positions = swapElements.pop();
      AdfCollections.clear(positions)
    }
  }
};
AdfOverflowSupport.prototype._numberOfVisibleSteps = function() {
  var numberOfSteps = this._steps.length;
  var invisibleStartSteps = this._firstVisibleStep;
  var lastStep = numberOfSteps - 1;
  var invisibleEndSteps = lastStep - this._lastVisibleStep;
  return numberOfSteps - invisibleStartSteps - invisibleEndSteps
};
AdfOverflowSupport.prototype._hideOverflowButtons = function() {
  switch(this._type) {
    case "end":
      AdfDomUtils.removeCSSClassName(this._element, "p_AFEndOverflow");
      break;
    case "start":
      AdfDomUtils.removeCSSClassName(this._element, "p_AFStartOverflow");
      break;
    case "both":
      AdfDomUtils.removeCSSClassName(this._element, "p_AFEndOverflow");
      AdfDomUtils.removeCSSClassName(this._element, "p_AFStartOverflow");
      break;
    case "droplist":
      AdfDomUtils.removeCSSClassName(this._element, "p_AFOverflowDroplist")
  }
};
AdfOverflowSupport.prototype._showOverflowButtons = function(force) {
  if(force) {
    switch(this._type) {
      case "end":
        AdfDomUtils.addCSSClassName(this._element, "p_AFEndOverflow");
        break;
      case "start":
        AdfDomUtils.addCSSClassName(this._element, "p_AFStartOverflow");
        break;
      case "both":
        AdfDomUtils.addCSSClassName(this._element, "p_AFEndOverflow");
        AdfDomUtils.addCSSClassName(this._element, "p_AFStartOverflow");
        break;
      case "droplist":
        AdfDomUtils.addCSSClassName(this._element, "p_AFOverflowDroplist")
    }
    return
  }
  if(this._firstVisibleStep > 0 && this._startContainer.childNodes.length > 0) {
    if(this._supportsDroplist()) {
      AdfDomUtils.addCSSClassName(this._element, "p_AFOverflowDroplist")
    }else {
      AdfDomUtils.addCSSClassName(this._element, "p_AFStartOverflow")
    }
  }
  var lastStep = this._steps.length - 1;
  if(this._lastVisibleStep < lastStep) {
    if(this._supportsDroplist()) {
      AdfDomUtils.addCSSClassName(this._element, "p_AFOverflowDroplist")
    }else {
      AdfDomUtils.addCSSClassName(this._element, "p_AFEndOverflow")
    }
  }
};
AdfOverflowSupport.prototype._resetActiveDescendant = function(popupContainer) {
  if(!popupContainer) {
    switch(this._type) {
      case "end":
        popupContainer = this._endContainer;
        break;
      case "start":
        popupContainer = this._startContainer;
        break;
      case "droplist":
        popupContainer = this._droplistContainer;
        break;
      case "both":
        AdfLogger.LOGGER.warning("Roving tab index not yet supported for overflow type 'both'!");
        return
    }
  }
  if(this._activeDescendant) {
    this._activeDescendant.setAttribute("tabIndex", "-1")
  }
  var context = {includeVisibilityHidden:true, includeDisplayNone:true};
  this._activeDescendant = AdfFocusUtils.setFirstActiveDescendant(popupContainer, context)
};

function AdfSwipeSupport(element, callbacks, options) {
  this.Init(element, callbacks, options)
}
AdfObject.createSubclass(AdfSwipeSupport);
AdfSwipeSupport.InitClass = function() {
  this.DIRECTION_LEFT = 1;
  this.DIRECTION_RIGHT = 2;
  this.DIRECTION_UP = 3;
  this.DIRECTION_DOWN = 4;
  this.PANSTART_CALLBACK = "panstart";
  this.PANNING_CALLBACK = "panning";
  this.PANEND_CALLBACK = "panend";
  this.PANCANCEL_CALLBACK = "pancancel";
  this.SWIPE_CALLBACK = "swipe";
  this.SUPPORT_MOUSE = "mouseSupport";
  this.MODE = "mode";
  this.MODE_VERTICAL = 1;
  this.CALLBACK_PARAM = "cp";
  this._SWIPE_VELOCITY_THRESHOLD = 0.3;
  this._SWIPE_DISTANCE_THRESHOLD = 10;
  this._MOUSE_SWIPE_DISTANCE_THRESHOLD = 3;
  this._TOUCH_ACTION_PANX_CLASS = "AFPrivateTouchActionPanX";
  this._TOUCH_ACTION_PANY_CLASS = "AFPrivateTouchActionPanY";
  this._USER_SELECT_NONE_CLASS = "AFPrivateUserSelectNone"
};
AdfSwipeSupport.prototype.Init = function(element, callbacks, options) {
  AdfSwipeSupport.superclass.Init.call(this);
  this._element = element;
  this._callbacks = callbacks;
  this._supportMouse = options && options[AdfSwipeSupport.SUPPORT_MOUSE];
  this._isVertical = options && options[AdfSwipeSupport.MODE] === AdfSwipeSupport.MODE_VERTICAL;
  this._callbackParam = options && options[AdfSwipeSupport.CALLBACK_PARAM];
  this._usesPointerEvents = window.ontouchstart === undefined;
  AdfDomUtils.addCSSClassName(element, this._isVertical ? AdfSwipeSupport._TOUCH_ACTION_PANX_CLASS : AdfSwipeSupport._TOUCH_ACTION_PANY_CLASS);
  if(this._usesPointerEvents) {
    this._pointerDownHandler = this.createCallback(this._handlePointerDown);
    element.addEventListener("pointerdown", this._pointerDownHandler, false)
  }else {
    this._touchStartHandler = this.createCallback(this._handleTouchStart);
    element.addEventListener("touchstart", this._touchStartHandler, false)
  }
  if(this._supportMouse) {
    AdfDomUtils.addCSSClassName(element, AdfSwipeSupport._USER_SELECT_NONE_CLASS);
    this._mouseDownHandler = this.createCallback(this._handleMouseDown);
    element.addEventListener("mousedown", this._mouseDownHandler, false)
  }
};
AdfSwipeSupport.prototype.release = function() {
  if(this._isPanning) {
    this._cleanupState()
  }
  var element = this._element;
  this._element = null;
  this._callbacks = null;
  this._callbackParam = null;
  if(this._usesPointerEvents) {
    element.removeEventListener("pointerdown", this._pointerDownHandler, false)
  }else {
    element.removeEventListener("touchstart", this._touchStartHandler, false)
  }
  AdfDomUtils.removeCSSClassName(element, this._isVertical ? AdfSwipeSupport._TOUCH_ACTION_PANX_CLASS : AdfSwipeSupport._TOUCH_ACTION_PANY_CLASS);
  if(this._supportMouse) {
    element.removeEventListener("mousedown", this._mouseDownHandler, false);
    AdfDomUtils.removeCSSClassName(element, AdfSwipeSupport._USER_SELECT_NONE_CLASS)
  }
};
AdfSwipeSupport.prototype._handlePointerDown = function(event) {
  if(event.pointerType == "touch") {
    if(this._pointerId) {
      try {
        if(this._isPanning) {
          this._cancelPanning(event)
        }
      }finally {
        this._cleanupState()
      }
      return
    }
    this._pointerId = event.pointerId;
    this._initiatePanning(event)
  }
};
AdfSwipeSupport.prototype._handleTouchStart = function(event) {
  if(event.touches.length > 1) {
    return
  }
  this._initiatePanning(event)
};
AdfSwipeSupport.prototype._handleMouseDown = function(event) {
  this._initiatePanning(event)
};
AdfSwipeSupport.prototype._initiatePanning = function(event) {
  if(this._startTime) {
    return
  }
  if(AdfSwipeSupport._shouldPreventPanning(event)) {
    return
  }
  var pos = AdfAgent.AGENT.getMousePosition(event);
  this._panStartX = pos.x;
  this._panStartY = pos.y;
  this._panLastX = this._panStartX;
  this._panLastY = this._panStartY;
  this._startTime = Date.now();
  if(event.type == "mousedown") {
    this._fromMouseHandler = true;
    this._panningHandler = this.createCallback(this._handlePanning);
    document.addEventListener("mousemove", this._panningHandler, false);
    this._panEndHandler = this.createCallback(this._handlePanEnd);
    document.addEventListener("mouseup", this._panEndHandler, true)
  }else {
    if(event.type == "pointerdown") {
      this._panningHandler = this.createCallback(this._handlePanning);
      document.addEventListener("pointermove", this._panningHandler, false);
      this._panEndHandler = this.createCallback(this._handlePanEnd);
      document.addEventListener("pointerup", this._panEndHandler, false);
      this._panCancelHandler = this.createCallback(this._handlePanCancel);
      this._element.addEventListener("pointercancel", this._panCancelHandler, false)
    }else {
      this._panningHandler = this.createCallback(this._handlePanning);
      this._element.addEventListener("touchmove", this._panningHandler, false);
      this._panEndHandler = this.createCallback(this._handlePanEnd);
      this._element.addEventListener("touchend", this._panEndHandler, false);
      this._panCancelHandler = this.createCallback(this._handlePanCancel);
      this._element.addEventListener("touchcancel", this._panCancelHandler, false)
    }
  }
};
AdfSwipeSupport.prototype._cleanupState = function() {
  this._isPanning = false;
  this._direction = null;
  this._panStartX = null;
  this._panStartY = null;
  this._panLastX = null;
  this._panLastY = null;
  this._startTime = null;
  this._pointerId = null;
  if(this._fromMouseHandler) {
    document.removeEventListener("mousemove", this._panningHandler, false);
    document.removeEventListener("mouseup", this._panEndHandler, true)
  }else {
    if(this._usesPointerEvents) {
      document.removeEventListener("pointermove", this._panningHandler, false);
      document.removeEventListener("pointerup", this._panEndHandler, false);
      document.removeEventListener("pointercancel", this._panCancelHandler, false)
    }else {
      this._element.removeEventListener("touchmove", this._panningHandler, false);
      this._element.removeEventListener("touchend", this._panEndHandler, false);
      this._element.removeEventListener("touchcancel", this._panCancelHandler, false)
    }
  }
  this._fromMouseHandler = false
};
AdfSwipeSupport.prototype._handlePanning = function(event) {
  if(AdfSwipeSupport._shouldPreventPanning(event)) {
    try {
      if(this._isPanning) {
        this._cancelPanning(event)
      }
    }finally {
      this._cleanupState()
    }
    return
  }
  var pos = AdfAgent.AGENT.getMousePosition(event);
  if(!this._isPanning) {
    var distance = this._isVertical ? pos.y - this._panStartY : pos.x - this._panStartX;
    var threshold = this._fromMouseHandler ? AdfSwipeSupport._MOUSE_SWIPE_DISTANCE_THRESHOLD : AdfSwipeSupport._SWIPE_DISTANCE_THRESHOLD;
    if(Math.abs(distance) > threshold) {
      this._isPanning = true;
      this._direction = this._getDirection(distance);
      var type = AdfSwipeSupport.PANSTART_CALLBACK;
      var gestureEvent = this._getGestureEvent(type, event, pos);
      this._invokeCallback(type, gestureEvent);
      if(event.cancelable) {
        AdfAgent.AGENT.preventDefault(event)
      }
    }
  }else {
    if(event.cancelable) {
      AdfAgent.AGENT.preventDefault(event)
    }
    var type = AdfSwipeSupport.PANNING_CALLBACK;
    var gestureEvent = this._getGestureEvent(type, event, pos);
    this._invokeCallback(type, gestureEvent)
  }
  this._panLastX = pos.x;
  this._panLastY = pos.y
};
AdfSwipeSupport.prototype._handlePanEnd = function(event) {
  if(!this._isPanning) {
    this._cleanupState();
    return
  }
  var type = AdfSwipeSupport.PANEND_CALLBACK;
  var gestureEvent = this._getGestureEvent(type, event);
  if(AdfSwipeSupport._isSwipe(gestureEvent)) {
    type = AdfSwipeSupport.SWIPE_CALLBACK;
    gestureEvent.type = type
  }
  try {
    this._invokeCallback(type, gestureEvent)
  }finally {
    this._cleanupState()
  }
};
AdfSwipeSupport.prototype._handlePanCancel = function(event) {
  try {
    if(this._isPanning) {
      this._cancelPanning(event)
    }
  }finally {
    this._cleanupState()
  }
};
AdfSwipeSupport.prototype._cancelPanning = function(event, gestureEvent) {
  var type = AdfSwipeSupport.PANCANCEL_CALLBACK;
  if(gestureEvent) {
    gestureEvent.type = type
  }else {
    gestureEvent = this._getGestureEvent(type, event)
  }
  this._invokeCallback(type, gestureEvent)
};
AdfSwipeSupport._isSwipe = function(gestureEvent) {
  return gestureEvent.offsetDirection === gestureEvent.direction && gestureEvent.velocity > AdfSwipeSupport._SWIPE_VELOCITY_THRESHOLD && Math.abs(gestureEvent._deltaXorY) > AdfSwipeSupport._SWIPE_DISTANCE_THRESHOLD
};
AdfSwipeSupport._shouldPreventPanning = function(event) {
  var page = AdfPage.PAGE;
  var dndContext = page.getDnDContext();
  return event.defaultPrevented || page.isDragging() || dndContext && dndContext.isDragging()
};
AdfSwipeSupport.prototype._getDirection = function(distance) {
  return distance < 0 ? this._isVertical ? AdfSwipeSupport.DIRECTION_UP : AdfSwipeSupport.DIRECTION_LEFT : this._isVertical ? AdfSwipeSupport.DIRECTION_DOWN : AdfSwipeSupport.DIRECTION_RIGHT
};
AdfSwipeSupport.prototype._getGestureEvent = function(eventType, srcEvent, pos) {
  if(!pos) {
    pos = AdfAgent.AGENT.getMousePosition(srcEvent)
  }
  var event = {};
  event.type = eventType;
  event.deltaX = pos.x - this._panStartX;
  event.deltaY = pos.y - this._panStartY;
  event._deltaXorY = this._isVertical ? event.deltaY : event.deltaX;
  event.deltaTime = Date.now() - this._startTime;
  event.velocity = Math.abs(event._deltaXorY / event.deltaTime);
  event.direction = this._direction;
  event.offsetDirection = this._getDirection(event._deltaXorY);
  event.srcEvent = srcEvent;
  return event
};
AdfSwipeSupport.prototype._invokeCallback = function(type, gestureEvent) {
  var callback = this._callbacks && this._callbacks[type];
  if(callback) {
    callback(gestureEvent, this._callbackParam)
  }
};

function AdfDhtmlShadowDecorator() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlShadowDecorator);
AdfDhtmlShadowDecorator.prototype.Init = function() {
  AdfDhtmlShadowDecorator.superclass.Init.call(this)
};
AdfDhtmlShadowDecorator.getShadowSize = function() {
  var shadowPixelSize = AdfDhtmlShadowDecorator._SHADOW_PIXEL_SIZE;
  if(shadowPixelSize == null) {
    var lookAndFeel = AdfPage.PAGE.getLookAndFeel();
    var skinShadowSize = parseInt(lookAndFeel.getSkinProperty("af|popup-tr-shadow-pixel-size"));
    shadowPixelSize = isNaN(skinShadowSize) ? 0 : skinShadowSize;
    AdfDhtmlShadowDecorator._SHADOW_PIXEL_SIZE = shadowPixelSize
  }
  return shadowPixelSize
};
AdfDhtmlShadowDecorator.prototype._create = function(element, appendToElement, shadowOffsetTop, shadowOffsetLeft, isRelative, startingBlackPercent) {
  if(shadowOffsetTop == null) {
    shadowOffsetTop = 3
  }
  this._shadowOffsetTop = shadowOffsetTop;
  if(shadowOffsetLeft == null) {
    shadowOffsetLeft = 3
  }
  this._shadowOffsetLeft = shadowOffsetLeft;
  if(startingBlackPercent == null) {
    startingBlackPercent = 100
  }
  this._isRelative = isRelative;
  var shadowSize = AdfDhtmlShadowDecorator.getShadowSize();
  var shadeLevels = shadowSize * 2;
  var thePage = AdfPage.PAGE;
  var agent = AdfAgent.AGENT;
  if(!this._maskFrame) {
    this._maskFrame = thePage.createMaskingFrame(element)
  }
  if(!AdfDhtmlShadowDecorator._usesNativeShadows(element) && !this._shadeElements) {
    var elementStyle = agent.getComputedStyle(element);
    this._shadeElements = new Array(shadeLevels);
    if(elementStyle.zIndex == undefined || AdfAgent.getCSSLengthAsInt(elementStyle.zIndex) <= 2) {
      element.style.zIndex = 3
    }
    var currentDocument = element.ownerDocument;
    var isRTL = thePage.getLocaleContext().isRightToLeft();
    var pos = isRelative ? {x:0, y:0} : agent.getElementPosition(element);
    var ssTop = pos.y + shadowOffsetTop;
    var ssLeft;
    if(isRTL) {
      ssLeft = pos.x - (shadowOffsetLeft + shadowSize)
    }else {
      ssLeft = pos.x + shadowOffsetLeft
    }
    var offsetWidth = element.offsetWidth, offsetHeight = element.offsetHeight;
    var rootElement = appendToElement ? appendToElement : currentDocument.body;
    this._anchorBox = {x:pos.x, y:pos.y, offsetWidth:offsetWidth, offsetHeight:offsetHeight};
    var shadeContainer = currentDocument.createElement("div");
    AdfDomUtils.addCSSClassName(shadeContainer, AdfDhtmlShadowDecorator._SHADOW_STYLE_CLASS);
    var shadeStyle = shadeContainer.style;
    shadeStyle.zIndex = AdfAgent.getCSSLengthAsInt(elementStyle.zIndex) - 1;
    shadeStyle.position = "absolute";
    shadeStyle.left = ssLeft + "px";
    shadeStyle.top = ssTop + "px";
    shadeStyle.width = offsetWidth + shadowSize + "px";
    shadeStyle.height = offsetHeight + shadowSize + "px";
    ssTop = 0;
    ssLeft = isRTL ? shadowSize + shadowOffsetLeft : 0;
    var ssWidth = offsetWidth - shadowOffsetLeft + "px", ssHeight = offsetHeight - shadowOffsetTop + "px";
    for(var i = 0;i < shadeLevels;i++) {
      var shade = currentDocument.createElement("div");
      shadeStyle = shade.style;
      shadeStyle.position = "absolute";
      shadeStyle.left = ssLeft + "px";
      shadeStyle.top = ssTop + "px";
      if(i % 2 == 0) {
        if(isRTL) {
          ssLeft--
        }else {
          ssLeft++
        }
      }else {
        ssTop++
      }
      shadeStyle.width = ssWidth;
      shadeStyle.height = ssHeight;
      shadeStyle.backgroundColor = "#000000";
      agent.setOpacity(shade, Math.floor(startingBlackPercent / (2 * i + 4)));
      shadeContainer.appendChild(shade);
      this._shadeElements[i] = shade
    }
    rootElement.appendChild(shadeContainer);
    this._shadeContainer = shadeContainer
  }
  agent.setExpandoProperty(element, AdfDhtmlShadowDecorator.SHADOW_ANCHOR_ATTRIBUTE, "true")
};
AdfDhtmlShadowDecorator.prototype._move = function(element) {
  var agent = AdfAgent.AGENT;
  var page = AdfPage.PAGE;
  var maskFrame = this._maskFrame;
  if(maskFrame) {
    page.moveMaskingFrame(element, maskFrame)
  }
  if(this._shadeElements) {
    var anchorBox = this._anchorBox;
    var offsetWidth = element.offsetWidth, offsetHeight = element.offsetHeight;
    var pos = this._isRelative ? {x:0, y:0} : agent.getElementPosition(element);
    if(anchorBox.x == pos.x && anchorBox.y == pos.y && anchorBox.offsetWidth == offsetWidth && anchorBox.offsetHeight == offsetHeight) {
      return
    }
    this._anchorBox = {x:pos.x, y:pos.y, offsetWidth:offsetWidth, offsetHeight:offsetHeight};
    var nextZIndex = agent.getComputedStyle(element).zIndex - 1;
    var shadowOffsetTop = this._shadowOffsetTop, shadowOffsetLeft = this._shadowOffsetLeft;
    var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
    var shadeContainer = this._shadeContainer;
    var shadeStyle = shadeContainer.style;
    shadeStyle.zIndex = nextZIndex;
    var shadowSize = AdfDhtmlShadowDecorator.getShadowSize();
    var shadeLevels = shadowSize * 2;
    var shadeStyleLeft;
    if(isRTL) {
      shadeStyleLeft = pos.x - (shadowOffsetLeft + shadowSize)
    }else {
      shadeStyleLeft = pos.x + shadowOffsetLeft
    }
    shadeStyle.left = shadeStyleLeft + "px";
    shadeStyle.top = pos.y + shadowOffsetTop + "px";
    shadeStyle.width = offsetWidth + shadowSize + "px";
    shadeStyle.height = offsetHeight + shadowSize + "px";
    AdfAssert.assert(offsetWidth - shadowOffsetLeft > 0, "Computed shadow width is less than one");
    AdfAssert.assert(offsetHeight - shadowOffsetTop > 0, "Computed shadow height is less than one");
    var ssWidth = offsetWidth - shadowOffsetLeft + "px";
    var ssHeight = offsetHeight - shadowOffsetTop + "px";
    for(var i = 0;i < shadeLevels;i++) {
      var shade = this._shadeElements[i];
      shadeStyle = shade.style;
      shadeStyle.width = ssWidth;
      shadeStyle.height = ssHeight
    }
  }
};
AdfDhtmlShadowDecorator.prototype._show = function(element, show) {
  if(this._maskFrame) {
    this._maskFrame.style.visibility = show ? "visible" : "hidden"
  }
  if(this._shadeElements) {
    this._shadeContainer.style.display = show ? "block" : "none"
  }
};
AdfDhtmlShadowDecorator.prototype._remove = function(element) {
  var maskFrame = this._maskFrame;
  if(maskFrame) {
    AdfPage.PAGE.removeMaskingFrame(maskFrame);
    delete this._maskFrame
  }
  var shadeElements = this._shadeElements;
  if(shadeElements) {
    this._shadeContainer.parentNode.removeChild(this._shadeContainer);
    delete this._shadeElements;
    delete this._shadeContainer
  }
};
AdfDhtmlShadowDecorator.createShadowDecorator = function(element, rootElement, isRelative) {
  var agent = AdfAgent.AGENT;
  var shadowDecorator = AdfDhtmlShadowDecorator._getShadowDecorator(element);
  if(!shadowDecorator) {
    shadowDecorator = new AdfDhtmlShadowDecorator;
    var shadowOffset = AdfDhtmlShadowDecorator._getShadowOffset();
    var startingBlackPercent = AdfDhtmlShadowDecorator._getShadowStartingBlackPercent();
    shadowDecorator._create(element, rootElement, shadowOffset, shadowOffset, isRelative, startingBlackPercent);
    agent.setExpandoProperty(element, AdfDhtmlShadowDecorator._SHADOW_DECORATOR_ATTRIBUTE, shadowDecorator)
  }
  return shadowDecorator
};
AdfDhtmlShadowDecorator._usesNativeShadows = function(element) {
  var agent = AdfAgent.AGENT;
  var usesNativeShadows = agent.getPlatform() == AdfAgent.WEBKIT_PLATFORM || agent.atLeast(AdfAgent.IE_PLATFORM, 9) || agent.atLeast(AdfAgent.GECKO_PLATFORM, "1.9.1");
  if(!usesNativeShadows) {
    return usesNativeShadows
  }
  usesNativeShadows = false;
  while(element && !usesNativeShadows) {
    if(element.nodeType == 1) {
      if(AdfDomUtils.containsCSSClassName(element, AdfDhtmlZOrderManager.LAYER_STYLECLASS)) {
        break
      }
      var elementStyle = agent.getComputedStyle(element);
      for(var i = 0;i < AdfDhtmlShadowDecorator._CSS_NATIVE_BOX_SHADOWS.length;i++) {
        var value = elementStyle[AdfDhtmlShadowDecorator._CSS_NATIVE_BOX_SHADOWS[i]];
        if(value && value.length > 0 && "none" != value) {
          usesNativeShadows = true;
          break
        }
      }
    }
    element = element.parentNode
  }
  return usesNativeShadows
};
AdfDhtmlShadowDecorator.moveShadowDecorator = function(element) {
  var shadowDecorator = AdfDhtmlShadowDecorator._getShadowDecorator(element);
  if(shadowDecorator) {
    shadowDecorator._move(element)
  }
};
AdfDhtmlShadowDecorator.removeShadowDecorator = function(element) {
  var shadowDecorator = AdfDhtmlShadowDecorator._getShadowDecorator(element);
  if(shadowDecorator) {
    shadowDecorator._remove(element);
    AdfAgent.AGENT.setExpandoProperty(element, AdfDhtmlShadowDecorator._SHADOW_DECORATOR_ATTRIBUTE, undefined)
  }
};
AdfDhtmlShadowDecorator.showShadowDecorator = function(element, show) {
  var shadowDecorator = AdfDhtmlShadowDecorator._getShadowDecorator(element);
  if(shadowDecorator) {
    shadowDecorator._show(element, show)
  }
};
AdfDhtmlShadowDecorator.hasShadowDecorator = function(element) {
  var hasDecorator = AdfDhtmlShadowDecorator._getShadowDecorator(element);
  return undefined != hasDecorator
};
AdfDhtmlShadowDecorator._getShadowDecorator = function(element) {
  return AdfAgent.AGENT.getExpandoProperty(element, AdfDhtmlShadowDecorator._SHADOW_DECORATOR_ATTRIBUTE)
};
AdfDhtmlShadowDecorator._getShadowOffset = function() {
  var shadowOffset = AdfDhtmlShadowDecorator._SHADOW_OFFSET;
  if(shadowOffset == null) {
    var lookAndFeel = AdfPage.PAGE.getLookAndFeel();
    var skinShadowOffset = parseInt(lookAndFeel.getSkinProperty("af|popup-tr-shadow-offset"));
    shadowOffset = isNaN(skinShadowOffset) ? 3 : skinShadowOffset;
    AdfDhtmlShadowDecorator._SHADOW_OFFSET = shadowOffset
  }
  return shadowOffset
};
AdfDhtmlShadowDecorator._getShadowStartingBlackPercent = function() {
  var shadowStartingBlackPercent = AdfDhtmlShadowDecorator._SHADOW_STARTING_BLACK_PERCENT;
  if(shadowStartingBlackPercent == null) {
    var lookAndFeel = AdfPage.PAGE.getLookAndFeel();
    var skinShadowStartingBlackPercent = parseInt(lookAndFeel.getSkinProperty("af|popup-tr-shadow-starting-black-percent"));
    shadowStartingBlackPercent = isNaN(skinShadowStartingBlackPercent) ? 3 : skinShadowStartingBlackPercent;
    AdfDhtmlShadowDecorator._SHADOW_STARTING_BLACK_PERCENT = shadowStartingBlackPercent
  }
  return shadowStartingBlackPercent
};
AdfDhtmlShadowDecorator.setRelative = function(element, relative) {
  var shadowDecorator = AdfDhtmlShadowDecorator._getShadowDecorator(element);
  if(shadowDecorator && relative) {
    shadowDecorator._isRelative = true
  }
};
AdfDhtmlShadowDecorator.SHADOW_ANCHOR_ATTRIBUTE = "_afrShadAnc";
AdfDhtmlShadowDecorator._SHADOW_DECORATOR_ATTRIBUTE = "data-afr-shaddec";
AdfDhtmlShadowDecorator._CSS_NATIVE_BOX_SHADOWS = ["box-shadow", "-webkit-box-shadow", "-moz-box-shadow"];

function AdfDhtmlZOrderLayer(containerElement) {
  this.Init(containerElement)
}
AdfObject.createSubclass(AdfDhtmlZOrderLayer);
AdfDhtmlZOrderLayer.prototype.Init = function(containerElement) {
  AdfDhtmlZOrderLayer.superclass.Init.call(this);
  this._containerElement = containerElement;
  this._elements = new Array;
  this._elementsCount = 0;
  this.MINIMAL_Z_INDEX = 20
};
AdfDhtmlZOrderLayer.prototype.getContainerElement = function() {
  return this._containerElement
};
AdfDhtmlZOrderLayer.prototype.getContainerElementCount = function() {
  return this._elementsCount
};
AdfDhtmlZOrderLayer.prototype.getId = function() {
  return this._containerElement.getAttribute("id")
};
AdfDhtmlZOrderLayer.prototype.addElement = function(element, priorElement) {
  this._elementsCount++;
  var elements = this._elements;
  var s = 0;
  if(priorElement) {
    s = AdfCollections.indexOf(elements, priorElement);
    if(s > -1) {
      elements.splice(s, 0, element)
    }else {
      elements.push(element);
      s = elements.length - 1
    }
  }else {
    elements.push(element);
    s = elements.length - 1
  }
  for(var i = s;i < elements.length;i++) {
    if(!(i in elements)) {
      continue
    }
    this._updateElement(i)
  }
  this._containerElement.appendChild(element)
};
AdfDhtmlZOrderLayer.prototype.removeElement = function(element) {
  var elementsCount = this._elementsCount--;
  var elements = this._elements;
  var i = AdfCollections.indexOf(elements, element);
  if(i > -1) {
    delete elements[i]
  }
  this._containerElement.removeChild(element);
  if(elementsCount == 0) {
    this._elements = new Array
  }
};
AdfDhtmlZOrderLayer.prototype.raiseToFront = function(raisingElement) {
  var elements = this._elements;
  var i = AdfCollections.indexOf(elements, raisingElement);
  if(i > -1) {
    delete elements[i];
    elements.push(raisingElement);
    this._updateElement(elements.length - 1)
  }
};
AdfDhtmlZOrderLayer.prototype._updateElement = function(elementIndex) {
  var el = this._elements[elementIndex];
  var newZIndex = elementIndex * 2 + this.MINIMAL_Z_INDEX;
  el.style.zIndex = newZIndex
};
AdfDhtmlZOrderLayer.prototype.visitElements = function(callback) {
  AdfAssert.assertFunction(callback, "no visitor callback");
  var elements = this._elements;
  for(var i = 0;i < elements.length;i++) {
    if(!(i in elements)) {
      continue
    }
    if(callback(this, elements[i])) {
      break
    }
  }
};

function AdfDhtmlModalityManager() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlModalityManager);
AdfDhtmlModalityManager.prototype.Init = function() {
  AdfDhtmlModalityManager.superclass.Init.call(this);
  this._modalElementStack = [];
  this._glassPaneStack = []
};
AdfDhtmlModalityManager.prototype.getElementCount = function() {
  return this._modalElementStack.length
};
AdfDhtmlModalityManager.prototype.dispose = function() {
  this._modalElementStack = null;
  this._glassPaneStack = null
};
AdfDhtmlModalityManager.prototype.pushModal = function(element) {
  AdfAssert.assertDomElement(element);
  var domDocument = element.ownerDocument;
  if(this.isGlassPaneVisible()) {
    var previousGlassPane = this._glassPaneStack[this._glassPaneStack.length - 1];
    previousGlassPane.style.display = "none"
  }else {
    var agent = AdfAgent.AGENT;
    var domWindow = agent.getDomWindow();
    this._setupEventHandler(agent, "_handleResize", "resize", true, domWindow)
  }
  AdfAssert.assertDomElement(element.parentNode);
  var layerContainer = element.parentNode;
  var layerId = layerContainer.getAttribute("id");
  AdfAssert.assertString(layerId);
  var glassPane = this._createGlassPane();
  AdfPage.PAGE.getZOrderManager().addElementToLayer(glassPane, layerId, element);
  AdfPopupScopingUtils.markAsScopingContainer(glassPane);
  this._modalElementStack.push(element);
  this._glassPaneStack.push(glassPane)
};
AdfDhtmlModalityManager.prototype.__peekModalGlass = function() {
  var glassPane = null;
  var glassPaneStack = this._glassPaneStack;
  if(glassPaneStack && glassPaneStack.length > 0) {
    glassPane = glassPaneStack[glassPaneStack.length - 1]
  }
  return glassPane
};
AdfDhtmlModalityManager.prototype.popModal = function() {
  var element = this._modalElementStack.pop();
  var glassPane = this._glassPaneStack.pop();
  glassPane.style.width = "1px";
  glassPane.style.height = "1px";
  AdfPage.PAGE.getZOrderManager().removeElement(glassPane);
  if(this._modalElementStack.length > 0) {
    var previousGlassPane = this._glassPaneStack[this._glassPaneStack.length - 1];
    previousGlassPane.style.display = "block"
  }else {
    var agent = AdfAgent.AGENT;
    var domDocument = agent.getDomDocument();
    var domWindow = agent.getDomWindow();
    this._setupEventHandler(agent, "_handleResize", "resize", false, domWindow)
  }
};
AdfDhtmlModalityManager.prototype._createGlassPane = function() {
  var agent = AdfAgent.AGENT;
  var domDocument = AdfPage.PAGE.getDomDocument();
  var el = domDocument.createElement("div");
  var style = el.style;
  var domWindow = agent.getDomWindow();
  el.className = "AFModalGlassPane";
  style.width = agent.getWindowScrollWidth(domWindow) + "px";
  style.height = agent.getWindowScrollHeight(domWindow) + "px";
  agent.disableUserSelect(el);
  agent.addBubbleEventListener(el, "keydown", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "keyup", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "keypress", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "mousedown", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "mouseup", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "mouseover", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "mouseout", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "click", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "focusin", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(el, "focus", AdfAgent.eatEventCallback);
  return el
};
AdfDhtmlModalityManager.prototype._handleResize = function() {
  var agent = AdfAgent.AGENT;
  var domWindow = agent.getDomWindow();
  for(var i = 0;i < this._glassPaneStack.length;i++) {
    var glassPane = this._glassPaneStack[i];
    glassPane.style.width = "100vw";
    glassPane.style.height = "100vh"
  }
};
AdfDhtmlModalityManager.prototype.getTopGlassPane = function() {
  if(this.isGlassPaneVisible()) {
    return this._glassPaneStack[this._glassPaneStack.length - 1]
  }
};
AdfDhtmlModalityManager.prototype._setupEventHandler = function(agent, funcName, eventName, setup, listenElement) {
  var stubName = funcName + "Stub";
  if(this[stubName] == null) {
    this[stubName] = this.createCallback(this[funcName])
  }
  if(setup) {
    agent.addBubbleEventListener(listenElement, eventName, this[stubName])
  }else {
    agent.removeBubbleEventListener(listenElement, eventName, this[stubName])
  }
};
AdfDhtmlModalityManager.prototype.isAboveTopGlassPane = function(element) {
  var validatorMethod = function(matchEl) {
    return element == matchEl
  };
  return this._traverseAhead(this.getTopGlassPane(), true, validatorMethod)
};
AdfDhtmlModalityManager.prototype._traverseAhead = function(element, isStartElement, validatorMethod) {
  var result = false;
  if(element) {
    result = result || validatorMethod(element);
    result = result || this._traverseAhead(element.firstChild, false, validatorMethod);
    result = result || this._traverseAhead(element.nextSibling, false, validatorMethod);
    if(!result) {
      if(isStartElement) {
        for(var parent = element.parentNode;parent;parent = parent.parentNode) {
          result = this._traverseAhead(parent.nextSibling, false, validatorMethod);
          if(result) {
            break
          }
        }
      }
    }
  }
  return result
};
AdfDhtmlModalityManager.prototype.isGlassPaneVisible = function() {
  return this._glassPaneStack.length > 0
};

function AdfAbstractFloatingElement(floatingType) {
  this.Init(floatingType)
}
AdfObject.createSubclass(AdfAbstractFloatingElement);
AdfAbstractFloatingElement.prototype.Init = function(floatingType) {
  AdfAbstractFloatingElement.superclass.Init.call(this);
  this._floatingType = floatingType;
  this._alignElement = null;
  this._rootElement = null;
  this._shadowAnchor = null;
  this._alignPosition = null
};
AdfAbstractFloatingElement.prototype.setElement = function(element) {
  this._rootElement = element;
  this.setShadowAnchor(element);
  var elementStyle = element.style;
  elementStyle.position = "absolute";
  elementStyle.zIndex = 2;
  AdfPage.PAGE.getZOrderManager().addElementToLayer(element, this._floatingType)
};
AdfAbstractFloatingElement.prototype.getElement = function() {
  return this._rootElement
};
AdfAbstractFloatingElement.prototype.setAlignElement = function(alignElement) {
  if(alignElement && alignElement.id) {
    this._alignElementId = alignElement.id;
    delete this._alignElement
  }else {
    this._alignElement = alignElement;
    delete this._alignElementId
  }
};
AdfAbstractFloatingElement.prototype.setAlignPosition = function(pos) {
  this._alignPosition = pos;
  delete this._alignElement;
  delete this._alignElementId
};
AdfAbstractFloatingElement.prototype.getAlignPosition = function() {
  return this._alignPosition
};
AdfAbstractFloatingElement.prototype.getAlignElement = function() {
  var alignElementId = this._alignElementId;
  var alignElement = this._alignElement;
  if(alignElementId && !alignElement) {
    var agent = AdfAgent.AGENT;
    alignElement = agent.getElementById(alignElementId)
  }
  return alignElement
};
AdfAbstractFloatingElement.prototype.show = function() {
  this._rootElement.style.display = ""
};
AdfAbstractFloatingElement.prototype.hide = function() {
  this._rootElement.style.display = "none"
};
AdfAbstractFloatingElement.prototype.cancel = function() {
  this.hide()
};
AdfAbstractFloatingElement.prototype.destroy = function() {
  AdfPage.PAGE.getZOrderManager().removeElement(this._rootElement)
};
AdfAbstractFloatingElement.prototype.getWidth = function() {
  return this.getElement().offsetWidth
};
AdfAbstractFloatingElement.prototype.getHeight = function() {
  return this.getElement().offsetHeight
};
AdfAbstractFloatingElement.prototype.setShadowAnchor = function(el) {
  this._shadowAnchor = el
};
AdfAbstractFloatingElement.prototype.getShadowAnchor = function() {
  return this._shadowAnchor
};
AdfAbstractFloatingElement.prototype.setTop = function(position) {
  if(!isNaN(position)) {
    position += "px"
  }
  this._rootElement.style.top = position;
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(this.getShadowAnchor())) {
    AdfDhtmlShadowDecorator.moveShadowDecorator(this.getShadowAnchor())
  }
};
AdfAbstractFloatingElement.prototype.getTop = function() {
  return parseInt(this._rootElement.style.top)
};
AdfAbstractFloatingElement.prototype.setLeft = function(position) {
  if(!isNaN(position)) {
    position += "px"
  }
  this._rootElement.style.left = position;
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(this.getShadowAnchor())) {
    AdfDhtmlShadowDecorator.moveShadowDecorator(this.getShadowAnchor())
  }
};
AdfAbstractFloatingElement.prototype.getLeft = function() {
  return parseInt(this._rootElement.style.left)
};
AdfAbstractFloatingElement.prototype.setPosition = function(positionTop, positionLeft) {
  if(!isNaN(positionTop)) {
    positionTop += "px"
  }
  if(!isNaN(positionLeft)) {
    positionLeft += "px"
  }
  this._rootElement.style.left = positionLeft;
  this._rootElement.style.top = positionTop;
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(this.getShadowAnchor())) {
    AdfDhtmlShadowDecorator.moveShadowDecorator(this.getShadowAnchor())
  }
};
AdfAbstractFloatingElement.prototype.raiseToFront = function() {
  AdfPage.PAGE.getZOrderManager().raiseToFront(this._rootElement)
};
AdfAbstractFloatingElement.prototype.CreateTable = function(rows, cols) {
  var domDocument = AdfPage.PAGE.getDomDocument();
  var table = domDocument.createElement("table");
  for(var i = 0;i < rows;i++) {
    var tr = table.insertRow(i);
    for(var j = 0;j < cols;j++) {
      tr.insertCell(j)
    }
  }
  table.cellPadding = 0;
  table.cellSpacing = 0;
  if(AdfPage.PAGE.isScreenReaderMode()) {
    table.role = "presentation"
  }
  return table
};

function AdfRepositionable(floatingElement, handle) {
  this.Init(floatingElement, handle)
}
AdfObject.createSubclass(AdfRepositionable);
AdfRepositionable.InitClass = function() {
  var prototype = this.prototype;
  prototype.NORMAL = 0;
  prototype.START_DRAGGING = 1;
  prototype.DRAGGING = 2
};
AdfRepositionable.prototype.Init = function(floatingElement, handle) {
  AdfRepositionable.superclass.Init.call(this);
  this._floatingElement = floatingElement;
  this._handle = handle;
  var agent = AdfAgent.AGENT;
  this._mousedownStub = this.createCallback(this._mouseDownHandler);
  this._mousemoveStub = this.createCallback(this._mouseMoveHandler);
  this._mouseupStub = this.createCallback(this._stopDragging);
  var cap = agent.getCapabilities();
  var hasTouchScreen = this._hasTouchScreen = cap[AdfAgent.CAP_TOUCH_SCREEN] != AdfAgent.CAP_TOUCH_SCREEN_NONE;
  var dragStartEventType = hasTouchScreen ? "touchstart" : "mousedown";
  agent.addBubbleEventListener(this._handle, dragStartEventType, this._mousedownStub);
  agent.disableUserSelect(handle);
  this._originalTopPosition = null;
  this._originalLeftPosition = null;
  this._mouseStartX = null;
  this._mouseStartY = null;
  this._state = this.NORMAL
};
AdfRepositionable.prototype.destroy = function() {
  var agent = AdfAgent.AGENT;
  var hasTouchScreen = this._hasTouchScreen;
  var dragStartEventType = hasTouchScreen ? "touchstart" : "mousedown";
  agent.removeBubbleEventListener(this._handle, dragStartEventType, this._mousedownStub);
  if(this._state != this.NORMAL) {
    AdfPage.PAGE.stopDrag()
  }
};
AdfRepositionable.prototype.getElement = function() {
  return this._floatingElement.getElement()
};
AdfRepositionable.prototype._mouseDownHandler = function(evt) {
  var page = AdfPage.PAGE;
  if(page.isDragging()) {
    return
  }
  var agent = AdfAgent.AGENT;
  evt = evt || agent.getDomWindow().event;
  var hasTouchScreen = this._hasTouchScreen;
  if(!hasTouchScreen && !agent.isLeftButton(evt)) {
    return
  }
  this._state = this.START_DRAGGING;
  agent.preventDefault(evt);
  var target = agent.getEventTarget(evt);
  var dismissalManager = AdfPage.PAGE.getAutoDismissalManager();
  dismissalManager.dismiss(target);
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM && this._floatingElement.handleActivate) {
    this._floatingElement.handleActivate(true)
  }
  page.startDrag(evt, this._mousemoveStub, this._mouseupStub)
};
AdfRepositionable.prototype._mouseMoveHandler = function(evt, deltaX, deltaY) {
  var agent = AdfAgent.AGENT;
  var pos = agent.getMousePosition(evt);
  if(this._state == this.START_DRAGGING) {
    this._onDragStart.apply(this._floatingElement);
    this._state = this.DRAGGING;
    this._mouseStartX = pos.x;
    this._mouseStartY = pos.y;
    this._originalLeftPosition = parseInt(this._floatingElement.getLeft());
    this._originalTopPosition = parseInt(this._floatingElement.getTop());
    this._moveDeltaX = 0;
    this._moveDeltaY = 0;
    if(!this._originalLeftPosition) {
      this._originalLeftPosition = 0
    }
    if(!this._originalTopPosition) {
      this._originalTopPosition = 0
    }
    var domDocument = AdfPage.PAGE.getDomDocument();
    var documentElement = domDocument.documentElement;
    var isIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
    var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
    var domWindow = agent.getDomWindow();
    var windowWidth = agent.getWindowScrollWidth(domWindow);
    var windowHeight = agent.getWindowScrollHeight(domWindow);
    var shadowSize = AdfDhtmlShadowDecorator.getShadowSize();
    var minLeft = isRTL ? shadowSize : 0;
    if(isIE && isRTL) {
      var adjustment = documentElement.scrollWidth - documentElement.clientWidth;
      minLeft -= adjustment;
      windowWidth -= adjustment
    }
    this._minLeft = minLeft;
    var el = this.getElement();
    this._wiggleWidth = windowWidth - el.offsetWidth - 2 * shadowSize;
    this._wiggleHeight = windowHeight - el.offsetHeight - 2 * shadowSize
  }
  if(this._state == this.DRAGGING) {
    var moveDeltaX = this._moveDeltaX += deltaX;
    var moveDeltaY = this._moveDeltaY += deltaY;
    this._move(moveDeltaX, moveDeltaY)
  }
};
AdfRepositionable.prototype._stopDragging = function(evt, deltaX, deltaY) {
  this._originalLeftPosition = null;
  this._originalTopPosition = null;
  this._mouseStartX = null;
  this._mouseStartY = null;
  if(this._state == this.DRAGGING) {
    this._onDragEnd.apply(this._floatingElement)
  }
  this._state = this.NORMAL
};
AdfRepositionable.prototype._move = function(deltaX, deltaY) {
  var newLeft = this._originalLeftPosition + deltaX;
  var newTop = this._originalTopPosition + deltaY;
  var minLeft = this._minLeft;
  var wiggleWidth = this._wiggleWidth;
  var wiggleHeight = this._wiggleHeight;
  if(newLeft > minLeft) {
    newLeft = Math.min(newLeft, wiggleWidth)
  }else {
    newLeft = minLeft
  }
  if(newTop > 0) {
    newTop = Math.min(newTop, wiggleHeight)
  }else {
    newTop = 0
  }
  this._floatingElement.setPosition(newTop, newLeft);
  this._onDrag()
};
AdfRepositionable.prototype.setDragStartHandler = function(handler) {
  this._onDragStart = handler
};
AdfRepositionable.prototype.setDragEndHandler = function(handler) {
  this._onDragEnd = handler
};
AdfRepositionable.prototype.setDragHandler = function(handler) {
  this._onDrag = handler
};
AdfRepositionable.prototype._onDragStart = function() {
};
AdfRepositionable.prototype._onDragEnd = function() {
};
AdfRepositionable.prototype._onDrag = function() {
};

function AdfDhtmlDialogManager() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlDialogManager);
AdfDhtmlDialogManager.prototype.Init = function() {
  AdfDhtmlDialogManager.superclass.Init.call(this);
  this._dialogs = [];
  this._activationChain = [];
  this._activeDialog = null;
  var agent = AdfAgent.AGENT;
  var domDocument = agent.getDomDocument(), documentElement = domDocument.documentElement;
  var domWindow = agent.getDomWindow();
  this._lastScrollLeft = documentElement.scrollLeft;
  this._lastScrollTop = documentElement.scrollTop;
  this._primaryWindow = new Object;
  this._primaryWindow.activate = function() {
    var nextDomElement = this._prevDomElement;
    if(nextDomElement) {
      AdfFocusUtils.focusElement(nextDomElement)
    }else {
      AdfFocusUtils.focusFirstDocumentTabStop()
    }
  };
  this._primaryWindow.showAsInActive = function() {
  };
  this._primaryWindow.showAsActive = function() {
  }
};
AdfDhtmlDialogManager.prototype.getElementCount = function() {
  return this._dialogs.length
};
AdfDhtmlDialogManager.prototype.registerDialog = function(dialog) {
  this._dialogs[this._dialogs.length] = dialog;
  delete this._topDialogNavigation
};
AdfDhtmlDialogManager.prototype._getTopDialogNavigation = function() {
  var activeIndex = -1;
  var activeDialog = this._activeDialog;
  var topDialogNavigation = this._topDialogNavigation;
  if(topDialogNavigation) {
    if(activeDialog) {
      activeIndex = AdfCollections.indexOf(topDialogNavigation, activeDialog)
    }
    return activeIndex
  }
  topDialogNavigation = [];
  var dialogs = this._dialogs;
  var documentUnderGlass = false;
  for(var i = dialogs.length - 1;i > -1;i--) {
    var dialog = dialogs[i];
    if(dialog.getModal()) {
      documentUnderGlass = true
    }
    if(activeIndex == -1 && activeDialog) {
      if(dialog == activeDialog) {
        activeIndex = topDialogNavigation.length
      }
    }
    topDialogNavigation[topDialogNavigation.length] = dialog;
    if(documentUnderGlass) {
      break
    }
  }
  topDialogNavigation.reverse();
  if(activeIndex > -1) {
    activeIndex = topDialogNavigation.length - 1 - activeIndex
  }
  if(!documentUnderGlass) {
    topDialogNavigation[topDialogNavigation.length] = this._primaryWindow
  }
  this._topDialogNavigation = topDialogNavigation;
  return activeIndex
};
AdfDhtmlDialogManager.prototype.focusNextModelessDialog = function(prevDocumentDomElement) {
  if(prevDocumentDomElement) {
    this._primaryWindow._prevDomElement = prevDocumentDomElement
  }
  var activeIndex = this._getTopDialogNavigation();
  var topDialogNavigation = this._topDialogNavigation;
  var nextIndex = 0;
  if(!topDialogNavigation || topDialogNavigation.length <= 1) {
    return
  }
  if(activeIndex == -1 || activeIndex + 1 == topDialogNavigation.length) {
    nextIndex = 0
  }else {
    nextIndex = activeIndex + 1
  }
  var nextDialog = topDialogNavigation[nextIndex];
  if(nextDialog) {
    this.activateDialog(nextDialog);
    nextDialog.activate()
  }
};
AdfDhtmlDialogManager.prototype.unregisterDialog = function(dialog) {
  var activationChain = this._activationChain;
  var dialogs = this._dialogs;
  this._getTopDialogNavigation();
  AdfCollections.removeArrayValue(dialogs, dialog);
  AdfCollections.removeArrayValue(activationChain, dialog);
  if(dialog.getModal()) {
    var page = AdfPage.PAGE;
    var topDialogNavigation = this._topDialogNavigation;
    for(var i = topDialogNavigation.length - 1;i > 0;i--) {
      var childDialog = topDialogNavigation[i];
      if(childDialog != this._primaryWindow) {
        var windowClientId = childDialog.getContainedComponentClientId();
        var windowComponent = page.findComponent(windowClientId);
        if(windowComponent && windowComponent instanceof AdfRichDialog) {
          var windowParent = windowComponent.getParent();
          if(windowParent && windowParent instanceof AdfRichDocument) {
            if(windowParent.getPeer().getMessageDialogId() == windowClientId) {
              continue
            }
          }
          var peer = windowComponent.getPeer();
          peer.bind(windowComponent);
          peer.fireCancel()
        }else {
          var popupClientId = childDialog.getPopupClientId();
          var popup = page.findComponent(popupClientId);
          if(popup && popup instanceof AdfRichPopup) {
            popup.cancel()
          }
        }
        AdfCollections.removeArrayValue(dialogs, childDialog);
        AdfCollections.removeArrayValue(activationChain, childDialog)
      }
    }
  }
  delete this._topDialogNavigation;
  if(this._activeDialog == dialog) {
    this._activeDialog = null;
    var chainElemCount = activationChain.length;
    if(chainElemCount >= 1) {
      var activeDialog = this._activeDialog = activationChain[chainElemCount - 1];
      activeDialog.activate()
    }
  }
};
AdfDhtmlDialogManager.prototype.activateDialog = function(dialog) {
  var currentActiveDialog = this._activeDialog;
  if(currentActiveDialog == dialog) {
    return false
  }
  this._getTopDialogNavigation();
  var topDialogNavigation = this._topDialogNavigation;
  if(topDialogNavigation) {
    var activeIndex = AdfCollections.indexOf(topDialogNavigation, dialog);
    if(activeIndex < 0) {
      return false
    }
  }
  if(currentActiveDialog) {
    this.deactivateCurrentDialog()
  }
  if(dialog == this._primaryWindow) {
    return false
  }
  this._activeDialog = dialog;
  var activationChain = this._activationChain;
  AdfCollections.removeArrayValue(activationChain, dialog);
  activationChain.push(dialog);
  dialog.showAsActive();
  return true
};
AdfDhtmlDialogManager.prototype.deactivateCurrentDialog = function() {
  if(!this._activeDialog) {
    return
  }
  this._activeDialog.showAsInActive();
  this._activeDialog = null
};
AdfDhtmlDialogManager.getInstance = function() {
  if(this._theInstance == null) {
    this._theInstance = new AdfDhtmlDialogManager
  }
  return this._theInstance
};
AdfDhtmlDialogManager.prototype.getActiveDialog = function() {
  return this._activeDialog
};

function AdfDhtmlPositionManager() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlPositionManager);
AdfDhtmlPositionManager.InitClass = function() {
  this.TOP = 0;
  this.MIDDLE = 1;
  this.BOTTOM = 2;
  this.LEFT = 3;
  this.CENTER = 4;
  this.RIGHT = 5;
  this.MIN_WIDTH = 32
};
AdfDhtmlPositionManager.prototype.Init = function() {
  AdfDhtmlPositionManager.superclass.Init.call(this);
  var logger = AdfLogger.LOGGER;
  if(logger.getLevel(AdfLogger.FINEST)) {
    this._logger = logger
  }
  this._elements = new Array;
  this._isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft()
};
AdfDhtmlPositionManager.prototype._registerEventHanders = function() {
  var agent = AdfAgent.AGENT;
  var domWindow = agent.getDomWindow(), domDocument = agent.getDomDocument();
  var resizeCallback = this._repostionOnScrollCallback;
  if(!resizeCallback) {
    resizeCallback = this._repostionOnScrollCallback = this.createCallback(this._repostionOnScroll)
  }
  var platform = agent.getPlatform();
  var isIE = platform == AdfAgent.IE_PLATFORM;
  if(agent.isInlineDialogRepositioningOnScroll()) {
    agent.addBubbleEventListener(domDocument, "mousewheel", resizeCallback);
    agent.addBubbleEventListener(domWindow, "scroll", resizeCallback);
    if(!isIE) {
      agent.addBubbleEventListener(domDocument, "DOMMouseScroll", resizeCallback)
    }
  }
  agent.addBubbleEventListener(domWindow, "resize", resizeCallback)
};
AdfDhtmlPositionManager.prototype._unregisterEventHanders = function() {
  var agent = AdfAgent.AGENT;
  var domWindow = agent.getDomWindow(), domDocument = agent.getDomDocument();
  var resizeCallback = this._repostionOnScrollCallback;
  if(!resizeCallback) {
    return
  }
  agent.removeBubbleEventListener(domDocument, "mousewheel", resizeCallback);
  agent.removeBubbleEventListener(domWindow, "scroll", resizeCallback);
  agent.removeBubbleEventListener(domDocument, "DOMMouseScroll", resizeCallback);
  agent.removeBubbleEventListener(domWindow, "resize", resizeCallback)
};
AdfDhtmlPositionManager.prototype.getElementCount = function() {
  var count = 0;
  var elements = this._elements;
  for(var element in elements) {
    if(element) {
      count++
    }
  }
  return count
};
AdfDhtmlPositionManager.prototype.dispose = function() {
  this._elements = null
};
AdfDhtmlPositionManager.prototype.addFloatingElement = function(floatingElement, alignmentHint, ignoreShadow) {
  if(!floatingElement.getAlignPosition()) {
    AdfAssert.assertDomElement(floatingElement.getAlignElement())
  }
  return this._addFloatingElement(floatingElement, alignmentHint, ignoreShadow)
};
AdfDhtmlPositionManager.prototype.addFloatingElementByPosition = function(floatingElement, pos, ignoreShadow) {
  floatingElement.setAlignPosition(pos);
  var alignmentHint = AdfRichPopup.ALIGN_AFTER_START;
  return this._addFloatingElement(floatingElement, alignmentHint, ignoreShadow)
};
AdfDhtmlPositionManager.prototype.calculatePlacementPosition = function(elementHeight, elementWidth, alignmentHint, alignElement, alignPosition, ignoreShadow) {
  var hintBehavior = this._getHintBehavior(alignmentHint, ignoreShadow);
  var preferredHorizontalBehavior = hintBehavior.horizontalBehavior;
  var preferredVerticalBehavior = hintBehavior.verticalBehavior;
  var ignoreShadow = hintBehavior.ignoreShadow;
  var box = {top:0, right:elementWidth, bottom:elementHeight, left:0, width:elementWidth, height:elementHeight};
  var alignBox = this._getAlignBox(alignElement, alignPosition, ignoreShadow);
  var horizontalBehavior = this._selectBehavior(preferredHorizontalBehavior, box, alignBox);
  var verticalBehavior = this._selectBehavior(preferredVerticalBehavior, box, alignBox);
  return this._getNewPosition(horizontalBehavior, verticalBehavior, box, alignBox)
};
AdfDhtmlPositionManager.prototype._addFloatingElement = function(floatingElement, alignmentHint, ignoreShadow) {
  AdfAssert.assertDomElement(floatingElement.getElement());
  if(this.getElementCount() < 1) {
    this._registerEventHanders()
  }
  var hintBehavior = this._getHintBehavior(alignmentHint, ignoreShadow);
  var index = this._addElement(floatingElement, hintBehavior.verticalBehavior, hintBehavior.horizontalBehavior, hintBehavior.ignoreShadow, hintBehavior.insideBorder);
  return index
};
AdfDhtmlPositionManager.prototype._getHintBehavior = function(alignmentHint, ignoreShadow) {
  var bottom = AdfDhtmlPositionManager.BOTTOM;
  var top = AdfDhtmlPositionManager.TOP;
  var middle = AdfDhtmlPositionManager.MIDDLE;
  var start = this._convertHorizontal("start");
  var end = this._convertHorizontal("end");
  var center = AdfDhtmlPositionManager.CENTER;
  if(ignoreShadow != true) {
    ignoreShadow = false
  }
  var insideBorder = false;
  var horizontal;
  var vertical;
  switch(alignmentHint) {
    case AdfRichPopup.ALIGN_AFTER_START:
      vertical = [bottom, top];
      horizontal = [start, start];
      break;
    case AdfRichPopup.ALIGN_AFTER_END:
      vertical = [bottom, top];
      horizontal = [end, end];
      break;
    case AdfRichPopup.ALIGN_AFTER_CENTER:
      vertical = [bottom, top, bottom, top];
      horizontal = [start, start, center, center];
      break;
    case AdfRichPopup.ALIGN_BEFORE_START:
      vertical = [top, bottom];
      horizontal = [start, start];
      break;
    case AdfRichPopup.ALIGN_BEFORE_END:
      vertical = [top, bottom];
      horizontal = [end, end];
      break;
    case AdfRichPopup.ALIGN_BEFORE_CENTER:
      vertical = [top, bottom, top, bottom];
      horizontal = [start, start, center, center];
      break;
    case AdfRichPopup.ALIGN_END_AFTER:
      vertical = [bottom, bottom];
      horizontal = [end, start];
      break;
    case AdfRichPopup.ALIGN_END_BEFORE:
      vertical = [top, top];
      horizontal = [end, start];
      break;
    case AdfRichPopup.ALIGN_END_CENTER:
      vertical = [top, top, middle, middle];
      horizontal = [end, start, end, start];
      break;
    case AdfRichPopup.ALIGN_START_AFTER:
      vertical = [bottom, bottom];
      horizontal = [start, end];
      break;
    case AdfRichPopup.ALIGN_START_BEFORE:
      vertical = [top, top];
      horizontal = [start, end];
      break;
    case AdfRichPopup.ALIGN_START_CENTER:
      vertical = [top, top, middle, middle];
      horizontal = [start, end, start, end];
      break;
    case AdfRichPopup.ALIGN_OVERLAP:
      vertical = [top, top];
      horizontal = [start, start];
      break;
    case AdfRichPopup.ALIGN_OVERLAP_END_BEFORE:
      insideBorder = true;
      vertical = [top, top];
      horizontal = [end, end];
      break;
    case AdfRichPopup.ALIGN_OVERLAP_START_BEFORE:
      insideBorder = true;
      vertical = [top, top];
      horizontal = [start, start];
      break;
    case AdfRichPopup.ALIGN_BEFORE_AFTER:
      vertical = [top, bottom, top, bottom];
      horizontal = [end, end, end, start];
      ignoreShadow = true;
      break;
    default:
      AdfAssert.assert(false, "Invalid alignmentHint provided");
      break
  }
  return{horizontalBehavior:this._getBehavior(horizontal), verticalBehavior:this._getBehavior(vertical), ignoreShadow:ignoreShadow, insideBorder:insideBorder}
};
AdfDhtmlPositionManager.prototype._inversePosition = function(position) {
  switch(position) {
    case AdfDhtmlPositionManager.TOP:
      return AdfDhtmlPositionManager.BOTTOM;
    case AdfDhtmlPositionManager.BOTTOM:
      return AdfDhtmlPositionManager.TOP;
    case AdfDhtmlPositionManager.MIDDLE:
      return AdfDhtmlPositionManager.MIDDLE;
    case AdfDhtmlPositionManager.LEFT:
      return AdfDhtmlPositionManager.RIGHT;
    case AdfDhtmlPositionManager.RIGHT:
      return AdfDhtmlPositionManager.LEFT;
    case AdfDhtmlPositionManager.CENTER:
      return AdfDhtmlPositionManager.CENTER
  }
};
AdfDhtmlPositionManager.prototype._positionToString = function(position) {
  switch(position) {
    case AdfDhtmlPositionManager.TOP:
      return"Top";
    case AdfDhtmlPositionManager.BOTTOM:
      return"Bottom";
    case AdfDhtmlPositionManager.MIDDLE:
      return"Middle";
    case AdfDhtmlPositionManager.LEFT:
      return"Left";
    case AdfDhtmlPositionManager.RIGHT:
      return"Right";
    case AdfDhtmlPositionManager.CENTER:
      return"Center"
  }
};
AdfDhtmlPositionManager.prototype._getBehavior = function(preference) {
  var behaviors = new Array;
  for(var i = 0;i < preference.length;i = i + 2) {
    var conditionName1 = "_prefer" + this._positionToString(preference[i]) + this._positionToString(preference[i + 1]) + "Condition";
    var condition1 = this[conditionName1];
    var conditionName2 = "_prefer" + this._positionToString(this._inversePosition(preference[i])) + this._positionToString(this._inversePosition(preference[i + 1])) + "Condition";
    var condition2 = this[conditionName2];
    behaviors.splice(0, 0, {alignElementAnchor:preference[i], floatingElementAnchor:preference[i + 1], condition:condition2}, {alignElementAnchor:this._inversePosition(preference[i]), floatingElementAnchor:this._inversePosition(preference[i + 1]), condition:condition1})
  }
  return behaviors
};
AdfDhtmlPositionManager.prototype._getBox = function(floatingElement, ignoreShadow) {
  var agent = AdfAgent.AGENT;
  var el = floatingElement.getElement();
  var width = el.offsetWidth;
  var height = el.offsetHeight;
  var pos = agent.getElementPosition(el);
  var top = pos.y;
  var left = pos.x;
  if(width == 0) {
    var firstChild = el.firstChild;
    if(firstChild) {
      width = firstChild.offsetWidth;
      height = firstChild.offsetHeight
    }
  }
  if(!ignoreShadow) {
    var shadowTolerance = AdfDhtmlShadowDecorator.getShadowSize();
    height += shadowTolerance;
    if(!this._isRTL) {
      width += shadowTolerance
    }
  }
  var tailWidth = 0;
  var tailHeight = 0;
  if(floatingElement.getTailElement && floatingElement.getTailElement()) {
    var tailElement = floatingElement.getTailElement();
    tailWidth = tailElement.offsetWidth;
    tailHeight = tailElement.offsetHeight
  }
  var box = {top:top, right:left + width, bottom:top + height, left:left, width:width, height:height, tailWidth:tailWidth, tailHeight:tailHeight};
  box["inversePosition"] = floatingElement.shouldInvertPosition();
  return box
};
AdfDhtmlPositionManager.prototype._getAlignBox = function(alignElement, alignPosition, ignoreShadow, insideBorder) {
  var agent = AdfAgent.AGENT;
  var shadowTolerance = AdfDhtmlShadowDecorator.getShadowSize();
  var top, left, bottom, right, width, height;
  if(alignElement) {
    var pos = agent.getElementPosition(alignElement);
    if(insideBorder) {
      top = pos.y + alignElement.clientTop;
      left = pos.x + alignElement.clientLeft;
      width = alignElement.clientWidth;
      height = alignElement.clientHeight
    }else {
      top = pos.y;
      left = pos.x;
      width = alignElement.offsetWidth;
      height = alignElement.offsetHeight
    }
    bottom = top + height;
    right = left + width;
    if(!ignoreShadow && this._isRTL) {
      left += shadowTolerance
    }
  }else {
    width = 0;
    height = 0;
    if(alignPosition == null) {
      bottom = top = 0;
      right = left = 0
    }else {
      bottom = top = alignPosition.y;
      right = left = alignPosition.x
    }
  }
  var box = {top:top, bottom:bottom, left:left, right:right, width:width, height:height};
  return box
};
AdfDhtmlPositionManager.prototype._preferTopTopCondition = function(box, alignBox, inverse) {
  var agent = AdfAgent.AGENT;
  var windowHeight = agent.getWindowHeight();
  var scrollTop = agent.getBrowserViewportScrollTop();
  var isValid;
  var belowViewPort = alignBox.top + box.height > windowHeight + scrollTop;
  var aboveViewPort = alignBox.bottom - box.height < scrollTop;
  var withinViewPort = !belowViewPort && !aboveViewPort;
  if(inverse) {
    isValid = !belowViewPort && aboveViewPort || withinViewPort
  }else {
    isValid = belowViewPort && !aboveViewPort || withinViewPort
  }
  var logger = this._logger;
  if(logger) {
    logger.logMessage(AdfLogger.FINEST, (inverse ? "_preferBottomBottomCondition" : "_preferTopTopCondition") + " belowViewPort=" + belowViewPort + " aboveViewPort=" + aboveViewPort + " withinViewPort=" + withinViewPort + " return=" + isValid + " usedBy=" + (inverse ? "end_before, start_before, overlap" : "end_after, start_after"))
  }
  return isValid
};
AdfDhtmlPositionManager.prototype._preferMiddleMiddleCondition = function(box, alignBox) {
  var agent = AdfAgent.AGENT;
  var windowHeight = agent.getWindowHeight();
  var scrollTop = agent.getBrowserViewportScrollTop();
  var isValid;
  var belowViewPort = alignBox.top + alignBox.height / 2 + box.height / 2 > windowHeight + scrollTop;
  var aboveViewPort = alignBox.bottom - alignBox.height / 2 - box.height / 2 < scrollTop;
  var withinViewPort = !belowViewPort && !aboveViewPort;
  isValid = withinViewPort;
  var logger = this._logger;
  if(logger) {
    logger.logMessage(AdfLogger.FINEST, "_preferMiddleMiddleCondition" + " belowViewPort=" + belowViewPort + " aboveViewPort=" + aboveViewPort + " withinViewPort=" + withinViewPort + " return=" + isValid + " usedBy=" + "end_center, start_center")
  }
  return isValid
};
AdfDhtmlPositionManager.prototype._preferCenterCenterCondition = function(box, alignBox) {
  var agent = AdfAgent.AGENT;
  var windowWidth = agent.getWindowWidth();
  var isValid;
  var scrollLeft = agent.getBrowserViewportScrollLeft();
  var rightOfViewPort = alignBox.left + alignBox.width / 2 + box.width / 2 > windowWidth + scrollLeft;
  var leftOfViewPort = alignBox.right - alignBox.width / 2 - box.width / 2 < scrollLeft;
  var withinViewPort = !rightOfViewPort && !leftOfViewPort;
  isValid = withinViewPort;
  var logger = this._logger;
  if(logger) {
    logger.logMessage(AdfLogger.FINEST, "_preferCenterCenterCondition" + " rightOfViewPort=" + rightOfViewPort + " leftOfViewPort=" + leftOfViewPort + " withinViewPort=" + withinViewPort + " return=" + isValid + " usedBy=" + "after_center, before_center")
  }
  return isValid
};
AdfDhtmlPositionManager.prototype._preferBottomBottomCondition = function(box, alignBox) {
  return this._preferTopTopCondition(box, alignBox, true)
};
AdfDhtmlPositionManager.prototype._preferBottomTopCondition = function(box, alignBox, inverse) {
  var agent = AdfAgent.AGENT;
  var windowHeight = agent.getWindowHeight();
  var scrollTop = agent.getBrowserViewportScrollTop();
  var isValid;
  var aboveViewPort = alignBox.top - box.height < scrollTop;
  var belowViewPort = alignBox.bottom + box.height > windowHeight + scrollTop;
  var withinViewPort = !aboveViewPort && !belowViewPort;
  if(inverse) {
    isValid = !belowViewPort && aboveViewPort || withinViewPort
  }else {
    isValid = belowViewPort && !aboveViewPort || withinViewPort
  }
  var logger = this._logger;
  if(logger) {
    logger.logMessage(AdfLogger.FINEST, (inverse ? "_preferTopBottomCondition" : "_preferBottomTopCondition") + " aboveViewPort=" + aboveViewPort + " belowViewPort=" + belowViewPort + " withinViewPort=" + withinViewPort + " return=" + isValid + " usedBy=" + (inverse ? "after_start, after_end" : "before_start, before_end, before_after"))
  }
  return isValid
};
AdfDhtmlPositionManager.prototype._preferTopBottomCondition = function(box, alignBox) {
  return this._preferBottomTopCondition(box, alignBox, true)
};
AdfDhtmlPositionManager.prototype._preferLeftLeftCondition = function(box, alignBox, inverse) {
  var agent = AdfAgent.AGENT;
  var windowWidth = agent.getWindowWidth();
  var isValid;
  var scrollLeft = agent.getBrowserViewportScrollLeft();
  var rightOfViewPort = alignBox.left + box.width + box.tailWidth > windowWidth + scrollLeft;
  var leftOfViewPort = alignBox.right - box.width + box.tailWidth < scrollLeft;
  var withinViewPort = !rightOfViewPort && !leftOfViewPort;
  if(inverse) {
    isValid = !rightOfViewPort && leftOfViewPort || withinViewPort
  }else {
    isValid = rightOfViewPort && !leftOfViewPort || withinViewPort
  }
  var logger = this._logger;
  if(logger) {
    logger.logMessage(AdfLogger.FINEST, (inverse ? "_preferRightRightCondition" : "_preferLeftLeftCondition") + " rightOfViewPort=" + rightOfViewPort + " leftOfViewPort=" + leftOfViewPort + " withinViewPort=" + withinViewPort + " return=" + isValid + " usedBy=" + (inverse ? "after_start, before_start, overlap" : "after_end, before_end, before_after"))
  }
  return isValid
};
AdfDhtmlPositionManager.prototype._preferRightRightCondition = function(box, alignBox) {
  return this._preferLeftLeftCondition(box, alignBox, true)
};
AdfDhtmlPositionManager.prototype._preferRightLeftCondition = function(box, alignBox, inverse) {
  var agent = AdfAgent.AGENT;
  var windowWidth = agent.getWindowWidth();
  var isValid;
  var scrollLeft = agent.getBrowserViewportScrollLeft();
  var leftOfViewPort = alignBox.left - box.width + box.tailWidth < scrollLeft;
  var rightOfViewPort = alignBox.right + box.width + box.tailWidth >= windowWidth + scrollLeft;
  var withinViewPort = !leftOfViewPort && !rightOfViewPort;
  if(inverse) {
    isValid = !rightOfViewPort && leftOfViewPort || withinViewPort
  }else {
    isValid = rightOfViewPort && !leftOfViewPort || withinViewPort
  }
  var logger = this._logger;
  if(logger) {
    logger.logMessage(AdfLogger.FINEST, (inverse ? "_preferLeftRightCondition" : "_preferRightLeftCondition") + " leftOfViewPort=" + leftOfViewPort + " rightOfViewPort=" + rightOfViewPort + " withinViewPort=" + withinViewPort + " return=" + isValid + " usedBy=" + (inverse ? "end_before, before_after" : "start_after, start_before"))
  }
  return isValid
};
AdfDhtmlPositionManager.prototype._preferLeftRightCondition = function(box, alignBox) {
  return this._preferRightLeftCondition(box, alignBox, true)
};
AdfDhtmlPositionManager.prototype._convertHorizontal = function(horizontalHint) {
  if(horizontalHint == "start" && this._isRTL || horizontalHint == "end" && !this._isRTL) {
    return AdfDhtmlPositionManager.RIGHT
  }else {
    return AdfDhtmlPositionManager.LEFT
  }
};
AdfDhtmlPositionManager.prototype._addElement = function(floatingElement, verticalBehaviors, horizontalBehaviors, ignoreShadow, insideBorder) {
  var alignElement = floatingElement.getAlignElement();
  var alignElementIsManaged = alignElement ? this.managesElement(alignElement) : false;
  var wrapper = {element:floatingElement, verticalBehaviors:verticalBehaviors, horizontalBehaviors:horizontalBehaviors, alignElementIsManaged:alignElementIsManaged, ignoreShadow:ignoreShadow, insideBorder:insideBorder};
  this._elements.push(wrapper);
  return this._elements.length - 1
};
AdfDhtmlPositionManager.prototype.removeElement = function(index) {
  delete this._elements[index];
  if(this.getElementCount() < 1) {
    this._unregisterEventHanders()
  }
};
AdfDhtmlPositionManager.prototype.managesElement = function(element) {
  return AdfPage.PAGE.getZOrderManager().containsElement(element)
};
AdfDhtmlPositionManager.prototype.validatePosition = function(index) {
  var page = AdfPage.PAGE;
  var dndContext = page.getDnDContext();
  if(dndContext && dndContext.isDragging()) {
    return
  }
  var wrapper = this._elements[index];
  if(wrapper != null) {
    var floatingElement = wrapper.element;
    var alignElement = floatingElement.getAlignElement();
    var alignPosition = floatingElement.getAlignPosition();
    var ignoreShadow = wrapper.ignoreShadow;
    var insideBorder = wrapper.insideBorder;
    var agent = AdfAgent.AGENT, isIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
    var box = this._getBox(floatingElement, ignoreShadow);
    var alignBox = this._getAlignBox(alignElement, alignPosition, ignoreShadow, insideBorder);
    var verticalBehavior = this._selectBehavior(wrapper.verticalBehaviors, box, alignBox);
    var horizontalBehavior = this._selectBehavior(wrapper.horizontalBehaviors, box, alignBox);
    wrapper._computedBehavior = new Object;
    wrapper._computedBehavior.verticalBehavior = verticalBehavior;
    wrapper._computedBehavior.horizontalBehavior = horizontalBehavior;
    this._positionElement(floatingElement, wrapper._computedBehavior, wrapper.alignElementIsManaged, box, alignBox)
  }
};
AdfDhtmlPositionManager.prototype._selectBehavior = function(behaviors, box, alignBox) {
  if(!box["inversePosition"]) {
    return behaviors[0]
  }
  var behavior;
  for(var i = 0;!behavior && i < behaviors.length;i++) {
    if(behaviors[i].condition.call(this, box, alignBox)) {
      behavior = behaviors[i]
    }
  }
  if(!behavior) {
    behavior = behaviors[0]
  }
  return behavior
};
AdfDhtmlPositionManager.prototype.getComputedBehavior = function(index) {
  return this._elements[index]._computedBehavior
};
AdfDhtmlPositionManager.prototype._positionElement = function(floatingElement, computedBehavior, alignElementIsManaged, box, alignBox) {
  var horizontalBehavior = computedBehavior.horizontalBehavior;
  var verticalBehavior = computedBehavior.verticalBehavior;
  var newPosition = this._getNewPosition(horizontalBehavior, verticalBehavior, box, alignBox);
  floatingElement.setPosition(newPosition.y, newPosition.x)
};
AdfDhtmlPositionManager.prototype._getNewPosition = function(horizontalBehavior, verticalBehavior, box, alignBox) {
  var alignElementAnchorTop;
  var alignElementAnchorLeft;
  switch(verticalBehavior.alignElementAnchor) {
    case AdfDhtmlPositionManager.TOP:
      alignElementAnchorTop = alignBox.top;
      break;
    case AdfDhtmlPositionManager.BOTTOM:
      alignElementAnchorTop = alignBox.bottom;
      break;
    case AdfDhtmlPositionManager.MIDDLE:
      alignElementAnchorTop = alignBox.top + alignBox.height / 2;
      break;
    default:
      AdfAssert.assert(false, "Invalid alignElementAnchor for verticalBehavior provided");
      break
  }
  switch(horizontalBehavior.alignElementAnchor) {
    case AdfDhtmlPositionManager.LEFT:
      alignElementAnchorLeft = alignBox.left;
      break;
    case AdfDhtmlPositionManager.RIGHT:
      alignElementAnchorLeft = alignBox.right;
      break;
    case AdfDhtmlPositionManager.CENTER:
      alignElementAnchorLeft = alignBox.left + alignBox.width / 2;
      break;
    default:
      AdfAssert.assert(false, "Invalid alignElementAnchor for horizontalBehavior provided");
      break
  }
  var newTop;
  var newLeft;
  switch(verticalBehavior.floatingElementAnchor) {
    case AdfDhtmlPositionManager.TOP:
      newTop = alignElementAnchorTop;
      break;
    case AdfDhtmlPositionManager.BOTTOM:
      newTop = alignElementAnchorTop - box.height;
      break;
    case AdfDhtmlPositionManager.MIDDLE:
      newTop = alignElementAnchorTop - box.height / 2;
      break;
    default:
      AdfAssert.assert(false, "Invalid floatingElementAnchor for verticalBehavior provided");
      break
  }
  switch(horizontalBehavior.floatingElementAnchor) {
    case AdfDhtmlPositionManager.LEFT:
      newLeft = alignElementAnchorLeft;
      break;
    case AdfDhtmlPositionManager.RIGHT:
      newLeft = alignElementAnchorLeft - box.width;
      break;
    case AdfDhtmlPositionManager.CENTER:
      newLeft = alignElementAnchorLeft - box.width / 2;
      break;
    default:
      AdfAssert.assert(false, "Invalid floatingElementAnchor for horizontalBehavior provided");
      break
  }
  if(AdfPage.PAGE.isPortlet()) {
    var agent = AdfAgent.AGENT;
    var scrollTop = agent.getBrowserViewportScrollTop();
    var scrollLeft = agent.getBrowserViewportScrollLeft();
    var windowWidth = agent.getWindowWidth();
    var windowHeight = agent.getWindowHeight();
    newTop = Math.max(0, newTop);
    var ydelta = windowHeight + scrollTop - (newTop + box.height);
    if(ydelta < 0) {
      newTop = Math.max(scrollTop, newTop + ydelta)
    }
    newLeft = Math.max(0, newLeft);
    var xdelta = windowWidth + scrollLeft - (newLeft + box.width);
    if(xdelta < 0) {
      newLeft = Math.max(scrollLeft, newLeft + xdelta)
    }
  }
  return{x:newLeft, y:newTop}
};
AdfDhtmlPositionManager.prototype._repostionOnScroll = function(evt) {
  var agent = AdfAgent.AGENT;
  var domWindow = agent.getDomWindow();
  if(this._repostionCallback == null) {
    this._repostionCallback = this.createCallback(this._repostionOnScrollTimeout)
  }
  if(this._repostionTimeout) {
    domWindow.clearTimeout(this._repostionTimeout)
  }
  this._repostionTimeout = domWindow.setTimeout(this._repostionCallback, 200)
};
AdfDhtmlPositionManager.prototype._repostionOnScrollTimeout = function() {
  delete this._repostionTimeout;
  var elements = this._elements, elementCount = elements.length;
  for(var i = elementCount - 1;i > -1;i--) {
    var element = elements[i];
    if(element != null) {
      var floatingElement = elements[i].element, alignElement = floatingElement.getAlignElement();
      if(floatingElement.isAnimating()) {
        continue
      }
      if(alignElement) {
        if(this._isOutsideScrollView(alignElement)) {
          if(floatingElement.ShouldHideOnClip()) {
            floatingElement.cancel()
          }
        }else {
          this.validatePosition(i)
        }
      }else {
        var alignPosition = floatingElement.getAlignPosition();
        if(alignPosition && !this._isFloatingElementGreaterThanWindow(floatingElement)) {
          this.validatePosition(i)
        }
      }
    }
  }
};
AdfDhtmlPositionManager.prototype._isFloatingElementGreaterThanWindow = function(floatingElement) {
  var agent = AdfAgent.AGENT;
  var elementWidth = floatingElement.getWidth();
  var elementHeight = floatingElement.getHeight();
  var windowWidth = agent.getWindowWidth();
  var windowHeight = agent.getWindowHeight();
  return elementWidth > windowWidth || elementHeight > windowHeight
};
AdfDhtmlPositionManager.prototype._isOutsideScrollView = function(element) {
  var agent = AdfAgent.AGENT;
  var alignBox = agent.getElementPageBounds(element);
  var windowWidth = agent.getWindowWidth();
  var scrollLeft = agent.getBrowserViewportScrollLeft();
  var windowHeight = agent.getWindowHeight();
  var scrollTop = agent.getBrowserViewportScrollTop();
  var windowBox = {"top":scrollTop, "bottom":windowHeight + scrollTop, "left":scrollLeft, "right":scrollLeft + windowWidth};
  var isWithinViewPort = AdfDhtmlPositionManager._isWithinViewport(alignBox, windowBox);
  var parentNode = element.parentNode;
  while(isWithinViewPort && parentNode && !AdfDhtmlPositionManager._isRootNode(parentNode)) {
    if(parentNode.nodeType == 1) {
      var parentBox = agent.getElementPageBounds(parentNode);
      isWithinViewPort = AdfDhtmlPositionManager._isWithinViewport(alignBox, parentBox)
    }
    parentNode = parentNode.parentNode
  }
  return!isWithinViewPort
};
AdfDhtmlPositionManager._isRootNode = function(element) {
  var tagName = AdfAgent.AGENT.getNodeName(element);
  if(tagName == "FORM" || tagName == "BODY") {
    return true
  }
  var id = element.getAttribute("id");
  if(id) {
    var tokens = id.split(":");
    var tokensLen = tokens.length;
    if(tokensLen > 0) {
      var containerName = tokens[tokensLen - 1];
      return AdfDhtmlZOrderManager.FLOATINGTYPE_WINDOW == containerName
    }
  }
  return false
};
AdfDhtmlPositionManager._isWithinViewport = function(alignBox, containerBox) {
  if(alignBox["top"] - containerBox["top"] < -2) {
    return false
  }
  if(containerBox["bottom"] - alignBox["bottom"] < -2) {
    return false
  }
  if(alignBox["left"] - containerBox["left"] < -2) {
    return false
  }
  if(alignBox["right"] - containerBox["right"] > 2) {
    return false
  }
  return true
};
AdfDhtmlPositionManager.prototype.resizeFloatingElement = function(childDomElement) {
  var floatingElement = this.findFloatingElement(childDomElement);
  if(floatingElement && !(floatingElement instanceof AdfDhtmlTooltip)) {
    var domElement = floatingElement.getElement();
    if(AdfDomUtils.isAncestorOrSelf(domElement, childDomElement)) {
      floatingElement.autoSize();
      return true
    }
  }
  return false
};
AdfDhtmlPositionManager.prototype.findFloatingElement = function(childDomElement) {
  var elements = this._elements;
  for(var i = 0;i < elements.length;i++) {
    if(!(i in elements)) {
      continue
    }
    var wrapper = elements[i];
    if(wrapper) {
      var floatingElement = wrapper.element;
      if(floatingElement) {
        var domElement = floatingElement.getElement();
        if(AdfDomUtils.isAncestorOrSelf(domElement, childDomElement)) {
          return floatingElement
        }
      }
    }
  }
  return null
};

function AdfDhtmlPopupWindowFactory() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlPopupWindowFactory);
AdfDhtmlPopupWindowFactory.createPopup = function(hints) {
  AdfAssert.assert(hints, "Cannot create a new popup element without hints");
  var popupWindow;
  if(hints[AdfDhtmlPopupWindow.HINT_TYPE] == AdfDhtmlPopupWindow.HINT_TYPE_MENU) {
    popupWindow = new AdfDhtmlPopupMenu
  }else {
    if(hints[AdfDhtmlPopupWindow.HINT_TYPE] == AdfDhtmlPopupWindow.HINT_TYPE_NOTEWINDOW) {
      popupWindow = new AdfDhtmlNoteWindowPopupSelector(hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS])
    }else {
      if(hints[AdfDhtmlPopupWindow.HINT_TYPE] == AdfDhtmlPopupWindow.HINT_TYPE_DIALOG) {
        popupWindow = new AdfDhtmlSimpleFloat
      }else {
        if(hints[AdfDhtmlPopupWindow.HINT_TYPE] == AdfDhtmlPopupWindow.HINT_TYPE_INLINESELECTOR) {
          popupWindow = new AdfDhtmlPopupSelector
        }else {
          if(hints[AdfDhtmlPopupWindow.HINT_TYPE] == AdfDhtmlPopupWindow.HINT_TYPE_LOVCOMBOBOX) {
            popupWindow = new AdfInputComboboxListOfValuesWindow
          }else {
            if(hints[AdfDhtmlPopupWindow.HINT_TYPE] == AdfDhtmlPopupWindow.HINT_TYPE_LAYER) {
              popupWindow = new AdfDhtmlPopupLayer
            }else {
              if(hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS]) {
                popupWindow = new AdfDhtmlPopupSelector
              }else {
                popupWindow = new AdfDhtmlSimpleFloat
              }
            }
          }
        }
      }
    }
  }
  if(hints[AdfDhtmlPopupWindow.HINT_UNSCOPED] !== AdfDhtmlPopupWindow.HINT_UNSCOPED_ALWAYS) {
    AdfPopupScopingUtils.markAsScopingContainer(popupWindow.getElement())
  }
  return popupWindow
};

function AdfDhtmlPopupWindow() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlPopupWindow, AdfAbstractFloatingElement);
AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT = "alignElement";
AdfDhtmlPopupWindow.HINT_MOUSEPOSITION = "mousePosition";
AdfDhtmlPopupWindow.HINT_POSITION_CENTER = "screenCenterPosition";
AdfDhtmlPopupWindow.HINT_TYPE = "type";
AdfDhtmlPopupWindow.HINT_TYPE_MENU = "menu";
AdfDhtmlPopupWindow.HINT_TYPE_NOTEWINDOW = "noteWindow";
AdfDhtmlPopupWindow.HINT_TYPE_DIALOG = "dialogWindow";
AdfDhtmlPopupWindow.HINT_TYPE_INLINESELECTOR = "inlineSelector";
AdfDhtmlPopupWindow.HINT_TYPE_LOVCOMBOBOX = "lovCombobox";
AdfDhtmlPopupWindow.HINT_TYPE_LAYER = "layer";
AdfDhtmlPopupWindow.HINT_TITLE = "title";
AdfDhtmlPopupWindow.HINT_FOCUS = "focus";
AdfDhtmlPopupWindow.COMPONENT_EVENTS_ENABLED = "componentEventsEnabled", AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT = "autodismissPopupTimeout";
AdfDhtmlPopupWindow.HINT_AUTODISMISS = "autodismiss";
AdfDhtmlPopupWindow.HINT_AUTODISMISS_NEVER = "autodismissNever";
AdfDhtmlPopupWindow.HINT_AUTODISMISS_ALWAYS = "autodismissAlways";
AdfDhtmlPopupWindow.HINT_AUTODISMISS_TIMEOUT = "autodismissTimeout";
AdfDhtmlPopupWindow.HINT_LAUNCH_SOURCE_ID = "launchId";
AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU = "autodismissMenu";
AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT = "autodismissMouseOut";
AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT_ID = "autodismissMouseOut";
AdfDhtmlPopupWindow.HINT_AUTODISMISS_INACTIVATE = "autodismissInactivate";
AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE = "closeOnEscape";
AdfDhtmlPopupWindow.HINT_MAX_WIDTH = "maxWidth";
AdfDhtmlPopupWindow.HINT_OPENED_HANDLER = "openedHandler";
AdfDhtmlPopupWindow.HINT_OPENED_HANDLER_PARAM = "openedHandlerParam";
AdfDhtmlPopupWindow.HINT_ALIGN = "align";
AdfDhtmlPopupWindow.HINT_MODAL = "modal";
AdfDhtmlPopupWindow.HINT_CONTENT = "content";
AdfDhtmlPopupWindow.HINT_DRAG_ELEMENT = "dragElement";
AdfDhtmlPopupWindow.HINT_LEFT_POSITION = "leftPosition";
AdfDhtmlPopupWindow.HINT_TOP_POSITION = "topPosition";
AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER = "closeHandler";
AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER_PARAM = "closeHandlerParam";
AdfDhtmlPopupWindow.HINT_DETACH_DRAG_START_HANDLER = "detachDragStartHandler";
AdfDhtmlPopupWindow.HINT_DETACH_DRAG_END_HANDLER = "detachDragEndHandler";
AdfDhtmlPopupWindow.HINT_COMPONENT_CLIENT_ID = "componentId";
AdfDhtmlPopupWindow.HINT_ANIMATE = "animate";
AdfDhtmlPopupWindow.HINT_RESTORE_IMMEDIATE = "restoreImmediate";
AdfDhtmlPopupWindow.ARIA_LABEL = "ariaLabel";
AdfDhtmlPopupWindow.HINT_UNSCOPED = "unscoped";
AdfDhtmlPopupWindow.HINT_UNSCOPED_ALWAYS = "always";
AdfDhtmlPopupWindow.__CANCELED_EXPANDO = "_isCanceled";
AdfDhtmlPopupWindow.__REPLACEDOM_EXPANDO = "_isReplaceDom";
AdfDhtmlPopupWindow.__POPUPID_EXPANDO = "data-afr-popupid";
AdfDhtmlPopupWindow.__POPUP_CONTAINER_ID = "popup-container";
AdfDhtmlPopupWindow.__POPUP_TITLE_ID = "title";
AdfDhtmlPopupWindow._SLIDE_UP = "up";
AdfDhtmlPopupWindow._SLIDE_DOWN = "down";
AdfDhtmlPopupWindow._SLIDE_LEFT = "left";
AdfDhtmlPopupWindow._SLIDE_RIGHT = "right";
AdfDhtmlPopupWindow.InitClass = function() {
  this._SCROLL_POSITION = "_afrSclPtn";
  this._ANIMATE_WRAPPER_EXPANDO = "data-afr-taw";
  this._POPUP_TAIL_TOP_LEFT_STYLECLASS = "AFPopupTailTopLeft";
  this._POPUP_TAIL_TOP_RIGHT_STYLECLASS = "AFPopupTailTopRight";
  this._POPUP_TAIL_TOP_CENTER_STYLECLASS = "AFPopupTailTopCenter";
  this._POPUP_TAIL_BOTTOM_LEFT_STYLECLASS = "AFPopupTailBottomLeft";
  this._POPUP_TAIL_BOTTOM_RIGHT_STYLECLASS = "AFPopupTailBottomRight";
  this._POPUP_TAIL_BOTTOM_CENTER_STYLECLASS = "AFPopupTailBottomCenter";
  this._POPUP_TAIL_MIDDLE_LEFT_STYLECLASS = "AFPopupTailMiddleLeft";
  this._POPUP_TAIL_MIDDLE_RIGHT_STYLECLASS = "AFPopupTailMiddleRight";
  this._POPUP_TAIL_STYLECLASS = "AFPopupTail";
  this._POPUP_TAIL_SIMPLE_STYLECLASS = "AFPopupTailSimple"
};
AdfDhtmlPopupWindow.prototype.Init = function() {
  AdfDhtmlPopupWindow.superclass.Init.call(this, AdfDhtmlZOrderManager.FLOATINGTYPE_WINDOW);
  var rootElement = this.CreateDomElement();
  this.setElement(rootElement);
  rootElement.style.display = "none"
};
AdfDhtmlPopupWindow.prototype.CreateDomElement = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfDhtmlPopupWindow.prototype.ShouldHideOnClip = function() {
  return!AdfAgent.AGENT.isTouchFirstDevice()
};
AdfDhtmlPopupWindow.prototype.getInitialPopupTailPosition = function(alignHint) {
  if(!alignHint) {
    return
  }
  var popupTailPosition;
  switch(alignHint) {
    case AdfRichPopup.ALIGN_AFTER_START:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_TOP_LEFT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_AFTER_END:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_TOP_RIGHT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_AFTER_CENTER:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_TOP_CENTER_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_BEFORE_START:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_BOTTOM_LEFT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_BEFORE_END:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_BOTTOM_RIGHT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_BEFORE_CENTER:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_BOTTOM_CENTER_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_END_AFTER:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_BOTTOM_LEFT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_END_BEFORE:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_TOP_LEFT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_END_CENTER:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_MIDDLE_LEFT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_START_AFTER:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_BOTTOM_RIGHT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_START_BEFORE:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_TOP_RIGHT_STYLECLASS;
      break;
    case AdfRichPopup.ALIGN_START_CENTER:
      popupTailPosition = AdfDhtmlPopupWindow._POPUP_TAIL_MIDDLE_RIGHT_STYLECLASS;
      break;
    default:
      popupTailPosition = ""
  }
  return popupTailPosition
};
AdfDhtmlPopupWindow.prototype._adjustPopupPosition = function(top, left, tailPosition) {
  if(!this._tailElement) {
    return{"left":left, "top":top}
  }
  var tailWidth = this._tailElement.offsetWidth;
  var tailHeight = this._tailElement.offsetHeight;
  switch(tailPosition) {
    case AdfDhtmlPopupWindow._POPUP_TAIL_TOP_LEFT_STYLECLASS:
    ;
    case AdfDhtmlPopupWindow._POPUP_TAIL_BOTTOM_LEFT_STYLECLASS:
      left += tailWidth;
      break;
    case AdfDhtmlPopupWindow._POPUP_TAIL_MIDDLE_LEFT_STYLECLASS:
      left += tailWidth;
      var rootHeight = this.getElement().offsetHeight;
      var topPercent = Math.round((rootHeight / 2 - tailHeight / 2) / rootHeight * 100);
      this._tailElement.style.top = topPercent + "%";
      break;
    case AdfDhtmlPopupWindow._POPUP_TAIL_TOP_RIGHT_STYLECLASS:
    ;
    case AdfDhtmlPopupWindow._POPUP_TAIL_BOTTOM_RIGHT_STYLECLASS:
      left -= tailWidth;
      break;
    case AdfDhtmlPopupWindow._POPUP_TAIL_MIDDLE_RIGHT_STYLECLASS:
      left -= tailWidth;
      var rootHeight = this.getElement().offsetHeight;
      var topPercent = Math.round((rootHeight / 2 - tailHeight / 2) / rootHeight * 100);
      this._tailElement.style.top = topPercent + "%";
      break;
    case AdfDhtmlPopupWindow._POPUP_TAIL_TOP_CENTER_STYLECLASS:
      top += tailHeight;
      var rootWidth = this.getElement().offsetWidth;
      var leftPercent = Math.round((rootWidth / 2 - tailWidth / 2) / rootWidth * 100);
      this._tailElement.style.left = leftPercent + "%";
      break;
    case AdfDhtmlPopupWindow._POPUP_TAIL_BOTTOM_CENTER_STYLECLASS:
      top -= tailHeight;
      var rootWidth = this.getElement().offsetWidth;
      var leftPercent = Math.round((rootWidth / 2 - tailWidth / 2) / rootWidth * 100);
      this._tailElement.style.left = leftPercent + "%";
      break;
    default:
      top = top;
      left = left
  }
  return{"left":left, "top":top}
};
AdfDhtmlPopupWindow.prototype.setPosition = function(top, left) {
  var positionManagerIndex = this.GetPositionManagerIndex();
  if(positionManagerIndex >= 0 && this._tailElement) {
    var behavior = AdfPage.PAGE.getPositionManager().getComputedBehavior(positionManagerIndex);
    if(behavior) {
      var verticalBehavior = behavior.verticalBehavior;
      var horizontalBehavior = behavior.horizontalBehavior;
      var styleClass = "AFPopupTail";
      switch(verticalBehavior.floatingElementAnchor) {
        case AdfDhtmlPositionManager.TOP:
          styleClass += "Top";
          break;
        case AdfDhtmlPositionManager.BOTTOM:
          styleClass += "Bottom";
          break;
        case AdfDhtmlPositionManager.MIDDLE:
          styleClass += "Middle";
          break;
        default:
          AdfAssert.assert(false, "Invalid floatingElementAnchor for verticalBehavior provided.");
          AdfLogger.LOGGER.warning("Invalid floatingElementAnchor for verticalBehavior provided.");
          break
      }
      switch(horizontalBehavior.floatingElementAnchor) {
        case AdfDhtmlPositionManager.LEFT:
          styleClass += "Left";
          break;
        case AdfDhtmlPositionManager.RIGHT:
          styleClass += "Right";
          break;
        case AdfDhtmlPositionManager.CENTER:
          styleClass += "Center";
          break;
        default:
          AdfAssert.assert(false, "Invalid floatingElementAnchor for horizontalBehavior provided.");
          AdfLogger.LOGGER.warning("Invalid floatingElementAnchor for horizontalBehavior provided.");
          break
      }
      AdfDomUtils.removeCSSClassName(this._tailElement, this._tailPosition);
      this._tailPosition = styleClass;
      AdfDomUtils.addCSSClassName(this._tailElement, styleClass);
      var newPosition = this._adjustPopupPosition(top, left, styleClass);
      top = newPosition["top"];
      left = newPosition["left"]
    }
  }
  AdfDhtmlPopupWindow.superclass.setPosition.call(this, top, left)
};
AdfDhtmlPopupWindow.prototype.getTailElement = function() {
  return this._tailElement
};
AdfDhtmlPopupWindow.prototype.hasSpecialRenderingForScreenReader = function() {
  return!!AdfPopupScopingUtils.isScopingContainer(this.getElement())
};
AdfDhtmlPopupWindow.prototype.isScreenReaderModePopup = function() {
  return AdfPage.PAGE.isScreenReaderMode() && this.hasSpecialRenderingForScreenReader()
};
AdfDhtmlPopupWindow.prototype.show = function(hints) {
  AdfAssert.assertObject(hints, "Cannot show a popup element without hints");
  var componentId = hints[AdfDhtmlPopupWindow.HINT_COMPONENT_CLIENT_ID];
  AdfPage.PAGE.__perfTimings(false, false, true, "popup show called: type=" + hints[AdfDhtmlPopupWindow.HINT_TYPE] + ", id=" + componentId);
  this._componentId = componentId;
  var alignElement = hints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT];
  this.setAlignElement(alignElement);
  var align = hints[AdfRichPopup.HINT_ALIGN];
  var restoreImmediate = hints[AdfDhtmlPopupWindow.HINT_RESTORE_IMMEDIATE];
  this._closingAnimationHints = new Object;
  this._closingAnimationHints[AdfDhtmlPopupHints.CLOSE_TRANSITION] = hints[AdfDhtmlPopupHints.CLOSE_TRANSITION];
  this._isOpening = true;
  this._openedHandler = hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER];
  this._openedHandlerParam = hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER_PARAM];
  var mousePosition = hints[AdfDhtmlPopupWindow.HINT_MOUSEPOSITION];
  var autoDismiss = hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS];
  var screenCenterPosition = hints[AdfDhtmlPopupWindow.HINT_POSITION_CENTER];
  if(autoDismiss === true) {
    hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_ALWAYS
  }
  var closeOnEscape = hints[AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE];
  if(closeOnEscape == null) {
    closeOnEscape = true
  }
  this._closeOnEscape = closeOnEscape;
  this._launchSourceId = hints[AdfRichPopup.HINT_LAUNCH_ID];
  var maxWidth = hints[AdfDhtmlPopupWindow.HINT_MAX_WIDTH];
  if(maxWidth) {
    AdfAssert.assertNumeric(maxWidth, "AdfDhtmlPopupWindow.HINT_MAX_WIDTH");
    this._maxWidth = maxWidth
  }
  var page = AdfPage.PAGE;
  var component = page.findComponent(componentId);
  AdfAssert.assert(component != null, "Cannot show a popup element without a valid component");
  this.getElement().id = AdfRichUIPeer.createSubId(componentId, AdfDhtmlPopupWindow.__POPUP_CONTAINER_ID);
  var focusHint = hints[AdfDhtmlPopupWindow.HINT_FOCUS];
  if(focusHint == null) {
    focusHint = true
  }
  var hasSpecialRenderingForScreenReader = this.hasSpecialRenderingForScreenReader();
  if(hints[AdfDhtmlPopupWindow.HINT_TYPE] != AdfDhtmlPopupWindow.HINT_TYPE_DIALOG) {
    focusHint = focusHint || hasSpecialRenderingForScreenReader
  }
  if(restoreImmediate) {
    focusHint = false
  }
  if(focusHint) {
    var activeDomElement = page.getActiveDomElement();
    if(activeDomElement) {
      var restoreId = activeDomElement.id;
      if(!restoreId) {
        restoreId = page.getActiveComponentId();
        if(!restoreId) {
          restoreId = activeDomElement.id = (new Date).getTime()
        }
      }
      this._restoreFocusId = restoreId;
      AdfLogger.LOGGER.fine("In AdfDhtmlPopupWindow#show(), _restoreFocusId set to " + restoreId)
    }
  }
  this.SetFocusOnOpen(focusHint);
  var content = hints[AdfDhtmlPopupWindow.HINT_CONTENT];
  if(content) {
    if(this._maxWidth) {
      content.style.maxWidth = this._maxWidth + "px"
    }
    content = hints[AdfDhtmlPopupWindow.HINT_CONTENT] = this.WrapContent(hints, content, hasSpecialRenderingForScreenReader);
    this.setContent(content)
  }
  if(AdfPage.PAGE.isScreenReaderMode()) {
    this.setAccessibleAttrs(hints)
  }
  var animateHint = hints[AdfDhtmlPopupWindow.HINT_ANIMATE];
  if(page.isAnimationEnabled() && animateHint != AdfRichPopup.ANIMATE_FALSE) {
    var animProperty = this.GetAnimationDurationSkinProperty(hints);
    if(animProperty) {
      var animationDuration = parseInt(page.getLookAndFeel().getSkinProperty(animProperty));
      if(animationDuration > 0) {
        animProperty = this.GetAnimateSkinProperty();
        var animatePropertyValue = animProperty ? page.getLookAndFeel().getSkinProperty(animProperty) : null;
        if(animatePropertyValue != AdfRichPopup.ANIMATE_FALSE || animateHint == AdfRichPopup.ANIMATE_TRUE) {
          this._animationDuration = animationDuration;
          this._closingAnimationHints[AdfDhtmlPopupWindow.HINT_ANIMATE] = hints[AdfDhtmlPopupWindow.HINT_ANIMATE]
        }
      }
    }
  }
  this.setCloseHandler(hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER]);
  this.setCloseHandlerParam(hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER_PARAM]);
  this.getElement().style.visibility = "hidden";
  if(mousePosition) {
    this._positionAtMousePointer(mousePosition)
  }else {
    if(screenCenterPosition) {
      this._positionAtScreenCenter()
    }else {
      if(align) {
        this.Position(align)
      }
    }
  }
  this._announce("af_popup.STATUS_ENTERING_POPUP");
  this.DoShow(hints);
  page.getAutoDismissalManager().addBehavior(component, hints);
  var domWindow = page.getDomWindow();
  var activeDomElementIdKey = AdfDhtmlPopupWindow._createFocusPagePropertyKey(componentId);
  if(!restoreImmediate) {
    this._sizeTimeout = page.scheduleTimer(this, this.createCallback(this._size), hints, 1, {"isSynchronized":true})
  }else {
    this._sizeTimeout = 0;
    this._size(hints);
    var activeDomElementId = page.getPageProperty(activeDomElementIdKey);
    if(activeDomElementId) {
      var restoreFocusElement = AdfAgent.AGENT.getElementById(activeDomElementId);
      if(restoreFocusElement && AdfDomUtils.isAncestor(content, restoreFocusElement) && AdfFocusUtils.isFocusable(restoreFocusElement)) {
        AdfFocusUtils.focusElement(restoreFocusElement)
      }
    }else {
      if(AdfDhtmlDialogManager.getInstance().getActiveDialog() == this) {
        this.FocusOnFirstElement(true)
      }
    }
  }
  page.setPageProperty(activeDomElementIdKey, null);
  var rootElement = this.getElement();
  if(hints[AdfDhtmlPopupHints.SURROGATE_CLIENT_ID]) {
    rootElement.setAttribute(AdfDhtmlPopupWindow.__POPUPID_EXPANDO, hints[AdfDhtmlPopupHints.SURROGATE_CLIENT_ID])
  }else {
    if(componentId) {
      rootElement.setAttribute(AdfDhtmlPopupWindow.__POPUPID_EXPANDO, componentId)
    }
  }
};
AdfDhtmlPopupWindow.prototype.getPopupClientId = function() {
  return this._componentId
};
AdfDhtmlPopupWindow.prototype.OpenedPopup = function(hints) {
  if(!this._isOpening) {
    return
  }
  delete this._isOpening;
  this.announceOpeningViaLiveRegion(hints);
  this._registerEventHandlers(hints);
  if(!this._openedHandler) {
    this.FocusOnFirstElement();
    AdfPage.PAGE.__perfTimings(false, false, true, "popup opened no handler present: id=" + this._componentId);
    return
  }
  var domElement = this.getContent();
  this.RestoreScrollValues(domElement);
  this.FocusOnFirstElement();
  this._openedHandler(this._openedHandlerParam);
  delete this._openedHandler;
  delete this._openedHandlerParam;
  AdfPage.PAGE.__perfTimings(false, false, true, "popup opened handler present: id=" + this._componentId)
};
AdfDhtmlPopupWindow.prototype.WrapContent = function(hints, content, hasSpecialRenderingForScreenReader) {
  var page = AdfPage.PAGE;
  var doc = page.getDomDocument();
  var table = doc.createElement("table");
  this._resizeAnchorId = table.id = AdfRichUIPeer.CreateSubId(this._componentId, "" + (new Date).getTime());
  AdfAgent.AGENT.elementsAdded(table);
  table.cellPadding = table.cellSpacing = 0;
  table.insertRow(0).insertCell(0).appendChild(content);
  table.style.position = "relative";
  table.role = "presentation";
  if(hasSpecialRenderingForScreenReader) {
    var laf = page.getLookAndFeel();
    var agent = AdfAgent.AGENT;
    var wrapper = doc.createElement("div");
    var closeOnEscape = this._closeOnEscape;
    var startElement = doc.createElement("h1");
    startElement.id = AdfRichUIPeer.createSubId(this._componentId, AdfDhtmlPopupWindow.__POPUP_TITLE_ID);
    var endElement = doc.createElement("div");
    startElement.style.cssText = "font-size:small";
    endElement.style.cssText = "margin-top: 6px";
    var startTitle;
    var isMenu = hints[AdfDhtmlPopupWindow.HINT_TYPE] == AdfDhtmlPopupWindow.HINT_TYPE_MENU;
    var isPanelDrawer = hints[AdfDhtmlPopupWindow.HINT_TYPE] == AdfDhtmlPopupWindow.HINT_TYPE_LAYER;
    if(isMenu || isPanelDrawer) {
      var hintTitle = hints[AdfDhtmlPopupWindow.HINT_TITLE];
      var popupTitle = hintTitle == null ? "" : hintTitle;
      var keyName = isMenu ? "af_popup.TIP_START_OF_MENU" : "af_popup.TIP_START_OF_TITLED_POPUP";
      startTitle = laf.getTranslatedString(keyName, popupTitle)
    }else {
      startTitle = laf.getTranslatedString("af_popup.TIP_START_OF_POPUP")
    }
    var endTitle;
    if(isMenu) {
      endTitle = closeOnEscape ? laf.getTranslatedString("af_popup.TIP_END_OF_MENU") : laf.getTranslatedString("af_popup.TIP_END_OF_MENU_DISABLE_CLOSE_ON_ESCAPE")
    }else {
      endTitle = closeOnEscape ? laf.getTranslatedString("af_popup.TIP_END_OF_POPUP") : laf.getTranslatedString("af_popup.TIP_END_OF_POPUP_DISABLE_CLOSE_ON_ESCAPE")
    }
    agent.setTextContent(startElement, startTitle);
    agent.setTextContent(endElement, endTitle);
    wrapper.appendChild(startElement);
    wrapper.appendChild(table);
    wrapper.appendChild(endElement);
    return wrapper
  }else {
    return table
  }
};
AdfDhtmlPopupWindow.prototype._registerEventHandlers = function(hints) {
  var page = AdfPage.PAGE;
  var agent = AdfAgent.AGENT;
  var doc = page.getDomDocument();
  var popupContainer = this.getElement();
  if(!hints || !hints[AdfDhtmlPopupWindow.COMPONENT_EVENTS_ENABLED]) {
    var keyUpCallback = this._keyUpCallback = this.createCallback(this._handleKeyUp);
    agent.addBubbleEventListener(doc, "keyup", keyUpCallback);
    var keyDownCallback = this._keyDownCallback = this.createCallback(this._handleKeyDown);
    agent.addBubbleEventListener(popupContainer, "keydown", keyDownCallback)
  }
  var element = this.getElement().firstChild;
  var resizeCallback = this._resizeCallback = this.createCallback(this._handleResize);
  agent.addResizeListener(this._resizeAnchorId, resizeCallback)
};
AdfDhtmlPopupWindow.prototype._handleResize = function() {
  this.autoSize();
  var content = this.getContent();
  this.DoResizeNotifyDom(content);
  if(this._positionManagerIndex != null) {
    AdfPage.PAGE.getPositionManager().validatePosition(this._positionManagerIndex)
  }
};
AdfDhtmlPopupWindow.prototype._unregisterEventHandlers = function() {
  var page = AdfPage.PAGE;
  var doc = page.getDomDocument();
  var agent = AdfAgent.AGENT;
  var popupContainer = this.getElement();
  var keyUpCallback = this._keyUpCallback;
  if(keyUpCallback) {
    agent.removeBubbleEventListener(doc, "keyup", keyUpCallback);
    delete this._keyUpCallback
  }
  var keyDownCallback = this._keyDownCallback;
  if(keyDownCallback) {
    agent.removeBubbleEventListener(popupContainer, "keydown", keyDownCallback);
    delete this._keyDownCallback
  }
  var resizeCallback = this._resizeCallback;
  if(resizeCallback) {
    var element = this.getElement().firstChild;
    agent.removeResizeListener(this._resizeAnchorId, resizeCallback);
    delete this._resizeAnchorId;
    delete this._resizeCallback
  }
};
AdfDhtmlPopupWindow.prototype.hide = function() {
  if(this._isHiding) {
    return
  }
  this._isHiding = true;
  AdfPage.PAGE.__perfTimings(false, false, true, "popup hide called: id=" + this._componentId);
  if(this._animator && this._isOpening) {
    this._animator.stop();
    var wrapper = this.getElement().parentNode;
    AdfDhtmlPopupWindow.OpenAnimationComplete({wrapper:wrapper, myself:this})
  }
  if(this._closingAnimationHints[AdfDhtmlPopupWindow.HINT_ANIMATE] != AdfRichPopup.ANIMATE_FALSE && this._animationDuration > 0) {
    this.AnimateClosing(this._closingAnimationHints)
  }else {
    this.ClosedPopup()
  }
};
AdfDhtmlPopupWindow.prototype.ClosedPopup = function() {
  this._announce("af_popup.STATUS_EXITING_POPUP");
  var page = AdfPage.PAGE;
  var domElement = this.getContent();
  if(AdfPage.PAGE.isScreenReaderMode()) {
    this.removeAccessibleAttrs()
  }
  this.SaveScrollValues(domElement);
  var component = page.findComponent(this._componentId);
  var popupId = AdfDhtmlPopupWindow._getInternalPopupId(this, component);
  page.getAutoDismissalManager().removeBehavior(component, popupId);
  var isRestoring = this._isRestoring(component);
  if(!isRestoring && (page.getActiveDomElement() == null || AdfFocusUtils.containsFocus(this.getElement())) && !AdfFocusUtils.isFocusChangePending()) {
    try {
      this._restoreFocus()
    }catch(e) {
      AdfLogger.LOGGER.logErrorAsWarning(e, "restoring popup focus")
    }
  }
  this._unregisterEventHandlers();
  var closeHandler = this._closeHandler;
  if(closeHandler) {
    delete this._closeHandler;
    closeHandler(this._closeHandlerParam);
    delete this._closeHandlerParam
  }
  this.destroy();
  delete this._isHiding;
  page.__perfTimings(false, false, true, "popup hidden: id=" + this._componentId)
};
AdfDhtmlPopupWindow._getInternalPopupId = function(popupWindow, component) {
  if(component) {
    var peer = component.getPeer();
    if(peer) {
      var popupList = peer.getAllPopups(component);
      if(popupList) {
        for(popupId in popupList) {
          if(popupList[popupId] === popupWindow) {
            return popupId
          }
        }
      }
    }
  }
  return null
};
AdfDhtmlPopupWindow.prototype._isRestoring = function(component) {
  var isRestoring = false;
  if(component instanceof AdfRichPopup && component.getAutoCancel() == AdfRichPopup.AUTO_CANCEL_DISABLED) {
    var key = AdfDhtmlPopupWindow._createFocusPagePropertyKey(component.getClientId());
    var activeDomElementId = page.getPageProperty(key);
    isRestoring = activeDomElementId ? true : false
  }
  return isRestoring
};
AdfDhtmlPopupWindow.prototype.cancel = function(replaceDom) {
  var agent = AdfAgent.AGENT;
  var closeHandlerParam = this._closeHandlerParam;
  var contentDom = closeHandlerParam.contentDom;
  agent.setExpandoProperty(contentDom, AdfDhtmlPopupWindow.__CANCELED_EXPANDO, true);
  agent.setExpandoProperty(contentDom, AdfDhtmlPopupWindow.__REPLACEDOM_EXPANDO, replaceDom ? true : false);
  if(this._closingAnimationHints && replaceDom) {
    this._closingAnimationHints[AdfDhtmlPopupWindow.HINT_ANIMATE] = AdfRichPopup.ANIMATE_FALSE
  }
  if(this._isHiding) {
    if(this._animator && replaceDom) {
      this._animator.stop();
      var wrapper = this.getElement().parentNode;
      AdfDhtmlPopupWindow.CloseAnimationComplete({wrapper:wrapper, myself:this})
    }
    return
  }
  if(replaceDom && AdfFocusUtils.containsFocus(this.getElement())) {
    var poppupId = this.getPopupClientId();
    var key = AdfDhtmlPopupWindow._createFocusPagePropertyKey(poppupId);
    var page = AdfPage.PAGE;
    var activeDomElement = page.getActiveDomElement();
    if(activeDomElement && activeDomElement.id) {
      page.setPageProperty(key, activeDomElement.id)
    }
  }
  AdfDhtmlPopupWindow.superclass.cancel.call(this)
};
AdfDhtmlPopupWindow._createFocusPagePropertyKey = function(clientId) {
  AdfAssert.assertString(clientId);
  var tokens = clientId.split(":");
  return tokens.join("$") + "$restoreFocus"
};
AdfDhtmlPopupWindow.prototype._restoreFocus = function() {
  var agent = AdfAgent.AGENT;
  var page = AdfPage.PAGE;
  var focusContextCache = new Object;
  var restoreFocusElement;
  var element = this.getElement();
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM) {
    var isaDialog = this instanceof AdfDhtmlSimpleFloat;
    if(!isaDialog) {
      var event = page.getDomWindow().event;
      if(event && event.type.indexOf("mouse") !== -1) {
        var eventTarget = agent.getEventTarget(event);
        if(eventTarget && AdfFocusUtils.isFocusable(eventTarget) && !AdfDomUtils.isAncestorOrSelf(element, eventTarget)) {
          restoreFocusElement = eventTarget
        }
      }
    }
  }
  if(!restoreFocusElement) {
    restoreFocusElement = this.getAlignElement()
  }
  AdfLogger.LOGGER.fine("In AdfDhtmlPopupWindow#_restoreFocus(), _restoreFocusId set to " + this._restoreFocusId);
  if(this._restoreFocusId && (!restoreFocusElement || !AdfFocusUtils.isFocusable(restoreFocusElement, focusContextCache))) {
    restoreFocusElement = page.getDomDocument().getElementById(this._restoreFocusId)
  }
  if(!restoreFocusElement || !AdfFocusUtils.isFocusable(restoreFocusElement, focusContextCache)) {
    var launchSourceElement = this.GetLaunchSourceElement();
    if(launchSourceElement) {
      restoreFocusElement = launchSourceElement
    }
  }
  if(restoreFocusElement) {
    if(agent.getPlatform() == AdfAgent.IE_PLATFORM && !this.isScreenReaderModePopup()) {
      var focusParams = new Object;
      focusParams["focusElement"] = restoreFocusElement;
      focusParams["popupElement"] = element;
      page.scheduleTimer(this, this._delayedCheckedFocus, focusParams, 10, {"isSynchronized":true});
      return
    }else {
      if(AdfFocusUtils.isFocusable(restoreFocusElement, focusContextCache)) {
        AdfFocusUtils.focusElement(restoreFocusElement);
        return
      }
    }
    AdfFocusUtils.focusNextTabStop(restoreFocusElement);
    return
  }
  AdfFocusUtils.focusFirstDocumentTabStop()
};
AdfDhtmlPopupWindow.prototype._delayedCheckedFocus = function(params) {
  var popupElement = params["popupElement"];
  var focusElement = params["focusElement"];
  if(!AdfFocusUtils.isFocusable(AdfPage.PAGE.getActiveDomElement()) && !AdfDomUtils.isAncestorOrSelf(popupElement, focusElement)) {
    AdfFocusUtils.isFocusable(focusElement) ? AdfFocusUtils.focusElement(focusElement) : AdfFocusUtils.focusNextTabStop(focusElement)
  }
};
AdfDhtmlPopupWindow.prototype.GetLaunchSourceElement = function() {
  var launchSourceId = this._launchSourceId;
  return launchSourceId ? AdfAgent.AGENT.getElementById(launchSourceId) : null
};
AdfDhtmlPopupWindow.prototype.setContent = function(selectorContent) {
  var contentElement = this.GetContentParent();
  if(contentElement.firstChild) {
    contentElement.removeChild(contentElement.firstChild)
  }
  contentElement.appendChild(selectorContent)
};
AdfDhtmlPopupWindow.prototype.setAccessibleAttrs = function(hints) {
};
AdfDhtmlPopupWindow.prototype.removeAccessibleAttrs = function() {
};
AdfDhtmlPopupWindow.prototype.announceOpeningViaLiveRegion = function(hints) {
};
AdfDhtmlPopupWindow.prototype.getContent = function() {
  return this.GetContentParent().firstChild
};
AdfDhtmlPopupWindow.prototype.GetContentParent = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfDhtmlPopupWindow.prototype.setCloseHandler = function(handler) {
  this._closeHandler = handler
};
AdfDhtmlPopupWindow.prototype.setCloseHandlerParam = function(param) {
  this._closeHandlerParam = param
};
AdfDhtmlPopupWindow.prototype.isVisible = function() {
  return this.getElement().style.display != "none"
};
AdfDhtmlPopupWindow.prototype.DoShow = function(hints) {
  AdfDhtmlPopupWindow.superclass.show.call(this);
  if(this.hasSpecialRenderingForScreenReader() && !this.GetFocusOnOpen()) {
    return
  }
  this.raiseToFront()
};
AdfDhtmlPopupWindow.prototype.CreateShadow = function(afterAnimation) {
  if(this.HasShadow() && (!this._animationDuration || afterAnimation)) {
    AdfDhtmlShadowDecorator.createShadowDecorator(this.getShadowAnchor(), this.getElement().parentNode)
  }
};
AdfDhtmlPopupWindow.prototype.HasShadow = function() {
  return true
};
AdfDhtmlPopupWindow.prototype.shouldInvertPosition = function() {
  return true
};
AdfDhtmlPopupWindow.prototype.destroy = function() {
  var agent = AdfAgent.AGENT;
  var page = AdfPage.PAGE;
  agent.elementsRemoved(this.getElement());
  this._restoreFocusElement = null;
  if(this._sizeTimeout != null) {
    page.cancelTimer(this._sizeTimeout);
    delete this._sizeTimeout
  }
  var shadowAnchor = this.getShadowAnchor();
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(shadowAnchor)) {
    AdfDhtmlShadowDecorator.removeShadowDecorator(shadowAnchor)
  }
  if(this._positionManagerIndex != null) {
    page.getPositionManager().removeElement(this._positionManagerIndex)
  }
  this.setAlignElement(null);
  AdfDhtmlPopupWindow.superclass.destroy.call(this)
};
AdfDhtmlPopupWindow.prototype.isAnimating = function() {
  return this._animator != null || this._isOpening
};
AdfDhtmlPopupWindow.prototype.GetPositionManagerIndex = function() {
  return this._positionManagerIndex
};
AdfDhtmlPopupWindow.prototype._handleKeyDown = function(event) {
  var agent = AdfAgent.AGENT;
  var targetElement = agent.getEventTarget(event);
  var popupContainer = this.getElement();
  if(event.keyCode == AdfKeyStroke.TAB_KEY) {
    var firstFocusableElementInPopup = AdfFocusUtils.getFirstTabStop(popupContainer);
    var lastElement = AdfFocusUtils.getLastTabStop(popupContainer);
    if(firstFocusableElementInPopup == null) {
      agent.eatEvent(event);
      return
    }
    if(event.shiftKey) {
      if(targetElement == firstFocusableElementInPopup) {
        AdfFocusUtils.focusPreviousTabStop(targetElement, popupContainer);
        agent.eatEvent(event)
      }
    }else {
      if(lastElement == targetElement) {
        AdfFocusUtils.focusNextTabStop(targetElement, popupContainer);
        agent.eatEvent(event)
      }
    }
  }else {
    if(event.keyCode == AdfKeyStroke.F6_KEY) {
      if(AdfPage.PAGE.isScreenReaderMode() && !this.hasSpecialRenderingForScreenReader() && AdfDomUtils.isAncestorOrSelf(popupContainer, targetElement)) {
        this.HandleKeyNavigation(event)
      }
    }
  }
};
AdfDhtmlPopupWindow.prototype._handleKeyUp = function(event) {
  var agent = AdfAgent.AGENT;
  var keyCode = agent.getKeyCode(event);
  var targetElement = agent.getEventTarget(event);
  if(keyCode == AdfKeyStroke.ESC_KEY) {
    if(this._closeOnEscape) {
      var invokeEscapeHandler = false;
      var launchSourceId = this._launchSourceId;
      if(AdfDomUtils.isAncestorOrSelf(this.getElement(), targetElement)) {
        invokeEscapeHandler = true
      }else {
        if(launchSourceId) {
          var launchElement = agent.getElementById(launchSourceId);
          if(launchElement && AdfDomUtils.isAncestorOrSelf(launchElement, targetElement)) {
            invokeEscapeHandler = true
          }
        }
      }
      if(invokeEscapeHandler) {
        this.HandleEscapeKey(event)
      }
    }
  }
  if(event.ctrlKey && event.altKey && keyCode == AdfKeyStroke.W_KEY) {
    if(AdfDomUtils.isAncestorOrSelf(this.getElement(), targetElement)) {
      this.HandleKeyNavigation(event)
    }
  }
};
AdfDhtmlPopupWindow.prototype.HandleEscapeKey = function(event) {
  this.cancel();
  AdfAgent.AGENT.eatEvent(event)
};
AdfDhtmlPopupWindow.prototype.HandleKeyNavigation = function(event) {
};
AdfDhtmlPopupWindow.prototype._size = function(hints) {
  if(this._sizeTimeout == null) {
    return
  }
  delete this._sizeTimeout;
  var domElement = this.getContent();
  this.DoResizeNotifyDom(domElement);
  var element = this.getElement(), elementStyle = element.style;
  var maxWidth = this._maxWidth;
  if(maxWidth) {
    elementStyle.width = Math.min(element.offsetWidth, maxWidth) + "px"
  }else {
    elementStyle.width = element.offsetWidth + "px"
  }
  if(this._positionManagerIndex != null) {
    var screenCenterPosition = hints[AdfDhtmlPopupWindow.HINT_POSITION_CENTER];
    if(screenCenterPosition) {
      this.setAlignPosition(this.CalcAlignPosition())
    }
    AdfPage.PAGE.getPositionManager().validatePosition(this._positionManagerIndex)
  }
  if(this.hasSpecialRenderingForScreenReader() && !this.GetFocusOnOpen()) {
    AdfPopupScopingUtils.scope(AdfPage.PAGE.getActiveDomElement())
  }
  var animationDuration = this.GetAnimationDuration();
  if(animationDuration > 0) {
    this.AnimateOpening(hints)
  }else {
    elementStyle.visibility = "";
    this.CreateShadow();
    this.OpenedPopup(hints)
  }
};
AdfDhtmlPopupWindow.prototype.AnimateOpening = function(hints) {
  var launchSourceId = this._launchSourceId;
  this.AnimateUsingWrapper(this.GetAnimationDuration(), hints, true)
};
AdfDhtmlPopupWindow.prototype._getAnchorProperties = function() {
  var anchor = new Object;
  anchor.isRight = false;
  anchor.isBottom = false;
  var positionManagerIndex = this.GetPositionManagerIndex();
  if(positionManagerIndex >= 0) {
    var behavior = AdfPage.PAGE.getPositionManager().getComputedBehavior(positionManagerIndex);
    if(behavior) {
      anchor.isRight = behavior.horizontalBehavior.floatingElementAnchor == AdfDhtmlPositionManager.RIGHT;
      anchor.isBottom = behavior.verticalBehavior.floatingElementAnchor == AdfDhtmlPositionManager.BOTTOM
    }
  }
  return anchor
};
AdfDhtmlPopupWindow.prototype.AnimateClosing = function(hints) {
  this.AnimateUsingWrapper(this.GetCloseAnimationDuration(), hints, false)
};
AdfDhtmlPopupWindow.prototype.AnimateUsingWrapper = function(animationDuration, hints, isOpening) {
  var rootElement = this.getElement();
  var styleProperties = AdfDhtmlPopupWindow._getElementStyle(rootElement);
  var wrapper = AdfDhtmlPopupWindow._createTransitionWrapper(rootElement);
  var transitionProperties = AdfDhtmlPopupWindow._setUpWrapperTransition(rootElement, wrapper, hints, isOpening, styleProperties, this._getAnchorProperties());
  if(transitionProperties != null) {
    if(isOpening) {
      this.SaveScrollValues(rootElement)
    }
    rootElement.parentNode.replaceChild(wrapper, rootElement);
    wrapper.appendChild(rootElement);
    if(isOpening) {
      AdfPage.PAGE.prepareMaskingFrame(rootElement)
    }
    this._animator = AdfDhtmlElementAnimator.animate(AdfDhtmlElementAnimator.FRAME_METHOD_CONSTANT_SPEED, animationDuration, [{"element":wrapper, "properties":transitionProperties}], null, isOpening ? AdfDhtmlPopupWindow.OpenAnimationComplete : AdfDhtmlPopupWindow.CloseAnimationComplete, {"wrapper":wrapper, "myself":this, "hints":hints})
  }else {
    if(isOpening) {
      rootElement.style.visibility = "";
      this.CreateShadow();
      this.OpenedPopup(hints)
    }else {
      this.ClosedPopup()
    }
  }
};
AdfDhtmlPopupWindow._getElementStyle = function(element) {
  var elementStyle = {};
  elementStyle.height = element.offsetHeight;
  elementStyle.width = element.offsetWidth;
  elementStyle.top = parseInt(element.style.top);
  elementStyle.left = parseInt(element.style.left);
  elementStyle.right = elementStyle.left + elementStyle.width;
  return elementStyle
};
AdfDhtmlPopupWindow._createTransitionWrapper = function(rootElement) {
  var ownerDoc = rootElement.ownerDocument;
  var wrapper = ownerDoc.createElement("div");
  wrapper.setAttribute(AdfDhtmlPopupWindow._ANIMATE_WRAPPER_EXPANDO, true);
  wrapper.style.overflow = "hidden";
  wrapper.style.position = "absolute";
  wrapper.style.zIndex = rootElement.style.zIndex;
  return wrapper
};
AdfDhtmlPopupWindow._setUpWrapperTransition = function(rootElement, wrapper, hints, isOpening, styleProperties, anchor) {
  var transition = isOpening ? hints[AdfDhtmlPopupHints.OPEN_TRANSITION] : hints[AdfDhtmlPopupHints.CLOSE_TRANSITION];
  if(isOpening && (!transition || transition == AdfDhtmlPopupHints.TRANSITION_AUTO)) {
    return AdfDhtmlPopupWindow._growTransition(rootElement, wrapper, styleProperties, anchor)
  }else {
    if(transition == AdfDhtmlPopupHints.TRANSITION_VERTICAL || transition == AdfDhtmlPopupHints.TRANSITION_HORIZONTAL) {
      return AdfDhtmlPopupWindow._slideTransition(rootElement, wrapper, styleProperties, isOpening, transition, anchor)
    }
  }
  return null
};
AdfDhtmlPopupWindow._growTransition = function(rootElement, wrapper, styleProperties, anchor) {
  var rootStyle = rootElement.style;
  rootStyle.top = "0px";
  rootStyle.left = "0px";
  var wrapperStyle = wrapper.style;
  wrapperStyle.height = "1px";
  wrapperStyle.width = "1px";
  var properties = {"height":styleProperties.height, "width":styleProperties.width};
  if(anchor.isRight) {
    wrapperStyle.left = styleProperties.left + styleProperties.width - 1 + "px";
    properties.left = styleProperties.left
  }else {
    wrapperStyle.left = styleProperties.left + "px"
  }
  if(anchor.isBottom) {
    wrapperStyle.top = styleProperties.top + styleProperties.height + 1 + "px";
    properties.top = styleProperties.top
  }else {
    wrapperStyle.top = styleProperties.top + "px"
  }
  rootStyle.visibility = "";
  return properties
};
AdfDhtmlPopupWindow._slideTransition = function(rootElement, wrapper, styleProperties, isOpening, transition, anchor) {
  var rootStyle = rootElement.style;
  var wrapperStyle = wrapper.style;
  var properties = {};
  var slideDirection = AdfDhtmlPopupWindow._getSlideDirection(isOpening, transition, anchor);
  if(slideDirection == AdfDhtmlPopupWindow._SLIDE_LEFT || slideDirection == AdfDhtmlPopupWindow._SLIDE_RIGHT) {
    properties = AdfDhtmlPopupWindow._horizontalSlideTransition(rootStyle, wrapperStyle, styleProperties, isOpening, slideDirection)
  }else {
    if(slideDirection == AdfDhtmlPopupWindow._SLIDE_UP || slideDirection == AdfDhtmlPopupWindow._SLIDE_DOWN) {
      properties = AdfDhtmlPopupWindow._verticalSlideTransition(rootStyle, wrapperStyle, styleProperties, isOpening, slideDirection)
    }
  }
  rootStyle.visibility = "";
  return properties
};
AdfDhtmlPopupWindow._getSlideDirection = function(isOpening, transition, anchor) {
  if(transition == AdfDhtmlPopupHints.TRANSITION_HORIZONTAL) {
    if(anchor.isRight && isOpening || !anchor.isRight && !isOpening) {
      return AdfDhtmlPopupWindow._SLIDE_LEFT
    }else {
      return AdfDhtmlPopupWindow._SLIDE_RIGHT
    }
  }else {
    if(transition == AdfDhtmlPopupHints.TRANSITION_VERTICAL) {
      if(anchor.isBottom && isOpening || !anchor.isBottom && !isOpening) {
        return AdfDhtmlPopupWindow._SLIDE_UP
      }else {
        return AdfDhtmlPopupWindow._SLIDE_DOWN
      }
    }
  }
};
AdfDhtmlPopupWindow._horizontalSlideTransition = function(rootStyle, wrapperStyle, styleProperties, isOpening, slideDirection) {
  rootStyle.top = "0px";
  wrapperStyle.top = styleProperties.top + "px";
  wrapperStyle.height = styleProperties.height + "px";
  var properties = {};
  if(isOpening) {
    wrapperStyle.width = "1px";
    properties.width = styleProperties.width;
    if(slideDirection == AdfDhtmlPopupWindow._SLIDE_LEFT) {
      rootStyle.left = "0px";
      wrapperStyle.left = styleProperties.left + styleProperties.width - 1 + "px";
      properties.left = styleProperties.left
    }else {
      rootStyle.left = "auto";
      rootStyle.right = "0px";
      wrapperStyle.left = styleProperties.left + "px"
    }
  }else {
    wrapperStyle.width = styleProperties.width + "px";
    properties.width = 1;
    if(slideDirection == AdfDhtmlPopupWindow._SLIDE_LEFT) {
      rootStyle.left = "auto";
      rootStyle.right = "0px";
      wrapperStyle.left = styleProperties.left + "px"
    }else {
      rootStyle.left = "0px";
      wrapperStyle.left = styleProperties.left - 1 + "px";
      properties.left = styleProperties.left + styleProperties.width - 1
    }
  }
  return properties
};
AdfDhtmlPopupWindow._verticalSlideTransition = function(rootStyle, wrapperStyle, styleProperties, isOpening, slideDirection) {
  rootStyle.left = "0px";
  wrapperStyle.width = styleProperties.width + "px";
  wrapperStyle.left = styleProperties.left + "px";
  var properties = {};
  if(isOpening) {
    wrapperStyle.height = "1px";
    properties.top = styleProperties.top;
    properties.height = styleProperties.height;
    if(slideDirection == AdfDhtmlPopupWindow._SLIDE_UP) {
      rootStyle.top = "0px";
      wrapperStyle.top = styleProperties.top + styleProperties.height - 1 + "px"
    }else {
      rootStyle.top = "auto";
      rootStyle.bottom = "0px";
      rootStyle.height = styleProperties.height + "px";
      wrapperStyle.top = styleProperties.top + 1 + "px"
    }
  }else {
    wrapperStyle.height = styleProperties.height + "px";
    wrapperStyle.top = styleProperties.top + "px";
    properties.height = 1;
    if(slideDirection == AdfDhtmlPopupWindow._SLIDE_UP) {
      rootStyle.top = "auto";
      rootStyle.bottom = "0px"
    }else {
      rootStyle.top = "0px";
      rootStyle.height = styleProperties.height + "px";
      wrapperStyle.top = styleProperties.top + "px";
      properties.top = styleProperties.top + styleProperties.height
    }
  }
  return properties
};
AdfDhtmlPopupWindow.CloseAnimationComplete = function(context) {
  var myself = context.myself;
  var wrapper = context.wrapper;
  if(!myself._animator) {
    return
  }
  delete myself._animator;
  AdfDhtmlPopupWindow._restoreRootPostAnimation(wrapper);
  myself.ClosedPopup()
};
AdfDhtmlPopupWindow._restoreRootPostAnimation = function(wrapper) {
  var wrapperStyle = wrapper.style;
  var rootElement = wrapper.firstChild;
  var rootStyle = rootElement.style;
  rootStyle.right = wrapperStyle.right;
  rootStyle.left = wrapperStyle.left;
  rootStyle.top = wrapperStyle.top;
  wrapper.parentNode.replaceChild(rootElement, wrapper)
};
AdfDhtmlPopupWindow.OpenAnimationComplete = function(context) {
  var wrapper = context.wrapper;
  var myself = context.myself;
  var hints = context.hints;
  if(!myself._animator) {
    return
  }
  delete myself._animator;
  AdfDhtmlPopupWindow._restoreRootPostAnimation(wrapper);
  myself.CreateShadow(true);
  myself.OpenedPopup(hints)
};
AdfDhtmlPopupWindow.prototype.GetAnimationDuration = function() {
  return this._animationDuration
};
AdfDhtmlPopupWindow.prototype.GetCloseAnimationDuration = function() {
  return this._animationDuration
};
AdfDhtmlPopupWindow.prototype.GetAnimationDurationSkinProperty = function(hints) {
  return null
};
AdfDhtmlPopupWindow.prototype.GetAnimateSkinProperty = function() {
  return null
};
AdfDhtmlPopupWindow.prototype.autoSize = function() {
  var isOpening = this._isOpening;
  if(!this.isVisible() || isOpening) {
    return
  }
  var element = this.getElement(), elementStyle = element.style;
  elementStyle.width = "auto";
  var maxWidth = this._maxWidth;
  if(maxWidth) {
    elementStyle.width = Math.min(element.offsetWidth, maxWidth) + "px"
  }else {
    elementStyle.width = element.offsetWidth + "px"
  }
  var anchor = this.getShadowAnchor();
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(anchor)) {
    AdfDhtmlShadowDecorator.moveShadowDecorator(anchor);
    AdfDhtmlShadowDecorator.showShadowDecorator(anchor, true)
  }
};
AdfDhtmlPopupWindow.prototype.FocusOnFirstElement = function(force) {
  if(this._animator != null) {
    return
  }
  var focusHint = this.GetFocusOnOpen();
  if(!force && !focusHint) {
    return
  }
  var agent = AdfAgent.AGENT;
  var domWindow = agent.getDomWindow();
  var rootElement = this.getElement();
  if(domWindow.AdfSafariMobileAgent && agent instanceof AdfSafariMobileAgent && agent.getOS() != AdfAgent.ANDROID_OS) {
    rootElement.tabIndex = -1;
    AdfFocusUtils.focusElement(rootElement);
    return
  }
  var focusContentElement = this.GetFocusContent();
  var firstFocus = AdfFocusUtils.getFirstTabStop(focusContentElement);
  if(!firstFocus) {
    if(rootElement != focusContentElement) {
      firstFocus = AdfFocusUtils.getFirstTabStop(rootElement)
    }
    if(!firstFocus) {
      focusContentElement.tabIndex = -1;
      AdfFocusUtils.focusElement(focusContentElement)
    }
  }
  if(firstFocus) {
    var agent = AdfAgent.AGENT;
    if(!AdfPage.PAGE.isScreenReaderMode() && (AdfAgent.IE_PLATFORM != agent.getPlatform() || AdfAgent.IE_PLATFORM == agent.getPlatform() && agent.getVersion() > 8)) {
      AdfFocusUtils.focusElement(firstFocus)
    }else {
      AdfFocusUtils.focusElementDelayed(firstFocus, 1E3)
    }
  }
};
AdfDhtmlPopupWindow.prototype.GetFocusContent = function() {
  var element = this.getElement();
  return element
};
AdfDhtmlPopupWindow.prototype.Position = function(hintAlign) {
  var page = AdfPage.PAGE;
  var positionManager = page.getPositionManager();
  var positionManagerIndex = this._positionManagerIndex;
  if(positionManagerIndex) {
    positionManager.removeElement(positionManagerIndex);
    delete this._positionManagerIndex
  }
  var ignoreShadow = !this.HasShadow();
  this._positionManagerIndex = positionManager.addFloatingElement(this, hintAlign, ignoreShadow)
};
AdfDhtmlPopupWindow.prototype._positionAtMousePointer = function(pos) {
  this._positionManagerIndex = AdfPage.PAGE.getPositionManager().addFloatingElementByPosition(this, pos)
};
AdfDhtmlPopupWindow.prototype._positionAtScreenCenter = function() {
  var page = AdfPage.PAGE;
  var positionManager = page.getPositionManager();
  var positionManagerIndex = this._positionManagerIndex;
  if(positionManagerIndex) {
    positionManager.removeElement(positionManagerIndex);
    delete this._positionManagerIndex
  }
  var ignoreShadow = !this.HasShadow();
  this._positionManagerIndex = positionManager.addFloatingElementByPosition(this, this.CalcAlignPosition(), ignoreShadow)
};
AdfDhtmlPopupWindow.prototype.CalcAlignPosition = function(leftPercentage, topPercentage) {
  if(this.getAlignElement()) {
    return null
  }
  if(!leftPercentage) {
    leftPercentage = 0.5
  }
  if(!topPercentage) {
    topPercentage = 0.5
  }
  var agent = AdfAgent.AGENT;
  var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
  var windowHeight = agent.getWindowHeight();
  var windowWidth = agent.getWindowWidth();
  var docScrollTop = agent.getBrowserViewportScrollTop();
  var docScrollLeft = agent.getBrowserViewportScrollLeft();
  if(docScrollTop > 0 && agent.getPlatform() == AdfAgent.GECKO_PLATFORM) {
    windowHeight = Math.min(windowHeight, agent.getDomDocument().body.clientHeight)
  }
  var w = this.getWidth();
  var h = this.getHeight();
  var dir = isRTL ? -1 : 1;
  var top = Math.max(0, Math.round(windowHeight * topPercentage - h / 2)) + docScrollTop;
  var left = Math.max(0, Math.round(windowWidth * leftPercentage - dir * (w / 2))) + dir * docScrollLeft;
  var ydelta = windowHeight + docScrollTop - (top + h);
  if(ydelta < 0) {
    top = Math.max(docScrollTop, top + ydelta)
  }
  var xdelta = windowWidth + docScrollLeft - (left + dir * w);
  if(xdelta < 0) {
    left = Math.max(docScrollLeft, left + xdelta)
  }
  var pos = {y:top, x:left};
  return pos
};
AdfDhtmlPopupWindow.prototype.DoResizeNotifyDom = function(content) {
  AdfPage.PAGE.doResizeNotifyDom(content, false)
};
AdfDhtmlPopupWindow.prototype.SaveScrollValues = function(domElement) {
  var childElements = domElement.getElementsByTagName("div");
  var childCount = childElements.length;
  for(var i = 0;i < childCount;i++) {
    var currElement = childElements[i];
    var scrollTop = currElement.scrollTop;
    if(scrollTop > 0) {
      currElement.setAttribute(AdfDhtmlPopupWindow._SCROLL_POSITION, scrollTop)
    }
  }
};
AdfDhtmlPopupWindow.prototype.RestoreScrollValues = function(domElement) {
  var childElements = domElement.getElementsByTagName("div");
  var childCount = childElements.length;
  for(var y = 0;y < childCount;y++) {
    var currElement = childElements[y];
    var scrollPosition = currElement.getAttribute(AdfDhtmlPopupWindow._SCROLL_POSITION);
    if(scrollPosition && scrollPosition > 0) {
      AdfDomUtils.setScrollTop(currElement, scrollPosition)
    }
  }
};
AdfDhtmlPopupWindow.prototype.getLaunchSourceId = function() {
  return this._launchSourceId
};
AdfDhtmlPopupWindow.prototype.GetFocusOnOpen = function() {
  return this._focusHint ? true : false
};
AdfDhtmlPopupWindow.prototype.SetFocusOnOpen = function(focusHint) {
  this._focusHint = focusHint
};
AdfDhtmlPopupWindow.prototype._announce = function(messageKey) {
  var page = AdfPage.PAGE;
  var message = page.getLookAndFeel().getTranslatedString(messageKey);
  page.announceToAssistiveTechnology(message)
};
AdfDhtmlPopupWindow.prototype.GetMaxWidth = function() {
  return this._maxWidth
};
AdfDhtmlPopupWindow.isAncestorOrSelf = function(ancestorNode, domElement) {
  var agent = AdfAgent.AGENT;
  while(domElement) {
    if(ancestorNode == domElement) {
      return true
    }
    if(domElement.nodeType == 1 && domElement.hasAttribute(AdfDhtmlPopupWindow.__POPUPID_EXPANDO)) {
      popupId = domElement.getAttribute(AdfDhtmlPopupWindow.__POPUPID_EXPANDO);
      domElement = agent.getElementById(popupId)
    }else {
      domElement = domElement.parentNode
    }
  }
  return false
};
AdfDhtmlPopupWindow.isPopupWindow = function(domNode) {
  AdfAssert.assertDomNode(domNode);
  if(domNode.nodeType == 1 && domNode.hasAttribute(AdfDhtmlPopupWindow.__POPUPID_EXPANDO)) {
    return true
  }
  return false
};
AdfDhtmlPopupWindow.prototype.setRestoreFocusId = function(id) {
  this._restoreFocusId = id;
  AdfLogger.LOGGER.fine("In AdfDhtmlPopupWindow#setRestoreFocusId(), _restoreFocusId set to " + this._restoreFocusId)
};

function AdfDhtmlSimpleFloat() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlSimpleFloat, AdfDhtmlPopupWindow);
AdfDhtmlSimpleFloat.InitClass = function() {
  this._DRAG_STYLECLASS = "p_AFDrag";
  this._INACTIVE_STYLECLASS = "p_AFInactive";
  this._CONTENT_ID = "contentContainer";
  this._TITLE_ID = "_ttxt";
  this._POPUP_INITIAL_FOCUS_LIVE_CONTENT_ID = "AFPopupInitialFocusLiveContent"
};
AdfDhtmlSimpleFloat.prototype.Init = function() {
  AdfDhtmlSimpleFloat.superclass.Init.call(this)
};
AdfDhtmlSimpleFloat.prototype.getContainedComponentClientId = function() {
  return this._containedComponentId
};
AdfDhtmlSimpleFloat.prototype.GetFocusContent = function() {
  var peer = this._getContainedComponentPeer();
  var subId = AdfRichUIPeer.CreateSubId(peer.getComponent().getClientId(), AdfDhtmlSimpleFloat._CONTENT_ID);
  var element = AdfAgent.AGENT.getElementById(subId);
  if(element && AdfAgent.AGENT.getPlatform() == AdfAgent.GECKO_PLATFORM) {
    element.tabIndex = -1
  }
  if(this.hasSpecialRenderingForScreenReader()) {
    return AdfDhtmlSimpleFloat.superclass.GetFocusContent.call(this)
  }
  if(element) {
    if(AdfFocusUtils.containsFocus(element)) {
      element = AdfPage.PAGE.getActiveDomElement()
    }else {
      element = AdfFocusUtils.getFirstTabStop(element)
    }
  }
  if(!element) {
    if(peer instanceof AdfDhtmlDialogPeer) {
      element = peer.getDefaultButtonDom(this.getContainedComponentClientId())
    }
    if(!element) {
      element = peer.getDomElement()
    }
  }
  return element
};
AdfDhtmlSimpleFloat.prototype.setContent = function(selectorContent) {
  AdfDhtmlSimpleFloat.superclass.setContent.call(this, selectorContent);
  var mainElement = this._getMainElement(selectorContent);
  this.setShadowAnchor(mainElement);
  var containedComponent = AdfRichUIPeer.getFirstAncestorComponent(mainElement);
  this._containedComponentId = containedComponent.getClientId()
};
AdfDhtmlSimpleFloat.prototype.setAccessibleAttrs = function(hints) {
  var wrapper = this.getElement();
  var peer = this._getContainedComponentPeer();
  var contentId = AdfRichUIPeer.createSubId(peer.getComponent().getClientId(), AdfDhtmlSimpleFloat._CONTENT_ID);
  var titleId = AdfRichUIPeer.createSubId(peer.getComponent().getClientId(), AdfDhtmlSimpleFloat._TITLE_ID);
  wrapper.setAttribute("role", "dialog");
  wrapper.setAttribute("aria-describedby", contentId);
  wrapper.setAttribute("aria-labelledby", titleId)
};
AdfDhtmlSimpleFloat.prototype.announceOpeningViaLiveRegion = function(hints) {
  if(AdfPage.PAGE.isScreenReaderMode() && !hints[AdfDhtmlPopupWindow.HINT_FOCUS]) {
    var laf = AdfPage.PAGE.getLookAndFeel();
    var documentClientId = AdfPage.PAGE.__getDocumentClientId();
    var liveContainerId = AdfRichUIPeer.CreateSubId(documentClientId, AdfDhtmlDocumentPeer.__GLOBAL_LIVE_CONTAINER_ID);
    var liveContainer = AdfAgent.AGENT.getElementById(liveContainerId);
    var domWindow = AdfPage.PAGE.getDomWindow();
    var liveTextKey = domWindow.AdfSafariMobileAgent && AdfAgent.AGENT instanceof AdfSafariMobileAgent ? "af_panelWindow.INITIAL_FOCUS_LIVE_TEXT_MOBILE" : "af_panelWindow.INITIAL_FOCUS_LIVE_TEXT";
    var liveContent = laf.getTranslatedString(liveTextKey);
    AdfAgent.AGENT.setTextContent(liveContainer, liveContent)
  }
};
AdfDhtmlSimpleFloat.prototype.removeAccessibleAttrs = function() {
  var documentClientId = AdfPage.PAGE.__getDocumentClientId();
  var liveContainerId = AdfRichUIPeer.CreateSubId(documentClientId, AdfDhtmlDocumentPeer.__GLOBAL_LIVE_CONTAINER_ID);
  var liveContainer = AdfAgent.AGENT.getElementById(liveContainerId);
  if(liveContainer) {
    AdfAgent.AGENT.setTextContent(liveContainer, "")
  }
};
AdfDhtmlSimpleFloat.prototype._getMainElement = function(content) {
  var tables = content.getElementsByTagName("table");
  var mainElement = tables[AdfPage.PAGE.isScreenReaderMode() ? 1 : 0];
  AdfAssert.assert(mainElement, "Main Element of floating window must be a table");
  return mainElement
};
AdfDhtmlSimpleFloat.prototype.setDragElement = function(dragElement) {
  this._dragElement = dragElement
};
AdfDhtmlSimpleFloat.prototype.getModal = function(modal) {
  return this._modal
};
AdfDhtmlSimpleFloat.prototype.setModal = function(modal) {
  this._modal = modal
};
AdfDhtmlSimpleFloat.prototype.getInitialFocus = function(initialFocus) {
  return this._initialFocus
};
AdfDhtmlSimpleFloat.prototype.setInitialFocus = function(initialFocus) {
  this._initialFocus = initialFocus
};
AdfDhtmlSimpleFloat.prototype.activate = function() {
  this.raiseToFront();
  this.showAsActive();
  var shadowAnchor = this.getShadowAnchor();
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(shadowAnchor)) {
    AdfDhtmlShadowDecorator.moveShadowDecorator(shadowAnchor)
  }
  if(AdfPage.PAGE.isScreenReaderMode()) {
    this.autoSize()
  }
  if(!AdfFocusUtils.containsFocus(this.GetFocusContent()) && !AdfFocusUtils.isFocusChangePending()) {
    this.FocusOnFirstElement(true)
  }
};
AdfDhtmlSimpleFloat.prototype.showAsActive = function() {
  var containedComponentDomElement = this._getContainedComponentDomElement();
  var childNodes = containedComponentDomElement.childNodes, childCount = childNodes.length;
  for(var i = 0;i < childCount;i++) {
    var childNode = childNodes[i];
    var childStyle = childNode.style;
    if(childNode.getAttribute("_afrPanelWindowBackground") != null) {
      childStyle.display = "none"
    }
  }
  AdfDomUtils.removeCSSClassName(containedComponentDomElement, AdfDhtmlSimpleFloat._INACTIVE_STYLECLASS);
  this.raiseToFront();
  var anchor = this.getShadowAnchor();
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(anchor)) {
    AdfDhtmlShadowDecorator.moveShadowDecorator(anchor);
    AdfDhtmlShadowDecorator.showShadowDecorator(anchor, true)
  }
};
AdfDhtmlSimpleFloat.prototype.showAsInActive = function() {
  var agent = AdfAgent.AGENT;
  var rootElement = this.getElement();
  var rootStyle = rootElement.style;
  var zIndex = rootStyle.zIndex;
  var borderTolerance = 2;
  var containedComponentDomElement = this._getContainedComponentDomElement();
  var w = containedComponentDomElement.offsetWidth;
  var h = containedComponentDomElement.offsetHeight;
  var childNodes = containedComponentDomElement.childNodes, childCount = childNodes.length;
  for(var i = 0, backgroundIndex = 0;i < childCount;i++) {
    var childNode = childNodes[i];
    var childStyle = childNode.style;
    if(childNode.getAttribute("_afrPanelWindowBackground") != null) {
      childStyle.zIndex = zIndex - 1;
      childStyle.marginLeft = backgroundIndex + "px";
      childStyle.marginTop = 3 - backgroundIndex + "px";
      childStyle.width = Math.max(0, w - borderTolerance - 2 * backgroundIndex) + "px";
      childStyle.height = Math.max(0, h - borderTolerance - 2 * (3 - backgroundIndex)) + "px";
      childStyle.display = "block";
      backgroundIndex++
    }else {
      childStyle.zIndex = zIndex
    }
  }
  AdfDomUtils.addCSSClassName(containedComponentDomElement, AdfDhtmlSimpleFloat._INACTIVE_STYLECLASS);
  var anchor = this.getShadowAnchor();
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(anchor)) {
    AdfDhtmlShadowDecorator.moveShadowDecorator(anchor);
    AdfDhtmlShadowDecorator.showShadowDecorator(anchor, true)
  }
};
AdfDhtmlSimpleFloat.prototype.CreateDomElement = function() {
  var page = AdfPage.PAGE;
  var domDocument = page.getDomDocument();
  var popupDiv = domDocument.createElement("div");
  var contentDiv = domDocument.createElement("div");
  popupDiv.appendChild(contentDiv);
  this.SetContentParent(contentDiv);
  var tailElement = domDocument.createElement("div");
  tailElement.setAttribute("role", "presentation");
  AdfDomUtils.addCSSClassName(tailElement, AdfDhtmlPopupWindow._POPUP_TAIL_STYLECLASS);
  popupDiv.appendChild(tailElement);
  this._tailElement = tailElement;
  return popupDiv
};
AdfDhtmlSimpleFloat.prototype.SetContentParent = function(contentParentElement) {
  this._contentElement = contentParentElement
};
AdfDhtmlSimpleFloat.prototype.GetContentParent = function() {
  return this._contentElement
};
AdfDhtmlSimpleFloat.prototype.GetAnimationDurationSkinProperty = function() {
  var peer = this._getContainedComponentPeer();
  AdfAssert.assertPrototype(peer, AdfRichUIPeer);
  return peer.getAnimationDurationSkinProperty()
};
AdfDhtmlSimpleFloat.prototype.GetAnimateSkinProperty = function() {
  var peer = this._getContainedComponentPeer();
  AdfAssert.assertPrototype(peer, AdfRichUIPeer);
  return peer.getAnimateSkinProperty()
};
AdfDhtmlSimpleFloat.prototype.ShouldHideOnClip = function() {
  return false
};
AdfDhtmlSimpleFloat.prototype.handleComponentRemoved = function() {
  AdfDhtmlShadowDecorator.removeShadowDecorator(this.getShadowAnchor());
  AdfDhtmlDialogManager.getInstance().unregisterDialog(this);
  if(this._repositionable) {
    this._repositionable.destroy();
    delete this._repositionable
  }
};
AdfDhtmlSimpleFloat.prototype.handleBindToComponent = function() {
  if(this._repositionable) {
    return
  }
  this.setShadowAnchor(this._getMainElement(this.getContent()));
  var afterAnimation = !this.isAnimating();
  if(afterAnimation) {
    this.CreateShadow(afterAnimation)
  }
  var component = AdfPage.PAGE.findComponent(this._containedComponentId);
  if(component) {
    var peer = component.getPeer();
    this.setDragElement(peer.getDragElement());
    this.initializeRepositionable()
  }
};
AdfDhtmlSimpleFloat.prototype.initializeRepositionable = function() {
  var repositionable = this._repositionable = new AdfRepositionable(this, this._dragElement);
  repositionable.setDragStartHandler(this._dragStartHandler);
  repositionable.setDragEndHandler(this._dragEndHandler)
};
AdfDhtmlSimpleFloat.prototype.HandleEscapeKey = function(event) {
  var peer = this._getContainedComponentPeer();
  if(peer && peer.handleEscapeKey) {
    peer.handleEscapeKey(event)
  }else {
    AdfDhtmlSimpleFloat.superclass.HandleEscapeKey.call(this.event)
  }
};
AdfDhtmlSimpleFloat.prototype.DoShow = function(hints) {
  this.setDragElement(hints[AdfDhtmlPopupWindow.HINT_DRAG_ELEMENT]);
  this.setModal(hints[AdfDhtmlPopupWindow.HINT_MODAL]);
  var dialogManager = AdfDhtmlDialogManager.getInstance();
  dialogManager.registerDialog(this);
  var leftPercentage = hints[AdfDhtmlPopupWindow.HINT_LEFT_POSITION];
  if(leftPercentage && isNaN(leftPercentage)) {
    leftPercentage = parseFloat(leftPercentage)
  }
  this._leftPercentage = leftPercentage;
  var topPercentage = hints[AdfDhtmlPopupWindow.HINT_TOP_POSITION];
  if(topPercentage && isNaN(topPercentage)) {
    topPercentage = parseFloat(topPercentage)
  }
  this._topPercentage = topPercentage;
  AdfDhtmlSimpleFloat.superclass.DoShow.call(this, hints);
  if(this._dragElement) {
    this.initializeRepositionable()
  }
  if(this._modal) {
    AdfPage.PAGE.getModalityManager().pushModal(this.getElement())
  }
  if(hints[AdfDhtmlPopupWindow.HINT_FOCUS]) {
    dialogManager.activateDialog(this)
  }
};
AdfDhtmlSimpleFloat.prototype.show = function(hints) {
  if(hints && hints[AdfRichPopup.HINT_TAIL] && hints[AdfRichPopup.HINT_TAIL] != AdfRichPopup.TAIL_NONE && !AdfPage.PAGE.isScreenReaderMode()) {
    var tailPosition = this.getInitialPopupTailPosition(hints[AdfDhtmlPopupWindow.HINT_ALIGN]);
    this._tailPosition = tailPosition;
    AdfDomUtils.addCSSClassName(this._tailElement, tailPosition);
    var capitalizedValue = hints[AdfRichPopup.HINT_TAIL].charAt(0).toUpperCase() + hints[AdfRichPopup.HINT_TAIL].substring(1);
    AdfDomUtils.addCSSClassName(this.getElement(), "AFDialogTail" + capitalizedValue)
  }else {
    this._tailElement = null
  }
  AdfDhtmlSimpleFloat.superclass.show.call(this, hints)
};
AdfDhtmlSimpleFloat.prototype.destroy = function() {
  AdfDhtmlDialogManager.getInstance().unregisterDialog(this);
  var page = AdfPage.PAGE;
  if(this._modal) {
    page.getModalityManager().popModal(this.getElement())
  }
  if(this._repositionable) {
    this._repositionable.destroy()
  }
  AdfDhtmlSimpleFloat.superclass.destroy.call(this)
};
AdfDhtmlSimpleFloat.prototype._getContainedComponentPeer = function() {
  var containedPeer = null;
  if(this._containedComponentId != null) {
    var containedComponent = AdfPage.PAGE.findComponent(this._containedComponentId);
    if(containedComponent != null) {
      containedPeer = containedComponent.getPeer();
      containedPeer.bind(containedComponent)
    }
  }
  return containedPeer
};
AdfDhtmlSimpleFloat.prototype._getContainedComponentDomElement = function() {
  var containedPeer = this._getContainedComponentPeer();
  if(containedPeer != null) {
    return containedPeer.getDomElement()
  }
  return null
};
AdfDhtmlSimpleFloat.prototype._dragStartHandler = function() {
  var containedComponentDomElement = this._getContainedComponentDomElement();
  AdfDomUtils.addCSSClassName(containedComponentDomElement, AdfDhtmlSimpleFloat._DRAG_STYLECLASS);
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(this.getShadowAnchor())) {
    AdfDhtmlShadowDecorator.showShadowDecorator(this.getShadowAnchor(), false)
  }
  this._isDragging = true;
  if(this.getAlignElement()) {
    this.setAlignElement(null);
    this.Position(AdfRichPopup.ALIGN_OVERLAP)
  }
};
AdfDhtmlSimpleFloat.prototype._dragEndHandler = function() {
  var containedComponentDomElement = this._getContainedComponentDomElement();
  AdfDomUtils.removeCSSClassName(containedComponentDomElement, AdfDhtmlSimpleFloat._DRAG_STYLECLASS);
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(this.getShadowAnchor())) {
    AdfDhtmlShadowDecorator.showShadowDecorator(this.getShadowAnchor(), true)
  }
  delete this._isDragging;
  this.setPosition(this.getTop(), this.getLeft())
};
AdfDhtmlSimpleFloat.prototype.handleActivate = function(focusOnFirstElement) {
  var mgr = AdfDhtmlDialogManager.getInstance();
  if(mgr.getActiveDialog() == this) {
    return false
  }
  if(mgr.activateDialog(this)) {
    if(focusOnFirstElement) {
      this.FocusOnFirstElement();
      return true
    }
    return true
  }
  return false
};
AdfDhtmlSimpleFloat.prototype.isAnimating = function() {
  if(this._isDragging) {
    return true
  }else {
    return AdfDhtmlSimpleFloat.superclass.isAnimating.call(this)
  }
};
AdfDhtmlSimpleFloat.prototype.setDragging = function(dragging) {
  this._isDragging = dragging
};
AdfDhtmlSimpleFloat.prototype.setShadowVisibility = function(visible) {
  var shadowAnchor = this.getShadowAnchor();
  if(visible) {
    if(!AdfDhtmlShadowDecorator.hasShadowDecorator(shadowAnchor)) {
      AdfDhtmlShadowDecorator.createShadowDecorator(shadowAnchor, this.getElement().parentNode)
    }
  }else {
    if(AdfDhtmlShadowDecorator.hasShadowDecorator(shadowAnchor)) {
      AdfDhtmlShadowDecorator.removeShadowDecorator(this.getShadowAnchor())
    }
  }
};
AdfDhtmlSimpleFloat.prototype.getAlignPosition = function() {
  var topPercentage = this._topPercentage;
  var leftPercentage = this._leftPercentage;
  var centerPos = this.CalcAlignPosition(leftPercentage, topPercentage);
  if(!centerPos) {
    return null
  }
  this.setAlignPosition(centerPos);
  return centerPos
};
AdfDhtmlSimpleFloat.prototype.setPosition = function(positionTop, positionLeft) {
  if(this.getAlignElement()) {
    AdfDhtmlSimpleFloat.superclass.setPosition.call(this, positionTop, positionLeft);
    return
  }
  if(!this.isAnimating()) {
    var popupId = this.getPopupClientId();
    AdfAssert.assertString(popupId);
    var popup = AdfPage.PAGE.findComponent(popupId);
    if(popup && popup instanceof AdfRichPopup) {
      var hints = {};
      hints[AdfDhtmlPopupWindow.HINT_LEFT_POSITION] = this._leftPercentage;
      hints[AdfDhtmlPopupWindow.HINT_TOP_POSITION] = this._topPercentage;
      hints[AdfRichPopup.HINT_ALIGN] = AdfRichPopup.ALIGN_OVERLAP;
      hints[AdfRichPopup.HINT_ALIGN_ID] = "";
      popup.getPeer().syncPrivateProperties(popup, hints)
    }
    AdfDhtmlSimpleFloat.superclass.setPosition.call(this, positionTop, positionLeft);
    return
  }
  var agent = AdfAgent.AGENT;
  var windowHeight = agent.getWindowHeight();
  var windowWidth = agent.getWindowWidth();
  var docScrollTop = agent.getBrowserViewportScrollTop();
  var docScrollLeft = agent.getBrowserViewportScrollLeft();
  if(docScrollTop > 0 && agent.getPlatform() == AdfAgent.GECKO_PLATFORM) {
    windowHeight = Math.min(windowHeight, agent.getDomDocument().body.clientHeight)
  }
  var thisHeight = this.getHeight();
  var thisWidth = this.getWidth();
  var topPercentage = 0;
  if(windowHeight > thisHeight) {
    topPercentage = (positionTop - docScrollTop + thisHeight / 2) / windowHeight
  }
  var leftPercentage = 0;
  if(windowWidth > thisWidth) {
    leftPercentage = (positionLeft - docScrollLeft + thisWidth / 2) / windowWidth
  }
  if(!isNaN(topPercentage) && !isNaN(leftPercentage) && topPercentage < 1 && leftPercentage < 1) {
    var top = topPercentage == 0 ? docScrollTop : positionTop;
    var left = leftPercentage == 0 ? docScrollLeft : positionLeft;
    this._topPercentage = topPercentage;
    this._leftPercentage = leftPercentage;
    AdfDhtmlSimpleFloat.superclass.setPosition.call(this, top, left)
  }
};

function AdfDhtmlPopupSelector() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlPopupSelector, AdfDhtmlPopupWindow);
AdfDhtmlPopupSelector.InitClass = function() {
  this._STYLECLASS = "AFPopupSelector";
  this._HEADER_STYLECLASS = "AFPopupSelectorHeader";
  this._HEADER_START_STYLECLASS = "AFPopupSelectorHeaderStart";
  this._HEADER_END_STYLECLASS = "AFPopupSelectorHeaderEnd";
  this._CONTENT_STYLECLASS = "AFPopupSelectorContent";
  this._CONTENT_START_STYLECLASS = "AFPopupSelectorContentStart";
  this._CONTENT_END_STYLECLASS = "AFPopupSelectorContentEnd";
  this._FOOTER_STYLECLASS = "AFPopupSelectorFooter";
  this._FOOTER_START_STYLECLASS = "AFPopupSelectorFooterStart";
  this._FOOTER_END_STYLECLASS = "AFPopupSelectorFooterEnd";
  this._CONTENT_ID = "content"
};
AdfDhtmlPopupSelector.prototype.Init = function() {
  AdfDhtmlPopupSelector.superclass.Init.call(this)
};
AdfDhtmlPopupSelector.prototype.CreateDomElement = function() {
  var page = AdfPage.PAGE;
  var domDocument = page.getDomDocument();
  var rootElement = domDocument.createElement("div");
  var laf = page.getLookAndFeel();
  var table = this.CreateTable(3, 3);
  table.cellPadding = 0;
  table.cellSpacing = 0;
  table.role = "presentation";
  rootElement.appendChild(table);
  var tds = table.getElementsByTagName("td");
  tds[1].innerHTML = "&#160;";
  tds[3].innerHTML = "&#160;";
  tds[5].innerHTML = "&#160;";
  tds[7].innerHTML = "&#160;";
  this.SetContentParent(tds[4]);
  var tailElement = domDocument.createElement("div");
  tailElement.setAttribute("role", "presentation");
  AdfDomUtils.addCSSClassName(tailElement, AdfDhtmlPopupWindow._POPUP_TAIL_STYLECLASS);
  rootElement.appendChild(tailElement);
  this._tailElement = tailElement;
  var windowClass = AdfDhtmlPopupSelector;
  var myClass = AdfDhtmlPopupSelector;
  AdfDomUtils.addCSSClassName(rootElement, laf.getStyleClass(windowClass._STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[0], laf.getStyleClass(myClass._HEADER_START_STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[1], laf.getStyleClass(myClass._HEADER_STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[2], laf.getStyleClass(myClass._HEADER_END_STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[3], laf.getStyleClass(myClass._CONTENT_START_STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[4], laf.getStyleClass(myClass._CONTENT_STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[5], laf.getStyleClass(myClass._CONTENT_END_STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[6], laf.getStyleClass(myClass._FOOTER_START_STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[7], laf.getStyleClass(myClass._FOOTER_STYLECLASS));
  AdfDomUtils.addCSSClassName(tds[8], laf.getStyleClass(myClass._FOOTER_END_STYLECLASS));
  return rootElement
};
AdfDhtmlPopupSelector.prototype.NeedsCloseLink = function() {
  return AdfAgent.AGENT.getCapabilities()[AdfAgent.CAP_TOUCH_SCREEN] != AdfAgent.CAP_TOUCH_SCREEN_NONE
};
AdfDhtmlPopupSelector.prototype.SetContentParent = function(contentParentElement) {
  this._contentElement = contentParentElement
};
AdfDhtmlPopupSelector.prototype.GetContentParent = function() {
  return this._contentElement
};
AdfDhtmlPopupSelector.prototype.GetAnimationDurationSkinProperty = function() {
  return".AFPopupSelector-tr-open-animation-duration"
};
AdfDhtmlPopupSelector.prototype.GetAnimateSkinProperty = function() {
  return".AFPopupSelector-tr-animate"
};
AdfDhtmlPopupSelector.prototype.setAccessibleAttrs = function(hints) {
  var wrapper = this.getElement();
  wrapper.setAttribute("role", "dialog");
  var ariaLabel = hints[AdfDhtmlPopupWindow.ARIA_LABEL];
  if(ariaLabel) {
    wrapper.setAttribute("aria-label", ariaLabel)
  }
  var componentId = hints[AdfDhtmlPopupWindow.HINT_COMPONENT_CLIENT_ID];
  var component = page.findComponent(componentId);
  AdfAssert.assert(component != null, "Cannot show a popup element without a valid component");
  if(component) {
    var titleId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPopupWindow.__POPUP_TITLE_ID);
    wrapper.setAttribute("aria-labelledby", titleId);
    var contentId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPopupSelector._CONTENT_ID);
    wrapper.setAttribute("aria-describedby", contentId)
  }
};
AdfDhtmlPopupSelector.prototype.show = function(hints) {
  if(hints && hints[AdfDhtmlPopupWindow.HINT_ALIGN] && !hints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT]) {
    var launchSourceId = hints[AdfRichPopup.HINT_LAUNCH_ID];
    if(launchSourceId) {
      hints[AdfRichPopup.HINT_ALIGN_ID] = launchSourceId;
      hints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT] = AdfAgent.AGENT.getElementById(launchSourceId)
    }
  }
  if(hints && hints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT] && !hints[AdfDhtmlPopupWindow.HINT_ALIGN]) {
    hints[AdfDhtmlPopupWindow.HINT_ALIGN] = AdfRichPopup.ALIGN_AFTER_START
  }
  if(hints && hints[AdfRichPopup.HINT_TAIL] && hints[AdfRichPopup.HINT_TAIL] != AdfRichPopup.TAIL_NONE && !AdfPage.PAGE.isScreenReaderMode()) {
    var tailPosition = this.getInitialPopupTailPosition(hints[AdfDhtmlPopupWindow.HINT_ALIGN]);
    this._tailPosition = tailPosition;
    AdfDomUtils.addCSSClassName(this._tailElement, tailPosition);
    var capitalizedValue = hints[AdfRichPopup.HINT_TAIL].charAt(0).toUpperCase() + hints[AdfRichPopup.HINT_TAIL].substring(1);
    AdfDomUtils.addCSSClassName(this.getElement(), "AFPopupTail" + capitalizedValue)
  }else {
    this._tailElement = null
  }
  AdfDhtmlPopupSelector.superclass.show.call(this, hints)
};

function AdfInputComboboxListOfValuesWindow() {
  this.Init()
}
AdfObject.createSubclass(AdfInputComboboxListOfValuesWindow, AdfDhtmlPopupSelector);
AdfInputComboboxListOfValuesWindow.InitClass = function() {
  this._STYLECLASS = "af|inputComboboxListOfValues::dropdown-popup";
  this._CONTENT_STYLECLASS = "af|inputComboboxListOfValues::dropdown-popup-content";
  this._DROPDOWN_CONTENT_ID = "dropDownContent";
  this._POPUP_SEARCH_SUBID = "popupsearch";
  this._STRETCH_DROPDOWN_TABLE = "af|inputComboboxListOfValues-tr-stretch-dropdown-table"
};
AdfInputComboboxListOfValuesWindow.prototype.CreateDomElement = function() {
  var page = AdfPage.PAGE;
  var laf = page.getLookAndFeel();
  var domDocument = page.getDomDocument();
  var rootElement = domDocument.createElement("div");
  AdfDomUtils.addCSSClassName(rootElement, laf.getStyleClass(AdfInputComboboxListOfValuesWindow._STYLECLASS));
  var contentsDiv = domDocument.createElement("div");
  AdfDomUtils.addCSSClassName(contentsDiv, laf.getStyleClass(AdfInputComboboxListOfValuesWindow._CONTENT_STYLECLASS));
  rootElement.appendChild(contentsDiv);
  this.SetContentParent(contentsDiv);
  return rootElement
};
AdfInputComboboxListOfValuesWindow.prototype.DoShow = function(hints) {
  AdfInputComboboxListOfValuesWindow.superclass.DoShow.call(this, hints);
  var agent = AdfAgent.AGENT;
  var sourceContentContainer;
  var alignElement = sourceContentContainer = hints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT];
  AdfAssert.assertDomNode(alignElement, "input combobox list of values popup alignment element");
  if(alignElement.tagName == "INPUT") {
    sourceContentContainer = alignElement.parentNode
  }
  AdfAssert.assertDomElement(sourceContentContainer, "SPAN");
  var popupContentWidthInt = Math.max(100, sourceContentContainer.offsetWidth - 2);
  var clientId = this.getPopupClientId();
  AdfAssert.assertString(clientId, "input combobox list of values popup client id");
  var popupContentId = AdfRichUIPeer.CreateSubId(clientId, AdfInputComboboxListOfValuesWindow._DROPDOWN_CONTENT_ID);
  var table = AdfPage.PAGE.findComponent(popupContentId);
  if(table) {
    var stretchTable = AdfPage.PAGE.getLookAndFeel().getSkinProperty(AdfInputComboboxListOfValuesWindow._STRETCH_DROPDOWN_TABLE);
    AdfAssert.assertPrototype(table, AdfUIComponent);
    if(stretchTable && "true" == stretchTable) {
      table.getPeer().setInlineStyleProperty(table, "min-width", popupContentWidthInt + "px")
    }else {
      table.getPeer().setInlineStyleProperty(table, "width", popupContentWidthInt + "px")
    }
    AdfPage.PAGE.doResizeNotify(table)
  }else {
    var searchLinkId = AdfRichUIPeer.CreateSubId(clientId, AdfInputComboboxListOfValuesWindow._POPUP_SEARCH_SUBID);
    var searchLink = AdfPage.PAGE.findComponent(searchLinkId);
    if(searchLink) {
      AdfAssert.assertPrototype(searchLink, AdfUIComponent);
      searchLink.getPeer().setInlineStyleProperty(searchLink, "width", popupContentWidthInt + "px")
    }
  }
};
AdfInputComboboxListOfValuesWindow.prototype.ShouldHideOnClip = function() {
  return false
};

function AdfDhtmlNoteWindowPopupSelector(autoDismissType) {
  this.Init(autoDismissType)
}
AdfObject.createSubclass(AdfDhtmlNoteWindowPopupSelector, AdfDhtmlPopupSelector);
AdfDhtmlNoteWindowPopupSelector.InitClass = function() {
  this._STYLE_CLASS = "AFNoteWindow";
  this._RIGHT_STYLE_CLASS = "AFNoteWindowRight";
  this._CONE_STYLE_CLASS = "AFNoteWindowCone";
  this._CONE_STYLE_CLASS_TR = "AFNoteWindowConeTR";
  this._CONE_STYLE_CLASS_BR = "AFNoteWindowConeBR";
  this._CONE_STYLE_CLASS_BL = "AFNoteWindowConeBL";
  this._CONE_BORDER_STYLE_CLASS = "AFNoteWindowConeBorder";
  this._CONE_BORDER_RIGHT_STYLE_CLASS = "AFNoteWindowConeBorderRight";
  this._CONTENT_STYLE_CLASS = "AFNoteWindowContent"
};
AdfDhtmlNoteWindowPopupSelector.prototype.Init = function(autoDismissType) {
  AdfDhtmlNoteWindowPopupSelector.superclass.Init.call(this);
  this._autoDismissType = autoDismissType;
  this.setShadowAnchor(this.GetContentParent())
};
AdfDhtmlNoteWindowPopupSelector.prototype.setAccessibleAttrs = function(hints) {
  var wrapper = this.getElement();
  wrapper.setAttribute("role", "dialog");
  var componentId = hints[AdfDhtmlPopupWindow.HINT_COMPONENT_CLIENT_ID];
  var component = page.findComponent(componentId);
  AdfAssert.assert(component != null, "Cannot show a popup element without a valid component");
  if(component) {
    var titleId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPopupWindow.__POPUP_TITLE_ID);
    wrapper.setAttribute("aria-labelledby", titleId);
    var contentId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPopupSelector._CONTENT_ID);
    wrapper.setAttribute("aria-describedby", contentId)
  }
};
AdfDhtmlNoteWindowPopupSelector.prototype.removeAccessibleAttrs = function() {
  var launchSourceId = this.getLaunchSourceId();
  if(launchSourceId) {
    var launchElement = AdfAgent.AGENT.getElementById(launchSourceId);
    if(launchElement) {
      launchElement.removeAttribute("aria-describedby")
    }
  }
  var documentClientId = AdfPage.PAGE.__getDocumentClientId();
  var liveContainerId = AdfRichUIPeer.CreateSubId(documentClientId, AdfDhtmlDocumentPeer.__GLOBAL_LIVE_CONTAINER_ID);
  var liveContainer = AdfAgent.AGENT.getElementById(liveContainerId);
  AdfAgent.AGENT.setTextContent(liveContainer, "")
};
AdfDhtmlNoteWindowPopupSelector.prototype.announceOpeningViaLiveRegion = function(hints) {
  if(AdfPage.PAGE.isScreenReaderMode()) {
    var laf = AdfPage.PAGE.getLookAndFeel();
    var documentClientId = AdfPage.PAGE.__getDocumentClientId();
    var liveContainerId = AdfRichUIPeer.CreateSubId(documentClientId, AdfDhtmlDocumentPeer.__GLOBAL_LIVE_CONTAINER_ID);
    var liveContainer = AdfAgent.AGENT.getElementById(liveContainerId);
    var liveTextKey = "AFTooltipLiveText";
    var liveContent = laf.getTranslatedString(liveTextKey);
    AdfAgent.AGENT.setTextContent(liveContainer, liveContent)
  }
};
AdfDhtmlNoteWindowPopupSelector.prototype.show = function(hints) {
  var launchSourceId = null;
  if(hints) {
    launchSourceId = hints[AdfRichPopup.HINT_LAUNCH_ID]
  }
  if(launchSourceId) {
    var launchElement = AdfAgent.AGENT.getElementById(launchSourceId);
    if(launchElement == null) {
      AdfLogger.LOGGER.warning("Attempting to show noteWindow but lauch element is not present.");
      hints[AdfRichPopup.HINT_LAUNCH_ID] = null;
      launchSourceId = null
    }
  }
  if(launchSourceId) {
    if(!hints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT]) {
      hints[AdfRichPopup.HINT_ALIGN_ID] = launchSourceId;
      hints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT] = AdfAgent.AGENT.getElementById(launchSourceId)
    }
    var page = AdfPage.PAGE;
    if(page.isScreenReaderMode() && !this.hasSpecialRenderingForScreenReader()) {
      var launchSource = page.findComponent(launchSourceId);
      if(launchSource) {
        launchSource.addEventListener(AdfUIInputEvent.KEY_DOWN_EVENT_TYPE, this._launchSourceHandleComponentKeyDown, this)
      }
    }
  }
  AdfDhtmlNoteWindowPopupSelector.superclass.show.call(this, hints)
};
AdfDhtmlNoteWindowPopupSelector.prototype.hide = function() {
  var page = AdfPage.PAGE;
  if(page.isScreenReaderMode() && !this.hasSpecialRenderingForScreenReader()) {
    var launchSourceId = this.getLaunchSourceId();
    if(launchSourceId) {
      var launchSource = AdfPage.PAGE.findComponent(launchSourceId);
      if(launchSource) {
        launchSource.removeEventListener(AdfUIInputEvent.KEY_DOWN_EVENT_TYPE, this._launchSourceHandleComponentKeyDown, this)
      }
    }
  }
  AdfDhtmlNoteWindowPopupSelector.superclass.hide.call(this)
};
AdfDhtmlNoteWindowPopupSelector.createTextDom = function(noteText) {
  var noteTextDom = null;
  if(noteText.indexOf("<html>") == 0 && noteText.lastIndexOf("</html>") == noteText.length - 7) {
    noteTextDom = AdfDomUtils.cleanHtml(AdfPage.PAGE.getDocument(), noteText.substring(6, noteText.length - 7))
  }else {
    noteTextDom = AdfPage.PAGE.getDocument().createElement("div");
    AdfAgent.AGENT.setTextContent(noteTextDom, noteText)
  }
  return noteTextDom
};
AdfDhtmlNoteWindowPopupSelector.prototype.CreateDomElement = function() {
  var agent = AdfAgent.AGENT;
  var domDocument = AdfPage.PAGE.getDomDocument();
  var rootElement = domDocument.createElement("div");
  var table = this.CreateTable(1, 3);
  table.role = "presentation";
  rootElement.appendChild(table);
  var tds = table.rows[0].cells, cell0 = tds[0], cell2 = tds[2];
  cell0.onclick = cell2.onclick = this.createCallback(this._onClickConeCell);
  agent.addBubbleEventListener(cell0, "focusin", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(cell0, "focus", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(cell2, "focusin", AdfAgent.eatEventCallback);
  agent.addBubbleEventListener(cell2, "focus", AdfAgent.eatEventCallback);
  if(this._autoDismissType == AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT) {
    cell0.onmouseover = cell2.onmouseover = this.createCallback(this._onMouseOverConeCell);
    cell0.onmouseout = cell2.onmouseout = this.createCallback(this._onMouseOutConeCell)
  }
  var contentElement = tds[1];
  tds[1].className = AdfDhtmlNoteWindowPopupSelector._STYLE_CLASS;
  this._coneElement = domDocument.createElement("div");
  this.SetContentParent(contentElement);
  return rootElement
};
AdfDhtmlNoteWindowPopupSelector.prototype.GetAnimationDurationSkinProperty = function() {
  return".AFNoteWindow-tr-open-animation-duration"
};
AdfDhtmlNoteWindowPopupSelector.prototype.GetAnimateSkinProperty = function() {
  return".AFNoteWindow-tr-animate"
};
AdfDhtmlNoteWindowPopupSelector.prototype.setPosition = function(top, left) {
  var positionManagerIndex = this.GetPositionManagerIndex();
  if(positionManagerIndex >= 0) {
    var behavior = AdfPage.PAGE.getPositionManager().getComputedBehavior(positionManagerIndex);
    if(behavior) {
      var verticalAnchor = behavior.verticalBehavior.floatingElementAnchor;
      var horizontalAnchor = behavior.horizontalBehavior.floatingElementAnchor;
      var contentParent = this.GetContentParent();
      var tds = contentParent.parentNode.parentNode.parentNode;
      if(tds.tagName == "TABLE") {
        tds = tds.rows[0].cells
      }else {
        tds = tds.parentNode.rows[0].cells
      }
      var cell1 = tds[1];
      var isAchorRight = horizontalAnchor == AdfDhtmlPositionManager.RIGHT, isAchorBottom = verticalAnchor == AdfDhtmlPositionManager.BOTTOM;
      var cell0 = 0, cell2 = 2;
      if(!AdfPage.PAGE.getLocaleContext().isRightToLeft()) {
        cell0 = tds[0];
        cell2 = tds[2]
      }else {
        cell0 = tds[2];
        cell2 = tds[0]
      }
      if(isAchorRight) {
        cell0.className = "";
        cell0.innerHTML = "&#160;";
        cell1.className = AdfDhtmlNoteWindowPopupSelector._RIGHT_STYLE_CLASS;
        cell2.className = AdfDhtmlNoteWindowPopupSelector._CONE_BORDER_RIGHT_STYLE_CLASS;
        cell2.style.verticalAlign = isAchorBottom ? "bottom" : "top";
        this._coneElement.className = isAchorBottom ? AdfDhtmlNoteWindowPopupSelector._CONE_STYLE_CLASS_BR : AdfDhtmlNoteWindowPopupSelector._CONE_STYLE_CLASS_TR;
        cell2.appendChild(this._coneElement)
      }else {
        cell2.className = "";
        cell2.innerHTML = "&#160;";
        cell1.className = AdfDhtmlNoteWindowPopupSelector._STYLE_CLASS;
        cell0.className = AdfDhtmlNoteWindowPopupSelector._CONE_BORDER_STYLE_CLASS;
        cell0.style.verticalAlign = isAchorBottom ? "bottom" : "top";
        this._coneElement.className = isAchorBottom ? AdfDhtmlNoteWindowPopupSelector._CONE_STYLE_CLASS_BL : AdfDhtmlNoteWindowPopupSelector._CONE_STYLE_CLASS;
        cell0.appendChild(this._coneElement)
      }
    }
  }
  AdfDhtmlNoteWindowPopupSelector.superclass.setPosition.call(this, top, left)
};
AdfDhtmlNoteWindowPopupSelector.prototype._onClickConeCell = function(evt) {
  var agent = AdfAgent.AGENT;
  evt = evt || agent.getDomWindow().event;
  var pos = agent.getMousePosition(evt);
  AdfPage.PAGE.getAutoDismissalManager().dismiss(this.getElement().parentNode);
  var doc = AdfPage.PAGE.getDocument();
  var bottomElement = doc.elementFromPoint ? doc.elementFromPoint(pos.x, pos.y) : agent.elementFromPagePoint(pos.x, pos.y);
  if(bottomElement) {
    var eventObj = agent.copyEvent(evt);
    agent.dispatchEvent(bottomElement, eventObj);
    if(bottomElement.focus != null) {
      AdfFocusUtils.focusElement(bottomElement)
    }
    agent.eatEvent(evt)
  }
};
AdfDhtmlNoteWindowPopupSelector.prototype._onMouseOverConeCell = function(evt) {
  if(!this._onMOConeCellTimeoutCallback) {
    this._onMOConeCellTimeoutCallback = this.createCallback(this._onMOConeCellTimeout)
  }
  var domWindow = AdfPage.PAGE.getDomWindow();
  if(this._mouseOverTimeout) {
    domWindow.clearTimeout(this._mouseOverTimeout)
  }
  this._mouseOverTimeout = domWindow.setTimeout(this._onMOConeCellTimeoutCallback, 500)
};
AdfDhtmlNoteWindowPopupSelector.prototype._onMOConeCellTimeout = function() {
  delete this._mouseOverTimeout;
  AdfPage.PAGE.getAutoDismissalManager().dismiss(this.getElement().parentNode)
};
AdfDhtmlNoteWindowPopupSelector.prototype._onMouseOutConeCell = function(evt) {
  var domWindow = AdfPage.PAGE.getDomWindow();
  if(this._mouseOverTimeout) {
    domWindow.clearTimeout(this._mouseOverTimeout);
    delete this._mouseOverTimeout
  }
};
AdfDhtmlNoteWindowPopupSelector.prototype.activate = function() {
  var focusHint = this.GetFocusOnOpen();
  this.SetFocusOnOpen(true);
  this.FocusOnFirstElement();
  this.SetFocusOnOpen(focusHint)
};
AdfDhtmlNoteWindowPopupSelector.prototype.HandleKeyNavigation = function(event) {
  var launchSourceId = this.getLaunchSourceId();
  if(launchSourceId) {
    var agent = AdfAgent.AGENT;
    var page = AdfPage.PAGE;
    var launcher = page.findComponent(launchSourceId);
    if(launcher) {
      launcher.focus();
      agent.eatEvent(event)
    }
  }
};
AdfDhtmlNoteWindowPopupSelector.prototype._launchSourceHandleComponentKeyDown = function(componentEvent) {
  if(!componentEvent.isCanceled()) {
    var keyCode = componentEvent.getKeyCode();
    if(keyCode == AdfKeyStroke.F6_KEY) {
      AdfAgent.AGENT.preventDefault(componentEvent.getNativeEvent());
      if(this.activate) {
        this.activate();
        componentEvent.cancel();
        componentEvent.stopBubbling()
      }
    }
  }
};
AdfDhtmlNoteWindowPopupSelector.prototype.autoSize = function() {
  AdfDhtmlNoteWindowPopupSelector.superclass.autoSize.call(this);
  var maxWidth = this.GetMaxWidth();
  if(maxWidth && this.getWidth() >= maxWidth) {
    var content = this.getContent();
    var msgContent = AdfDomUtils.getFirstElementMatch(content, false, AdfDhtmlNoteWindowPopupSelector._match);
    if(msgContent) {
      var msgContentStyle = msgContent.style;
      msgContentStyle.overflow = "hidden";
      var agent = AdfAgent.AGENT;
      var coneElement = this._coneElement;
      if(agent.getPlatform() == AdfAgent.IE_PLATFORM && coneElement) {
        var contentWidth = maxWidth - coneElement.offsetWidth;
        msgContentStyle.width = contentWidth + "px"
      }
    }
  }
};
AdfDhtmlNoteWindowPopupSelector._match = function(element) {
  var tagName = element.tagName;
  if(tagName == "DIV" && AdfDomUtils.containsCSSClassName(element, AdfDhtmlNoteWindowPopupSelector._CONTENT_STYLE_CLASS)) {
    return true
  }
  return false
};

function AdfDhtmlPopupMenu() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlPopupMenu, AdfDhtmlPopupWindow);
AdfDhtmlPopupMenu.InitClass = function() {
  AdfDhtmlPopupMenu._POPUP_STYLE_CLASS = "AFPopupMenuPopup";
  AdfDhtmlPopupMenu._CONTENT_STYLE_CLASS = "AFPopupMenuContent"
};
AdfDhtmlPopupMenu.prototype.Init = function() {
  AdfDhtmlPopupMenu.superclass.Init.call(this);
  this.setShadowAnchor(this._mainElement)
};
AdfDhtmlPopupMenu.prototype.CreateDomElement = function() {
  var domDocument = AdfPage.PAGE.getDomDocument();
  var rootElement = domDocument.createElement("div");
  var mainElement = domDocument.createElement("div");
  var contentElement = domDocument.createElement("div");
  AdfDomUtils.addCSSClassName(mainElement, AdfDhtmlPopupMenu._POPUP_STYLE_CLASS);
  AdfDomUtils.addCSSClassName(contentElement, AdfDhtmlPopupMenu._CONTENT_STYLE_CLASS);
  rootElement.appendChild(mainElement);
  mainElement.appendChild(contentElement);
  this._mainElement = mainElement;
  this._contentElement = contentElement;
  return rootElement
};
AdfDhtmlPopupMenu.prototype.GetContentParent = function() {
  return this._contentElement
};
AdfDhtmlPopupMenu.prototype.CreateShadow = function(afterAnimation) {
  if(!this.GetAnimationDuration() || afterAnimation) {
    AdfDhtmlShadowDecorator.createShadowDecorator(this.getShadowAnchor(), this.getElement(), true)
  }
};
AdfDhtmlPopupMenu.prototype.DoResizeNotifyDom = function(content) {
};
AdfDhtmlPopupMenu.prototype.SaveScrollValues = function(domElement) {
};
AdfDhtmlPopupMenu.prototype.RestoreScrollValues = function(domElement) {
};
AdfDhtmlPopupMenu.prototype.GetAnimationDurationSkinProperty = function() {
  return"af|menu-tr-open-animation-duration"
};
AdfDhtmlPopupMenu.prototype.GetAnimateSkinProperty = function() {
  return"af|menu-tr-animate"
};
AdfDhtmlPopupMenu.prototype.GetLaunchSourceElement = function() {
  var launchSourceId = AdfMenuUtils.GetLastOpenedRootMenuId();
  return launchSourceId ? AdfAgent.AGENT.getElementById(launchSourceId) : null
};
AdfDhtmlPopupMenu.prototype.GetFocusContent = function() {
  return this.getElement()
};
AdfDhtmlPopupMenu.prototype.ShouldHideOnClip = function() {
  return false
};
AdfDhtmlPopupMenu.prototype.activate = function() {
  this.autoSize();
  this.FocusOnFirstElement()
};

function AdfDhtmlTooltipManager() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlTooltipManager);
AdfDhtmlTooltipManager.prototype.Init = function() {
  AdfDhtmlTooltipManager.superclass.Init.call(this)
};
AdfDhtmlTooltipManager._handleMouseMove = function(evt) {
  var myInstance = AdfDhtmlTooltipManager._theInstance;
  if(myInstance._rollOverBoundsChecker) {
    var pos = AdfAgent.AGENT.getMousePosition(evt);
    myInstance._checkMouseExit(pos.x, pos.y, myInstance._rollOverBoundsChecker)
  }
};
AdfDhtmlTooltipManager.prototype.showRollOverLabel = function(containerElement) {
  AdfAssert.assertDomElement(containerElement);
  if(containerElement == this._currRollOverTarget) {
    return
  }
  this._currRollOverTarget = containerElement;
  var agent = AdfAgent.AGENT;
  var domDocument = agent.getDomDocument();
  agent.addBubbleEventListener(domDocument, "mousemove", AdfDhtmlTooltipManager._handleMouseMove);
  var pos = agent.getElementPosition(containerElement);
  var rollOverTop = pos.y;
  var rollOverLeft = pos.x;
  if(this._offsetLeft != null) {
    rollOverTop -= this._offsetTop;
    rollOverLeft -= this._offsetLeft
  }
  var rollOverWindow = this._getRollOverWindow();
  var contentNode = containerElement.cloneNode(true);
  agent.modifyIdsInDomSubTree(contentNode, false, "_afrtt");
  rollOverWindow.setContent(contentNode);
  rollOverWindow.show(rollOverTop, rollOverLeft);
  if(this._offsetLeft == null) {
    var ttStyle = agent.getComputedStyle(rollOverWindow.getElement());
    var oX, oY;
    oX = this._offsetLeft = AdfAgent.getCSSLengthAsInt(ttStyle.borderLeftWidth) + AdfAgent.getCSSLengthAsInt(ttStyle.paddingLeft);
    oY = this._offsetTop = AdfAgent.getCSSLengthAsInt(ttStyle.borderTopWidth) + AdfAgent.getCSSLengthAsInt(ttStyle.paddingTop);
    rollOverTop -= oY;
    rollOverLeft -= oX;
    rollOverWindow.setPosition(rollOverTop, rollOverLeft)
  }
  var boundsCheck = agent.getElementPageBounds(containerElement);
  boundsCheck.notify = this._hideRollOverCallback;
  this._rollOverBoundsChecker = boundsCheck
};
AdfDhtmlTooltipManager.prototype.hideRollOverLabel = function() {
  var rollOverWindow = this._getRollOverWindow();
  rollOverWindow.hide();
  this._currRollOverTarget = null;
  this._rollOverBoundsChecker = null;
  var agent = AdfAgent.AGENT;
  var domDocument = agent.getDomDocument();
  agent.removeBubbleEventListener(domDocument, "mousemove", AdfDhtmlTooltipManager._handleMouseMove)
};
AdfDhtmlTooltipManager.prototype._getRollOverWindow = function() {
  var rollOverWindow = this._rollOverWindow;
  var agent = AdfAgent.getAgent();
  if(rollOverWindow) {
    var domDocument = agent.getDomDocument();
    var element = rollOverWindow.getElement();
    if(!AdfDomUtils.isAncestor(domDocument, element)) {
      rollOverWindow.hide();
      rollOverWindow = null
    }
  }
  if(!rollOverWindow) {
    rollOverWindow = new AdfDhtmlTooltip;
    var redistributeRollOverCallback = this.createCallback(this._redistributeRollOverCallback);
    var rollOverElem = rollOverWindow.getElement();
    rollOverElem.onmousedown = redistributeRollOverCallback;
    rollOverElem.onmouseup = redistributeRollOverCallback;
    rollOverElem.onclick = redistributeRollOverCallback;
    rollOverElem.ondblclick = redistributeRollOverCallback;
    rollOverElem.oncontextmenu = redistributeRollOverCallback;
    agent.disableUserSelect(rollOverElem);
    this._rollOverWindow = rollOverWindow
  }
  return rollOverWindow
};
AdfDhtmlTooltipManager.prototype._hideRollOverCallback = function(event) {
  AdfDhtmlTooltipManager.getInstance().hideRollOverLabel()
};
AdfDhtmlTooltipManager.prototype._redistributeRollOverCallback = function(event) {
  if(!event) {
    event = window.event
  }
  var currRollOverTarget = this._currRollOverTarget;
  if(currRollOverTarget) {
    var agent = AdfAgent.AGENT;
    var dispatchTarget = this._findDispatchEventTarget(event);
    if(dispatchTarget) {
      var newEvent = agent.copyEvent(event);
      var clickOnValidHref = event.type == "click" && agent.getNodeName(dispatchTarget) == "A" && dispatchTarget.href && dispatchTarget.href != "";
      if(clickOnValidHref) {
        var href = dispatchTarget.href;
        if(href.charAt(href.length - 1) == "#" && href.indexOf(agent.getDomWindow().location.pathname) != -1) {
          clickOnValidHref = false
        }
      }
      if(!clickOnValidHref) {
        agent.eatEvent(event)
      }
      agent.dispatchEvent(dispatchTarget, newEvent)
    }
    return true
  }
};
AdfDhtmlTooltipManager.prototype._findDispatchEventTarget = function(event) {
  var agent = AdfAgent.getAgent();
  var target = agent.getEventTarget(event);
  var targetId = target.id;
  var currRollOverTarget = this._currRollOverTarget;
  var dispatchEventTarget = currRollOverTarget;
  if(currRollOverTarget) {
    var tooltipRoot = this._rollOverWindow.getElement();
    while(target != tooltipRoot && (targetId == null || targetId == "")) {
      var theParentNode = target.parentNode;
      if(theParentNode == null) {
        break
      }
      target = theParentNode;
      targetId = target.id
    }
    if(targetId != null && targetId != "") {
      var actualId = targetId.replace(/::_afrtt/, "");
      dispatchEventTarget = agent.getElementById(actualId)
    }
  }
  return dispatchEventTarget
};
AdfDhtmlTooltipManager.prototype._checkMouseExit = function(pageX, pageY, bounds) {
  if(pageX < bounds.left || pageX > bounds.right || pageY < bounds.top || pageY > bounds.bottom) {
    bounds.notify()
  }
};
AdfDhtmlTooltipManager.getInstance = function() {
  if(this._theInstance == null) {
    this._theInstance = new AdfDhtmlTooltipManager
  }
  return this._theInstance
};

function AdfDhtmlTooltip() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlTooltip, AdfAbstractFloatingElement);
AdfDhtmlTooltip.prototype.Init = function() {
  AdfDhtmlTooltip.superclass.Init.call(this, AdfDhtmlZOrderManager.FLOATINGTYPE_TOOLTIP);
  this.setElement(this._createHtml());
  this.hide()
};
AdfDhtmlTooltip.prototype._createHtml = function() {
  var cel = document.createElement("div");
  cel.className = "AFTooltip";
  this._contentElement = cel;
  return cel
};
AdfDhtmlTooltip.prototype.setContent = function(toolTipContent) {
  var contentElement = this._contentElement;
  if(contentElement.firstChild) {
    contentElement.removeChild(contentElement.firstChild)
  }
  contentElement.appendChild(toolTipContent);
  var style = toolTipContent.style;
  style.textDecoration = "none";
  style.display = "block";
  if(style.width) {
    style.width = ""
  }
};
AdfDhtmlTooltip.prototype.show = function(topPos, leftPos) {
  AdfDhtmlTooltip.superclass.show.call(this);
  this.setPosition(topPos, leftPos);
  this.raiseToFront();
  var element = this.getElement();
  if(AdfDhtmlShadowDecorator.hasShadowDecorator(element)) {
    AdfDhtmlShadowDecorator.moveShadowDecorator(element);
    AdfDhtmlShadowDecorator.showShadowDecorator(element, true)
  }else {
    AdfDhtmlShadowDecorator.createShadowDecorator(element, element.parentNode)
  }
};
AdfDhtmlTooltip.prototype.hide = function() {
  AdfDhtmlTooltip.superclass.hide.call(this);
  AdfDhtmlShadowDecorator.showShadowDecorator(this.getElement(), false)
};

var AdfPopupScopingUtils = new Object;
AdfPopupScopingUtils.markAsScopingContainer = function(element) {
  AdfAssert.assertDomElement(element)
};
AdfPopupScopingUtils.scope = function(element) {
  AdfAssert.assertDomElement(element)
};
AdfPopupScopingUtils.unscope = function(element) {
  AdfAssert.assertDomElement(element)
};
AdfPopupScopingUtils.isScopingContainer = function(element) {
  AdfAssert.assertDomElement(element);
  return false
};
AdfPopupScopingUtils.isOutOfScope = function(element) {
  AdfAssert.assertDomElement(element);
  return false
};

function AdfDhtmlElementAnimator(itemState, duringAnimate, afterAnimate, callbackParameters, component, frameMethod, frameCount) {
  this.Init(itemState, duringAnimate, afterAnimate, callbackParameters, component, frameMethod, frameCount)
}
AdfObject.createSubclass(AdfDhtmlElementAnimator);
AdfDhtmlElementAnimator.prototype.Init = function(itemState, duringAnimate, afterAnimate, callbackParameters, component, frameMethod, frameCount) {
  AdfDhtmlElementAnimator.superclass.Init.call(this);
  this._itemState = itemState;
  this._duringAnimate = duringAnimate;
  this._afterAnimate = afterAnimate;
  this._callbackParameters = callbackParameters;
  this._component = component;
  this._startTime = (new Date).getTime();
  this._frameMethod = frameMethod;
  this._frameCount = frameCount
};
AdfDhtmlElementAnimator.prototype.stop = function() {
  this._stopped = true;
  window.clearInterval(this._intervalID);
  var callbackParameters = this._callbackParameters;
  this._destroy();
  return callbackParameters
};
AdfDhtmlElementAnimator.animate = function(frameMethod, timeLength, items, duringAnimate, afterAnimate, callbackParameters, component) {
  var agent = AdfAgent.AGENT;
  var itemCount = items.length;
  var itemState = new Array(itemCount);
  for(var i = 0;i < itemCount;i++) {
    var item = items[i];
    var finalProperties = item["properties"];
    var element = item["element"];
    var state = {};
    AdfDhtmlElementAnimator._gatherSizeState(state, finalProperties, element, "width", "offsetWidth", "borderLeftWidth", "borderRightWidth");
    AdfDhtmlElementAnimator._gatherSizeState(state, finalProperties, element, "height", "offsetHeight", "borderTopWidth", "borderBottomWidth");
    var finalAlpha = finalProperties["alpha"];
    if(finalAlpha != null && !isNaN(finalAlpha)) {
      var initialAlpha = element.style.opacity;
      if(element.ownerDocument.all && initialAlpha == null) {
        try {
          initialAlpha = element.filters.alpha.opacity / 100
        }catch(problem) {
        }
      }
      if(initialAlpha == null || "" + initialAlpha == "") {
        initialAlpha = 1
      }
      state["opacity"] = [initialAlpha, finalAlpha / 100, true]
    }
    var finalZIndex = finalProperties["zIndex"];
    if(finalZIndex != null && !isNaN(finalZIndex)) {
      state["zIndex"] = [AdfDhtmlElementAnimator._getElementZIndex(agent, element), finalZIndex, true]
    }
    var finalTop = finalProperties["top"];
    if(finalTop != null && !isNaN(finalTop)) {
      var styleTop = element.style.top;
      var top = styleTop && styleTop != "auto" ? parseInt(styleTop) : agent.getElementTop(element);
      state["top"] = [top, finalTop]
    }
    var finalLeft = finalProperties["left"];
    if(finalLeft != null && !isNaN(finalLeft)) {
      var styleLeft = element.style.left;
      var left = styleLeft && styleLeft != "auto" ? parseInt(styleLeft) : agent.getElementLeft(element);
      state["left"] = [left, finalLeft]
    }
    var finalRight = finalProperties["right"];
    if(finalRight != null && !isNaN(finalRight)) {
      var styleRight = element.style.right;
      var right = styleRight && styleRight != "auto" ? parseInt(styleRight) : agent.getElementLeft(element);
      state["right"] = [right, finalRight]
    }
    var finalOffsetTop = finalProperties["offsetTop"];
    if(finalOffsetTop != null && !isNaN(finalOffsetTop)) {
      state["offsetTop"] = [element.offsetTop, finalOffsetTop]
    }
    var finalOffsetLeft = finalProperties["offsetLeft"];
    if(finalOffsetLeft != null && !isNaN(finalOffsetLeft)) {
      state["offsetLeft"] = [element.offsetLeft, finalOffsetLeft]
    }
    var finalScrollLeft = finalProperties["scrollLeft"];
    if(finalScrollLeft != null && !isNaN(finalScrollLeft)) {
      state["scrollLeft"] = [element.scrollLeft, finalScrollLeft, true]
    }
    var finalScrollTop = finalProperties["scrollTop"];
    if(finalScrollTop != null && !isNaN(finalScrollTop)) {
      state["scrollTop"] = [element.scrollTop, finalScrollTop, true]
    }
    itemState[i] = {"element":element, "state":state}
  }
  var frameCount = Math.max(1, Math.round(timeLength * AdfDhtmlElementAnimator._FRAMES_PER_MILLISECOND));
  if(!AdfPage.PAGE.isAnimationEnabled()) {
    frameCount = 1
  }
  return(new AdfDhtmlElementAnimator(itemState, duringAnimate, afterAnimate, callbackParameters, component, frameMethod, frameCount))._start()
};
AdfDhtmlElementAnimator._getElementZIndex = function(agent, element) {
  var style = agent.getComputedStyle(element);
  if(style) {
    var zIndex = style.zIndex;
    if(!isNaN(zIndex)) {
      return zIndex
    }
  }
  return 0
};
AdfDhtmlElementAnimator._gatherSizeState = function(state, finalProperties, element, sizeKey, currentSizeProperty, borderStartKey, borderEndKey) {
  var finalSize = finalProperties[sizeKey];
  if(finalSize != null && !isNaN(finalSize)) {
    var initialSize = element[currentSizeProperty];
    if(element.style != null) {
      initialSize = AdfDhtmlElementAnimator._subtractBorderSize(initialSize, element.style[borderStartKey]);
      initialSize = AdfDhtmlElementAnimator._subtractBorderSize(initialSize, element.style[borderEndKey])
    }
    state[sizeKey] = [initialSize, finalSize]
  }
};
AdfDhtmlElementAnimator.prototype._start = function() {
  this._animationStepCallback = this.createCallback(this._animationStep);
  var intervalLength = Math.floor(1 / AdfDhtmlElementAnimator._FRAMES_PER_MILLISECOND);
  this._intervalID = self.setInterval(this._animationStepCallback, intervalLength);
  return this
};
AdfDhtmlElementAnimator.prototype._destroy = function() {
  delete this._itemState;
  delete this._duringAnimate;
  delete this._afterAnimate;
  delete this._callbackParameters;
  delete this._component;
  delete this._startTime;
  delete this._intervalID;
  delete this._animationStepCallback;
  delete this._stopped
};
AdfDhtmlElementAnimator.prototype._animationStep = function() {
  if(this._stopped || this._intervalID == null) {
    return
  }
  if(this._performAfterAnimate) {
    window.clearInterval(this._intervalID);
    if(this._afterAnimate != null) {
      this._afterAnimate(this._callbackParameters)
    }
    if(this._component) {
      var component = this._component;
      if(!component.getPeer()) {
        var clientId = this._component.getClientId();
        component = AdfPage.PAGE.findComponent(clientId)
      }
      if(component) {
        AdfPage.PAGE.__queueDescendantResizeNotifySource(component);
        AdfPage.PAGE.__doDescendantResizeNotify()
      }
    }
    this._destroy();
    return
  }
  var currentTime = (new Date).getTime();
  var elapsedMillis = currentTime - this._startTime;
  var itemState = this._itemState;
  var itemCount = itemState.length;
  var frameIndex = Math.round(AdfDhtmlElementAnimator._FRAMES_PER_MILLISECOND * elapsedMillis);
  var frameCount = this._frameCount;
  var frameMethod = this._frameMethod;
  var isLastFrame = false;
  if(frameIndex >= frameCount - 1) {
    isLastFrame = true;
    this._performAfterAnimate = true
  }
  for(var j = 0;j < itemCount;j++) {
    var currentItemState = itemState[j];
    var element = currentItemState["element"];
    var state = currentItemState["state"];
    var pValue;
    for(var x in state) {
      pValue = isLastFrame ? state[x][1] : AdfDhtmlElementAnimator._computeFrameProperty(frameIndex, parseFloat(state[x][0]), parseFloat(state[x][1]), frameMethod, frameCount);
      if(!state[x][2]) {
        pValue += "px"
      }
      AdfDhtmlElementAnimator._renderFrameProperty(element, pValue, x)
    }
  }
  var duringAnimate = this._duringAnimate;
  if(duringAnimate != null) {
    duringAnimate(this._callbackParameters)
  }
};
AdfDhtmlElementAnimator._renderFrameProperty = function(element, pValue, pName) {
  if(pName == "opacity" && AdfAgent.AGENT.getPlatform() == AdfAgent.IE_PLATFORM) {
    var ieOpacity = pValue * 100;
    if(ieOpacity == 1) {
      element.style.filter = ""
    }else {
      element.style.filter = "alpha(opacity=" + ieOpacity + ")"
    }
  }else {
    if(pName == "offsetLeft") {
      element.style.left = pValue
    }else {
      if(pName == "offsetTop") {
        element.style.top = pValue
      }else {
        if(pName == "scrollLeft") {
          AdfAgent.AGENT.scrollToPos(element, pValue, null)
        }else {
          if(pName == "scrollTop") {
            AdfAgent.AGENT.scrollToPos(element, null, pValue)
          }else {
            element.style[pName] = pValue
          }
        }
      }
    }
  }
};
AdfDhtmlElementAnimator._computeFrameProperty = function(frameNumber, initialValue, finalValue, frameMethod, lastFrameNumber) {
  var time0To1 = frameNumber / lastFrameNumber;
  var dist0To1;
  switch(frameMethod) {
    case AdfDhtmlElementAnimator.FRAME_METHOD_CONSTANT_SPEED:
      dist0To1 = time0To1;
      break;
    case AdfDhtmlElementAnimator.FRAME_METHOD_ACCELERATING:
      dist0To1 = Math.pow(time0To1, 2);
      break;
    case AdfDhtmlElementAnimator.FRAME_METHOD_DECELERATING:
      dist0To1 = 1 - Math.pow(time0To1 - 1, 2);
      break;
    case AdfDhtmlElementAnimator.FRAME_METHOD_SLOW_FAST_SLOW:
      dist0To1 = (Math.cos(time0To1 * Math.PI + Math.PI) + 1) / 2;
      break;
    default:
      AdfLogger.LOGGER.severe("Invalid AdfDhtmlElementAnimator framing method: " + frameMethod);
      dist0To1 = 1
  }
  var distDelta = finalValue - initialValue;
  return initialValue + dist0To1 * distDelta
};
AdfDhtmlElementAnimator._subtractBorderSize = function(value, borderWidthStyle) {
  if(borderWidthStyle != null && borderWidthStyle != "") {
    value -= parseInt(borderWidthStyle)
  }
  return value
};
AdfDhtmlElementAnimator._FRAMES_PER_MILLISECOND = 0.06;
AdfDhtmlElementAnimator.FRAME_METHOD_CONSTANT_SPEED = 0;
AdfDhtmlElementAnimator.FRAME_METHOD_ACCELERATING = 1;
AdfDhtmlElementAnimator.FRAME_METHOD_DECELERATING = 2;
AdfDhtmlElementAnimator.FRAME_METHOD_SLOW_FAST_SLOW = 3;

AdfUIPeer.createPeerClass(AdfUIPeer, "AdfRichUIPeer");
AdfRichUIPeer.createPeerClass = function(theSuperclass, peerName, stateless, peerInitialization) {
  AdfAssert.assertFunction(theSuperclass);
  AdfAssert.assertString(peerName);
  AdfAssert.assertBooleanOrNull(stateless);
  AdfAssert.assertObjectOrNull(peerInitialization);
  var theClass = AdfUIPeer.createPeerClass(theSuperclass, peerName, peerInitialization);
  var isSuperClassStateless = theSuperclass.STATELESS;
  if(!isSuperClassStateless) {
    isSuperClassStateless = true
  }
  if(stateless == null) {
    stateless = isSuperClassStateless
  }else {
    AdfAssert.assert(!stateless || isSuperClassStateless, "Can't create a stateless subclass of a stateful superclass")
  }
  theClass.InitClass = AdfRichUIPeer.DefaultInitClass;
  theClass.STATELESS = stateless !== false;
  return theClass
};
AdfRichUIPeer.createInnerPeerClassWithSubId = function(theSuperclass, peerName, subId) {
  var innerClassAdaptorName = peerName + "Shim";
  var adapterClass = AdfRichUIPeer.createPeerClass(theSuperclass, innerClassAdaptorName, false);
  var innerClass = AdfRichUIPeer.createPeerClass(adapterClass, peerName, false);
  var initFunc = new Function("c", "o", "AdfRichUIPeer._innerInit.call(this," + innerClassAdaptorName + ", c, o)");
  adapterClass.prototype._subId = subId;
  adapterClass.prototype.Init = initFunc;
  adapterClass.prototype.initialize = AdfRichUIPeer._innerSubIdInitialize;
  return innerClass
};
AdfRichUIPeer._innerSubIdInitialize = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  var outerId = component.getClientId();
  var innerId = AdfRichUIPeer.CreateSubId(outerId, this._subId);
  var domNode = AdfAgent.AGENT.getElementById(innerId);
  AdfAssert.assertDomNode(domNode);
  AdfAssert.assert(!this.constructor.STATELESS);
  this.InitDomElement(component, domNode);
  this.BindToComponent(component, domNode)
};
AdfRichUIPeer._innerInit = function(clazz, component, outerThis) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assertPrototype(outerThis, AdfRichUIPeer);
  this.outerThis = outerThis;
  clazz.superclass.Init.call(this, component)
};
AdfRichUIPeer.isComponentContainedByElement = function(component, element) {
  if(component && element) {
    var compNode = AdfRichUIPeer.getDomNodeForComponent(component);
    return AdfDomUtils.isAncestorOrSelf(element, compNode)
  }
  return false
};
AdfRichUIPeer.prototype.getDomDocument = function() {
  return AdfPage.PAGE.getDomDocument()
};
AdfRichUIPeer.prototype.getComponentParent = function(component) {
  this.bind(component);
  var parent = AdfRichUIPeer.getFirstAncestorComponent(this.getDomNode().parentNode);
  if(parent) {
    var ourClientId = component.getClientId();
    var nmSeparator = ourClientId.lastIndexOf(":");
    if(nmSeparator != -1) {
      var namingContainerId = ourClientId.substring(0, nmSeparator);
      if(!AdfAgent.AGENT.getElementById(namingContainerId)) {
        var namingContainer = AdfPage.PAGE.findComponent(namingContainerId);
        if(namingContainer) {
          var ncParent = namingContainer.getParent();
          while(ncParent) {
            if(ncParent === parent) {
              parent = namingContainer;
              break
            }
            ncParent = ncParent.getParent()
          }
        }
      }
    }
  }
  return parent
};
AdfRichUIPeer.prototype._truncateClientId = function(component, descendantComponent, childClientId, skipArray) {
  this.TruncateClientId(component, descendantComponent, childClientId, skipArray);
  var parentComponent = this.getComponentParent(component);
  if(parentComponent != null) {
    parentComponent.getPeer()._truncateClientId(parentComponent, descendantComponent, childClientId, skipArray)
  }
};
AdfRichUIPeer.prototype.TruncateClientId = function(component, descendantComponent, childClientId, skipArray) {
};
AdfRichUIPeer.TruncateClientIdOnceImpl = function(component, descendantComponent, childClientId, skipArray) {
  var clientId = component.getClientId();
  var clientIdDepth = AdfStrings.count(clientId, ":");
  skipArray.push(clientIdDepth + 1)
};
AdfRichUIPeer.prototype.getAbsoluteId = function(component, clientId) {
  var skipArray = [];
  this._truncateClientId(component, component, clientId, skipArray);
  var removeCount = skipArray.length;
  if(removeCount > 0) {
    var clientIdFragments = clientId.split(":");
    var clientIdFragmentCount = clientIdFragments.length;
    if(clientIdFragmentCount == 1) {
      return clientId
    }
    var absoluteIdFragments = new Array(clientIdFragmentCount - removeCount);
    var absoluteIdIndex = 0;
    var skipArrayIndex = removeCount - 1;
    var currSkipIndex = skipArray[skipArrayIndex];
    for(var clientIdIndex = 0;clientIdIndex < clientIdFragmentCount;clientIdIndex++) {
      if(clientIdIndex != currSkipIndex) {
        absoluteIdFragments[absoluteIdIndex++] = clientIdFragments[clientIdIndex]
      }else {
        currSkipIndex = skipArrayIndex > 0 ? skipArray[--skipArrayIndex] : -1
      }
    }
    return absoluteIdFragments.join(":")
  }else {
    return clientId
  }
};
AdfRichUIPeer.prototype.getAbsoluteLocator = function(component, clientId) {
  var absoluteLocator;
  var replaceArray = [];
  this._fixClientId(component, component, clientId, replaceArray);
  var replaceCount = replaceArray.length;
  if(replaceCount > 0) {
    var clientIdFragments = clientId.split(":");
    var clientIdFragmentCount = clientIdFragments.length;
    if(replaceCount > clientIdFragmentCount) {
      return clientId
    }
    var absoluteLocatorFragments = new Array(clientIdFragmentCount - replaceCount);
    var absoluteIdIndex = 0;
    var replaceArrayIndex = replaceCount - 1;
    var currReplaceIndex = replaceArray[replaceArrayIndex][0];
    for(var clientIdIndex = 0;clientIdIndex < clientIdFragmentCount;clientIdIndex++) {
      if(clientIdIndex == currReplaceIndex) {
        var itemValue = replaceArray[replaceArrayIndex][1];
        if(itemValue != null) {
          var parentIndex = absoluteIdIndex > 0 ? absoluteIdIndex - 1 : 0;
          absoluteLocatorFragments[parentIndex] = absoluteLocatorFragments[parentIndex] + "[" + replaceArray[replaceArrayIndex][1] + "]"
        }
        currReplaceIndex = replaceArrayIndex > 0 ? replaceArray[--replaceArrayIndex][0] : -1
      }else {
        absoluteLocatorFragments[absoluteIdIndex++] = clientIdFragments[clientIdIndex]
      }
    }
    absoluteLocator = absoluteLocatorFragments.join(":")
  }else {
    absoluteLocator = clientId
  }
  if(window.AdfDhtmlIteratorPeer) {
    absoluteLocator = AdfDhtmlIteratorPeer.fixupIteratorAbsoluteLocator(absoluteLocator, component)
  }
  return absoluteLocator
};
AdfRichUIPeer.prototype.convertLocatorToClientId = function(component, stampKey) {
  AdfAssert.assert(false, "Incorrect use of [] locator notation for component :" + component)
};
AdfRichUIPeer.getLocatorByDomElement = function(domElement, component) {
  AdfAssert.assertDomElement(domElement);
  var thePage = AdfPage.PAGE;
  var calledWithComponent = component != null;
  var idStartIndex;
  var id;
  var clientId;
  if(!calledWithComponent) {
    for(var element = domElement;element && (!component || component.getProperty("nested"));element = element.parentNode) {
      clientId = element.id;
      if(component && component.getProperty("nested")) {
        component = component.getParent()
      }else {
        if(clientId) {
          idStartIndex = clientId.lastIndexOf(":");
          id = clientId.substr(idStartIndex + 1);
          if(id.indexOf(AdfRichUIPeer._FILTER_PREFIX) == 0) {
            idStartIndex++;
            clientId = clientId.substr(0, idStartIndex) + clientId.substr(idStartIndex + AdfRichUIPeer._FILTER_PREFIX.length)
          }
          component = thePage.findComponent(clientId)
        }
      }
    }
  }
  if(component) {
    var peer = component.getPeer();
    if(peer) {
      peer.bind(component);
      var bestMatchSubId = peer.GetBestMatchSubId(domElement);
      var absoluteLocator = component.getAbsoluteLocator();
      if(bestMatchSubId) {
        return absoluteLocator + "#" + bestMatchSubId
      }else {
        var absoluteLocatorForParentComponent;
        clientId = domElement.id;
        idStartIndex = clientId.lastIndexOf(":");
        if(idStartIndex > 0) {
          clientId = clientId.substr(0, idStartIndex);
          component = thePage.findComponent(clientId);
          if(component && !calledWithComponent) {
            absoluteLocatorForParentComponent = AdfRichUIPeer.getLocatorByDomElement(domElement, component)
          }
          if(absoluteLocatorForParentComponent != null && absoluteLocatorForParentComponent.indexOf("#") > 0) {
            return absoluteLocatorForParentComponent
          }
        }
        return absoluteLocator
      }
    }
  }
  return null
};
AdfRichUIPeer.prototype.GetBestMatchSubId = function(domElement) {
  if(this.GetSubIdDomElement == AdfRichUIPeer.prototype.GetSubIdDomElement) {
    return null
  }else {
    AdfAssert.failedInAbstractFunction()
  }
};
AdfRichUIPeer.prototype._fixClientId = function(component, childComponent, descComponentClientId, replaceArray) {
  this.ConvertClientIdToLocator(component, childComponent, descComponentClientId, replaceArray);
  var parentComponent = this.getComponentParent(component);
  if(parentComponent != null) {
    parentComponent.getPeer()._fixClientId(parentComponent, component, descComponentClientId, replaceArray)
  }
};
AdfRichUIPeer.prototype.ConvertClientIdToLocator = function(component, childComponent, descComponentClientId, replaceArray) {
};
AdfRichUIPeer.prototype.getDescendantComponents = function(component, children) {
  var node;
  if(component instanceof AdfRichPopup) {
    node = AdfDhtmlPopupPeer.getContentDom(component)
  }else {
    node = AdfRichUIPeer.getDomElementForComponent(component)
  }
  AdfAssert.assertDomElement(node);
  return AdfAgent.AGENT.getDescendantComponentsForNode(node, children)
};
AdfRichUIPeer.prototype.getComponentProperty = function(component, propertyName) {
  var getterFunc = this.constructor._componentPropertyGetters[propertyName];
  if(getterFunc) {
    this.bind(component);
    return getterFunc.call(this, component, this.getDomElement())
  }
};
AdfRichUIPeer.prototype.getReadyState = function(component) {
  this.bind(component);
  return this.GetReadyState()
};
AdfRichUIPeer.prototype.GetReadyState = function() {
  if(this.getComponent()._xhrInProgress) {
    return AdfUIComponent.STATE_LOADING
  }
  return AdfUIComponent.STATE_COMPLETE
};
AdfRichUIPeer.prototype.getInlineEditor = function(component, event) {
  this.bind(component);
  return this.GetInlineEditor(event)
};
AdfRichUIPeer.prototype.GetInlineEditor = function(event) {
  return null
};
AdfRichUIPeer.prototype.getDragTransferable = function(component, inputEvent) {
  this.bind(component);
  return this.GetDragTransferable(inputEvent)
};
AdfRichUIPeer.prototype.GetDragTransferable = function(inputEvent) {
  return null
};
AdfRichUIPeer.prototype.getDragOverFeedback = function(component, inputEvent) {
  this.bind(component);
  return this.GetDragOverFeedback(inputEvent)
};
AdfRichUIPeer.prototype.GetDragOverFeedback = function(inputEvent) {
  return AdfRichUIPeer.CreateDraggableNode(this.getDomElement())
};
AdfRichUIPeer.prototype.applyDragReadyState = function(component, inputEvent) {
  this.bind(component);
  return this.ApplyDragReadyState(inputEvent)
};
AdfRichUIPeer.prototype.clearDragReadyState = function(component, dragReadyObj) {
  this.bind(component);
  this.ClearDragReadyState(dragReadyObj)
};
AdfRichUIPeer.prototype.applyDragSourceState = function(component, inputEvent) {
  this.bind(component);
  return this.ApplyDragSourceState(inputEvent)
};
AdfRichUIPeer.prototype.clearDragSourceState = function(component, dragSourceObj) {
  this.bind(component);
  this.ClearDragSourceState(dragSourceObj)
};
AdfRichUIPeer.prototype.ApplyDragReadyState = function(inputEvent) {
  var elem = this.getDomContentElement();
  AdfDomUtils.addCSSClassName(elem, AdfRichUIPeer.DRAG_READY_STYLECLASS);
  return elem
};
AdfRichUIPeer.prototype.ClearDragReadyState = function(dragReadyObj) {
  AdfAssert.assertDomElement(dragReadyObj);
  AdfDomUtils.removeCSSClassName(dragReadyObj, AdfRichUIPeer.DRAG_READY_STYLECLASS)
};
AdfUIPeer.prototype.ApplyDragSourceState = function(inputEvent) {
  var elem = this.getDomContentElement();
  AdfDomUtils.addCSSClassName(elem, AdfRichUIPeer.DRAG_SOURCE_STYLECLASS);
  return elem
};
AdfUIPeer.prototype.ClearDragSourceState = function(dragSourceObj) {
  AdfAssert.assertDomElement(dragSourceObj);
  AdfDomUtils.removeCSSClassName(dragSourceObj, AdfRichUIPeer.DRAG_SOURCE_STYLECLASS)
};
AdfRichUIPeer.CreateDraggableNode = function(domNode) {
  return AdfAgent.AGENT.createDraggableNode(domNode)
};
AdfRichUIPeer.prototype.replaceDomElement = function(component, newElement, oldElement) {
  this.bind(component);
  this.ReplaceDomElement(newElement, oldElement)
};
AdfRichUIPeer.prototype.ReplaceDomElement = function(newElement, oldElement) {
  AdfPage.PAGE.__replaceDomElement(newElement, oldElement)
};
AdfRichUIPeer.prototype.domReplaceNotify = function(component, domNode) {
  this.bind(component);
  return this.DomReplaceNotify(domNode)
};
AdfRichUIPeer.prototype.DomReplaceNotify = function(domNode) {
  return domNode
};
AdfRichUIPeer.createSubId = function(clientId, name) {
  var subIdArray = AdfRichUIPeer._CREATE_SUB_ID_ARRAY;
  subIdArray[0] = clientId;
  subIdArray[2] = name;
  return subIdArray.join("")
};
AdfRichUIPeer.CreateSubId = AdfRichUIPeer.createSubId;
AdfRichUIPeer._sliceArgumentsArray = function(theArguments, startIndex) {
  var argCount = theArguments.length;
  var arrayLength = argCount - startIndex;
  if(arrayLength > 0) {
    var outArray = new Array(arrayLength);
    var inIndex = startIndex;
    for(var outIndex = 0;outIndex < arrayLength;inIndex++, outIndex++) {
      outArray[outIndex] = theArguments[inIndex]
    }
    return outArray
  }else {
    return null
  }
};
AdfRichUIPeer.addSuppressedPPRAttributes = function(theClass, propertyNames) {
  AdfRichUIPeer._addSuppressedPPRAttributes(theClass, AdfRichUIPeer._sliceArgumentsArray(arguments, 1))
};
AdfRichUIPeer._addSuppressedPPRAttributes = function(theClass, propertyNames) {
  AdfAssert.assertFunction(theClass);
  var pprSuppressedProperties = theClass._pprSuppressedProperties;
  if(pprSuppressedProperties == null) {
    pprSuppressedProperties = new Object;
    theClass._pprSuppressedProperties = pprSuppressedProperties;
    if(theClass != AdfRichUIPeer) {
      var superClassProperties = theClass.superclass.constructor._pprSuppressedProperties;
      for(var currProperty in superClassProperties) {
        pprSuppressedProperties[currProperty] = true
      }
    }
  }
  if(propertyNames) {
    var propertyCount = propertyNames.length;
    for(var i = 0;i < propertyCount;i++) {
      var currArg = propertyNames[i];
      AdfAssert.assertString(currArg);
      pprSuppressedProperties[currArg] = true
    }
  }
};
AdfRichUIPeer.addComponentPropertyGetters = function(theClass, propertyNames) {
  AdfRichUIPeer._addComponentPropertyGetters(theClass, AdfRichUIPeer._sliceArgumentsArray(arguments, 1))
};
AdfRichUIPeer._addComponentPropertyGetters = function(theClass, propertyNames) {
  AdfRichUIPeer._initializeCallbacks(theClass, "_componentPropertyGetters", AdfRichUIPeer._GET_COMPONENT_FORMAT, null, propertyNames)
};
AdfRichUIPeer.addDomEventHandlers = function(theClass, domEventTypes) {
  AdfRichUIPeer._addDomEventHandlers(theClass, AdfRichUIPeer._sliceArgumentsArray(arguments, 1))
};
AdfRichUIPeer._addDomEventHandlers = function(theClass, domEventTypes) {
  AdfRichUIPeer._initializeCallbacks(theClass, "_domEventHandlers", AdfRichUIPeer._HANDLE_DOM_EVENT_FORMAT, AdfDhtmlLookAndFeel.EVENT_TYPE_TO_CAMEL_CASE_MAP, domEventTypes)
};
AdfRichUIPeer.addComponentEventHandlers = function(theClass, componentEventTypes) {
  AdfRichUIPeer._addComponentEventHandlers(theClass, AdfRichUIPeer._sliceArgumentsArray(arguments, 1))
};
AdfRichUIPeer._addComponentEventHandlers = function(theClass, componentEventTypes) {
  AdfRichUIPeer._initializeCallbacks(theClass, "_componentEventHandlers", AdfRichUIPeer._HANDLE_COMPONENT_EVENT_FORMAT, null, componentEventTypes)
};
AdfRichUIPeer.addComponentPropertyChanges = function(theClass, propertyNames) {
  AdfRichUIPeer._addComponentPropertyChanges(theClass, AdfRichUIPeer._sliceArgumentsArray(arguments, 1))
};
AdfRichUIPeer._addComponentPropertyChanges = function(theClass, propertyNames) {
  AdfRichUIPeer._initializeCallbacks(theClass, "_componentPropertyChanges", AdfRichUIPeer._PROPETY_CHANGED_FORMAT, null, propertyNames)
};
AdfRichUIPeer._initializeCallbacks = function(theClass, callbackMapPropertyName, callbackFormat, transformationMap, callbackBases) {
  AdfAssert.assertFunction(theClass);
  AdfAssert.assertString(callbackMapPropertyName);
  AdfAssert.assertArray(callbackFormat);
  AdfAssert.assertObjectOrNull(transformationMap);
  AdfAssert.assertArrayOrNull(callbackBases);
  var ourPrototype = theClass.prototype;
  var transformedName;
  var callbackMap = theClass[callbackMapPropertyName];
  if(callbackMap == null) {
    callbackMap = new Object;
    theClass[callbackMapPropertyName] = callbackMap;
    if(theClass != AdfRichUIPeer) {
      var superClassCallbacks = theClass.superclass.constructor[callbackMapPropertyName];
      for(var baseCallbackName in superClassCallbacks) {
        transformedName = transformationMap != null ? transformationMap[baseCallbackName] : baseCallbackName;
        callbackFormat[1] = AdfStrings.initUpperCase(transformedName);
        callbackMap[baseCallbackName] = ourPrototype[callbackFormat.join("")]
      }
    }
  }
  if(callbackBases != null) {
    var callbackCount = callbackBases.length;
    for(var callbackIndex = 0;callbackIndex < callbackCount;callbackIndex++) {
      var baseCallbackName = callbackBases[callbackIndex];
      transformedName = transformationMap != null ? transformationMap[baseCallbackName] : baseCallbackName;
      callbackFormat[1] = AdfStrings.initUpperCase(transformedName);
      var callbackName = callbackFormat.join("");
      var callback = ourPrototype[callbackName];
      if(AdfAssert.DEBUG) {
        AdfAssert.assert(callback, "No callback for:" + callbackName + " on " + AdfObject.getTypeName(theClass))
      }
      callbackMap[baseCallbackName] = callback
    }
  }
};
AdfRichUIPeer.prototype.ComponentPropertyChanged = function(propertyChangeEvent) {
  var propertyName = propertyChangeEvent.getPropertyName();
  var component = propertyChangeEvent.getSource();
  var ourClass = this.constructor;
  var changeFunc = ourClass._componentPropertyChanges[propertyName];
  var handledChange = false;
  if(changeFunc) {
    this.bind(component);
    handledChange = changeFunc.call(this, component, this.getDomElement(), propertyChangeEvent.getNewValue(), propertyChangeEvent.getOldValue());
    if(handledChange === undefined) {
      handledChange = true
    }
  }
  if(handledChange) {
    AdfPage.PAGE.__queueDescendantResizeNotifySource(component)
  }else {
    if(!(propertyName in ourClass._pprSuppressedProperties)) {
      var propertyKey = component.getPropertyKeys()[propertyName];
      if(propertyKey != null && !propertyKey[AdfUIComponent.PROPERTY_DISCONNECTED]) {
        AdfPage.PAGE.addPartialTargets(component)
      }
    }
  }
};
AdfRichUIPeer.prototype.ComponentVisibleChanged = function(component, domElement, newValue, oldValue) {
  AdfAssert.assertBoolean(newValue);
  var parentHandledChange = false;
  var parentComponent = component.getParent();
  if(parentComponent) {
    var parentPeer = parentComponent.getPeer();
    if(parentPeer && parentPeer.needsChildVisibilityChanges()) {
      parentPeer.bind(parentComponent);
      parentHandledChange = parentPeer.ChildVisibilityChanged(component, domElement, newValue)
    }
  }
  if(!parentHandledChange) {
    AdfDomUtils.setVisible(domElement, newValue);
    if(newValue) {
      AdfPage.PAGE.doResizeNotifyDom(domElement, false)
    }
  }
};
AdfRichUIPeer.prototype.GetComponentVisible = function(component, domElement) {
  return AdfDomUtils.isVisible(domElement)
};
AdfRichUIPeer.prototype.GetComponentId = function(component, domElement) {
  var clientId = component.getClientId();
  var idStartIndex = clientId.lastIndexOf(":");
  return clientId.substr(idStartIndex + 1)
};
AdfRichUIPeer.prototype.ComponentInlineStyleChanged = function(component, domElement, newValue, oldValue) {
  AdfAssert.assertStringOrNull(newValue);
  if(newValue == null) {
    newValue = ""
  }
  var currStyle = domElement.style.cssText;
  if(currStyle != null) {
    if(oldValue == null) {
      if(currStyle[currStyle.length - 1] != ";") {
        currStyle = currStyle + ";"
      }
      newValue = currStyle + newValue
    }else {
      if(oldValue.length < currStyle.length) {
        var index = currStyle.indexOf(oldValue);
        if(index == 0) {
          oldValue = currStyle.substring(oldValue.length);
          if(oldValue[oldValue.length - 1] != ";") {
            oldValue = oldValue + ";"
          }
          newValue = oldValue + newValue
        }else {
          if(index > 0) {
            newValue = currStyle.substring(0, index) + newValue
          }
        }
      }
    }
  }
  domElement.style.cssText = newValue
};
AdfRichUIPeer.prototype.ComponentStyleClassChanged = function(component, domElement, newValue, oldValue) {
  AdfAssert.assertStringOrNull(newValue);
  if(oldValue != null) {
    AdfDomUtils.removeCSSClassName(domElement, oldValue)
  }
  AdfDomUtils.addCSSClassName(domElement, newValue)
};
AdfRichUIPeer.prototype.getInlineStyleProperty = function(component, propName) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  var domElement = AdfRichUIPeer.getDomElementForComponent(component);
  var style = domElement.style;
  var domPropertyName = AdfAgent.AGENT.getDomForCSSPropertyName(propName);
  return style[domPropertyName]
};
AdfRichUIPeer.prototype.setInlineStyleProperty = function(component, propName, propValue) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  var domElement = AdfRichUIPeer.getDomElementForComponent(component);
  var style = domElement.style;
  var domPropertyName = AdfAgent.AGENT.getDomForCSSPropertyName(propName);
  style[domPropertyName] = propValue
};
AdfRichUIPeer.prototype.setBusy = function(component, isBusy) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assertBoolean(isBusy);
  var domElement = AdfRichUIPeer.getDomContentElementForComponent(component);
  if(domElement == null) {
    return
  }
  if(AdfDomUtils.addOrRemoveCSSClassName(isBusy, domElement, AdfRichUIPeer.BUSY_STYLECLASS)) {
    this.bind(component);
    this.SetBusy(isBusy)
  }
};
AdfRichUIPeer.prototype.SetBusy = function(isBusy) {
  AdfAssert.assertBoolean(isBusy)
};
AdfRichUIPeer.prototype.isBusy = function() {
  return false
};
AdfRichUIPeer.registerKeyStroke = function(component, keystroke, keyPressedCallback) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assertPrototype(keystroke, AdfKeyStroke);
  AdfAssert.assertFunction(keyPressedCallback);
  AdfPage.PAGE.registerKeyStroke(keystroke, AdfRichUIPeer._keystrokeCallback, {clientId:component.getClientId(), callback:keyPressedCallback})
};
AdfRichUIPeer.unregisterKeyStroke = function(component, keystroke) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assertPrototype(keystroke, AdfKeyStroke);
  AdfPage.PAGE.unregisterKeyStroke(keystroke, component.getClientId())
};
AdfRichUIPeer._keystrokeCallback = function(keystroke) {
  AdfAssert.assertPrototype(keystroke, AdfKeyStroke);
  var peerComponent = AdfPage.PAGE.findComponent(this.clientId);
  if(peerComponent == null) {
    return false
  }
  var peer = peerComponent.getPeer();
  peer.bind(peerComponent);
  return this.callback.call(peer, keystroke)
};
AdfRichUIPeer.getDomElementForComponent = function(component) {
  AdfAssert.assertObject(component);
  return AdfAgent.AGENT.getElementById(component.getClientId())
};
AdfRichUIPeer.getDomNodeForComponent = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  var domNode = AdfAgent.AGENT.getElementById(component.getClientId());
  if(!domNode) {
    var peer = component.getPeer();
    if(peer) {
      domNode = peer.getDomNode()
    }
    if(!domNode) {
      domNode = AdfRichUIPeer.GetDomNodeForCommentComponent(component)
    }
  }
  return domNode
};
AdfRichUIPeer.GetDomNodeForCommentComponent = function(component) {
  var parentId = component.getProperty("_parentId");
  var commentString = "compS|" + component.getClientId();
  var startElement = AdfAgent.AGENT.getElementById(parentId);
  if(startElement) {
    var firstChild = startElement.firstChild;
    if(firstChild) {
      return AdfRichUIPeer._getCommentNodeForComponent(firstChild, commentString)
    }
  }
  var theBody = AdfPage.PAGE.getDomDocument().body;
  var commentNode = AdfRichUIPeer._findCommentNodeWithContent(theBody, commentString);
  if(commentNode != null) {
    return commentNode
  }
  AdfAssert.assert(false, "Incorrect use of AdfRichUIPeer.GetDomNodeForCommentComponent." + component);
  return null
};
AdfRichUIPeer._findCommentNodeWithContent = function(ancestorNode, commentString) {
  AdfAssert.assertDomNode(ancestorNode);
  var nodeType = ancestorNode.nodeType;
  if(nodeType == 8) {
    if(commentString == ancestorNode.nodeValue) {
      return ancestorNode
    }
  }else {
    if(nodeType == 1) {
      var children = ancestorNode.childNodes;
      var childCount = children.length;
      for(var i = 0;i < childCount;i++) {
        var child = children[i];
        var foundCommentNode = AdfRichUIPeer._findCommentNodeWithContent(child, commentString);
        if(foundCommentNode != null) {
          return foundCommentNode
        }
      }
    }
  }
  return null
};
AdfRichUIPeer.getDomContentElementForComponent = function(component) {
  var domNode = AdfRichUIPeer.getDomNodeForComponent(component);
  if(domNode == null) {
    return null
  }
  return this.GetDomContentElementForNode(domNode)
};
AdfRichUIPeer.GetDomContentElementForNode = function(domNode) {
  AdfAssert.assertDomNode(domNode);
  if(domNode.nodeType == 8 || domNode.tagName == "NOSCRIPT") {
    domNode = domNode.nextSibling;
    while(domNode && domNode.nodeType != 1) {
      domNode = domNode.nextSibling
    }
  }
  AdfAssert.assertDomElement(domNode);
  return domNode
};
AdfRichUIPeer._getCommentNodeForComponent = function(firstSibling, commentString) {
  var currChild = firstSibling;
  while(currChild) {
    var nodeType = currChild.nodeType;
    if(nodeType == 8) {
      if(commentString == currChild.nodeValue) {
        return currChild
      }
    }else {
      if(nodeType == 1) {
        var id = currChild.id;
        if(!(id && AdfPage.PAGE.findComponent(id))) {
          var firstChild = currChild.firstChild;
          if(firstChild) {
            var domNode = AdfRichUIPeer._getCommentNodeForComponent(firstChild, commentString);
            if(domNode) {
              return domNode
            }
          }
        }
      }
    }
    currChild = currChild.nextSibling
  }
  return null
};
AdfRichUIPeer.prototype.getDomElement = function() {
  return this._domNode
};
AdfRichUIPeer.prototype.getDomNode = function() {
  return this._domNode
};
AdfRichUIPeer.getDomContentElement = function() {
};
AdfRichUIPeer.prototype.getDomContentElement = function() {
  return this._domNode
};
AdfRichUIPeer.prototype.getDomRootNodes = function(component, domNode) {
  this.bind(component);
  return this.GetDomRootNodes(domNode)
};
AdfRichUIPeer.prototype.GetDomRootNodes = function(domNode) {
  var nodes = [];
  if(domNode != null) {
    nodes.push(domNode);
    if(domNode.nodeType === 1 && domNode.tagName === "NOSCRIPT" && domNode.id) {
      var clientId = domNode.id;
      var endId = clientId + "::end";
      for(var n = domNode.nextSibling;n != null;n = n.nextSibling) {
        nodes.push(n);
        if(n.nodeType == 1 && n.id == endId) {
          break
        }
      }
    }else {
      if(domNode.nodeType == 8) {
        nodes.push(domNode)
      }
    }
  }
  return nodes
};
AdfRichUIPeer.prototype.initialize = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfPage.PAGE.mapComponent(component.getClientId(), component);
  var domNode = AdfRichUIPeer.getDomNodeForComponent(component);
  if(domNode) {
    AdfAssert.assertDomNode(domNode);
    this.InitDomElement(component, domNode);
    if(!this.constructor.STATELESS) {
      this.BindToComponent(component, domNode)
    }
  }
  this._fetchSVGIcon(component)
};
AdfRichUIPeer.prototype.componentRemoved = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assertDomNode(AdfRichUIPeer.getDomNodeForComponent(component));
  this.cancelAllPopups(component, true);
  this.ComponentRemoved(component);
  if(this._component === component) {
    this.UnbindFromComponent()
  }
  AdfPage.PAGE.unmapComponent(component.getClientId())
};
AdfRichUIPeer.InitClass = function(initializationState) {
  this._PROPETY_CHANGED_FORMAT = new Array("Component", null, "Changed");
  this._GET_COMPONENT_FORMAT = new Array("GetComponent", null);
  this._HANDLE_DOM_EVENT_FORMAT = new Array("HandleDom", null);
  this._HANDLE_COMPONENT_EVENT_FORMAT = new Array("HandleComponent", null);
  this._CREATE_SUB_ID_ARRAY = new Array(null, "::", null);
  this.addComponentPropertyChanges(this, AdfUIComponent.VISIBLE, AdfUIComponent.INLINE_STYLE, AdfUIComponent.STYLE_CLASS);
  this.addComponentPropertyGetters(this, AdfUIComponent.VISIBLE, AdfUIComponent.ID);
  this._addSuppressedPPRAttributes(this, null)
};
AdfRichUIPeer.DefaultInitClass = function(peerInitialization) {
  var propertyChanges = null;
  var propertyGetters = null;
  var eventHandlers = null;
  var domEventHandlers = null;
  var suppressedPPRAttribtutes = null;
  if(peerInitialization) {
    propertyChanges = peerInitialization.propertyChanges;
    propertyGetters = peerInitialization.propertyGetters;
    eventHandlers = peerInitialization.eventHandlers;
    domEventHandlers = peerInitialization.domEventHandlers;
    suppressedPPRAttribtutes = peerInitialization.suppressedPPRAttribtutes
  }
  AdfRichUIPeer._addComponentPropertyChanges(this, propertyChanges);
  AdfRichUIPeer._addComponentPropertyGetters(this, propertyGetters);
  AdfRichUIPeer._addComponentEventHandlers(this, eventHandlers);
  AdfRichUIPeer._addDomEventHandlers(this, domEventHandlers);
  AdfRichUIPeer._addSuppressedPPRAttributes(this, suppressedPPRAttribtutes);
  if(this.InitSubclass != null) {
    this.InitSubclass(peerInitialization)
  }
};
AdfRichUIPeer.prototype.InitDomElement = function(component, domElement) {
};
AdfRichUIPeer.prototype.ComponentRemoved = function(component) {
};
AdfRichUIPeer.prototype.BindToComponent = function(component, domNode) {
  this._component = component;
  this._domNode = domNode
};
AdfRichUIPeer.prototype.UnbindFromComponent = function() {
  this._component = null;
  this._domNode = null
};
AdfRichUIPeer.prototype.bind = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assert(!component.isDead(), "Attempt to bind a dead component");
  if(component !== this._component) {
    if(this.constructor.STATELESS) {
      var domElement = AdfRichUIPeer.getDomElementForComponent(component);
      AdfAssert.assertDomElementOrNull(domElement);
      this.UnbindFromComponent();
      this.BindToComponent(component, domElement)
    }
  }
};
AdfRichUIPeer.prototype.focus = function(component) {
  this.bind(component);
  this.Focus()
};
AdfRichUIPeer.prototype.Focus = function() {
  var dom = this.getDomContentElement();
  AdfFocusUtils.focusFirstTabStop(dom)
};
AdfRichUIPeer.prototype.processPushData = function(component, payload, changeCount) {
  this.bind(component);
  return this.ProcessPushData(payload, changeCount)
};
AdfRichUIPeer.prototype.ProcessPushData = function(payload, changeCount) {
  var component = this.getComponent();
  var alreadyTwinkled = false;
  for(key in payload) {
    var newValue = payload[key];
    AdfLogger.LOGGER.fine("On ", component, " set ", key, " to ", newValue);
    var oldValue = component.setProperty(key, newValue, false, AdfUIComponent.PROPAGATE_LOCALLY);
    if(!alreadyTwinkled && newValue !== oldValue) {
      alreadyTwinkled = true;
      var domElement = this.getDomElement();
      var twinkleAttrName = AdfRichUIPeer._TWINKLE_TIMER_ID_ATTR;
      var timerId = domElement.getAttribute(twinkleAttrName);
      var thePage = AdfPage.PAGE;
      if(timerId) {
        thePage.rescheduleTimer(timerId, 1E3)
      }else {
        AdfDomUtils.addCSSClassName(domElement, AdfRichUIPeer._TWINKLE_ON_STYLECLASS);
        timerId = thePage.scheduleTimer(null, AdfRichUIPeer._removeTwinkleCallback, domElement.id, 1E3);
        domElement.setAttribute(twinkleAttrName, timerId)
      }
    }
  }
  return true
};
AdfRichUIPeer.prototype.registerADSAccessibility = function(component) {
  this.bind(component);
  this.RegisterADSAccessibility()
};
AdfRichUIPeer.prototype.RegisterADSAccessibility = function() {
  var component = this.getComponent();
  var element = AdfRichUIPeer.getDomElementForComponent(component);
  var agent = AdfAgent.AGENT;
  if(element && agent.getAttribute(element, "aria-live") == null) {
    agent.setAttribute(element, "aria-live", "polite")
  }
};
AdfRichUIPeer.prototype.getComponent = function() {
  return this._component
};
AdfRichUIPeer.GetComponent = function(element) {
  AdfAssert.assertDomElement(element);
  var clientId = element.id;
  return clientId ? AdfPage.PAGE.findComponent(clientId) : null
};
AdfRichUIPeer.getFirstAncestorComponent = function(node) {
  AdfAssert.assertDomNode(node);
  var thePage = AdfPage.PAGE;
  var component;
  while(node) {
    component = AdfRichUIPeer._getComponentForNode(node);
    if(component != null) {
      return component
    }
    var previousNode = node.previousSibling;
    if(previousNode != null) {
      if(previousNode.nodeType == 8) {
        component = AdfRichUIPeer._getComponentForNode(previousNode);
        if(component != null) {
          return component
        }
      }
      component = AdfRichUIPeer._getPreviousNoScriptComponent(previousNode);
      if(component != null) {
        return component
      }
    }
    node = node.parentNode
  }
  return null
};
AdfRichUIPeer._getComponentForNode = function(node) {
  var component = null;
  switch(node.nodeType) {
    case 8:
      component = AdfPage.PAGE._getComponentFromComment(node);
      if(component != null) {
        return component
      }
      break;
    case 1:
      var componentId = node.id;
      if(componentId != null) {
        component = AdfPage.PAGE.findComponent(componentId);
        if(component != null) {
          return component
        }
      }
      break
  }
  return component
};
AdfRichUIPeer._NOSCRIPT_END_REGEX = /::end$/;
AdfRichUIPeer._getPreviousNoScriptComponent = function(previousNode) {
  var toIgnore = {};
  var page = AdfPage.PAGE;
  for(var sibling = previousNode;sibling != null;sibling = sibling.previousSibling) {
    if(sibling.nodeType == 1 && sibling.tagName == "NOSCRIPT" && sibling.id != null) {
      var id = sibling.id;
      if(AdfRichUIPeer._NOSCRIPT_END_REGEX.test(id)) {
        toIgnore[id] = true;
        continue
      }
      if(toIgnore[id + "::end"] !== true) {
        component = page.findComponent(id);
        if(component) {
          return component
        }
      }
    }
  }
  return null
};
AdfRichUIPeer.prototype.visitChildren = function(component, callback, context, ignoreHidden) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assertFunction(callback);
  AdfAssert.assertObjectOrNull(context);
  var dom = AdfRichUIPeer.getDomElementForComponent(component);
  var returnValue = this._visitChildren(component, dom, callback, context, ignoreHidden);
  if(returnValue != 2) {
    var popups = this.getAllPopups(component);
    if(popups != null) {
      for(var prop in popups) {
        dom = popups[prop].getElement();
        if(dom) {
          returnValue = this._visitChildren(component, dom, callback, context, ignoreHidden);
          if(returnValue == 2) {
            break
          }
        }
      }
    }
  }
  return returnValue
};
AdfRichUIPeer.prototype.getPagePosition = function(component) {
  this.bind(component);
  return AdfAgent.AGENT.getElementPosition(this._domNode)
};
AdfRichUIPeer.prototype._visitChildren = function(component, domElement, callback, context, ignoreHidden) {
  if(domElement == null) {
    return 0
  }
  var agent = AdfAgent.AGENT;
  var currChild;
  var endElement;
  if(domElement.tagName === "NOSCRIPT") {
    endElement = agent.getElementById(component.getClientId() + "::end");
    currChild = domElement.nextSibling
  }else {
    currChild = domElement.firstChild
  }
  var isVisibleFunc = AdfDomUtils.isVisible;
  var isHtmlFunc = agent.isElementHTML;
  var page = AdfPage.PAGE;
  while(currChild != endElement) {
    if(currChild.nodeType === 1) {
      var childComponent = this._getComponentForVisitingElement(currChild, ignoreHidden);
      var returnValue = 0;
      if(childComponent != null && childComponent != component) {
        returnValue = this._visitChild(childComponent, callback, context, ignoreHidden);
        if(returnValue == 2) {
          return 2
        }
        if(currChild.tagName == "NOSCRIPT") {
          var childEndElement = agent.getElementById(currChild.id + "::end");
          AdfAssert.assertDomElement(childEndElement);
          currChild = childEndElement
        }
      }else {
        returnValue = this._visitChildren(component, currChild, callback, context, ignoreHidden)
      }
    }
    currChild = currChild.nextSibling
  }
  return 0
};
AdfRichUIPeer.prototype._getComponentForVisitingElement = function(element, ignoreHidden) {
  var childComponent = null;
  if(AdfAgent.AGENT.isElementHTML(element) && (!ignoreHidden || AdfDomUtils.isVisible(element))) {
    var componentId = element.id;
    if(componentId) {
      childComponent = AdfPage.PAGE.findComponent(componentId)
    }
  }
  return childComponent
};
AdfRichUIPeer.prototype._visitChild = function(childComponent, callback, context, ignoreHidden) {
  var returnValue = callback.call(context, childComponent);
  if(!returnValue) {
    returnValue = childComponent.visitChildren(callback, context, ignoreHidden)
  }
  return returnValue
};
AdfRichUIPeer.prototype.createComponentEvent = function(component, domEvent, prevComponent) {
  this.bind(component);
  return this.CreateComponentEvent(domEvent, prevComponent)
};
AdfRichUIPeer.prototype.CreateComponentEvent = function(domEvent, prevComponent) {
  return AdfAgent.AGENT.getComponentEvent(this.getComponent(), domEvent, prevComponent)
};
AdfRichUIPeer.prototype._dispatchDomEvent = function(agent, component, domEvent) {
  AdfAssert.assertObject(domEvent);
  var eventHandlerFunc = this.constructor._domEventHandlers[domEvent.type];
  if(eventHandlerFunc) {
    this.bind(component);
    eventHandlerFunc.call(this, component, domEvent)
  }
};
AdfRichUIPeer.prototype.DispatchComponentEvent = function(componentEvent) {
  var componentEventHandlers = this.constructor._componentEventHandlers;
  if(componentEventHandlers) {
    var eventHandlerFunc = componentEventHandlers[componentEvent.getType()];
    if(eventHandlerFunc) {
      var component = componentEvent.getCurrentTarget();
      this.bind(component, AdfRichUIPeer.getDomElementForComponent(component));
      eventHandlerFunc.call(this, componentEvent)
    }
  }
};
AdfRichUIPeer.prototype.DispatchUncanceledComponentEvent = function(componentEvent) {
  return false
};
AdfRichUIPeer.addEventHandlerToDomInstance = function(theClass, domElement, domEventType) {
  AdfAssert.assertFunction(theClass);
  AdfAssert.assertDomElement(domElement);
  AdfAssert.assertString(domEventType);
  var nativeAttribute = AdfDhtmlLookAndFeel.EVENT_TYPE_TO_ATTRIBUTE_MAP[domEventType];
  AdfAssert.assertString(nativeAttribute);
  AdfRichUIPeer.addDomEventHandlers(theClass, domEventType);
  domElement[nativeAttribute] = AdfRichUIPeer._defaultInstanceEventHandler
};
AdfRichUIPeer._defaultInstanceEventHandler = function(theEvent) {
  if(theEvent == null) {
    theEvent = AdfPage.PAGE.getDomWindow().event
  }
  var component = AdfRichUIPeer.getFirstAncestorComponent(this);
  if(component) {
    component.getPeer()._dispatchDomEvent(AdfAgent.AGENT, component, theEvent)
  }
};
AdfRichUIPeer.prototype.isActive = function() {
  return this.getComponent().getClientId() == AdfPage.PAGE.getActiveComponentId()
};
AdfRichUIPeer.prototype.getAccessibleName = function(component) {
  this.bind(component);
  return this.GetAccessibleName()
};
AdfRichUIPeer.prototype.GetAccessibleName = function() {
};
AdfRichUIPeer.prototype.isInActiveHeirarchy = function() {
  var activeId = AdfPage.PAGE.getActiveComponentId();
  if(activeId != null) {
    var activeComponent = AdfPage.PAGE.findComponent(activeId);
    var component = this.getComponent();
    do {
      if(component == activeComponent) {
        return true
      }
      activeComponent = activeComponent.getParent()
    }while(activeComponent != null)
  }
  return false
};
AdfRichUIPeer.prototype.needsFocusTargetStyleClass = function() {
  return false
};
AdfRichUIPeer.prototype.needsChildVisibilityChanges = function(component) {
  return false
};
AdfRichUIPeer.prototype.ChildVisibilityChanged = function(childComponent, childDomElement, childVisible) {
  return false
};
AdfRichUIPeer.prototype.resizeNotify = function(component, oldWidth, oldHeight, newWidth, newHeight) {
  this.bind(component);
  this.ResizeNotify(oldWidth, oldHeight, newWidth, newHeight)
};
AdfRichUIPeer.prototype.ResizeNotify = function(oldWidth, oldHeight, newWidth, newHeight) {
};
AdfRichUIPeer.prototype.descendantMessageChanged = function(component) {
  this.bind(component);
  this.DescendantMessageChanged(component)
};
AdfRichUIPeer.prototype.messageNotify = function(component, maxType, messages) {
  AdfAssert.assertNumberOrNull(maxType);
  AdfAssert.assertArrayOrNull(messages);
  this.bind(component);
  this.MessageNotify(maxType, messages)
};
AdfRichUIPeer.prototype.messageShow = function(component, maxType, messages) {
  AdfAssert.assertNumberOrNull(maxType);
  AdfAssert.assertArrayOrNull(messages);
  this.bind(component);
  this.MessageShow(maxType, messages)
};
AdfRichUIPeer.prototype.DescendantMessageChanged = function(component) {
};
AdfRichUIPeer.prototype.MessageNotify = function(maxType, messages) {
  this.UpdateMessageType(this.getDomElement(), maxType)
};
AdfRichUIPeer.prototype.UpdateMessageType = function(element, maxType) {
  var oldType = AdfAgent.AGENT.getExpandoProperty(element, AdfRichUIPeer.__TYPE_ATTR);
  if(oldType != maxType) {
    AdfMessageUtils.switchCSSClassName(element, oldType, maxType);
    AdfAgent.AGENT.setExpandoProperty(element, AdfRichUIPeer.__TYPE_ATTR, maxType)
  }
};
AdfRichUIPeer.prototype.MessageShow = function(maxType, messages) {
};
AdfRichUIPeer.prototype.showContextMenu = function(domEvent, menuId, parentComponent, alignElement, alignHint, launchSourceId) {
  if(menuId) {
    var popup;
    if(parentComponent) {
      popup = parentComponent.findComponent(menuId)
    }else {
      popup = AdfPage.PAGE.findComponent(menuId)
    }
    if(popup) {
      AdfAssert.assert(popup instanceof AdfRichPopup, "Invalid popup component for context menu.");
      AdfAgent.AGENT.preventDefault(domEvent);
      var hints = {};
      hints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_MENU;
      hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU;
      hints[AdfDhtmlPopupWindow.HINT_FOCUS] = true;
      if(launchSourceId) {
        hints[AdfRichPopup.HINT_LAUNCH_ID] = launchSourceId
      }
      if(alignElement != null) {
        hints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT] = alignElement;
        hints[AdfRichPopup.HINT_ALIGN] = alignHint ? alignHint : AdfRichPopup.ALIGN_AFTER_START
      }else {
        var pos = AdfAgent.AGENT.getMousePosition(domEvent);
        hints[AdfDhtmlPopupWindow.HINT_MOUSEPOSITION] = pos
      }
      popup.show(hints)
    }else {
      if(parentComponent) {
        AdfLogger.LOGGER.severe("Could not find popup for context menu ", menuId, " from component ", parentComponent)
      }else {
        AdfLogger.LOGGER.severe("Could not find popup for context menu ", menuId)
      }
    }
  }
};
AdfRichUIPeer.prototype.showPopup = function(component, contentDom, hints, popupId) {
  var popupList = component[AdfRichUIPeer._POPUP_LIST];
  if(popupList == null) {
    component[AdfRichUIPeer._POPUP_LIST] = popupList = {}
  }
  var peerHints = {};
  peerHints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_ALWAYS;
  peerHints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_INLINESELECTOR;
  peerHints[AdfDhtmlPopupWindow.HINT_FOCUS] = true;
  peerHints[AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE] = true;
  if(component._childHints) {
    AdfCollections.copyInto(peerHints, component._childHints)
  }
  if(popupId == null) {
    popupId = AdfRichUIPeer._POPUP_ID_DEFAULT
  }
  AdfCollections.copyInto(peerHints, hints);
  if(hints) {
    hints["popupId"] = popupId
  }
  peerHints["popupId"] = popupId;
  var popupWindow = popupList[popupId];
  var page = AdfPage.PAGE;
  if(!popupWindow) {
    popupWindow = AdfDhtmlPopupWindowFactory.createPopup(peerHints);
    popupList[popupId] = popupWindow;
    var contentId = contentDom.id;
    var needsUnmapping = false;
    if(contentId && !page.findComponent(contentId)) {
      AdfPage.PAGE.mapComponent(contentId, component);
      needsUnmapping = true
    }
  }
  var anchorNode = contentDom.parentNode;
  var anchorId;
  if(anchorNode) {
    anchorId = anchorNode.id
  }
  peerHints[AdfDhtmlPopupWindow.HINT_CONTENT] = contentDom;
  peerHints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER] = this.createCallback(this._popupClosedHandler);
  peerHints[AdfDhtmlPopupWindow.HINT_COMPONENT_CLIENT_ID] = component.getClientId();
  var popupClosedHandlerParams = {"component":component, "contentDom":contentDom, "unmap":needsUnmapping, "popupId":popupId, "anchorId":anchorId};
  page.__addPopupInfo(component, popupClosedHandlerParams);
  var otherClosedHandler = hints ? hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER] : null;
  if(otherClosedHandler) {
    popupClosedHandlerParams["otherClosedHandler"] = otherClosedHandler;
    popupClosedHandlerParams["otherClosedHandlerParams"] = hints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER_PARAM]
  }
  peerHints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER_PARAM] = popupClosedHandlerParams;
  var alignId = hints ? hints[AdfRichPopup.HINT_ALIGN_ID] : null;
  if(alignId) {
    var alignElement = AdfAgent.AGENT.getElementById(alignId);
    if(alignElement) {
      peerHints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT] = alignElement
    }
    peerHints[AdfRichPopup.HINT_ALIGN_ID] = null
  }
  var ariaLabel = hints ? hints[AdfDhtmlPopupWindow.ARIA_LABEL] : null;
  if(ariaLabel) {
    peerHints[AdfDhtmlPopupWindow.ARIA_LABEL] = ariaLabel
  }
  popupWindow.show(peerHints)
};
AdfRichUIPeer.prototype.isPopupVisible = function(component, popupId) {
  return this.getPopupWindow(component, popupId) != null
};
AdfRichUIPeer.prototype.hidePopup = function(component, popupId) {
  var popupWindow = this.getPopupWindow(component, popupId);
  if(popupWindow) {
    popupWindow.hide()
  }
};
AdfRichUIPeer.prototype.hideAllPopups = function(component) {
  var popupList = component[AdfRichUIPeer._POPUP_LIST];
  if(popupList != null) {
    for(var popupId in popupList) {
      var popupWindow = popupList[popupId];
      if(popupWindow) {
        popupWindow.hide()
      }
    }
  }
};
AdfRichUIPeer.prototype.cancelPopup = function(component, popupId) {
  var popupWindow = this.getPopupWindow(component, popupId);
  if(popupWindow) {
    popupWindow.cancel()
  }
};
AdfRichUIPeer.prototype.cancelAllPopups = function(component, replaceDom) {
  var popupList = component[AdfRichUIPeer._POPUP_LIST];
  if(popupList != null) {
    for(var popupId in popupList) {
      var popupWindow = popupList[popupId];
      if(popupWindow) {
        popupWindow.cancel(replaceDom)
      }
    }
  }
};
AdfRichUIPeer.prototype.getPopupWindow = function(component, popupId) {
  var popupWindow;
  var popupList = component[AdfRichUIPeer._POPUP_LIST];
  if(popupList != null) {
    if(popupId == null) {
      popupId = AdfRichUIPeer._POPUP_ID_DEFAULT
    }
    popupWindow = popupList[popupId]
  }
  return popupWindow
};
AdfRichUIPeer.prototype.getAllPopups = function(component) {
  return component[AdfRichUIPeer._POPUP_LIST]
};
AdfRichUIPeer._removeTwinkleCallback = function(domId) {
  var activeDomElement = AdfAgent.AGENT.getElementById(domId);
  if(activeDomElement != null) {
    activeDomElement.removeAttribute(AdfRichUIPeer._TWINKLE_TIMER_ID_ATTR);
    AdfDomUtils.removeCSSClassName(activeDomElement, AdfRichUIPeer._TWINKLE_ON_STYLECLASS)
  }
};
AdfRichUIPeer.prototype._popupClosedHandler = function(param) {
  var component = param.component;
  var popupList = component[AdfRichUIPeer._POPUP_LIST];
  if(popupList == null) {
    return
  }
  var popupWindow = popupList[param.popupId];
  if(!popupWindow) {
    return
  }
  var contentDom = param.contentDom;
  var popupId = param.popupId;
  delete popupList[popupId];
  page.__removePopupInfo(component, popupId);
  if(param.unmap) {
    AdfPage.PAGE.unmapComponent(contentDom.id)
  }
  this.bind(component);
  this.PopupClosed(component, contentDom, popupId);
  var otherClosedHandler = param.otherClosedHandler;
  if(otherClosedHandler) {
    var otherClosedHandlerParams = param.otherClosedHandlerParams;
    otherClosedHandler(otherClosedHandlerParams)
  }
};
AdfRichUIPeer.prototype.PopupClosed = function(component, contentDom, popupId) {
};
AdfRichUIPeer.prototype.GetRichResourceURL = function(path) {
  return AdfPage.PAGE.getResourceURL("/afr" + path)
};
AdfRichUIPeer.prototype.scrollIntoView = function(component, focus, subTargetId) {
  this.bind(component);
  this.ScrollIntoView(component, focus, subTargetId)
};
AdfRichUIPeer.prototype.ScrollIntoView = function(component, focus, subTargetId) {
  var rootElement = this.getDomElement();
  rootElement.scrollIntoView();
  var subTargetElement = null;
  if(subTargetId != null) {
    subTargetElement = AdfAgent.AGENT.getElementById(AdfRichUIPeer.CreateSubId(component.getClientId(), subTargetId));
    if(subTargetElement) {
      subTargetElement.scrollIntoView()
    }else {
      AdfLogger.LOGGER.warning("Invalid subTargetId specified:" + subTargetId)
    }
  }
  if(focus) {
    if(subTargetElement) {
      AdfFocusUtils.focusElement(subTargetElement)
    }else {
      var firstTabStop = AdfFocusUtils.getFirstTabStop(rootElement);
      if(firstTabStop) {
        AdfFocusUtils.focusElement(firstTabStop)
      }
    }
  }
};
AdfRichUIPeer.prototype.getSubIdDomElement = function(component, subId) {
  this.bind(component);
  return this.GetSubIdDomElement(subId)
};
AdfRichUIPeer.prototype.GetSubIdDomElement = function(subId) {
  AdfLogger.LOGGER.warning("Unknown subId:", subId, " for component ", this.getComponent());
  return null
};
AdfRichUIPeer.prototype.simulateMouse = function(component, subId, mouseEvent) {
  this.bind(component);
  var domElement;
  if(subId) {
    domElement = this.GetSubIdDomElement(subId);
    if(!domElement) {
      AdfLogger.LOGGER.warning("No DOM element found for provided subId: " + subId + ". Mouse event will not be processed.");
      return
    }
  }else {
    domElement = this.getDomElement()
  }
  this.SimulateMouseOnDescendant(component, domElement, mouseEvent)
};
AdfRichUIPeer.prototype.SimulateMouseOnDescendant = function(targetComponent, domElement, mouseEvent) {
  var parentComponent = this.getComponent().getParent();
  if(parentComponent) {
    var parentPeer = parentComponent.getPeer();
    parentPeer.bind(parentComponent);
    parentPeer.SimulateMouseOnDescendant(targetComponent, domElement, mouseEvent)
  }else {
    domElement.scrollIntoView();
    AdfPage.PAGE.simulateDomMouse(domElement, mouseEvent)
  }
};
AdfRichUIPeer.isInlineSVGIcon = function(component) {
  var iconUrl = AdfRichUIPeer._getIconUrl(component);
  if(!iconUrl) {
    return false
  }
  var iconDelivery = component.getIconDelivery();
  if(iconDelivery == "inline" || iconDelivery == "fetchAndInline") {
    return true
  }
  return false
};
AdfRichUIPeer.prototype.GetElementToReplaceWithSVG = function(component) {
  var clientId = component.getClientId();
  var rootElem = document.getElementById(clientId);
  return rootElem.querySelector("span[" + AdfRichUIPeer._SVG_EXPANDO + "]")
};
AdfRichUIPeer.prototype._fetchSVGIcon = function(component) {
  var iconDelivery = component.getPropertyKeys()["iconDelivery"];
  if(iconDelivery && component.getIconDelivery() == "fetchAndInline") {
    var iconUrl = AdfRichUIPeer._getIconUrl(component);
    if(!iconUrl) {
      return
    }
    var cacheManager = new AdfSvgCacheManager;
    var span = this.GetElementToReplaceWithSVG(component);
    if(!span) {
      AdfLogger.LOGGER.info("AdfRichUIPeer#_fetchSVGIcon- span element not found in component with clientID: " + component.getClientId());
      return
    }
    cacheManager.embedSVG(component, span, iconUrl)
  }
};
AdfRichUIPeer._getIconUrl = function(component) {
  return component.getIcon ? component.getIcon() : component.getSource ? AdfPage.PAGE.getResourceURL(component.getSource()) : null
};
AdfRichUIPeer.DISABLED_STYLECLASS = "p_AFDisabled";
AdfRichUIPeer.READONLY_STYLECLASS = "p_AFReadOnly";
AdfRichUIPeer.SELECTED_STYLECLASS = "p_AFSelected";
AdfRichUIPeer.DROP_TARGET_STYLECLASS = "p_AFDropTarget";
AdfRichUIPeer.DRAG_SOURCE_STYLECLASS = "p_AFDragSource";
AdfRichUIPeer.BUSY_STYLECLASS = "p_AFBusy";
AdfRichUIPeer.HOVER_TARGET_STYLECLASS = "p_AFHoverTarget";
AdfRichUIPeer.FOCUS_TARGET_STYLECLASS = "p_AFFocusTarget";
AdfRichUIPeer.DRAG_READY_STYLECLASS = "p_AFDragReady";
AdfRichUIPeer.__TYPE_ATTR = "__adfPeerMsgType";
AdfRichUIPeer._POPUP_ID_DEFAULT = "__afrPeerPPDefault";
AdfRichUIPeer._POPUP_LIST = "__afrPeerPPList";
AdfRichUIPeer._TWINKLE_TIMER_ID_ATTR = "__afrTwinkleTimer";
AdfRichUIPeer._TWINKLE_ON_STYLECLASS = "p_AFTwinkleOn";
AdfRichUIPeer._SVG_EXPANDO = "_afrSvg";
AdfRichUIPeer._FILTER_PREFIX = "_afrFltr";

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlTogglePeer");
AdfDhtmlTogglePeer.InitSubclass = function(initializationState) {
  if(initializationState) {
    AdfRichUIPeer.addComponentPropertyChanges(this, initializationState.propertyChanges);
    AdfRichUIPeer.addComponentEventHandlers(this, initializationState.eventHandlers)
  }
  this._STYLE_CLASS_PROPERTIES = ["toggledStyleClass", "untoggledStyleClass"];
  this._TRANSLATION_PROPERTIES = ["toggledTipResource", "untoggledTipResource"];
  this._COPIED_PROPERTIES = ["propertyName", "clientEventType", "ltrToggledIconName", "ltrUntoggledIconName", "rtlToggledIconName", "rtlUntoggledIconName"]
};
AdfDhtmlTogglePeer.Config = function(subclass, config) {
  var laf = AdfPage.PAGE.getLookAndFeel();
  var subclassProto = subclass.prototype;
  var styleClassProps = AdfDhtmlTogglePeer._STYLE_CLASS_PROPERTIES;
  var propCount = styleClassProps.length;
  for(var i = 0;i < propCount;i++) {
    var propName = styleClassProps[i];
    var styleClass = config[propName];
    if(styleClass) {
      subclassProto[propName] = laf.getStyleClass(styleClass)
    }
  }
  var translationProps = AdfDhtmlTogglePeer._TRANSLATION_PROPERTIES;
  propCount = translationProps.length;
  for(i = 0;i < propCount;i++) {
    var basePropName = translationProps[i];
    var translationKey = config[basePropName + "Key"];
    if(translationKey) {
      var translatedString = laf.getTranslatedString(translationKey);
      AdfAssert.assertString(translatedString, "No translation key '", translationKey, " for property", basePropName);
      subclassProto[basePropName] = translatedString
    }
  }
  var copiedProps = AdfDhtmlTogglePeer._COPIED_PROPERTIES;
  propCount = copiedProps.length;
  for(i = 0;i < propCount;i++) {
    propName = copiedProps[i];
    if(propName in config) {
      subclassProto[propName] = config[propName]
    }
  }
};
AdfDhtmlTogglePeer.prototype.QueueClientEvent = function(toggled, isPartial) {
  AdfAssert.failedInAbstractFunction()
};
AdfDhtmlTogglePeer.prototype.UpdateButton = function(toggled) {
  var buttonElem = this.GetButtonElement();
  if(!buttonElem) {
    return false
  }
  var oldStyleClass = this.toggledStyleClass;
  var newStyleClass = this.untoggledStyleClass;
  var titleFormat = this.untoggledTipResource;
  if(toggled) {
    var temp = oldStyleClass;
    oldStyleClass = newStyleClass;
    newStyleClass = temp;
    titleFormat = this.toggledTipResource
  }
  if(oldStyleClass) {
    AdfDomUtils.removeCSSClassName(buttonElem, oldStyleClass);
    AdfDomUtils.addCSSClassName(buttonElem, newStyleClass)
  }else {
    var imageElement = this.GetButtonImageElement();
    if(imageElement) {
      var newImageURL = this.getIconURL(toggled);
      if(newImageURL) {
        imageElement.src = newImageURL
      }
    }
  }
  this.ApplyAriaExpanded(toggled);
  if(titleFormat) {
    var newTitle = TrFastMessageFormatUtils.format(titleFormat, this.GetTitle());
    this.ApplyTitle(newTitle);
    this.ApplyAriaLabel(newTitle)
  }
  return true
};
AdfDhtmlTogglePeer.prototype.ApplyAriaExpanded = function(toggled) {
  var buttonElem = this.GetButtonElement();
  AdfAgent.AGENT.setAttribute(buttonElem, "aria-expanded", toggled)
};
AdfDhtmlTogglePeer.prototype.ApplyAriaLabel = function(titleText) {
  var buttonElem = this.GetButtonElement();
  AdfAgent.AGENT.setAttribute(buttonElem, "aria-label", titleText)
};
AdfDhtmlTogglePeer.prototype.ApplyTitle = function(titleText) {
  var buttonElem = this.GetButtonElement();
  AdfAgent.AGENT.setAttribute(buttonElem, "title", titleText)
};
AdfDhtmlTogglePeer.prototype.GetTitle = function() {
  return this.getComponent().getProperty("text")
};
AdfDhtmlTogglePeer.prototype.GetButtonElement = function() {
  return this.getDomElement()
};
AdfDhtmlTogglePeer.prototype.GetButtonImageElement = function() {
  var buttonElement = this.GetButtonElement();
  return buttonElement ? buttonElement.firstChild : null
};
AdfDhtmlTogglePeer.prototype.getIconURL = function(state) {
  var iconName;
  if(AdfPage.PAGE.getLocaleContext().isRightToLeft()) {
    if(state) {
      iconName = this.rtlToggledIconName
    }else {
      iconName = this.rtlUntoggledIconName
    }
  }else {
    if(state) {
      iconName = this.ltrToggledIconName
    }else {
      iconName = this.ltrUntoggledIconName
    }
  }
  var rawIcon = AdfPage.PAGE.getLookAndFeel().getRawIcon(iconName);
  if(rawIcon) {
    return rawIcon.src
  }else {
    return null
  }
};
AdfDhtmlTogglePeer.prototype.EventPropagatesToServer = function() {
  return true
};
AdfDhtmlTogglePeer.prototype.isEventForButton = function(nativeEvent) {
  var evtTarget = AdfAgent.AGENT.getEventTarget(nativeEvent);
  var evtTargetParent = evtTarget.tagName != "A" ? evtTarget.parentNode : evtTarget;
  var button = this.GetButtonElement();
  return button && evtTargetParent == button
};
AdfDhtmlTogglePeer.prototype.HandleClientSideToggle = function(toggled) {
  return this.UpdateButton(toggled)
};
AdfDhtmlTogglePeer.prototype.HandleComponentClick = function(componentEvent) {
  if(!componentEvent.isCanceled()) {
    var nativeEvent = componentEvent.getNativeEvent();
    if(componentEvent.isLeftButtonPressed() && this.isEventForButton(nativeEvent)) {
      this._queueClientEvent(nativeEvent, !this.GetPropertyValue());
      componentEvent.cancel()
    }
  }
};
AdfDhtmlTogglePeer.prototype.HandleComponentKeyUp = function(componentEvent) {
  if(!componentEvent.isCanceled()) {
    var nativeEvent = componentEvent.getNativeEvent();
    if(this.isEventForButton(nativeEvent)) {
      var keyCode = AdfAgent.AGENT.getKeyCode(nativeEvent);
      var toggled = this.GetPropertyValue();
      if(keyCode == AdfKeyStroke.SPACE_KEY || keyCode == AdfKeyStroke.ARROWUP_KEY && !toggled || keyCode == AdfKeyStroke.ARROWDOWN_KEY && toggled) {
        this._queueClientEvent(nativeEvent, !toggled);
        componentEvent.cancel()
      }
    }
  }
};
AdfDhtmlTogglePeer.TogglePropertyChangedImpl = function(component, domElement, newValue, oldValue) {
  if(!this._inHandlePropertyChange) {
    this.QueueClientEvent(newValue, true)
  }
  return true
};
AdfDhtmlTogglePeer.HandleToggleEventImpl = function(componentEvent) {
  var component = this.getComponent();
  if(!componentEvent.isCanceled() && componentEvent.getSource() == component) {
    this._inHandlePropertyChange = true;
    try {
      var newValue = this.GetNewValueFromEvent(componentEvent);
      component.setProperty(this.propertyName, newValue);
      return this.HandleClientSideToggle(newValue)
    }finally {
      delete this._inHandlePropertyChange
    }
  }
  return false
};
AdfDhtmlTogglePeer.prototype.GetNewValueFromEvent = function(componentEvent) {
  return!this.GetPropertyValue()
};
AdfDhtmlTogglePeer.prototype._queueClientEvent = function(nativeEvent, newToggleState) {
  this.QueueClientEvent(newToggleState, true);
  AdfAgent.AGENT.preventDefault(nativeEvent)
};
AdfDhtmlTogglePeer.prototype.GetPropertyValue = function(component) {
  return this.getComponent().getProperty(this.propertyName)
};

AdfRichUIPeer.createPeerClass(AdfDhtmlTogglePeer, "AdfDhtmlShowDisclosurePeer", true, {propertyChanges:["disclosed"], eventHandlers:[AdfDisclosureEvent.EVENT_TYPE, AdfUIInputEvent.CLICK_EVENT_TYPE, AdfUIInputEvent.KEY_UP_EVENT_TYPE]});
AdfDhtmlShowDisclosurePeer.InitSubclass = function() {
  AdfDhtmlShowDisclosurePeer._SUB_ID = "_afrDscl";
  AdfDhtmlTogglePeer.Config(this, {"propertyName":"disclosed", "clientEventType":AdfDisclosureEvent, "toggledTipResourceKey":"af_showDetail.TIP_DISCLOSED", "untoggledTipResourceKey":"af_showDetail.TIP_UNDISCLOSED"})
};
AdfDhtmlShowDisclosurePeer.prototype.ComponentDisclosedChanged = AdfDhtmlTogglePeer.TogglePropertyChangedImpl;
AdfDhtmlShowDisclosurePeer.prototype.HandleComponentDisclosure = AdfDhtmlTogglePeer.HandleToggleEventImpl;
AdfDhtmlShowDisclosurePeer.prototype.queueDisclosureEvent = function(isExpanded, partial, disclosureCounterpart) {
  var propagatesToServer = !disclosureCounterpart && this.EventPropagatesToServer();
  var disclosureEvent = new AdfDisclosureEvent(this.getComponent(), isExpanded, disclosureCounterpart, propagatesToServer);
  disclosureEvent.queue(partial);
  return disclosureEvent
};
AdfDhtmlTogglePeer.prototype.QueueClientEvent = AdfDhtmlShowDisclosurePeer.prototype.queueDisclosureEvent;
AdfDhtmlShowDisclosurePeer.prototype.EventPropagatesToServer = function() {
  var component = this.getComponent();
  return"immediate" !== component.getProperty("contentDelivery")
};
AdfDhtmlShowDisclosurePeer.prototype.GetButtonElement = function() {
  var component = this.getComponent();
  var buttonId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlShowDisclosurePeer._SUB_ID);
  return AdfAgent.AGENT.getElementById(buttonId)
};
AdfDhtmlShowDisclosurePeer.prototype.GetNewValueFromEvent = function(componentEvent) {
  return componentEvent.isExpanded()
};

AdfRichUIPeer.createPeerClass(AdfDhtmlTogglePeer, "AdfDhtmlMaximizePeer", true, {propertyChanges:["maximized"], eventHandlers:[AdfMaximizeEvent.EVENT_TYPE, AdfUIInputEvent.CLICK_EVENT_TYPE, AdfUIInputEvent.KEY_UP_EVENT_TYPE]});
AdfDhtmlMaximizePeer.InitSubclass = function() {
  AdfDhtmlMaximizePeer._SUB_ID = "_afrMax";
  AdfDhtmlMaximizePeer._PLACEHOLDER_SUB_ID = "_afrPlaceHolder";
  AdfDhtmlTogglePeer.Config(this, {"propertyName":"maximized", "clientEventType":AdfMaximizeEvent, "toggledTipResourceKey":"AFRestoreTip", "untoggledTipResourceKey":"AFMaximizeTip"})
};
AdfDhtmlMaximizePeer.prototype.ComponentMaximizedChanged = AdfDhtmlTogglePeer.TogglePropertyChangedImpl;
AdfDhtmlMaximizePeer.prototype.HandleComponentMaximize = AdfDhtmlTogglePeer.HandleToggleEventImpl;
AdfDhtmlMaximizePeer.prototype.QueueClientEvent = function(isMaximized, partial) {
  var component = this.getComponent();
  var event = new AdfMaximizeEvent(component, isMaximized, this.EventPropagatesToServer());
  event.queue(partial)
};
AdfDhtmlMaximizePeer.prototype.EventPropagatesToServer = function(isMaximized) {
  return false
};
AdfDhtmlMaximizePeer.prototype.GetButtonElement = function() {
  var component = this.getComponent();
  var buttonId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlMaximizePeer._SUB_ID);
  return AdfAgent.AGENT.getElementById(buttonId)
};
AdfDhtmlMaximizePeer._mungeStyles = function(rootElement, maximized) {
  var agent = AdfAgent.AGENT;
  var mungeOverflow = AdfAgent.IE_PLATFORM == agent.getPlatform() && agent.getVersion() > 8;
  var parent = rootElement.parentNode;
  while(parent) {
    if(parent.style) {
      var alreadyMaximized = "_oldZindex" in parent;
      if(maximized != alreadyMaximized) {
        var parentStyle = agent.getOverrideStyle(parent);
        if(maximized) {
          parent._oldZindex = parentStyle.zIndex;
          parentStyle.zIndex = "auto";
          if(mungeOverflow) {
            parent._oldOverflow = parentStyle.overflow;
            parentStyle.overflow = "visible"
          }
        }else {
          parentStyle.zIndex = parent._oldZindex;
          delete parent._oldZindex;
          if(mungeOverflow) {
            parentStyle.overflow = parent._oldOverflow;
            delete parent._oldOverflow
          }
        }
      }
    }
    parent = parent.parentNode
  }
};
AdfDhtmlMaximizePeer.prototype.GetNewValueFromEvent = function(componentEvent) {
  return componentEvent.isMaximized()
};
AdfDhtmlMaximizePeer.prototype.__updateClientMaximize = function(rootElement, contentElement, maximized) {
  AdfAssert.assertDomElement(rootElement);
  AdfAssert.assertDomElement(contentElement);
  AdfAssert.assertBoolean(maximized);
  var animationFunc;
  if(maximized) {
    var agent = AdfAgent.AGENT;
    var contentParentElement = contentElement.parentNode;
    var rootStyle = agent.getOverrideStyle(rootElement);
    var contentStyle = agent.getOverrideStyle(contentElement);
    var contentParentStyle = agent.getOverrideStyle(contentParentElement);
    var bounds = agent.getElementPageBounds(rootElement);
    var startTop = bounds["top"] + "px";
    var startLeft = bounds["left"] + "px";
    var startWidth = bounds["right"] - bounds.left + "px";
    var startHeight = bounds["bottom"] - bounds.top + "px";
    var startSize = {"top":startTop, "left":startLeft, "width":startWidth, "height":startHeight};
    var oldStyle = {"root":{"position":rootStyle.position, "top":rootStyle.top, "left":rootStyle.left, "width":rootStyle.width, "height":rootStyle.height, "zIndex":rootStyle.zIndex}, "content":{"position":contentStyle.position, "height":contentStyle.height}, "contentParent":{"position":contentParentStyle.position, "width":contentParentStyle.width, "height":contentParentStyle.height, "left":contentParentStyle.left, "right":contentParentStyle.right, "top":contentParentStyle.top, "bottom":contentParentStyle.bottom}, 
    "initialSize":startSize, "contentDomElement":contentElement};
    rootElement._oldStyle = oldStyle;
    rootStyle.position = "fixed";
    rootStyle.zIndex = 500;
    var page = AdfPage.PAGE;
    var domDocument = page.getDomDocument();
    var placeHolder = domDocument.createElement("div");
    var holderId = AdfRichUIPeer.CreateSubId(rootElement.id, AdfDhtmlMaximizePeer._PLACEHOLDER_SUB_ID);
    rootElement._placeHolderId = placeHolder.id = holderId;
    rootElement.parentNode.appendChild(placeHolder);
    AdfAgent.AGENT.elementsAdded(placeHolder);
    AdfCollections.copyInto(placeHolder.style, startSize);
    AdfCollections.copyInto(rootStyle, startSize);
    var computedContentStyle = agent.getComputedStyle(contentElement);
    var wasStretched = computedContentStyle.position == "absolute";
    contentStyle.position = "relative";
    contentStyle.height = "100%";
    contentParentStyle.position = "absolute";
    contentParentStyle.width = "auto";
    contentParentStyle.height = "auto";
    if(!wasStretched) {
      var headerHeight = Math.max(0, agent.getElementTop(contentParentElement) - agent.getElementTop(contentParentElement.parentNode) - 1);
      contentParentStyle.top = headerHeight + "px";
      contentParentStyle.left = 0;
      contentParentStyle.right = 0;
      contentParentStyle.bottom = 0
    }
    animationFunc = AdfDhtmlMaximizePeer._handleZoom
  }else {
    animationFunc = AdfDhtmlMaximizePeer._handleRestore
  }
  window.setTimeout(this.createCallback(animationFunc), 0)
};
AdfDhtmlMaximizePeer._applyCSS = function(style, propertyName, propertyValue) {
  var prefixes = ["", "-webkit-", "Moz", "ms"];
  var capitalizePropertyName = [false, false, true, true];
  var prefixCount = prefixes.length;
  for(var i = 0;i < prefixCount;i++) {
    var prefix = prefixes[i];
    var modifiedPropertyName = propertyName;
    if(capitalizePropertyName[i]) {
      modifiedPropertyName = propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1)
    }
    style[prefix + modifiedPropertyName] = propertyValue
  }
};
AdfDhtmlMaximizePeer._handleRestore = function() {
  var outerPeer = this.outerThis;
  if(!outerPeer) {
    outerPeer = this
  }
  var rootElement = outerPeer.getDomElement();
  var oldStyle = rootElement._oldStyle;
  if(oldStyle) {
    var agent = AdfAgent.AGENT;
    var rootStyle = agent.getOverrideStyle(rootElement);
    var animationEnabled = AdfPage.PAGE.isAnimationEnabled();
    if(animationEnabled) {
      AdfDhtmlMaximizePeer._applyCSS(rootStyle, "transition", "all .2ss ease-in");
      AdfCollections.copyInto(rootStyle, oldStyle["initialSize"]);
      window.setTimeout(this.createCallback(AdfDhtmlMaximizePeer._cleanUpRestore), 200)
    }else {
      AdfDhtmlMaximizePeer._cleanUpRestore.apply(this)
    }
  }
};
AdfDhtmlMaximizePeer._cleanUpRestore = function() {
  var outerPeer = this.outerThis;
  if(!outerPeer) {
    outerPeer = this
  }
  var rootElement = outerPeer.getDomElement();
  var oldStyle = rootElement._oldStyle;
  var holderId = rootElement._placeHolderId;
  delete rootElement._placeHolderId;
  var placeHolder = AdfAgent.AGENT.getElementById(holderId);
  AdfAgent.AGENT.elementsRemoved(placeHolder);
  rootElement.parentNode.removeChild(placeHolder);
  if(oldStyle) {
    var contentElement = oldStyle["contentDomElement"];
    var agent = AdfAgent.AGENT;
    var rootStyle = agent.getOverrideStyle(rootElement);
    var contentStyle = agent.getOverrideStyle(contentElement);
    var contentParentStyle = agent.getOverrideStyle(contentElement.parentNode);
    AdfDhtmlMaximizePeer._applyCSS(rootStyle, "transition", "");
    AdfCollections.copyInto(rootStyle, oldStyle["root"]);
    AdfCollections.copyInto(contentStyle, oldStyle["content"]);
    AdfCollections.copyInto(contentParentStyle, oldStyle["contentParent"]);
    delete rootElement._oldStyle;
    AdfDhtmlMaximizePeer._mungeStyles(rootElement, false)
  }
  AdfPage.PAGE.doResizeNotifyDom(rootElement, false)
};
AdfDhtmlMaximizePeer._handleZoom = function() {
  var outerPeer = this.outerThis;
  if(!outerPeer) {
    outerPeer = this
  }
  var rootElement = outerPeer.getDomElement();
  AdfDhtmlMaximizePeer._mungeStyles(rootElement, true);
  var agent = AdfAgent.AGENT;
  var rootStyle = agent.getOverrideStyle(rootElement);
  var windowWidth = agent.getWindowWidth();
  var windowHeight = agent.getWindowHeight();
  var animationEnabled = AdfPage.PAGE.isAnimationEnabled();
  if(animationEnabled) {
    AdfDhtmlMaximizePeer._applyCSS(rootStyle, "transition", "all 0.2s ease-out")
  }
  rootStyle.top = "0px";
  rootStyle.left = "0px";
  rootStyle.width = windowWidth + "px";
  rootStyle.height = windowHeight + "px";
  if(animationEnabled) {
    window.setTimeout(this.createCallback(AdfDhtmlMaximizePeer._cleanUpZoom), 200)
  }else {
    AdfDhtmlMaximizePeer._cleanUpZoom.apply(this)
  }
};
AdfDhtmlMaximizePeer._cleanUpZoom = function() {
  var outerPeer = this.outerThis;
  if(outerPeer == null) {
    outerPeer = this
  }
  var rootElement = outerPeer.getDomElement();
  var agent = AdfAgent.AGENT;
  var rootStyle = agent.getOverrideStyle(rootElement);
  AdfDhtmlMaximizePeer._applyCSS(rootStyle, "transition", "");
  rootStyle.width = "100%";
  rootStyle.height = "100%";
  AdfPage.PAGE.doResizeNotifyDom(rootElement, false)
};

var AdfDhtmlInputChooseBindingUtils = new Object;
AdfDhtmlInputChooseBindingUtils.registerBinding = function(force, chooserId, inputId) {
  AdfAssert.assertString(chooserId);
  AdfAssert.assertString(inputId);
  var list = this._getList();
  if(list[chooserId] == null || force) {
    list[chooserId] = inputId;
    this._saveList(list)
  }
  return
};
AdfDhtmlInputChooseBindingUtils.returnToInputComponent = function(chooseComponent, hidePopup) {
  var input = this.getInputComponent(chooseComponent.getClientId());
  if(input != null) {
    input.getPeer().handleReturnFromChooseComponent(input, hidePopup)
  }
};
AdfDhtmlInputChooseBindingUtils.updateChooseComponentProperty = function(inputComponent, chooseId, inputPropertyName, choosePropertyName) {
  if(chooseId != null) {
    var chooseComponent = AdfPage.PAGE.findComponent(chooseId);
    if(chooseComponent != null) {
      var propertyValue = inputComponent.getProperty(inputPropertyName);
      var peer = chooseComponent.getPeer();
      peer.handleUpdateFromInputComponent(chooseComponent, choosePropertyName, propertyValue)
    }
  }
};
AdfDhtmlInputChooseBindingUtils.updateInputComponentProperty = function(chooseComponent, choosePropertyName, inputPropertyName, propertyValue) {
  var inputComponent = this.getInputComponent(chooseComponent.getClientId());
  if(inputComponent != null) {
    if(propertyValue === undefined) {
      propertyValue = chooseComponent.getProperty(choosePropertyName)
    }
    var peer = inputComponent.getPeer();
    peer.handleUpdateFromChooseComponent(inputComponent, inputPropertyName, propertyValue)
  }
};
AdfDhtmlInputChooseBindingUtils.getInputComponent = function(chooserId) {
  var list = this._getList();
  if(list == null) {
    return null
  }
  var inputId = list[chooserId];
  if(inputId != null) {
    return AdfPage.PAGE.findComponent(inputId)
  }
  return null
};
AdfDhtmlInputChooseBindingUtils.getChooseId = function(component) {
  var chooseId = component.getChooseId();
  if(chooseId != null) {
    var chooseComponent = component.findComponent(chooseId);
    if(chooseComponent) {
      return chooseComponent.getClientId()
    }else {
      AdfLogger.LOGGER.warning("For the component with the id '" + component.getClientId() + "', no component with the choose id '" + chooseId + "' was found")
    }
  }
  return null
};
AdfDhtmlInputChooseBindingUtils._getList = function() {
  var page = AdfPage.PAGE;
  var list = page.getPageProperty(AdfDhtmlInputChooseBindingUtils._PROPERTY_NAME);
  if(list == null) {
    list = new Object
  }
  return list
};
AdfDhtmlInputChooseBindingUtils._saveList = function(list) {
  var page = AdfPage.PAGE;
  page.setPageProperty(AdfDhtmlInputChooseBindingUtils._PROPERTY_NAME, list)
};
AdfDhtmlInputChooseBindingUtils._PROPERTY_NAME = "AdfDhtmlInputChooseBindingUtils.binding";

function AdfContentFetchEvent(source, type, params) {
  this.Init(source, type, params)
}
AdfObject.createSubclass(AdfContentFetchEvent, AdfComponentEvent);
AdfContentFetchEvent.FETCH_EVENT_TYPE = "fetch";
AdfContentFetchEvent.LOADED_EVENT_TYPE = "contentLoaded";
AdfContentFetchEvent.SYNC_EVENT_TYPE = "syncProps";
AdfContentFetchEvent.prototype.Init = function(source, type, params) {
  this._params = params;
  AdfContentFetchEvent.superclass.Init.call(this, source, type);
  this.setPartial(true);
  this.setRoot(source)
};
AdfContentFetchEvent.prototype.IsDeleveryDiscrete = function() {
  return this.getType() == AdfContentFetchEvent.SYNC_EVENT_TYPE
};
AdfContentFetchEvent.prototype.propagatesToServer = function() {
  return this.getType() == AdfContentFetchEvent.FETCH_EVENT_TYPE || this.getType() == AdfContentFetchEvent.SYNC_EVENT_TYPE
};
AdfContentFetchEvent.prototype.getClearMessages = function() {
  return false
};
AdfContentFetchEvent.prototype.AddMarshalledProperties = function(properties) {
  AdfContentFetchEvent.superclass.AddMarshalledProperties.call(this, properties);
  if(this._params) {
    for(var i in this._params) {
      properties[i] = this._params[i]
    }
  }
};

function AdfInitializationBehavior(js) {
  this.Init(js)
}
AdfObject.createSubclass(AdfInitializationBehavior, AdfClientBehavior);
AdfInitializationBehavior.prototype.initialize = function(component) {
  try {
    eval("var component=arguments[0]; " + this._js)
  }catch(e) {
    if(AdfLogger.LOGGER.getLevel() >= AdfLogger.WARNING) {
      AdfLogger.LOGGER.logErrorAsWarning(e, " initializing " + this + " on " + component)
    }
  }
};
AdfInitializationBehavior.prototype.Init = function(js) {
  AdfInitializationBehavior.superclass.Init.call(this);
  AdfAssert.assertString(js);
  this._js = js
};

function AdfSelectItem(value, label, disabled) {
  this.Init(value, label, disabled)
}
AdfObject.createSubclass(AdfSelectItem);
AdfSelectItem.prototype.Init = function(value, label, disabled) {
  AdfSelectItem.superclass.Init.call(this);
  AdfAssert.assertStringOrNull(value);
  AdfAssert.assertStringOrNull(label);
  if(disabled) {
    AdfAssert.assertBoolean(disabled);
    this._disabled = disabled
  }
  if(value != null) {
    this._value = value
  }
  if(label != null) {
    this._label = label
  }
};
AdfSelectItem.InitClass = function() {
  var prototypeVar = this.prototype;
  prototypeVar._value = null;
  prototypeVar._label = null;
  prototypeVar._disabled = false
};
AdfSelectItem.prototype.getValue = function() {
  return this._value
};
AdfSelectItem.prototype.getLabel = function() {
  return this._label
};
AdfSelectItem.prototype.isDisabled = function() {
  return this._disabled
};
AdfSelectItem.prototype.setValue = function(value) {
  AdfAssert.assertStringOrNull(value);
  this._value = value
};
AdfSelectItem.prototype.setLabel = function(label) {
  AdfAssert.assertStringOrNull(label);
  this._label = label
};
AdfSelectItem.prototype.setDisabled = function(disabled) {
  AdfAssert.assertBoolean(disabled);
  this._disabled = disabled
};

function AdfRangeValue(minimum, maximum) {
  this.Init(minimum, maximum)
}
AdfObject.createSubclass(AdfRangeValue);
AdfRangeValue.prototype.equals = function(object) {
  if(this._minimum == object._minimum && this._maximum == object._maximum) {
    return true
  }
  return false
};
AdfRangeValue.prototype.getMinimum = function() {
  return this._minimum
};
AdfRangeValue.prototype.getMaximum = function() {
  return this._maximum
};
AdfRangeValue.prototype.setMinimum = function(newValue) {
  AdfAssert.assertNumberOrNull(newValue);
  this._minimum = newValue
};
AdfRangeValue.prototype.setMaximum = function(newValue) {
  AdfAssert.assertNumberOrNull(newValue);
  this._maximum = newValue
};
AdfRangeValue.prototype.toString = function() {
  return this._minimum + "," + this._maximum
};
AdfRangeValue.InitClass = function() {
  var prototypeVar = this.prototype;
  prototypeVar._minimum = null;
  prototypeVar._maximum = null
};
AdfRangeValue.prototype.Init = function(minimum, maximum) {
  AdfRangeValue.superclass.Init.call(this);
  AdfAssert.assertNumberOrNull(minimum);
  AdfAssert.assertNumberOrNull(maximum);
  if(minimum > maximum) {
    var temp = minimum;
    minimum = maximum;
    maximum = temp
  }
  if(minimum != null) {
    this._minimum = minimum
  }
  if(maximum != null) {
    this._maximum = maximum
  }
};

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlInlineFramePeer");
AdfDhtmlInlineFramePeer.InitSubclass = function() {
  var iframeIds = [];
  iframeIds._fastPoll = false;
  iframeIds._timerId = undefined;
  this._iframeIds = iframeIds;
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichInlineFrame.SOURCE);
  this._LOAD_EVENT_TYPE = "inlineFrameLoad"
};
AdfDhtmlInlineFramePeer.prototype.InitDomElement = function(component, rootElement) {
  AdfDhtmlInlineFramePeer.superclass.InitDomElement.call(this, component, rootElement);
  AdfPage.PAGE.registerLoadingComponent(component);
  var iframeElement = this.__getIframe(rootElement);
  var src = iframeElement.getAttribute("_src");
  if(src != null) {
    AdfPage.PAGE.__perfTimings(false, false, true, "GET request sent for iFrame. Source is: ", src);
    var agent = AdfAgent.AGENT;
    var isWebkit = agent.getPlatform() == AdfAgent.WEBKIT_PLATFORM;
    if(!isWebkit || isWebkit && agent.getVersion() >= 535.19) {
      iframeElement.setAttribute("src", src);
      iframeElement.removeAttribute("_src")
    }else {
      AdfDhtmlInlineFramePeer._replaceIframe(iframeElement)
    }
  }
};
AdfDhtmlInlineFramePeer.prototype.GetReadyState = function() {
  var iframeDomElement = this.__getIframe();
  if(iframeDomElement) {
    AdfLogger.LOGGER.fine("AdfDhtmlInlineFramePeer.GetReadyState: Frame dom is present");
    try {
      var innerWindow = iframeDomElement.contentWindow;
      if(innerWindow.document.readyState === "complete") {
        AdfLogger.LOGGER.fine("AdfDhtmlInlineFramePeer.GetReadyState: ", "Determine inner document is ADF or not");
        var innerAdfPage = innerWindow.AdfPage;
        if(innerAdfPage) {
          var innerAdfPagePAGE = innerAdfPage.PAGE;
          if(innerAdfPagePAGE && innerAdfPagePAGE.isSynchronizedWithServer && innerAdfPagePAGE.isSynchronizedWithServer()) {
            AdfLogger.LOGGER.fine("AdfDhtmlInlineFramePeer.GetReadyState: inner ADF page ready");
            return AdfUIComponent.STATE_COMPLETE
          }else {
            AdfLogger.LOGGER.fine("AdfDhtmlInlineFramePeer.GetReadyState: inner ADF page not ready");
            return AdfUIComponent.STATE_LOADING
          }
        }else {
          AdfLogger.LOGGER.fine("AdfDhtmlInlineFramePeer.GetReadyState: Non ADF page ready");
          return AdfUIComponent.STATE_COMPLETE
        }
      }else {
        AdfLogger.LOGGER.fine("AdfDhtmlInlineFramePeer.GetReadyState: inner document not yet ready");
        return AdfUIComponent.STATE_LOADING
      }
    }catch(e) {
      AdfLogger.LOGGER.fine("AdfDhtmlInlineFramePeer.GetReadyState: Security exception.", " Document from different domain, nothing more to do");
      return AdfUIComponent.STATE_COMPLETE
    }
  }
  AdfLogger.LOGGER.fine("AdfDhtmlInlineFramePeer.GetReadyState: inlineFrame's dom is not ready");
  return AdfUIComponent.STATE_LOADING
};
AdfDhtmlInlineFramePeer._replaceIframe = function(iframeElement) {
  var agent = AdfAgent.AGENT;
  var newSrc = iframeElement.getAttribute("_src");
  var visible = AdfDomUtils.isVisible(iframeElement);
  AdfDomUtils.setVisible(iframeElement, false);
  iframeElement.removeAttribute("_src");
  iframeElement.removeAttribute("src");
  var cloneIframe = agent.cloneNode(iframeElement);
  iframeElement.onload = "void(0);";
  agent.elementsRemoved(iframeElement);
  iframeElement.parentNode.replaceChild(cloneIframe, iframeElement);
  cloneIframe.setAttribute("src", newSrc);
  agent.elementsAdded(cloneIframe);
  AdfDomUtils.setVisible(cloneIframe, visible)
};
AdfDhtmlInlineFramePeer.prototype.ComponentSourceChanged = function(component, domElement, newValue, oldValue) {
  var iframeElement = domElement;
  if(iframeElement.tagName != "IFRAME") {
    iframeElement = AdfDomUtils.getFirstChildElement(domElement)
  }
  if(!iframeElement || iframeElement.tagName != "IFRAME") {
    return false
  }
  iframeElement.src = newValue;
  return true
};
AdfDhtmlInlineFramePeer.prototype.BindToComponent = function(component, domElement) {
  AdfDhtmlInlineFramePeer.superclass.BindToComponent.call(this, component, domElement);
  var iframeElement = domElement;
  if(iframeElement.tagName != "IFRAME") {
    iframeElement = AdfDomUtils.getFirstChildElement(domElement)
  }
  var sizing = component.getSizing();
  if(sizing === "preferred" && iframeElement.getAttribute("_adfLoaded") === "1") {
    AdfDhtmlInlineFramePeer._registerIFrameForSizing(iframeElement)
  }
};
AdfDhtmlInlineFramePeer.prototype.ComponentRemoved = function(component) {
  var sizing = component.getSizing();
  var page = AdfPage.PAGE;
  page.unregisterLoadingComponent(component);
  if(sizing === "preferred") {
    var iframeIds = AdfDhtmlInlineFramePeer._iframeIds;
    AdfCollections.removeArrayValue(iframeIds, component.getClientId());
    if(iframeIds.length == 0) {
      page.getDomWindow().clearInterval(iframeIds._timerId);
      iframeIds._timerId = undefined
    }
  }
  var agent = AdfAgent.AGENT;
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM) {
    this.bind(component);
    var frameDom = this.__getIframe();
    AdfDomUtils.setVisible(frameDom, false);
    var version = agent.getVersion();
    if(version >= 9 && version <= 10) {
      frameDom.setAttribute("onload", "void(0)");
      var blankPageURL = "about:blank";
      frameDom.setAttribute("src", blankPageURL)
    }
  }
  AdfDhtmlInlineFramePeer.superclass.ComponentRemoved.call(this, component)
};
AdfDhtmlInlineFramePeer.prototype.ScrollIntoView = function(component, focus, subTargetId) {
  var inlineFrame = this.getDomElement();
  if(inlineFrame.tagName != "IFRAME") {
    inlineFrame = AdfDomUtils.getFirstChildElement(inlineFrame)
  }
  inlineFrame.scrollIntoView();
  var iframeDoc = inlineFrame.contentWindow.document;
  var subTargetElement = null;
  if(subTargetId != null) {
    subTargetElement = iframeDoc.getElementById(subTargetId);
    if(subTargetElement) {
      subTargetElement.scrollIntoView()
    }
  }
  if(focus) {
    if(subTargetElement) {
      AdfFocusUtils.focusElement(subTargetElement)
    }else {
      AdfFocusUtils.focusElement(inlineFrame)
    }
  }
};
AdfDhtmlInlineFramePeer._loadHandler = function(evt) {
  AdfPage.PAGE.__perfTimings(false, false, false, "iFrame load handler called.");
  var agent = AdfAgent.AGENT;
  var page = AdfPage.PAGE;
  var event = evt;
  if(agent.getPlatform() == AdfAgent.IE_PLATFORM) {
    if(!event) {
      event = page.getDomWindow().event
    }
    event = agent.cloneEvent(event)
  }else {
    if(agent.getPlatform() == AdfAgent.WEBKIT_PLATFORM) {
      event = agent.cloneEvent(event)
    }
  }
  var iframeDom = agent.getEventTarget(event);
  if(iframeDom == null) {
    iframeDom = event.currentTarget
  }
  if(iframeDom.getAttribute("_adfLoaded") === "1") {
    AdfPage.PAGE.__perfTimings(false, false, true, "GET response received for iFrame. Source is: ", iframeDom.getAttribute("src"))
  }
  var clientId = iframeDom.getAttribute("id");
  var stretchedFrameSubIdIndex = clientId.indexOf("::f");
  if(stretchedFrameSubIdIndex != -1 && stretchedFrameSubIdIndex == clientId.length - 3) {
    clientId = iframeDom.parentNode.getAttribute("id")
  }
  AdfAssert.assertString(clientId, "clientId");
  var inlineFrameComponent = page.findComponent(clientId);
  if(inlineFrameComponent) {
    AdfDhtmlInlineFramePeer._removeLoadingStatus(iframeDom, clientId);
    (new AdfDomComponentEvent(inlineFrameComponent, AdfDhtmlInlineFramePeer._LOAD_EVENT_TYPE, event)).queue(true);
    var sizing = inlineFrameComponent.getSizing();
    if(sizing === "preferred") {
      if(!AdfDhtmlInlineFramePeer._isIframeSizingAllowed(iframeDom)) {
        AdfPage.PAGE.__perfTimings(true, false, true, "Response processig done for iFrame. Source is: ", iframeDom.getAttribute("src"));
        return
      }
      if(iframeDom.getAttribute("_adfLoaded") === "1") {
        iframeDom.style.minWidth = "0px";
        iframeDom.style.minHeight = "0px";
        AdfPage.PAGE.__perfTimings(false, false, false, "Immediately resizing iFrame.");
        AdfDhtmlInlineFramePeer._resizeIframeToPreferred(iframeDom);
        AdfPage.PAGE.__perfTimings(true, false, true, "Response processig done for iFrame. Source is: ", iframeDom.getAttribute("src"))
      }else {
        AdfPage.PAGE.__perfTimings(false, false, false, "Registering iFrame for resizing.");
        AdfDhtmlInlineFramePeer._registerIFrameForSizing(iframeDom)
      }
    }else {
      AdfPage.PAGE.__perfTimings(true, false, true, "Response processig done for iFrame. Source is: ", iframeDom.getAttribute("src"))
    }
  }else {
    iframeDom.setAttribute("_adfLoaded", "1")
  }
};
AdfDhtmlInlineFramePeer.__iframeLoadHandler = function(evt) {
  var target = AdfAgent.AGENT.getEventTarget(evt);
  target.contentWindow.postMessage("_adfShowBody", "*");
  try {
    AdfDhtmlInlineFramePeer._loadHandler(evt)
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsInfo(e, "inlineFrame load handler")
  }
};
AdfDhtmlInlineFramePeer._removeLoadingStatus = function(iframeDom, clientId) {
  var src = iframeDom.getAttribute("_src");
  if(src != null) {
    return
  }
  var flowingComponent = AdfDomUtils.containsCSSClassName(iframeDom, "p_AFFlow");
  if(flowingComponent) {
    AdfDomUtils.removeCSSClassName(iframeDom, "p_AFBusy");
    AdfLogger.LOGGER.fine("Removed busy from iframe: ", clientId)
  }else {
    var parentNode = iframeDom.parentNode;
    AdfDomUtils.removeCSSClassName(parentNode, "p_AFBusy");
    AdfLogger.LOGGER.fine("Removed busy from iframe's parentNode: ", clientId)
  }
};
AdfDhtmlInlineFramePeer._registerIFrameForSizing = function(iframeDom) {
  AdfAssert.assertDomElement(iframeDom);
  if(!AdfDhtmlInlineFramePeer._isIframeSizingAllowed(iframeDom)) {
    return
  }
  var iframeIds = AdfDhtmlInlineFramePeer._iframeIds;
  var iframeId = iframeDom.id;
  if(AdfCollections.indexOf(iframeIds, iframeId) > -1) {
    iframeIds.push(iframeId)
  }
  AdfDhtmlInlineFramePeer._resizeIframeToPreferred(iframeDom);
  AdfPage.PAGE.__perfTimings(true, false, true, "Response processig done for iFrame. Source is: ", iframeDom.getAttribute("src"));
  if(iframeIds.length == 1) {
    iframeIds._timerId = AdfPage.PAGE.getDomWindow().setInterval(AdfDhtmlInlineFramePeer._minSizeResizeListener, 1E3)
  }
};
AdfDhtmlInlineFramePeer._isIframeSizingAllowed = function(iframeDom) {
  try {
    var iframeContentWindow = iframeDom.contentWindow;
    var test = AdfAgent.AGENT.getWindowScrollWidth(iframeContentWindow);
    return true
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsWarning(e, "Error sizing iframe. This could occur if the iframe's " + "sizing is set to preferred and the iframe's source is not from the same domain as the page. " + "iframe id: " + iframeDom.id + ", iframe source: " + iframeDom.src + ", page location: " + window.location + ".");
    return false
  }
};
AdfDhtmlInlineFramePeer._resizeIframeToPreferred = function(iframeDom) {
  if(!AdfDhtmlInlineFramePeer._isIframeSizingAllowed(iframeDom)) {
    return false
  }
  var heightOnly = false;
  var laf = AdfPage.PAGE.getLookAndFeel();
  if(AdfDomUtils.containsCSSClassName(iframeDom, laf.getStyleClass("AFStretchWidth")) || AdfDomUtils.containsCSSClassName(iframeDom, laf.getStyleClass("AFAuxiliaryStretchWidth"))) {
    heightOnly = true
  }
  var agent = AdfAgent.AGENT;
  var iframeContentWindow = iframeDom.contentWindow;
  var widthDelta = 0;
  if(!heightOnly) {
    widthDelta = agent.getWindowScrollWidth(iframeContentWindow) - agent.getWindowClientWidth(iframeContentWindow)
  }
  var heightDelta = agent.getWindowScrollHeight(iframeContentWindow) - agent.getWindowClientHeight(iframeContentWindow);
  var resized = false;
  var iframeStyle = iframeDom.style;
  if(widthDelta > 0) {
    iframeStyle.minWidth = iframeDom.offsetWidth + widthDelta + "px";
    resized = true
  }
  var iframeIds = AdfDhtmlInlineFramePeer._iframeIds;
  var iframeId = iframeDom.id;
  if(heightDelta > 0) {
    iframeStyle.minHeight = iframeDom.offsetHeight + heightDelta + 1 + "px";
    resized = true;
    iframeIds[iframeId] = iframeDom.clientWidth
  }else {
    var resizeWidth = iframeIds[iframeId];
    if(resizeWidth !== undefined && iframeDom.clientWidth > resizeWidth) {
      iframeStyle.minHeight = "0px";
      resized = true
    }
  }
  return resized
};
AdfDhtmlInlineFramePeer._minSizeResizeListener = function() {
  var iframeIds = AdfDhtmlInlineFramePeer._iframeIds;
  if(iframeIds.length == 0) {
    return
  }
  var resized = false;
  var theDocument = document;
  var iframeCount = iframeIds.length;
  var resizeFunc = AdfDhtmlInlineFramePeer._resizeIframeToPreferred;
  for(var i = 0;i < iframeCount;i++) {
    var currIframeId = iframeIds[i];
    var iframeDom = theDocument.getElementById(currIframeId);
    resized |= resizeFunc(iframeDom)
  }
  if(resized ^ iframeIds._fastPoll) {
    var theWindow = AdfPage.PAGE.getDomWindow();
    if(iframeIds._timerId !== undefined) {
      theWindow.clearInterval(iframeIds._timerId)
    }
    var pollSpeed = resized ? 100 : 1E3;
    iframeIds._timerId = theWindow.setInterval(AdfDhtmlInlineFramePeer._minSizeResizeListener, pollSpeed);
    iframeIds._fastPoll = resized
  }
};
AdfDhtmlInlineFramePeer.prototype.__getIframe = function(domElement) {
  var iframeElement = domElement ? domElement : this.getDomElement();
  if(iframeElement.tagName != "IFRAME") {
    iframeElement = AdfDomUtils.getFirstChildElement(iframeElement)
  }
  AdfAssert.assertDomElement(iframeElement, "IFRAME");
  return iframeElement
};

function AdfDhtmlMultipartUpload() {
  this.Init()
}
AdfObject.createSubclass(AdfDhtmlMultipartUpload);
AdfDhtmlMultipartUpload._requestCallback = function(xmlRequest) {
  AdfLogger.LOGGER.finer("Request complete:", xmlRequest);
  var dts = AdfPage.PAGE.getDataTransferService(false, false, true);
  if(dts) {
    dts._handleRequestCallback(xmlRequest)
  }
};

function AdfWebDriverTestEngine() {
}
AdfObject.createSubclass(AdfWebDriverTestEngine, AdfDhtmlTestEngine);
AdfWebDriverTestEngine.prototype.simulateDomMouse = function(domElement, mouseEvent) {
};

AdfRichTimeZoneTranslations.getTimeZoneTranslations = function() {
  return this["__TRANSLATIONS"]
};
function AdfRichTimeZoneTranslations() {
}
;
function AdfSvgCacheManager() {
  this.Init()
}
AdfObject.createSubclass(AdfSvgCacheManager);
AdfSvgCacheManager.prototype.Init = function() {
  AdfSvgCacheManager.superclass.Init.call(this);
  this._svgCache = AdfSvgInMemoryCache.getInstance()
};
AdfSvgCacheManager.prototype.embedSVG = function(component, span, iconUrl) {
  AdfAssert.assert(component != null);
  AdfAssert.assertDomElement(span);
  AdfAssert.assertString(iconUrl);
  iconUrl = this._normalizeURL(iconUrl);
  var svgNode = this._svgCache.getSvgIcon(iconUrl);
  if(svgNode) {
    var svgContainer = span.parentNode;
    AdfSvgCacheManager._copyAttributesToSVG(span, svgNode);
    svgContainer.replaceChild(svgNode, span);
    return
  }
  this._sendRequest(component, span, iconUrl)
};
AdfSvgCacheManager.prototype.clearSvgIcon = function(url) {
  this._svgCache.invalidateSvgIcon(url)
};
AdfSvgCacheManager.prototype._sendRequest = function(component, spanElement, iconUrl) {
  var url = iconUrl.split("#");
  var urlRoot = url[0];
  var urlHash = url[1];
  var xmlHttp = new AdfXMLRequest;
  var self = this;
  var svgCallback = function(xmlHttp) {
    var isInlineSVGFinished = self._inlineSVGCallback(component, spanElement, iconUrl, urlHash, xmlHttp);
    if(isInlineSVGFinished == false) {
      var altSourceUrl = component.getAltSource && component.getAltSource() != null ? AdfPage.PAGE.getResourceURL(component.getAltSource()) : null;
      if(altSourceUrl != null) {
        AdfAssert.assertString(altSourceUrl);
        altSourceUrl = self._normalizeURL(altSourceUrl);
        url = altSourceUrl.split("#");
        var altUrlRoot = url[0];
        if(urlRoot != altUrlRoot) {
          urlRoot = altUrlRoot;
          xmlHttp.send(urlRoot, null, true)
        }
      }
    }
  };
  xmlHttp.setCallback(svgCallback);
  component._xhrInProgress = true;
  AdfPage.PAGE.registerLoadingComponent(component);
  xmlHttp.send(urlRoot, null, true)
};
AdfSvgCacheManager.prototype._cacheSvg = function(svgNode, url) {
  var processedSvgNode = svgNode.cloneNode(true);
  this._svgCache.setSvgIcon(url, processedSvgNode)
};
AdfSvgCacheManager.prototype._inlineSVGCallback = function(component, span, iconUri, urlHash, xmlHttp) {
  if(xmlHttp.getCompletionState() == AdfXMLRequest.COMPLETED) {
    if(xmlHttp.getStatus() != 200 && xmlHttp.getStatus() != 304) {
      AdfLogger.LOGGER.fine("AdfRichUIPeer#_inlineSVGCallback - xhr status not OK (" + xmlHttp.getStatus() + ") in response of this url: " + iconUri);
      return false
    }
    var responseXML = xmlHttp.getResponseXML();
    if(!responseXML) {
      var parsedDoc;
      try {
        var parser = new DOMParser;
        parsedDoc = parser.parseFromString(xmlHttp.getResponseText(), "text/xml")
      }catch(e) {
        AdfLogger.LOGGER.warning("AdfRichUIPeer#_inlineSVGCallback - failed to parse svg to xml " + "in response of this url : " + iconUri);
        return false
      }
      if(!parsedDoc) {
        AdfLogger.LOGGER.warning("AdfRichUIPeer#_inlineSVGCallback - failed to get svg as xml " + "in response of this url : " + iconUri);
        return false
      }
      responseXML = parsedDoc
    }
    var svgElement;
    try {
      if(urlHash) {
        var symbol = responseXML.getElementById(urlHash);
        if(!symbol.childNodes.length) {
          AdfLogger.LOGGER.fine("AdfRichUIPeer#_inlineSVGCallback - child for svg symbol not found " + "in response of this url : " + iconUri);
          return false
        }
        svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        AdfDomUtils.copyAllAttributes(symbol, svgElement);
        var fragment = document.createDocumentFragment();
        while(symbol.childNodes.length) {
          fragment.appendChild(symbol.childNodes[0])
        }
        svgElement.appendChild(fragment)
      }else {
        var svg = responseXML.getElementsByTagName("svg")[0];
        if(!svg) {
          AdfLogger.LOGGER.warning("AdfRichUIPeer#_inlineSVGCallback - svg node not found in response of this url: " + iconUri);
          return false
        }
        svgElement = document.importNode(svg, true)
      }
    }catch(err) {
      AdfLogger.LOGGER.error("AdfRichUIPeer#_inlineSVGCallback - invalid svg url: " + iconUri);
      return false
    }
    this._cacheSvg(svgElement, iconUri);
    AdfSvgCacheManager._copyAttributesToSVG(span, svgElement);
    var agent = AdfAgent.AGENT;
    agent.elementsRemoved(span);
    span.parentNode.replaceChild(svgElement, span);
    agent.elementsAdded(svgElement);
    component._xhrInProgress = false;
    AdfPage.PAGE.unregisterLoadingComponent(component);
    return true
  }
};
AdfSvgCacheManager.prototype._normalizeURL = function(url) {
  try {
    var agent = AdfAgent.AGENT;
    var origin = agent.getOrigin();
    if(url.indexOf("://") === -1 && url.indexOf("//") === -1) {
      if(url.charAt(0) != "/") {
        url = AdfPage.PAGE.getResourceURL("/" + url)
      }
      if(origin) {
        url = origin + url
      }
    }
    var parseUrl;
    if(agent.getPlatform() == AdfAgent.IE_PLATFORM) {
      parseUrl = document.createElement("a");
      parseUrl.href = url;
      origin = (origin ? origin.toLowerCase() : "") + "/"
    }else {
      parseUrl = new URL(url);
      origin = origin ? origin.toLowerCase() : ""
    }
    return origin + parseUrl.pathname + parseUrl.hash + parseUrl.search
  }catch(error) {
    AdfLogger.LOGGER.warning("Invalid url could not normalize the url: " + error + "url: " + url)
  }
  return url
};
AdfSvgCacheManager._copyAttributesToSVG = function(spanElement, svgElement) {
  for(var i = 0;i < spanElement.attributes.length;i++) {
    var attr = spanElement.attributes[i];
    if(attr.name != "src") {
      var svgAttrValue = svgElement.getAttribute(attr.name);
      var newValue;
      if(svgAttrValue && attr.name == "class") {
        newValue = svgAttrValue + " " + attr.value
      }else {
        if(svgAttrValue && attr.name == "style") {
          newValue = svgAttrValue + ";" + attr.value
        }else {
          if(attr.name == "title" && attr.value != "") {
            svgElement.setAttribute("role", "img");
            newValue = attr.value;
            svgElement.setAttribute("aria-label", newValue);
            var title = document.createElementNS("http://www.w3.org/2000/svg", "title");
            title.textContent = newValue;
            svgElement.insertBefore(title, svgElement.firstChild);
            continue
          }else {
            newValue = attr.value
          }
        }
      }
      svgElement.setAttribute(attr.name, newValue)
    }
  }
};

function AdfSvgInMemoryCache() {
  this.Init()
}
AdfObject.createSubclass(AdfSvgInMemoryCache);
AdfSvgInMemoryCache.prototype.Init = function() {
  this._cache = {};
  AdfPage.PAGE.setPageProperty(AdfSvgInMemoryCache._SVG_CACHE_KEY, this._cache)
};
AdfSvgInMemoryCache.getInstance = function(type) {
  AdfAssert.assertStringOrNull(type);
  if(!this._instance) {
    if(type == AdfSvgInMemoryCache.NO_CACHE_KEY) {
      this._instance = {getSvgIcon:function(url) {
      }, setSvgIcon:function(url, data) {
      }, invalidateSvgIcon:function(url) {
      }}
    }else {
      this._instance = new AdfSvgInMemoryCache
    }
  }
  return this._instance
};
AdfSvgInMemoryCache.prototype.getSvgIcon = function(url) {
  AdfAssert.assertString(url);
  var svgNode = this._cache[url];
  return svgNode ? svgNode.cloneNode(true) : null
};
AdfSvgInMemoryCache.prototype.setSvgIcon = function(url, data) {
  AdfAssert.assertString(url);
  AdfAssert.assert(data != null);
  this._cache[url] = data
};
AdfSvgInMemoryCache.prototype.invalidateSvgIcon = function(url) {
  AdfAssert.assertString(url);
  var data = this._cache[url];
  if(data) {
    delete this._cache[url]
  }
};
AdfSvgInMemoryCache._SVG_CACHE_KEY = "oracle$adfinternal$svgcache";
AdfSvgInMemoryCache.NO_CACHE_KEY = "noCache";

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlValuePeer");
AdfDhtmlValuePeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentPropertyGetters(this, AdfUIValue.VALUE);
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfUIValue.VALUE)
};
AdfDhtmlValuePeer.prototype.InitDomElement = function(component, domElement) {
  AdfDhtmlValuePeer.superclass.InitDomElement.call(this, component, domElement);
  var converter = component.getConverter();
  var isClientOnlyConverter = converter && converter.isClientOnly && converter.isClientOnly();
  if(isClientOnlyConverter) {
    var formattedDisplayStr = this.GetFormattedDisplayValue(component, domElement, converter);
    this.SetDisplayValue(component, domElement, formattedDisplayStr)
  }
};
AdfDhtmlValuePeer.prototype.getConvertedValue = function(component, submittedValue) {
  var newValue = submittedValue;
  if(component == null) {
    component = this.getComponent()
  }
  if(component.getConverter) {
    var converter = component.getConverter();
    if(converter != null) {
      newValue = converter.getAsObject(submittedValue, component.getProperty("label"))
    }
  }
  return newValue
};
AdfDhtmlValuePeer.prototype.getFormatHint = function(component) {
  if(component.getConverter) {
    var converter = component.getConverter();
    if(converter && converter.getFormatHint) {
      return converter.getFormatHint()
    }else {
      return null
    }
  }
  return null
};
AdfDhtmlValuePeer.prototype.getConvertedObject = function(component, value) {
  if(value != null) {
    var newValue = value;
    if(component == null) {
      component = this.getComponent()
    }
    if(component.getConverter != undefined) {
      var converter = component.getConverter();
      if(converter != null) {
        newValue = converter.getAsString(value, component.getProperty("label"))
      }
    }
    return newValue
  }
  return null
};
AdfDhtmlValuePeer.prototype.isEmpty = function(submittedValue) {
  if(submittedValue == null) {
    return true
  }
  submittedValue = AdfUIUtils.trim(submittedValue);
  return submittedValue.length == 0
};
AdfDhtmlValuePeer.prototype.GetDisplayValue = function(component, domElement, unconditional) {
  AdfAssert.failedInAbstractFunction()
};
AdfDhtmlValuePeer.prototype.GetFormattedDisplayValue = function(component, domElement, clientConverter) {
  var rawDisplayValue = this.GetDisplayValue(component, domElement, true);
  try {
    return clientConverter.getAsString(rawDisplayValue, component.getProperty("label"))
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsSevere(e, "Invoking TrClientConverter.getAsString on component (id='" + component.getClientId() + "') resulted in an unexpected exception. The component's display value will not be formatted.")
  }
  return rawDisplayValue
};
AdfDhtmlValuePeer.prototype.setDisplayValue = function(component, newValue) {
  this.bind(component);
  this.SetDisplayValue(component, this.getDomElement(), newValue)
};
AdfDhtmlValuePeer.prototype.SetDisplayValue = function(component, domElement, newValue) {
  AdfAssert.failedInAbstractFunction()
};
AdfDhtmlValuePeer.prototype.GetComponentValue = function(component, domElement) {
  var displayValue = this.GetDisplayValue(component, domElement, true);
  if(!this.isEmpty(displayValue)) {
    try {
      var newValue = this.getConvertedValue(component, displayValue);
      return newValue
    }catch(e) {
      return null
    }
  }
  return null
};
AdfDhtmlValuePeer.prototype.ComponentValueChanged = function(component, domElement, newValue, oldValue) {
  if(newValue == null) {
    newValue = this.GetNullDefault()
  }else {
    var convertedValue = this.getConvertedObject(component, newValue);
    if(convertedValue === undefined) {
      AdfLogger.LOGGER.warning("The new value '", newValue, "' could not be converted for display.");
      return
    }
    newValue = convertedValue
  }
  return this.SetDisplayValue(component, domElement, newValue)
};
AdfDhtmlValuePeer.prototype.GetNullDefault = function() {
  return""
};

AdfRichUIPeer.createPeerClass(AdfDhtmlValuePeer, "AdfDhtmlOutputLabelPeer");
AdfDhtmlOutputLabelPeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichOutputLabel.SHOW_REQUIRED)
};
AdfDhtmlOutputLabelPeer.prototype.InitDomElement = function(component, domElement) {
  AdfDhtmlOutputLabelPeer.superclass.InitDomElement.call(this, component, domElement);
  this._changeForValue(component, domElement)
};
AdfDhtmlOutputLabelPeer.prototype.SetDisplayValue = function(component, domElement, newValue) {
  AdfAssert.assertString(newValue);
  AdfAgent.AGENT.setTextContent(domElement, newValue)
};
AdfDhtmlOutputLabelPeer.prototype.GetDisplayValue = function(component, domElement) {
  AdfDomUtils.stripScripts(domElement);
  return AdfAgent.AGENT.getTextContent(domElement)
};
AdfDhtmlOutputLabelPeer.__componentShowRequiredChanged = function(component, domElement, newValue, oldValue) {
  var reqIconSpan = AdfDomUtils.getFirstElementMatch(domElement, true, AdfDhtmlOutputLabelPeer._matchRequiredIconSpan);
  if(!reqIconSpan) {
    return false
  }
  if(newValue) {
    var rawIcon = AdfPage.PAGE.getLookAndFeel().getIcon("AFRequiredIcon");
    reqIconSpan.appendChild(rawIcon)
  }else {
    AdfDomUtils.removeAllNodes(reqIconSpan)
  }
  return true
};
AdfDhtmlOutputLabelPeer._matchRequiredIconSpan = function(element) {
  var tagName = element.tagName;
  if(tagName == "SPAN" && AdfDomUtils.containsCSSClassName(element, AdfDhtmlOutputLabelPeer._REQUIRED_ICON_PLACEHOLDER_STYLE_CLASS)) {
    return true
  }
  return false
};
AdfDhtmlOutputLabelPeer.prototype.ComponentShowRequiredChanged = AdfDhtmlOutputLabelPeer.__componentShowRequiredChanged;
AdfDhtmlOutputLabelPeer.prototype._getLabelElement = function(node) {
  var nodes = node.childNodes;
  for(i = 0;i < nodes.length;i++) {
    if(AdfAgent.AGENT.getNodeName(nodes[i]) == "LABEL") {
      return nodes[i]
    }
  }
  return null
};
AdfDhtmlOutputLabelPeer.prototype._changeForValue = function(component, domElement) {
  var label = this._getLabelElement(domElement);
  if(label) {
    var forValue = label.getAttribute(AdfDhtmlOutputLabelPeer.HTML_FOR);
    if(forValue) {
      forObject = AdfAgent.AGENT.getElementById(forValue);
      if(forObject && !AdfFocusUtils.isTabStop(forObject)) {
        var focusElement = AdfFocusUtils.getFirstTabStop(forObject);
        if(focusElement) {
          label.htmlFor = focusElement.id
        }
      }
    }
  }
};
AdfDhtmlOutputLabelPeer.HTML_FOR = "for";
AdfDhtmlOutputLabelPeer._REQUIRED_ICON_PLACEHOLDER_STYLE_CLASS = "p_rqi";

AdfRichUIPeer.createPeerClass(AdfDhtmlValuePeer, "AdfDhtmlEditableValuePeer");
AdfDhtmlEditableValuePeer.InitSubclass = function() {
  this._CONTENT_ID = "content";
  this._CONTENT_ID_ATTR_NAME = "__afrEditableValueContentId";
  this._NOTE_WINDOW_POPUP_ID = "_afNoteWindowPopup";
  this._INSTRUCTIONS_TEXT = "_afrInstructionsText";
  this._HELPICON_ID = "_afrHelpIcon";
  this._INITIALIZED = "_adfInitialized";
  this._NOTE_WINDOW_SEPARATOR_STYLE_CLASS = "AFNoteWindowSeparator";
  this._NOTE_WINDOW_HINT_TEXT_STYLE_CLASS = "AFNoteWindowHintText";
  this._NOTE_WINDOW_INSTRUCTIONS_STYLE_CLASS = "AFNoteWindowInstructions";
  this._NOTE_WINDOW_SHORT_DESC_STYLE_CLASS = "AFNoteWindowShortDesc";
  this._NOTE_WINDOW_FOOTER_STYLE_CLASS = "AFNoteWindowFooter";
  this._NOTE_WINDOW_MAX_WIDTH = 340;
  this._OLD_VALUE_EXPANDO = "_afOV";
  this._INIT_VALUE_EXPANDO = "data-afr-init-value";
  this._LAST_SUBMITTED_VALUE_EXPANDO = "data-afr-last-submitted-value";
  this._MARK_DIRTY = "data-afr-mark-dirty";
  this._SCREEN_READER_NOTE_WINDOW_LAUNCH_ID = "nwl";
  this._SCREEN_READER_LAUNCH_ID_EXPANDO = "_afrLaunchId";
  this._SCREEN_READER_NOTE_WINDOW_STATIC_EXPANDO = "_afrStatic";
  AdfDhtmlEditableValuePeer._HIDE_NOTE_SCHEDULED = "hideNoteScheduled";
  AdfDhtmlEditableValuePeer._LAST_VALIDATE_TIME = "lastValidateTime";
  AdfRichUIPeer.addSuppressedPPRAttributes(this, AdfDhtmlEditableValuePeer._LAST_VALIDATE_TIME);
  AdfRichUIPeer.addSuppressedPPRAttributes(this, AdfDhtmlEditableValuePeer._HIDE_NOTE_SCHEDULED);
  AdfRichUIPeer.addComponentPropertyChanges(this, "showRequired");
  AdfRichUIPeer.addComponentPropertyGetters(this, AdfUIValue.VALUE);
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.FOCUS_EVENT_TYPE, AdfUIInputEvent.CLICK_EVENT_TYPE, AdfUIInputEvent.KEY_UP_EVENT_TYPE)
};
AdfDhtmlEditableValuePeer.prototype.InitDomElement = function(component, domElement) {
  AdfDhtmlEditableValuePeer.superclass.InitDomElement.call(this, component, domElement);
  var page = AdfPage.PAGE;
  if(page.isScreenReaderMode()) {
    if(!this.constructor.STATELESS) {
      this.BindToComponent(component, domElement)
    }
    this._initializeScreenReader(component, domElement)
  }
  if(AdfDhtmlEditableValuePeer._noteWindowDismissTimout == undefined) {
    var timeout = lookAndFeel.getSkinProperty("af|document-tr-hint-display-timeout");
    AdfDhtmlEditableValuePeer._noteWindowDismissTimout = parseInt(timeout);
    if(isNaN(AdfDhtmlEditableValuePeer._noteWindowDismissTimout)) {
      AdfDhtmlEditableValuePeer._noteWindowDismissTimout = 0
    }
  }
};
AdfDhtmlEditableValuePeer.prototype.autoSubmit = function(component) {
  AdfAutoSubmitEvent.queue(component)
};
AdfDhtmlEditableValuePeer.prototype.disableBrowserAutoComplete = function(component) {
  var contentNode = AdfDhtmlEditableValuePeer.GetContentNode(component);
  if(contentNode && contentNode.tagName == "INPUT" && contentNode.getAttribute("type") == "text") {
    contentNode.setAttribute("AUTOCOMPLETE", "off")
  }
};
AdfDhtmlEditableValuePeer.prototype.BindToComponent = function(component, domElement) {
  AdfDhtmlEditableValuePeer.superclass.BindToComponent.call(this, component, domElement);
  var isInitialized = this.IsInitialized(component, domElement);
  if(!isInitialized) {
    this.LazyInitialize(component, domElement);
    var agent = AdfAgent.AGENT;
    agent.setExpandoProperty(domElement, AdfDhtmlEditableValuePeer._INITIALIZED, "init")
  }
};
AdfDhtmlEditableValuePeer.prototype.IsInitialized = function(component, domElement) {
  var agent = AdfAgent.AGENT;
  var isInitialized = agent.getExpandoProperty(domElement, AdfDhtmlEditableValuePeer._INITIALIZED);
  if(!isInitialized) {
    return false
  }
  return true
};
AdfDhtmlEditableValuePeer.prototype.Validate = function(component, submittedValue) {
  AdfPage.PAGE.clearMessages(component.getClientId());
  component.validate(submittedValue);
  component.setProperty(AdfDhtmlEditableValuePeer._LAST_VALIDATE_TIME, (new Date).getTime())
};
AdfDhtmlEditableValuePeer.prototype.setLastSubmittedValue = function(component, submittedValue) {
  var rootNode = AdfRichUIPeer.getDomElementForComponent(component);
  AdfAgent.AGENT.setExpandoProperty(rootNode, AdfDhtmlEditableValuePeer._LAST_SUBMITTED_VALUE_EXPANDO, submittedValue)
};
AdfDhtmlEditableValuePeer.prototype.getLastSubmittedValue = function(component) {
  var rootNode = AdfRichUIPeer.getDomElementForComponent(component);
  return AdfAgent.AGENT.getExpandoProperty(rootNode, AdfDhtmlEditableValuePeer._LAST_SUBMITTED_VALUE_EXPANDO)
};
AdfDhtmlEditableValuePeer.prototype.setMarkDirtyFlag = function(flag) {
  var rootNode = this.getDomElement();
  AdfAgent.AGENT.setExpandoProperty(rootNode, AdfDhtmlEditableValuePeer._MARK_DIRTY, flag)
};
AdfDhtmlEditableValuePeer.prototype.getMarkDirtyFlag = function() {
  var rootNode = this.getDomElement();
  return AdfAgent.AGENT.getExpandoProperty(rootNode, AdfDhtmlEditableValuePeer._MARK_DIRTY)
};
AdfDhtmlEditableValuePeer.prototype.GetValidatorHints = function(component) {
  if(component.getValidators) {
    var validators = component.getValidators();
    if(validators != null) {
      var allHints = new Array;
      var converter = component.getConverter();
      for(var i = 0;i < validators.length;i++) {
        var validator = validators[i];
        if(validator.getHints) {
          var hints = validator.getHints(converter);
          if(hints) {
            for(var j = 0;j < hints.length;j++) {
              allHints.push(hints[j])
            }
          }
        }
      }
      if(allHints.length == 0) {
        allHints = null
      }
      return allHints
    }
  }
  return null
};
AdfDhtmlEditableValuePeer.GetContentNodeId = function(component, rootNode) {
  AdfAssert.assert(component != null);
  if(!rootNode) {
    rootNode = AdfRichUIPeer.getDomElementForComponent(component)
  }
  AdfAssert.assert(rootNode != null);
  var id = AdfAgent.AGENT.getExpandoProperty(rootNode, AdfDhtmlEditableValuePeer._CONTENT_ID_ATTR_NAME);
  if(id == null) {
    var subid = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlEditableValuePeer._CONTENT_ID);
    var contentNode = AdfAgent.AGENT.getElementById(subid);
    if(!contentNode || contentNode.id == null) {
      contentNode = rootNode
    }
    var contentNodeId = contentNode.id;
    AdfAssert.assert(contentNodeId != null);
    AdfAgent.AGENT.setExpandoProperty(rootNode, AdfDhtmlEditableValuePeer._CONTENT_ID_ATTR_NAME, contentNodeId);
    return contentNodeId
  }
  return id
};
AdfDhtmlEditableValuePeer.GetContentNode = function(component, rootNode) {
  return AdfDhtmlEditableValuePeer.getContentNode(component, rootNode)
};
AdfDhtmlEditableValuePeer.getContentNode = function(component, rootNode) {
  AdfAssert.assert(component != null);
  var id = AdfDhtmlEditableValuePeer.GetContentNodeId(component, rootNode);
  if(id) {
    var content = AdfAgent.AGENT.getElementById(id);
    if(content) {
      return content
    }
  }
  return rootNode
};
AdfDhtmlEditableValuePeer.getContentNodeText = function(component, domElement) {
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component, domElement);
  return component.getReadOnly() ? contentNode.textContent : contentNode.value
};
AdfDhtmlEditableValuePeer.__restoreDisplayValue = function(component, peer, restoredValue) {
  var validateFunc = peer.Validate;
  if(validateFunc) {
    var domElement = AdfDhtmlEditableValuePeer.getContentNode(component, null);
    peer.bind(component);
    peer.SetDisplayValue(component, domElement, restoredValue);
    validateFunc.call(peer, component)
  }else {
    component.SetDisplayValue(restoredValue);
    component.validate()
  }
};
AdfDhtmlEditableValuePeer.GetLabelElement = function(contentNode) {
  var labelElem;
  if(contentNode.labels) {
    labelElem = contentNode.labels[0]
  }else {
    labelElem = document.querySelector("label[for='" + contentNode.id + "']")
  }
  if(!labelElem && contentNode.parentElement.tagName == "LABEL") {
    labelElem = contentNode.parentElement
  }
  return labelElem
};
AdfDhtmlEditableValuePeer.GetLabelText = function(component) {
  var label = component.getLabel();
  if(label) {
    return label
  }
  var contentNode = AdfDhtmlEditableValuePeer.getContentNode(component);
  var labelElem = AdfDhtmlEditableValuePeer.GetLabelElement(contentNode);
  if(labelElem) {
    return labelElem.textContent
  }
};
AdfDhtmlEditableValuePeer.prototype.ShowNoteWindowMouseOver = function(componentEvent) {
  var page = AdfPage.PAGE;
  if(this.IsNoteWindowVisible() || page.isScreenReaderMode()) {
    return
  }
  var component = this.getComponent();
  var clientId = component.getClientId();
  if(this._noteCompMouseId && this._noteCompMouseId != clientId) {
    this._killNoteWindowMouseTimeout()
  }
  var isInsideContentDom = AdfDomUtils.isAncestorOrSelf(this.GetNoteWindowAlignmentNode(component), componentEvent.getNativeEventTarget());
  if(this._noteWindowFocusTimeout == null && this._noteWindowMouseTimeout == null && isInsideContentDom) {
    this._noteCompMouseId = clientId;
    this._noteWindowMouseTimeout = page.scheduleTimer(this, this._onMouseOverTimeout, component.getClientId(), 500)
  }else {
    if(this._noteWindowMouseTimeout != null && this._noteWindowFocusTimeout == null && !isInsideContentDom) {
      this._killNoteWindowMouseTimeout()
    }
  }
};
AdfDhtmlEditableValuePeer.prototype.HandleComponentClick = function(componentEvent) {
  if(componentEvent.getEventPhase() == AdfBaseEvent.AT_TARGET_PHASE) {
    var component = this.getComponent();
    if(AdfPage.PAGE.isScreenReaderMode()) {
      if(componentEvent.isLeftButtonPressed()) {
        var nativeTarget = componentEvent.getNativeEventTarget();
        var subid = AdfAgent.AGENT.getExpandoProperty(this.getDomElement(), AdfDhtmlEditableValuePeer._SCREEN_READER_LAUNCH_ID_EXPANDO);
        if(nativeTarget.id == subid || nativeTarget.parentNode.id == subid) {
          this.ShowNoteWindow(component, false)
        }
      }
    }
  }
};
AdfDhtmlEditableValuePeer.prototype.HandleComponentFocus = function(componentEvent) {
  var eventPhase = componentEvent.getEventPhase();
  var component = this.getComponent();
  if(eventPhase == AdfBaseEvent.AT_TARGET_PHASE || eventPhase == AdfBaseEvent.BUBBLING_PHASE && component == this._getPublicComponentOrAncestor(componentEvent.getSource())) {
    var page = AdfPage.PAGE;
    if(page.isScreenReaderMode()) {
      var element = page.getActiveDomElement();
      if(!AdfDomUtils.isVisible(element)) {
        AdfLogger.LOGGER.fine("Attempt to focus on element that's not visible, moving focus to next tab stop.");
        AdfFocusUtils.focusNextTabStop(element)
      }
      return
    }
    if(this._noteCompFocusId && this._noteCompFocusId != component.getClientId()) {
      this._killNoteWindowTimeout()
    }
    if(this.IsNoteWindowVisible()) {
      this.ShowNoteWindow()
    }else {
      if(this._noteWindowFocusTimeout == null) {
        this._killNoteWindowMouseTimeout();
        this._noteCompFocusId = component.getClientId();
        this._noteWindowFocusTimeout = page.scheduleTimer(this, this._onFocusTimeout, component.getClientId(), 400)
      }
    }
  }
};
AdfDhtmlEditableValuePeer.prototype.ComponentChanged = function(componentEvent) {
  if(!componentEvent.getPreviousComponent) {
    return
  }
  var prevComponent = componentEvent.getPreviousComponent();
  var component = componentEvent.getNextComponent();
  if(!prevComponent) {
    return component != null
  }
  if(!component) {
    return true
  }
  return prevComponent.getClientId() != component.getClientId()
};
AdfDhtmlEditableValuePeer.prototype.VetoShowNoteWindow = function(component) {
  return false
};
AdfDhtmlEditableValuePeer.prototype.HandleComponentKeyUp = function(componentEvent) {
  if(componentEvent.getEventPhase() == AdfBaseEvent.AT_TARGET_PHASE) {
    if(!componentEvent.isCanceled()) {
      var evt = componentEvent.getNativeEvent();
      var keyCode = componentEvent.getKeyCode();
      if(evt.ctrlKey && evt.altKey && keyCode == AdfKeyStroke.W_KEY) {
        var component = this.getComponent();
        var popupWindow = this.getPopupWindow(component, AdfDhtmlEditableValuePeer._NOTE_WINDOW_POPUP_ID);
        if(popupWindow) {
          popupWindow.activate();
          componentEvent.cancel();
          componentEvent.stopBubbling()
        }
      }
      if(this._shouldScheduleNoteWindowAutoDismissal()) {
        this.getComponent().setProperty(AdfDhtmlEditableValuePeer._HIDE_NOTE_SCHEDULED, true);
        var params = {"comp":this.getComponent(), "time":(new Date).getTime()};
        page.scheduleTimer(this, this._hideNoteTimeoutCallback, params, AdfDhtmlEditableValuePeer._noteWindowDismissTimout)
      }
    }
  }
};
AdfDhtmlEditableValuePeer.prototype.ShowNoteWindow = function(component, isMouseOver) {
  this._killNoteWindowTimeout();
  if(!component) {
    component = this.getComponent()
  }
  if(!this.IsNoteWindowVisible(component)) {
    if(!component.getDisabled() && !component.getReadOnly() && !this.VetoShowNoteWindow(component)) {
      var domElement = AdfRichUIPeer.getDomElementForComponent(component);
      if(domElement) {
        var agent = AdfAgent.AGENT;
        var id = component.getClientId();
        var page = AdfPage.PAGE;
        var doc = page.getDomDocument();
        var popupContent = [];
        var converterHint = null;
        var validatorHints = null;
        if(this.ShouldShowHint(component, domElement) == true) {
          if(page.shouldShowHintInNoteTip()) {
            converterHint = this.getFormatHint(component)
          }
          validatorHints = this.GetValidatorHints(component)
        }
        var hasMessagePopupContent = AdfMessageUtils.hasMessagePopupContent(id);
        if(hasMessagePopupContent) {
          var inlineMessageDom = AdfMessageUtils.getComponentMessagePopupDom(id);
          popupContent.push(inlineMessageDom)
        }
        if(converterHint != null || validatorHints != null) {
          var hDom = doc.createElement("div");
          AdfDomUtils.addCSSClassName(hDom, AdfDhtmlEditableValuePeer._NOTE_WINDOW_HINT_TEXT_STYLE_CLASS);
          if(converterHint != null) {
            hDom.appendChild(AdfDhtmlNoteWindowPopupSelector.createTextDom(converterHint))
          }
          if(validatorHints != null) {
            for(var i = 0;i < validatorHints.length;i++) {
              hDom.appendChild(AdfDhtmlNoteWindowPopupSelector.createTextDom(validatorHints[i]))
            }
          }
          popupContent.push(hDom)
        }
        var instructions = domElement.getAttribute(AdfDhtmlEditableValuePeer._INSTRUCTIONS_TEXT);
        if(instructions != null) {
          var instructionsElem = doc.createElement("div");
          AdfDomUtils.addCSSClassName(instructionsElem, AdfDhtmlEditableValuePeer._NOTE_WINDOW_INSTRUCTIONS_STYLE_CLASS);
          instructionsElem.appendChild(AdfDhtmlNoteWindowPopupSelector.createTextDom(instructions));
          popupContent.push(instructionsElem)
        }
        var shortDesc = component.getShortDesc();
        if(shortDesc != null && AdfUIUtils.trim(shortDesc).length > 0) {
          var divElem = doc.createElement("div");
          AdfDomUtils.addCSSClassName(divElem, AdfDhtmlEditableValuePeer._NOTE_WINDOW_SHORT_DESC_STYLE_CLASS);
          agent.setTextContent(divElem, shortDesc);
          popupContent.push(divElem)
        }
        if(hasMessagePopupContent && !page.isScreenReaderMode()) {
          var footerMessageDom = AdfMessageUtils.getComponentMessagePopupFooterDom(id);
          if(footerMessageDom) {
            var lastElem = doc.createElement("div");
            AdfDomUtils.addCSSClassName(lastElem, AdfDhtmlEditableValuePeer._NOTE_WINDOW_FOOTER_STYLE_CLASS);
            var lastPushed = popupContent.pop();
            lastElem.appendChild(lastPushed);
            lastElem.appendChild(footerMessageDom);
            popupContent.push(lastElem)
          }
        }
        if(!AdfCollections.isEmpty(popupContent)) {
          var popupHints = {};
          popupHints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_NOTEWINDOW;
          popupHints[AdfRichPopup.HINT_ALIGN] = this.GetNoteWindowAlignmentHint();
          var alignElementId;
          var alignElement = this.GetNoteWindowAlignmentNode(component);
          if(alignElement != null) {
            var alignElementStyle = agent.getComputedStyle(alignElement);
            if(alignElementStyle.display != "none" && alignElementStyle.visibility != "hidden") {
              alignElementId = alignElement.id;
              if(alignElementId != null) {
                popupHints[AdfRichPopup.HINT_ALIGN_ID] = alignElementId
              }
            }
          }
          if(alignElementId == null || alignElementId == "") {
            alignElement = AdfRichUIPeer.getDomElementForComponent(component);
            alignElementId = alignElement.id;
            if(alignElementId == null || alignElementId == "") {
              AdfLogger.LOGGER.warning("No popup alignment node ID could be found for the component with client ID = ", id)
            }else {
              popupHints[AdfRichPopup.HINT_ALIGN_ID] = alignElementId
            }
          }
          var noteDom;
          if(AdfCollections.isArray(popupContent)) {
            var newDom = doc.createElement("div");
            for(var i = 0;i < popupContent.length;i++) {
              if(i > 0) {
                var separator = doc.createElement("hr");
                AdfDomUtils.addCSSClassName(separator, AdfDhtmlEditableValuePeer._NOTE_WINDOW_SEPARATOR_STYLE_CLASS);
                newDom.appendChild(separator)
              }
              if(typeof popupContent[i] == "string") {
                newDom.appendChild(AdfDhtmlNoteWindowPopupSelector.createTextDom(popupContent[i]))
              }else {
                AdfAssert.assertDomElement(popupContent[i]);
                newDom.appendChild(popupContent[i])
              }
            }
            noteDom = newDom
          }else {
            if(typeof popupContent == "string") {
              noteDom = AdfDhtmlNoteWindowPopupSelector.createTextDom(popupContent)
            }
          }
          popupHints[AdfRichPopup.HINT_LAUNCH_ID] = id;
          popupHints[AdfDhtmlPopupWindow.HINT_FOCUS] = false;
          popupHints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = isMouseOver ? AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT : AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU;
          if(isMouseOver) {
            popupHints[AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT_ID] = alignElement.id
          }
          popupHints[AdfDhtmlPopupWindow.HINT_MAX_WIDTH] = AdfDhtmlEditableValuePeer._NOTE_WINDOW_MAX_WIDTH;
          this.showPopup(component, noteDom, popupHints, AdfDhtmlEditableValuePeer._NOTE_WINDOW_POPUP_ID)
        }
      }
    }
  }else {
    if(!isMouseOver) {
      var hints = {};
      hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU;
      AdfPage.PAGE.getAutoDismissalManager().changeBehavior(component, hints)
    }
  }
};
AdfDhtmlEditableValuePeer.prototype.HideNoteWindow = function(component) {
  if(!component) {
    component = this.getComponent()
  }
  this._killNoteWindowTimeout();
  this.hidePopup(component, AdfDhtmlEditableValuePeer._NOTE_WINDOW_POPUP_ID)
};
AdfDhtmlEditableValuePeer.prototype.IsNoteWindowVisible = function(component) {
  if(!component) {
    component = this.getComponent()
  }
  if(this.isPopupVisible(component, AdfDhtmlEditableValuePeer._NOTE_WINDOW_POPUP_ID)) {
    return true
  }
  return false
};
AdfDhtmlEditableValuePeer.prototype.GetNoteWindowAlignmentHint = function() {
  return AdfRichPopup.ALIGN_BEFORE_AFTER
};
AdfDhtmlEditableValuePeer.prototype.GetNoteWindowAlignmentNode = function(component, rootNode) {
  return AdfDhtmlEditableValuePeer.GetContentNode(component, rootNode)
};
AdfDhtmlEditableValuePeer.prototype.GetComponentValue = function(component, domElement) {
  var isValid = component.getValid();
  if(isValid == true) {
    return AdfDhtmlEditableValuePeer.superclass.GetComponentValue.call(this, component, domElement)
  }
  return null
};
AdfDhtmlEditableValuePeer.prototype.ComponentSubmittedValueChanged = function(component, domElement, newValue, oldValue) {
  if(newValue == null) {
    newValue = this.GetNullDefault()
  }
  this.SetDisplayValue(component, domElement, newValue)
};
AdfDhtmlEditableValuePeer.prototype.GetComponentLabel = function(component, domElement) {
  var labelElements = domElement.getElementsByTagName("LABEL");
  var labelElement = labelElements.length ? labelElements[0] : null;
  if(labelElement != null) {
    return AdfAgent.AGENT.getTextContent(labelElement)
  }else {
    return null
  }
};
AdfDhtmlEditableValuePeer.__componentLabelChanged = function(component, domElement, newValue, oldValue) {
  if(oldValue != null) {
    var labelElement = AdfDomUtils.getFirstDescendentElement(domElement, "LABEL");
    if(labelElement) {
      return AdfDomUtils.handleTextChangeWithAccessKey(component, labelElement, newValue)
    }
  }
  return false
};
AdfDhtmlEditableValuePeer.prototype.ComponentLabelChanged = AdfDhtmlEditableValuePeer.__componentLabelChanged;
AdfDhtmlEditableValuePeer.prototype.GetDisplayValue = function(component, domElement, unconditional) {
  if(unconditional) {
    return this.GetSubmittedValue(component, domElement)
  }
  return this.GetComponentSubmittedValue(component, domElement)
};
AdfDhtmlEditableValuePeer.prototype.GetComponentSubmittedValue = function(component, domElement) {
  if(!this.WasSubmitted(component)) {
    return null
  }else {
    return this.GetSubmittedValue(component, domElement)
  }
};
AdfDhtmlEditableValuePeer.prototype.WasSubmitted = function(component) {
  return!(component.getDisabled && component.getDisabled() || component.getReadOnly && component.getReadOnly())
};
AdfDhtmlEditableValuePeer.prototype.GetSubmittedValue = function(component, domElement) {
  AdfAssert.failedInAbstractFunction()
};
AdfDhtmlEditableValuePeer.prototype.MessageNotify = function(maxType, messages) {
  AdfDhtmlEditableValuePeer.superclass.MessageNotify.call(this, maxType, messages);
  if(this.IsNoteWindowVisible()) {
    this.HideNoteWindow()
  }
  var page = AdfPage.PAGE;
  if(page.isScreenReaderMode()) {
    this._messageNotifyScreenReader(maxType, messages)
  }else {
    var component = this.getComponent();
    if(component) {
      page.scheduleTimer(this, this._addMessageTimeout, component.getClientId(), 50)
    }
  }
};
AdfDhtmlEditableValuePeer.prototype.MessageShow = function(maxType, messages) {
  AdfDhtmlEditableValuePeer.superclass.MessageShow.call(this, maxType, messages);
  this.getComponent().focus()
};
AdfDhtmlEditableValuePeer.prototype.ShouldShowHint = function(component, domElement) {
  return false
};
AdfDhtmlEditableValuePeer.prototype.Focus = function() {
  var rootDom = this.getDomElement();
  var component = this.getComponent();
  var dom = this.GetNoteWindowAlignmentNode(component, rootDom);
  var focusable = AdfFocusUtils.getFirstTabStop(dom);
  if(focusable != null) {
    AdfFocusUtils.focusElement(focusable)
  }
};
AdfDhtmlEditableValuePeer.prototype.LazyInitialize = function(component, domElement) {
  var value = this.GetComponentValue(component, domElement);
  component.initializeProperty(AdfUIValue.VALUE, value)
};
AdfDhtmlEditableValuePeer.prototype.StashOldValue = function(component, domElement) {
  this._stashValue(component, domElement, AdfDhtmlEditableValuePeer._OLD_VALUE_EXPANDO, true)
};
AdfDhtmlEditableValuePeer.prototype._stashValue = function(component, domElement, expandoKey, onlyIfNull) {
  if(!component.getReadOnly()) {
    var contentNode = AdfDhtmlEditableValuePeer.GetContentNode(component, domElement);
    var curValue = this.GetSubmittedValue(component, domElement);
    if(!onlyIfNull || contentNode.getAttribute(expandoKey) == null) {
      contentNode.setAttribute(expandoKey, this._coerceToString(curValue))
    }
  }
};
AdfDhtmlEditableValuePeer.prototype._coerceToString = function(value) {
  return"" + value
};
AdfDhtmlEditableValuePeer.prototype.ValidateIfStashedOldValue = function(component, domElement) {
  var contentNode = AdfDhtmlEditableValuePeer.GetContentNode(component, domElement);
  var oldValue = contentNode.getAttribute(AdfDhtmlEditableValuePeer._OLD_VALUE_EXPANDO);
  if(oldValue != null) {
    contentNode.removeAttribute(AdfDhtmlEditableValuePeer._OLD_VALUE_EXPANDO);
    var curValue = this.GetSubmittedValue(component, domElement);
    if(curValue != oldValue) {
      this.Validate(component, curValue)
    }
  }
};
AdfDhtmlEditableValuePeer.prototype.ValidateAndStashNewValue = function(component, domElement, curValue) {
  var contentNode = AdfDhtmlEditableValuePeer.GetContentNode(component, domElement);
  var oldValue = contentNode.getAttribute(AdfDhtmlEditableValuePeer._OLD_VALUE_EXPANDO);
  if(oldValue != null) {
    if(curValue === undefined) {
      curValue = this.GetSubmittedValue(component, domElement)
    }
    if(curValue != oldValue) {
      contentNode.setAttribute(AdfDhtmlEditableValuePeer._OLD_VALUE_EXPANDO, "" + curValue);
      this.Validate(component, curValue)
    }
  }
};
AdfDhtmlEditableValuePeer.prototype._initializeScreenReader = function(component, domElement) {
  var agent = AdfAgent.AGENT;
  var subid = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlEditableValuePeer._SCREEN_READER_NOTE_WINDOW_LAUNCH_ID);
  agent.setExpandoProperty(domElement, AdfDhtmlEditableValuePeer._SCREEN_READER_LAUNCH_ID_EXPANDO, subid);
  var launchIconLink = agent.getElementById(subid);
  if(launchIconLink != null) {
    launchIconLink.href = "#";
    launchIconLink.setAttribute("onclick", "return false;");
    var showLaunchLink = false;
    if(component.getShortDesc()) {
      showLaunchLink = true
    }else {
      if(domElement.getAttribute(AdfDhtmlEditableValuePeer._INSTRUCTIONS_TEXT)) {
        showLaunchLink = true
      }else {
        if(this.ShouldShowHint(component, domElement) == true) {
          var converterHint = this.getFormatHint(component);
          var validatorHint = this.GetValidatorHints(component);
          if(converterHint || validatorHint) {
            showLaunchLink = true
          }
        }
      }
    }
    if(showLaunchLink) {
      agent.setExpandoProperty(launchIconLink, AdfDhtmlEditableValuePeer._SCREEN_READER_NOTE_WINDOW_STATIC_EXPANDO, true)
    }else {
      AdfDomUtils.setVisible(launchIconLink, false);
      agent.setExpandoProperty(launchIconLink, AdfDhtmlEditableValuePeer._SCREEN_READER_NOTE_WINDOW_STATIC_EXPANDO, false)
    }
    var icon = AdfMessageUtils.getIconForComponent(AdfFacesMessage.TYPE_INFO, false, component);
    launchIconLink.appendChild(icon)
  }else {
    if(!component.getDisabled() && !component.getReadOnly()) {
      AdfLogger.LOGGER.severe("The screen reader note window launch icon is null (and shouldn't be) for component with id: ", component.getClientId())
    }
  }
};
AdfDhtmlEditableValuePeer.prototype._messageNotifyScreenReader = function(maxType, messages) {
  var component = this.getComponent();
  var agent = AdfAgent.AGENT;
  var subid = agent.getExpandoProperty(this.getDomElement(), AdfDhtmlEditableValuePeer._SCREEN_READER_LAUNCH_ID_EXPANDO);
  var launchIconLink = agent.getElementById(subid);
  if(launchIconLink != null) {
    var icon = AdfDomUtils.getFirstChildElement(launchIconLink);
    var oldIcon = icon.cloneNode(true);
    var newIcon;
    if(!messages) {
      var hasStaticContent = agent.getExpandoProperty(launchIconLink, AdfDhtmlEditableValuePeer._SCREEN_READER_NOTE_WINDOW_STATIC_EXPANDO);
      AdfMessageUtils.switchIcon(icon, AdfFacesMessage.TYPE_INFO, false);
      newIcon = AdfDomUtils.getFirstChildElement(launchIconLink);
      if(newIcon != oldIcon) {
        AdfMessageUtils.updateIconForComponent(newIcon, component)
      }
      if(!hasStaticContent) {
        AdfDomUtils.setVisible(launchIconLink, false)
      }
    }else {
      AdfDomUtils.setVisible(launchIconLink, true);
      if(maxType == null) {
        maxType = AdfFacesMessage.TYPE_INFO
      }
      AdfMessageUtils.switchIcon(icon, maxType, false);
      newIcon = AdfDomUtils.getFirstChildElement(launchIconLink);
      if(newIcon != oldIcon) {
        AdfMessageUtils.updateIconForComponent(newIcon, component)
      }
      if(AdfPage.PAGE.getActiveComponent() == component && maxType >= AdfFacesMessage.TYPE_WARNING) {
        AdfLogger.LOGGER.fine("Messages added while component has focus, moving focus to the screen reader note window launch icon.");
        AdfFocusUtils.focusElement(launchIconLink)
      }
    }
  }
};
AdfDhtmlEditableValuePeer.prototype._killNoteWindowTimeout = function() {
  this._killNoteWindowMouseTimeout();
  this._killNoteWindowFocusTimeout()
};
AdfDhtmlEditableValuePeer.prototype._killNoteWindowMouseTimeout = function() {
  if(this._noteWindowMouseTimeout) {
    AdfPage.PAGE.cancelTimer(this._noteWindowMouseTimeout);
    delete this._noteWindowMouseTimeout
  }
  delete this._noteCompMouseId
};
AdfDhtmlEditableValuePeer.prototype._killNoteWindowFocusTimeout = function() {
  if(this._noteWindowFocusTimeout) {
    AdfPage.PAGE.cancelTimer(this._noteWindowFocusTimeout);
    delete this._noteWindowFocusTimeout
  }
  delete this._noteCompFocusId
};
AdfDhtmlEditableValuePeer.prototype._onMouseOverTimeout = function(componentId) {
  this._killNoteWindowFocusTimeout();
  delete this._noteWindowMouseTimeout;
  delete this._noteCompMouseId;
  var component = AdfPage.PAGE.findComponent(componentId);
  if(component) {
    this.bind(component);
    if(!this.IsNoteWindowVisible(component)) {
      this.ShowNoteWindow(component, true)
    }
  }
};
AdfDhtmlEditableValuePeer.prototype._onFocusTimeout = function(componentId) {
  this._killNoteWindowMouseTimeout();
  delete this._noteWindowFocusTimeout;
  delete this._noteCompFocusId;
  var page = AdfPage.PAGE;
  if(componentId == page.getActiveComponentId()) {
    var component = page.findComponent(componentId);
    if(component) {
      this.bind(component);
      if(this._returnedFromChooseComponent != null) {
        delete this._returnedFromChooseComponent
      }else {
        if(!this.IsNoteWindowVisible(component)) {
          this.ShowNoteWindow(component, false)
        }
      }
    }
  }else {
    if(this._returnedFromChooseComponent != null) {
      delete this._returnedFromChooseComponent
    }
  }
};
AdfDhtmlEditableValuePeer.prototype._addMessageTimeout = function(componentId) {
  var page = AdfPage.PAGE;
  var activeComponentId = page.getActiveComponentId() ? page.getActiveComponentId() : page.getPreviouslyActiveComponentId();
  if(componentId == activeComponentId) {
    var component = AdfPage.PAGE.findComponent(componentId);
    if(component) {
      this.bind(component);
      this.ShowNoteWindow()
    }
  }
};
AdfDhtmlEditableValuePeer.prototype._getPublicComponentOrAncestor = function(component) {
  var publicComponent = component;
  while(publicComponent && publicComponent.satisfiesUsage(AdfUIComponent.USAGE_PRIVATE_CHILD)) {
    publicComponent = publicComponent.getParent()
  }
  return publicComponent
};
AdfDhtmlEditableValuePeer.prototype._hideNoteTimeoutCallback = function(params) {
  var component = params.comp;
  if(AdfDhtmlEditableValuePeer._shouldHideNoteWindow(component, params.time)) {
    this.bind(component);
    this.HideNoteWindow(component)
  }
  component.setProperty(AdfDhtmlEditableValuePeer._HIDE_NOTE_SCHEDULED, false)
};
AdfDhtmlEditableValuePeer.prototype._shouldScheduleNoteWindowAutoDismissal = function() {
  return AdfDhtmlEditableValuePeer._noteWindowDismissTimout > 0 && this.IsNoteWindowVisible() && !this.getComponent().getProperty(AdfDhtmlEditableValuePeer._HIDE_NOTE_SCHEDULED)
};
AdfDhtmlEditableValuePeer._shouldHideNoteWindow = function(component, time) {
  var lastValidateTime = component.getProperty(AdfDhtmlEditableValuePeer._LAST_VALIDATE_TIME);
  return component.getClientId() == AdfPage.PAGE.getActiveComponentId() && (!lastValidateTime || lastValidateTime < time)
};
AdfDhtmlEditableValuePeer.prototype.ComponentShowRequiredChanged = AdfDhtmlOutputLabelPeer.__componentShowRequiredChanged;

AdfUIComponents.createComponentClass("AdfUIInput", {componentType:"org.apache.myfaces.trinidad.Input", superclass:AdfUIEditableValue});

AdfRichUIPeer.createPeerClass(AdfDhtmlEditableValuePeer, "AdfDhtmlInputBasePeer");
AdfDhtmlInputBasePeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentPropertyGetters(this, AdfUIEditableValue.SUBMITTED_VALUE);
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.FOCUS_EVENT_TYPE, AdfUIInputEvent.BLUR_EVENT_TYPE);
  this._LAST_VALUE = "_afrLastValue"
};
AdfDhtmlInputBasePeer.prototype.initialize = function(component) {
  AdfDhtmlInputBasePeer.superclass.initialize.call(this, component);
  this._preventNextValueSubmission = false
};
AdfDhtmlInputBasePeer.prototype.needsFocusTargetStyleClass = function() {
  return true
};
AdfDhtmlInputBasePeer.prototype.preventNextValueSubmission = function() {
  var activeElement = document.activeElement;
  var contentElement = AdfDhtmlEditableValuePeer.getContentNode(this.getComponent());
  if(activeElement == contentElement) {
    this._preventNextValueSubmission = true
  }
};
AdfDhtmlInputBasePeer.prototype.HandleComponentFocus = function(componentEvent) {
  if(componentEvent.getEventPhase() == AdfBaseEvent.AT_TARGET_PHASE) {
    AdfDhtmlInputBasePeer.superclass.HandleComponentFocus.call(this, componentEvent);
    var targetNode = componentEvent.getNativeEventTarget();
    if(!this.VetoBlurValidation()) {
      var component = this.getComponent();
      var contentNode = AdfDhtmlEditableValuePeer.GetContentNode(component);
      if(targetNode == contentNode) {
        AdfAgent.AGENT.setExpandoProperty(contentNode, AdfDhtmlInputBasePeer._LAST_VALUE, contentNode.value)
      }
    }
  }
};
AdfDhtmlInputBasePeer.getLastValue = function(contentNode) {
  return AdfAgent.AGENT.getExpandoProperty(contentNode, AdfDhtmlInputBasePeer._LAST_VALUE)
};
AdfDhtmlInputBasePeer.setLastValue = function(contentNode, value) {
  if(undefined === value) {
    value = contentNode.value
  }
  AdfAgent.AGENT.setExpandoProperty(contentNode, AdfDhtmlInputBasePeer._LAST_VALUE, value)
};
AdfDhtmlInputBasePeer.prototype.HandleComponentBlur = function(componentEvent) {
  if(componentEvent.getEventPhase() == AdfBaseEvent.AT_TARGET_PHASE) {
    var component = this.getComponent();
    var targetNode = componentEvent.getNativeEventTarget();
    if(!this.VetoBlurValidation()) {
      this.RunValidation(component, targetNode, true)
    }
  }
};
AdfDhtmlInputBasePeer.prototype.__simulateBlur = function(comp) {
  if(!this.VetoBlurValidation()) {
    this.RunValidation(comp, AdfDhtmlEditableValuePeer.GetContentNode(comp), true)
  }
};
AdfDhtmlInputBasePeer.prototype.RunValidation = function(component, targetNode, isChangeRequired) {
  if(this.WasSubmitted(component)) {
    var contentNode = AdfDhtmlEditableValuePeer.GetContentNode(component);
    if(targetNode == contentNode) {
      var agent = AdfAgent.AGENT;
      var lastValue = agent.getExpandoProperty(contentNode, AdfDhtmlInputBasePeer._LAST_VALUE);
      var value = contentNode.value;
      if(isChangeRequired === undefined) {
        isChangeRequired = this._getDefaultIsChangeRequired(component, value)
      }
      if(!isChangeRequired || value != lastValue) {
        agent.setExpandoProperty(contentNode, AdfDhtmlInputBasePeer._LAST_VALUE, value);
        this.Validate(component, value)
      }
    }
  }
};
AdfDhtmlInputBasePeer.prototype.VetoBlurValidation = function() {
  return false
};
AdfDhtmlInputBasePeer.prototype.GetSubmittedValue = function(component, domElement) {
  var domNode = AdfDhtmlEditableValuePeer.GetContentNode(component, domElement);
  if(component.getReadOnly()) {
    return AdfAgent.AGENT.getTextContent(domNode)
  }
  return domNode.value
};
AdfDhtmlInputBasePeer.prototype.ShouldShowHint = function(component, domElement) {
  return true
};
AdfDhtmlInputBasePeer.prototype.WasSubmitted = function(component) {
  if(this._preventNextValueSubmission) {
    this._preventNextValueSubmission = false;
    return false
  }
  return AdfDhtmlInputBasePeer.superclass.WasSubmitted.call(this, component)
};
AdfDhtmlInputBasePeer.prototype._getDefaultIsChangeRequired = function(component, value) {
  var isEmptyValue = this.isEmpty(value);
  var isRequired = component.getRequired();
  if(isEmptyValue && (isRequired || AdfPage.PAGE.shouldValidateEmptyFields())) {
    return false
  }
  return true
};

AdfUIComponents.createComponentClass("AdfUIObject", {componentType:"org.apache.myfaces.trinidad.Object"});

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlSubformPeer");
AdfDhtmlSubformPeer.InitSubclass = function() {
  AdfRichUIPeer.addSuppressedPPRAttributes(this, "defaultCommand")
};
AdfDhtmlSubformPeer.prototype.initialize = function(component) {
  var id = component.getClientId();
  AdfPage.PAGE.mapComponent(id, component)
};
AdfDhtmlSubformPeer.getDefaultCommandSubform = function(sourceId) {
  var colonIndex = sourceId.lastIndexOf(":");
  var defaultCommandSubform;
  while(colonIndex > 0 && !defaultCommandSubform) {
    sourceId = sourceId.substring(0, colonIndex);
    var ancestor = AdfPage.PAGE.findComponent(sourceId);
    if(ancestor && ancestor instanceof AdfRichSubform && ancestor.getDefaultCommand() != null) {
      defaultCommandSubform = ancestor
    }
    colonIndex = sourceId.lastIndexOf(":")
  }
  return defaultCommandSubform
};
AdfDhtmlSubformPeer.prototype.componentRemoved = function(component) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  if(this._component === component) {
    this.UnbindFromComponent()
  }
  AdfPage.PAGE.unmapComponent(component.getClientId())
};
AdfDhtmlSubformPeer.prototype.getComponentParent = function(component) {
  return null
};
AdfDhtmlSubformPeer.prototype.visitChildren = function(component, callback, context, ignoreHidden) {
  AdfLogger.LOGGER.severe("AdfDhtmlSubformPeer.visitChildren: visitChildren not supported in a subform");
  return 2
};

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlFormPeer");
AdfDhtmlFormPeer.InitSubclass = function() {
  AdfRichUIPeer.addSuppressedPPRAttributes(this, "defaultCommand");
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.KEY_PRESS_EVENT_TYPE)
};
AdfDhtmlFormPeer.prototype.DomReplaceNotify = function(domNode) {
  var component = this.getComponent();
  var clientId = component.getClientId();
  var postscriptId = AdfRichUIPeer.createSubId(clientId, "postscript");
  if(domNode.id == postscriptId) {
    return null
  }
  return domNode
};
AdfDhtmlFormPeer.prototype.InitDomElement = function(component, rootElement) {
  AdfDhtmlFormPeer.superclass.InitDomElement.call(this, component, rootElement);
  var page = AdfPage.PAGE;
  var window = page.getDomWindow();
  var func = new Function("return true;");
  window["_" + component.getClientId() + "Validator"] = func
};
AdfDhtmlFormPeer.prototype.HandleComponentKeyPress = function(componentEvent) {
  if(componentEvent.getKeyCode() == AdfKeyStroke.ENTER_KEY) {
    var id = AdfDhtmlFormPeer.__GetDefaultCommandTriggerId(componentEvent, true);
    if(id == null) {
      return
    }
    var defaultCommandOnComp = AdfDhtmlSubformPeer.getDefaultCommandSubform(id);
    var defaultCommandId;
    if(defaultCommandOnComp) {
      defaultCommandId = defaultCommandOnComp.getDefaultCommand()
    }else {
      defaultCommandOnComp = this.getComponent();
      defaultCommandId = defaultCommandOnComp.getDefaultCommand()
    }
    if(defaultCommandId) {
      var defaultCommand = defaultCommandOnComp.findComponent(defaultCommandId);
      if(defaultCommand) {
        var isBusy = defaultCommand.getPeer().isBusy();
        if(!isBusy) {
          AdfActionEvent.queue(defaultCommand, defaultCommand.getPartialSubmit())
        }
      }else {
        AdfLogger.LOGGER.warning("DefaultCommand with the ID of '" + defaultCommandId + "' is not found for component: " + defaultCommandOnComp)
      }
    }
  }
};
AdfDhtmlFormPeer.__GetDefaultCommandTriggerId = function(componentEvent, cancelEvent) {
  var nativeTarget = componentEvent.getNativeEventTarget();
  if(nativeTarget) {
    var tagName = nativeTarget.tagName;
    if(tagName == "A" || tagName == "BUTTON" || tagName == "TEXTAREA" || tagName == "IFRAME" || tagName == "INPUT" && (nativeTarget.type == "submit" || nativeTarget.type == "reset")) {
      return null
    }
    if(tagName != "SELECT" && cancelEvent) {
      componentEvent.cancel()
    }
    var idNode = nativeTarget;
    var id = idNode.id;
    while(!id) {
      idNode = idNode.parentNode;
      id = idNode.id
    }
    return id
  }
  return null
};

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlPopupPeer", true);
AdfDhtmlPopupPeer.InitSubclass = function() {
  AdfObject.ensureClassInitialization(AdfRichPopup);
  AdfObject.ensureClassInitialization(AdfDhtmlPopupWindow);
  this._SHOWN = "_shown";
  this._SYNC_HINTS_LIST = [AdfRichPopup.HINT_ALIGN_ID, AdfRichPopup.HINT_ALIGN, AdfDhtmlPopupWindow.HINT_LEFT_POSITION, AdfDhtmlPopupWindow.HINT_TOP_POSITION, AdfRichPopup.HINT_LAUNCH_ID, AdfDhtmlPopupWindow.HINT_MOUSEPOSITION];
  this.SKIP_OUT_OF_SCOPE_CHECK = "_skipOutOfScopeCheck";
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.KEY_PRESS_EVENT_TYPE, AdfUIInputEvent.FOCUS_EVENT_TYPE, AdfUIInputEvent.BLUR_EVENT_TYPE)
};
AdfDhtmlPopupPeer.prototype.HandleComponentFocus = function(componentEvent) {
  if(componentEvent instanceof AdfDomComponentFocusEvent) {
    var eventTargetDom = componentEvent.getNativeEventTarget();
    this._handlePopupTimeout(eventTargetDom)
  }
};
AdfDhtmlPopupPeer.prototype.HandleComponentBlur = function(componentEvent) {
  var domDocument = AdfAgent.AGENT.getDomDocument();
  var eventTargetDom = domDocument.activeElement;
  this._handlePopupTimeout(eventTargetDom)
};
AdfDhtmlPopupPeer.prototype._handlePopupTimeout = function(target) {
  var component = this.getComponent();
  if(!(component[AdfRichUIPeer._POPUP_LIST] && component[AdfRichUIPeer._POPUP_LIST][component.getClientId()])) {
    return
  }
  var popupElement = component[AdfRichUIPeer._POPUP_LIST][component.getClientId()].getElement();
  var page = AdfPage.PAGE;
  var autoDismissalManager = page.getAutoDismissalManager();
  if(AdfDomUtils.isAncestorOrSelf(popupElement, target)) {
    autoDismissalManager.stopPopupDismissTimeout(component, popupElement)
  }else {
    autoDismissalManager.restartPopupDismissTimeout(component, popupElement)
  }
};
AdfDhtmlPopupPeer.prototype.HandleComponentKeyPress = function(componentEvent) {
  if(componentEvent.getKeyCode() == AdfKeyStroke.ENTER_KEY) {
    componentEvent.stopBubbling();
    var id = AdfDhtmlFormPeer.__GetDefaultCommandTriggerId(componentEvent, true);
    if(id != null) {
      var defaultCommandSubform = AdfDhtmlSubformPeer.getDefaultCommandSubform(id);
      if(defaultCommandSubform) {
        var subformId = defaultCommandSubform.getClientId();
        var popupId = this.getComponent().getClientId();
        if(popupId.indexOf(subformId + ":") != 0) {
          var defaultCommandId = defaultCommandSubform.getDefaultCommand();
          var defaultCommand = defaultCommandSubform.findComponent(defaultCommandId);
          if(defaultCommand) {
            AdfActionEvent.queue(defaultCommand, defaultCommand.getPartialSubmit())
          }else {
            AdfLogger.LOGGER.warning("DefaultCommand with the ID of '" + defaultCommandId + "' is not found for component: " + defaultCommandSubform)
          }
        }
      }
    }
  }
};
AdfDhtmlPopupPeer.prototype.fetchCanceled = function(component) {
  if(component._isFetching) {
    component._isFetchCanceled = true;
    return true
  }
  return false
};
AdfDhtmlPopupPeer.prototype.show = function(component, hints) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assertObjectOrNull(hints);
  var popupVisible = this.isVisible(component);
  if(popupVisible) {
    return
  }
  var popupWindow = this.getPopupWindow(component, component.getClientId());
  if(popupWindow && popupWindow.hasSpecialRenderingForScreenReader()) {
    if(popupWindow.GetFocusOnOpen && !popupWindow.GetFocusOnOpen()) {
      return
    }
    if(popupWindow.activate) {
      popupWindow.activate();
      return
    }
  }
  var contentDelivery = component.getContentDelivery();
  var isLazy = contentDelivery == AdfRichPopup.CONTENT_DELIVERY_LAZY, isLazyUncached = contentDelivery == AdfRichPopup.CONTENT_DELIVERY_LAZY_UNCACHED;
  var launchId = null;
  if(hints) {
    launchId = hints[AdfRichPopup.HINT_LAUNCH_ID]
  }
  if(isLazy || isLazyUncached) {
    var isFetching = component._isFetching;
    if(isFetching) {
      AdfLogger.LOGGER.warning("Waiting on popup content delivery: " + component.getClientId());
      return
    }
    if(!component._hasContent) {
      var page = AdfPage.PAGE;
      var hintsPagePropertyKey = AdfDhtmlPopupPeer._createPagePropertyKey(component.getClientId());
      page.setPageProperty(hintsPagePropertyKey, hints);
      var params;
      if(launchId != null) {
        params = new Object;
        params.launchId = launchId
      }
      this.syncPrivateProperties(component, hints, true);
      component._isFetching = true;
      (new AdfContentFetchEvent(component, AdfContentFetchEvent.FETCH_EVENT_TYPE, params)).queue();
      return
    }
  }
  if(isLazyUncached) {
    delete component._hasContent
  }
  if(component._isFetchCanceled) {
    delete component._isFetchCanceled;
    this._setShown(component, false);
    return
  }
  var openEvent = new AdfPopupOpeningEvent(component, hints);
  component.broadcast(openEvent);
  if(!openEvent.isCanceled()) {
    if(!hints) {
      hints = new Object
    }
    var autoDismissalTimeout = component.getAutoDismissalTimeout();
    if(autoDismissalTimeout && !isNaN(autoDismissalTimeout) && autoDismissalTimeout > 0) {
      hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS_POPUP_TIMEOUT] = autoDismissalTimeout * 1E3
    }
    var isRestoreImmediate = hints[AdfDhtmlPopupWindow.HINT_RESTORE_IMMEDIATE] ? true : false;
    hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER] = this.createCallback(this.PopupOpened);
    hints[AdfDhtmlPopupWindow.HINT_OPENED_HANDLER_PARAM] = component;
    if(hints[AdfDhtmlPopupWindow.HINT_ANIMATE] != AdfRichPopup.ANIMATE_FALSE) {
      hints[AdfDhtmlPopupWindow.HINT_ANIMATE] = component.getAnimate();
      hints[AdfDhtmlPopupHints.OPEN_TRANSITION] = AdfDhtmlPopupPeer._getPopupOpenTransition(component);
      hints[AdfDhtmlPopupHints.CLOSE_TRANSITION] = AdfDhtmlPopupPeer._getPopupCloseTransition(component)
    }
    var isPropSynced = this._setShown(component, true, isLazyUncached || isRestoreImmediate);
    if(!isPropSynced && !isLazyUncached && !isRestoreImmediate) {
      this.syncPrivateProperties(component, hints)
    }
    this._showPopup(component, hints)
  }else {
    this._setShown(component, false)
  }
};
AdfDhtmlPopupPeer._getPopupOpenTransition = function(component) {
  return AdfDhtmlPopupPeer._getClientAttribute(component, "data-afr-open-trns")
};
AdfDhtmlPopupPeer._getPopupCloseTransition = function(component) {
  return AdfDhtmlPopupPeer._getClientAttribute(component, "data-afr-close-trns")
};
AdfDhtmlPopupPeer._getClientAttribute = function(component, attributeName) {
  return AdfAgent.AGENT.getAttribute(AdfAgent.AGENT.getElementById(component.getClientId()), attributeName)
};
AdfDhtmlPopupPeer.prototype._setShown = function(component, shown, suppressSyncEvent) {
  delete this._isPropSyncNeeded;
  component.setProperty(AdfDhtmlPopupPeer._SHOWN, shown ? component.getClientId() : "", false, true);
  var isPropSynced = false;
  if(!suppressSyncEvent && this._isPropSyncNeeded && !AdfDhtmlPopupPeer._isAutoCancel(component)) {
    (new AdfContentFetchEvent(component, AdfContentFetchEvent.SYNC_EVENT_TYPE)).queue();
    isPropSynced = true
  }
  delete this._isPropSyncNeeded;
  return isPropSynced
};
AdfDhtmlPopupPeer._initPrivateProperties = function(component) {
  AdfAssert.assertPrototype(component, AdfRichPopup);
  if(AdfDhtmlPopupPeer._isAutoCancel(component)) {
    return
  }
  for(var i = 0;i < AdfDhtmlPopupPeer._SYNC_HINTS_LIST.length;i++) {
    var key = AdfDhtmlPopupPeer._SYNC_HINTS_LIST[i];
    var propertyName = "_" + key;
    component.setProperty(propertyName, "", false, true)
  }
};
AdfDhtmlPopupPeer.prototype.syncPrivateProperties = function(component, hints, suppressSyncEvent) {
  AdfAssert.assertPrototype(component, AdfRichPopup);
  if(!hints) {
    return
  }
  if(AdfDhtmlPopupPeer._isAutoCancel(component)) {
    return
  }
  delete this._isPropSyncNeeded;
  var propertyName;
  for(key in hints) {
    if(AdfCollections.indexOf(AdfDhtmlPopupPeer._SYNC_HINTS_LIST, key) > -1) {
      propertyName = "_" + key;
      var propertyValue;
      if(key == AdfDhtmlPopupWindow.HINT_MOUSEPOSITION) {
        AdfAssert.assertNumber(hints[key].x, "AdfDhtmlPopupWindow.HINT_MOUSEPOSITION.x");
        AdfAssert.assertNumber(hints[key].y, "AdfDhtmlPopupWindow.HINT_MOUSEPOSITION.y");
        propertyValue = "x:" + hints[key].x + ",y:" + hints[key].y
      }else {
        propertyValue = hints[key]
      }
      component.setProperty(propertyName, propertyValue, false, true)
    }
  }
  if(!suppressSyncEvent && this._isPropSyncNeeded) {
    (new AdfContentFetchEvent(component, AdfContentFetchEvent.SYNC_EVENT_TYPE)).queue()
  }
  delete this._isPropSyncNeeded
};
AdfDhtmlPopupPeer.prototype.ComponentPropertyChanged = function(changeEvent) {
  if(!AdfDhtmlPopupPeer._isAutoCancel(changeEvent.getSource())) {
    var cName = changeEvent.getPropertyName();
    if(cName == AdfDhtmlPopupPeer._SHOWN) {
      this._isPropSyncNeeded = true
    }else {
      for(var i = 0;i < AdfDhtmlPopupPeer._SYNC_HINTS_LIST.length;i++) {
        var key = AdfDhtmlPopupPeer._SYNC_HINTS_LIST[i];
        var pName = "_" + key;
        if(cName == pName) {
          this._isPropSyncNeeded = true;
          break
        }
      }
    }
  }
};
AdfDhtmlPopupPeer.prototype.hide = function(component) {
  if(!this.isVisible(component)) {
    return
  }
  this._resetContentDelivery(component);
  this.hidePopup(component, component.getClientId())
};
AdfDhtmlPopupPeer.prototype._resetContentDelivery = function(component) {
  if(component.getContentDelivery() == AdfRichPopup.CONTENT_DELIVERY_LAZY_UNCACHED) {
    delete component._hasContent
  }
};
AdfDhtmlPopupPeer.prototype.cancel = function(component) {
  if(!this.isVisible(component)) {
    return
  }
  this._resetContentDelivery(component);
  this.cancelPopup(component, component.getClientId())
};
AdfDhtmlPopupPeer.prototype.isVisible = function(component) {
  var clientId = component.getClientId();
  var popupWindow = this.getPopupWindow(component, clientId);
  if(!component[AdfDhtmlPopupPeer.SKIP_OUT_OF_SCOPE_CHECK] && popupWindow && popupWindow.hasSpecialRenderingForScreenReader()) {
    var contentElement = AdfDhtmlPopupPeer.getContentDom(component);
    if(contentElement && AdfPopupScopingUtils.isOutOfScope(contentElement)) {
      return false
    }
  }
  return this.isPopupVisible(component, clientId)
};
AdfDhtmlPopupPeer._createPagePropertyKey = function(clientId) {
  AdfAssert.assertString(clientId);
  var tokens = clientId.split(":");
  return tokens.join("$") + "$key"
};
AdfDhtmlPopupPeer.prototype.DispatchComponentEvent = function(componentEvent) {
  if(componentEvent.getType() == AdfContentFetchEvent.LOADED_EVENT_TYPE) {
    var component = componentEvent.getSource();
    this._restorePopup(component);
    componentEvent.stopBubbling();
    componentEvent.cancel()
  }else {
    AdfDhtmlPopupPeer.superclass.DispatchComponentEvent.call(this, componentEvent)
  }
};
AdfDhtmlPopupPeer.prototype._restorePopup = function(component) {
  component._hasContent = true;
  var page = AdfPage.PAGE;
  var hintsPagePropertyKey = AdfDhtmlPopupPeer._createPagePropertyKey(component.getClientId());
  var hints = page.getPageProperty(hintsPagePropertyKey);
  page.setPageProperty(hintsPagePropertyKey, null);
  AdfAssert.assertObjectOrNull(hints);
  delete component._isFetching;
  this.show(component, hints)
};
AdfDhtmlPopupPeer.prototype.fireContentDeliveryNotify = function(hints) {
  var component = this.getComponent();
  if(hints) {
    var page = AdfPage.PAGE;
    var hintsPagePropertyKey = AdfDhtmlPopupPeer._createPagePropertyKey(component.getClientId());
    var cachedHints = page.getPageProperty(hintsPagePropertyKey);
    if(cachedHints) {
      AdfCollections.copyInto(hints, cachedHints)
    }
    page.setPageProperty(hintsPagePropertyKey, hints)
  }
  if(hints && hints[AdfDhtmlPopupWindow.HINT_RESTORE_IMMEDIATE]) {
    this._restorePopup(component)
  }else {
    (new AdfContentFetchEvent(component, AdfContentFetchEvent.LOADED_EVENT_TYPE)).queue()
  }
};
AdfDhtmlPopupPeer.getContentDom = function(component) {
  var contentId = AdfRichUIPeer.CreateSubId(component.getClientId(), "content");
  return AdfAgent.AGENT.getElementById(contentId)
};
AdfDhtmlPopupPeer.prototype._showPopup = function(component, hints) {
  var contentDom = AdfDhtmlPopupPeer.getContentDom(component);
  var peerHints = {};
  if(component._childHints) {
    AdfCollections.copyInto(peerHints, component._childHints)
  }
  if(hints) {
    AdfCollections.copyInto(peerHints, hints)
  }
  var menuPeer = this._getFirstMenuPeer(component, peerHints);
  if(menuPeer != null) {
    menuPeer.show(peerHints)
  }else {
    this.showPopup(component, contentDom, peerHints, component.getClientId())
  }
};
AdfDhtmlPopupPeer.prototype._getFirstMenuPeer = function(component, hints) {
  var menuPeer = null;
  var hintType = hints[AdfDhtmlPopupWindow.HINT_TYPE];
  if(hintType == null || hintType == AdfDhtmlPopupWindow.HINT_TYPE_MENU) {
    component.visitChildren(this._visitChildrenForMenu, this, true);
    if(this._firstMenuChild) {
      menuPeer = this._firstMenuChild.getPeer();
      delete this._firstMenuChild
    }
  }
  return menuPeer
};
AdfDhtmlPopupPeer.prototype._visitChildrenForMenu = function(component) {
  var domWindow = AdfPage.PAGE.getDomWindow();
  if(domWindow.AdfRichRegion && component instanceof AdfRichRegion) {
    return 0
  }
  if(domWindow.AdfRichMenu && component instanceof AdfRichMenu) {
    this._firstMenuChild = component
  }
  return 2
};
AdfDhtmlPopupPeer.prototype.PopupClosed = function(component, contentDom) {
  if(contentDom) {
    var agent = AdfAgent.AGENT;
    var isAutoRestore = AdfDhtmlPopupPeer._isRestoreEnabled(component, contentDom);
    if(!isAutoRestore) {
      AdfDhtmlPopupPeer._initPrivateProperties(component);
      var suppressSyncEvent = AdfDhtmlPopupPeer.__handlePopupCanceled(component, contentDom);
      this._setShown(component, false, suppressSyncEvent)
    }
    var popupDom = agent.getElementById(component.getClientId());
    popupDom.appendChild(contentDom);
    if(!isAutoRestore) {
      (new AdfPopupClosedEvent(component)).queue()
    }
  }else {
    AdfDhtmlPopupPeer._initPrivateProperties(component);
    this._setShown(component, false);
    (new AdfPopupClosedEvent(component)).queue()
  }
};
AdfDhtmlPopupPeer.__handlePopupCanceled = function(component, contentDom) {
  AdfAssert.assertPrototype(component, AdfRichPopup);
  AdfAssert.assertDomElement(contentDom);
  var agent = AdfAgent.AGENT;
  var isCanceled = agent.getExpandoProperty(contentDom, AdfDhtmlPopupWindow.__CANCELED_EXPANDO) == true;
  agent.setExpandoProperty(contentDom, AdfDhtmlPopupWindow.__CANCELED_EXPANDO, false);
  var propagatesToServer = false;
  if(isCanceled) {
    var isPartial = true;
    var event = new AdfPopupCanceledEvent(component);
    propagatesToServer = event.propagatesToServer();
    event.queue(isPartial)
  }
  return propagatesToServer
};
AdfDhtmlPopupPeer._isAutoCancel = function(component) {
  AdfAssert.assertPrototype(component, AdfRichPopup);
  var autoCancel = component.getAutoCancel();
  if(autoCancel == AdfRichPopup.AUTO_CANCEL_ENABLED) {
    return true
  }
  return false
};
AdfDhtmlPopupPeer._isRestoreEnabled = function(component, contentDom) {
  AdfAssert.assertPrototype(component, AdfRichPopup);
  AdfAssert.assertDomElement(contentDom);
  var agent = AdfAgent.AGENT;
  var isAutoRestore = !AdfDhtmlPopupPeer._isAutoCancel(component) && agent.getExpandoProperty(contentDom, AdfDhtmlPopupWindow.__REPLACEDOM_EXPANDO) == true;
  agent.setExpandoProperty(contentDom, AdfDhtmlPopupWindow.__REPLACEDOM_EXPANDO, false);
  return isAutoRestore
};
AdfDhtmlPopupPeer.prototype.PopupOpened = function(component) {
  (new AdfPopupOpenedEvent(component)).queue()
};
AdfDhtmlPopupPeer.setChildHints = function(popupComponent, hints) {
  popupComponent._childHints = hints
};

AdfUIComponents.createComponentClass("AdfUICollection", {componentType:"org.apache.myfaces.trinidad.CollectionBase", propertyKeys:[], namingContainer:true});

AdfUIComponents.createComponentClass("AdfUICommand", {componentType:"org.apache.myfaces.trinidad.Command", propertyKeys:[{name:"actionExpression", type:"Object", secured:true}, {name:"returnListener", type:"Object", secured:true}, {name:"launchListener", type:"Object", secured:true}, {name:"immediate", type:"Boolean", "default":false, secured:true}], eventNames:["action", "return", "launch"]});

AdfUIComponents.createComponentClass("AdfUIGo", {componentType:"org.apache.myfaces.trinidad.Go", propertyKeys:[{name:"destination", type:"String"}]});

AdfUIComponents.createComponentClass("AdfUIDialog", {componentType:"oracle.adf.Dialog", propertyKeys:[{name:"dialogListener", type:"Object", secured:true}], eventNames:["dialog"]});

AdfUIDialog.prototype.HandleEvent = function(event) {
  if(event.getType() == AdfDialogEvent.EVENT_TYPE && !event.propagatesToServer()) {
    var parent = this.getParent();
    if(parent instanceof AdfRichPopup) {
      parent.cancel()
    }else {
      parent.getPeer().cancelPopup(parent)
    }
  }
  AdfUIDialog.superclass.HandleEvent.call(this, event)
};

AdfUIComponents.createComponentClass("AdfRichPanelWindow", {componentType:"oracle.adf.RichPanelWindow", propertyKeys:[{name:"modal", type:"Boolean", "default":false}, {name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true, secured:true}, {name:"title", type:"String"}, {name:"titleIconSource", type:"String"}, {name:"closeIconVisible", type:"Boolean", 
"default":true}, {name:"helpTopicId", type:"String"}, {name:"contentHeight", type:"Number"}, {name:"contentWidth", type:"Number"}, {name:"stretchChildren", type:"String", "default":"none"}, {name:"resize", type:"String", "default":"off"}, {name:"initialFocus", type:"String", "default":"auto"}], superclass:AdfUIPanel});

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlPanelWindowBasePeer");
AdfDhtmlPanelWindowBasePeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.CLICK_EVENT_TYPE, AdfUIInputEvent.KEY_DOWN_EVENT_TYPE, AdfUIInputEvent.KEY_PRESS_EVENT_TYPE, AdfUIInputEvent.KEY_UP_EVENT_TYPE, AdfUIInputEvent.FOCUS_EVENT_TYPE);
  AdfObject.ensureClassInitialization(AdfRichPanelWindow);
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichPanelWindow.TITLE_ICON_SOURCE, AdfRichPanelWindow.TITLE, AdfRichPanelWindow.CONTENT_HEIGHT, AdfRichPanelWindow.CONTENT_WIDTH);
  AdfRichUIPeer.addComponentPropertyGetters(this, AdfRichPanelWindow.CONTENT_HEIGHT, AdfRichPanelWindow.CONTENT_WIDTH);
  AdfRichUIPeer.addSuppressedPPRAttributes(this, AdfRichPanelWindow.TITLE, AdfRichPanelWindow.CONTENT_HEIGHT, AdfRichPanelWindow.CONTENT_WIDTH);
  this._HEADER_START_EDGE_SUBID = "_hse";
  this._HEADER_CENTER_EDGE_SUBID = "_hce";
  this._HEADER_END_EDGE_SUBID = "_hee";
  this._CONTENT_START_EDGE_SUBID = "_cse";
  this._CONTENT_END_EDGE_SUBID = "_cee";
  this._FOOTER_START_EDGE_SUBID = "_fse";
  this._FOOTER_CENTER_EDGE_SUBID = "_fce";
  this._FOOTER_END_EDGE_SUBID = "_fee";
  this._FOOTER_RESIZE_END_ICON_SUBID = "_ree";
  this._FOOTER_RESIZE_START_ICON_SUBID = "_rse";
  this._RESIZE_DRAG_SOURCE_SUBIDS = [this._HEADER_START_EDGE_SUBID, this._HEADER_CENTER_EDGE_SUBID, this._HEADER_END_EDGE_SUBID, this._CONTENT_START_EDGE_SUBID, this._CONTENT_END_EDGE_SUBID, this._FOOTER_START_EDGE_SUBID, this._FOOTER_CENTER_EDGE_SUBID, this._FOOTER_END_EDGE_SUBID, this._FOOTER_RESIZE_END_ICON_SUBID, this._FOOTER_RESIZE_START_ICON_SUBID];
  this._FOOTER_CENTER_CONTENT_SUBID = "_fcc";
  this._CONTENT_SUBID = "contentContainer";
  this._CONTENT_CENTER_SUBID = "_ccntr";
  this._CONTENT_SIZED_FOR_MINIMUMS_EXPANDO = "_csfm";
  this._HEADER_TITLE_BAR_SUBID = "tb";
  this._CONTENT_RESIZED_INDICATOR_EXPANDO = "_cri";
  this._PANEL_WINDOW_RESIZE_GHOST_CLASS = "af|panelWindow::resize-ghost";
  this._RESIZE_ON = "on";
  this._STRETCH_CHILDREN_FIRST = "first";
  this._ANIMATION_DURATION_SKIN_PROPERTY = "af|panelWindow-tr-open-animation-duration";
  this._ANIMATE_SKIN_PROPERTY = "af|panelWindow-tr-animate"
};
AdfDhtmlPanelWindowBasePeer.prototype.handleEscapeKey = function(event) {
  this.Cancel();
  AdfAgent.AGENT.eatEvent(event)
};
AdfDhtmlPanelWindowBasePeer.prototype.HandleComponentKeyDown = function(componentEvent) {
};
AdfDhtmlPanelWindowBasePeer.prototype.HandleComponentKeyPress = function(componentEvent) {
  if(!componentEvent.isCanceled()) {
    var evt = componentEvent.getNativeEvent();
    var keyCode = componentEvent.getKeyCode();
    if(keyCode == AdfKeyStroke.ENTER_KEY) {
      if(this.IsClose(componentEvent)) {
        componentEvent.cancel();
        componentEvent.stopBubbling();
        this.Cancel()
      }else {
        if(this.IsPin(componentEvent)) {
          this.Pin()
        }
      }
    }
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.HandleComponentKeyUp = function(componentEvent) {
  if(!componentEvent.isCanceled()) {
    var nativeEvent = componentEvent.getNativeEvent();
    var keyCode = componentEvent.getKeyCode();
    if(keyCode == AdfKeyStroke.SPACE_KEY) {
      if(this.IsClose(componentEvent)) {
        this.Cancel();
        componentEvent.cancel();
        componentEvent.stopBubbling()
      }
    }else {
      if(nativeEvent.ctrlKey && nativeEvent.altKey) {
        if(keyCode == AdfKeyStroke.W_KEY && !this.getComponent().getModal()) {
          var dialogManager = AdfDhtmlDialogManager.getInstance();
          dialogManager.focusNextModelessDialog();
          componentEvent.cancel();
          componentEvent.stopBubbling()
        }
      }
    }
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.HandleComponentFocus = function(componentEvent) {
  if(componentEvent instanceof AdfDomComponentFocusEvent) {
    this._handleActivate(componentEvent, false)
  }
};
AdfDhtmlPanelWindowBasePeer.prototype._handleActivate = function(componentEvent, focusOnFirstElement) {
  if(!componentEvent.isCanceled()) {
    var component = this.getComponent();
    var componentDom = this.getDomElement();
    var eventTargetDom = componentEvent.getNativeEventTarget();
    if(AdfDomUtils.isAncestorOrSelf(componentDom, eventTargetDom)) {
      var popupWindow = this._getPopupWindow(component);
      if(popupWindow) {
        if(popupWindow.handleActivate(focusOnFirstElement)) {
          componentEvent.cancel();
          componentEvent.stopBubbling()
        }
      }
    }
  }
};
AdfDhtmlPanelWindowBasePeer.prototype._handleMouseDownTouchStart = function(componentEvent) {
  this._handleActivate(componentEvent, true);
  var component = this.getComponent();
  if(AdfPage.PAGE.isScreenReaderMode() || component != componentEvent.getSource() || component.getProperty("resize") != AdfDhtmlPanelWindowBasePeer._RESIZE_ON) {
    return
  }
  var nativeEvent = componentEvent.getNativeEvent();
  var agent = AdfAgent.AGENT;
  var targetNode = agent.getEventTarget(nativeEvent);
  var targetId = targetNode.id;
  if(targetId) {
    var tokens = targetId.split("::");
    if(tokens.length > 1) {
      var lastToken = tokens[tokens.length - 1];
      if(AdfCollections.indexOf(AdfDhtmlPanelWindowBasePeer._RESIZE_DRAG_SOURCE_SUBIDS, lastToken) > -1) {
        var popupWindow = this._getPopupWindow(component);
        if(popupWindow && !popupWindow.isAnimating() && AdfDomUtils.isAncestorOrSelf(popupWindow.getContent(), targetNode)) {
          agent.preventDefault(nativeEvent);
          this._startResizeDrag(popupWindow, nativeEvent, lastToken);
          componentEvent.cancel()
        }
      }
    }
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.HandleComponentClick = function(componentEvent) {
  if(componentEvent.isLeftButtonPressed()) {
    if(this.IsClose(componentEvent)) {
      this.Cancel()
    }else {
      if(this.IsPin(componentEvent)) {
        this.Pin()
      }
    }
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.IsClose = function(componentEvent) {
  var target = componentEvent.getNativeEventTarget();
  var component = this.getComponent();
  var closeId = AdfRichUIPeer.CreateSubId(component.getClientId(), "close");
  if(target.id == closeId) {
    return true
  }
  return target.parentNode.id == closeId
};
AdfDhtmlPanelWindowBasePeer.prototype.IsPin = function(componentEvent) {
  var target = componentEvent.getNativeEventTarget();
  var component = this.getComponent();
  var pinId = AdfRichUIPeer.CreateSubId(component.getClientId(), "pin");
  if(target.id == pinId) {
    return true
  }
  return target.parentNode.id == pinId
};
AdfDhtmlPanelWindowBasePeer.prototype.Hide = function(component) {
  var parent = this.getComponent().getParent();
  if(parent instanceof AdfRichPopup) {
    parent.hide()
  }else {
    this.hideAllPopups(parent)
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.Cancel = function(component) {
  var parent = this.getComponent().getParent();
  if(parent instanceof AdfRichPopup) {
    parent.cancel()
  }else {
    this.cancelAllPopups(parent)
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.Pin = function() {
  var parent = this.getComponent().getParent();
  if(parent instanceof AdfRichPopup) {
    if(!parent[AdfRichUIPeer._POPUP_LIST]) {
      return
    }
    var popupElement = parent[AdfRichUIPeer._POPUP_LIST][parent.getClientId()].getElement();
    var page = AdfPage.PAGE;
    var autoDismissalManager = page.getAutoDismissalManager();
    autoDismissalManager.cancelPopupDismissTimeout(parent, popupElement)
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.Init = function(component, usage) {
  AdfDhtmlPanelWindowBasePeer.superclass.Init.call(this, component, usage);
  this._onResizeDrag = this.createCallback(this._handleResizeDrag);
  this._onResizeDrop = this.createCallback(this._handleResizeDrop);
  this._onAbortDrop = this.createCallback(this._handleResizeAbort)
};
AdfDhtmlPanelWindowBasePeer.prototype.InitDomElement = function(component, domElement) {
  var parent = component.getParent();
  if(parent == null) {
    parent = component
  }
  var childHints = new Object;
  childHints[AdfDhtmlPopupWindow.HINT_MODAL] = component.getModal();
  childHints[AdfDhtmlPopupWindow.HINT_DRAG_ELEMENT] = this.getDragElement();
  if(component.getInitialFocus() == "none" && !component.getModal()) {
    childHints[AdfDhtmlPopupWindow.HINT_FOCUS] = false
  }else {
    childHints[AdfDhtmlPopupWindow.HINT_FOCUS] = true
  }
  childHints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_INACTIVATE;
  childHints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_DIALOG;
  childHints[AdfRichPopup.HINT_ALIGN] = AdfRichPopup.ALIGN_OVERLAP;
  AdfDhtmlPopupPeer.setChildHints(parent, childHints)
};
AdfDhtmlPanelWindowBasePeer.prototype.getDragElement = function() {
  var titleBarId = AdfRichUIPeer.CreateSubId(this.getComponent().getClientId(), AdfDhtmlPanelWindowBasePeer._HEADER_TITLE_BAR_SUBID);
  return AdfAgent.AGENT.getElementById(titleBarId)
};
AdfDhtmlPanelWindowBasePeer.prototype.ComponentTitleChanged = function(component, domElement, newValue, oldValue) {
  var agent = AdfAgent.AGENT;
  var titleId = AdfRichUIPeer.CreateSubId(component.getClientId(), "_ttxt");
  var titleDiv = agent.getElementById(titleId);
  agent.setTextContent(titleDiv, newValue);
  return true
};
AdfDhtmlPanelWindowBasePeer.prototype.ComponentTitleIconSourceChanged = function(component, domElement, newValue, oldValue) {
  var agent = AdfAgent.AGENT;
  var titleIconId = AdfRichUIPeer.CreateSubId(component.getClientId(), "_ticn");
  var titleIconDiv = agent.getElementById(titleIconId);
  var icon = agent.getDomDocument().createElement("img");
  icon.alt = "";
  agent.setImageSource(icon, newValue);
  if(newValue) {
    if(titleIconDiv.hasChildNodes()) {
      titleIconDiv.replaceChild(icon, titleIconDiv.firstChild)
    }else {
      titleIconDiv.appendChild(icon)
    }
    AdfDomUtils.setVisible(titleIconDiv, true)
  }else {
    AdfDomUtils.setVisible(titleIconDiv, false)
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.ComponentContentWidthChanged = function(component, domElement, newValue, oldValue) {
  var resizableContentDom = AdfDhtmlPanelWindowBasePeer._getResizableContentDom(component);
  resizableContentDom.style.width = newValue + "px";
  AdfAgent.AGENT.setExpandoProperty(domElement, AdfDhtmlPanelWindowBasePeer._CONTENT_RESIZED_INDICATOR_EXPANDO, "1");
  return true
};
AdfDhtmlPanelWindowBasePeer.prototype.ComponentContentHeightChanged = function(component, domElement, newValue, oldValue) {
  var resizableContentDom = AdfDhtmlPanelWindowBasePeer._getResizableContentDom(component);
  resizableContentDom.style.height = newValue + "px";
  AdfAgent.AGENT.setExpandoProperty(domElement, AdfDhtmlPanelWindowBasePeer._CONTENT_RESIZED_INDICATOR_EXPANDO, "1");
  return true
};
AdfDhtmlPanelWindowBasePeer.prototype.GetComponentContentWidth = function(component, domElement) {
  var resizableContentDom = AdfDhtmlPanelWindowBasePeer._getResizableContentDom(component);
  var resizableContentDomStyle = resizableContentDom.style;
  if(resizableContentDomStyle.width) {
    return AdfAgent.getCSSLengthAsInt(resizableContentDomStyle.width)
  }
  return resizableContentDom.offsetWidth
};
AdfDhtmlPanelWindowBasePeer.prototype.GetComponentContentHeight = function(component, domElement) {
  var resizableContentDom = AdfDhtmlPanelWindowBasePeer._getResizableContentDom(component);
  var resizableContentDomStyle = resizableContentDom.style;
  if(resizableContentDomStyle.height) {
    return AdfAgent.getCSSLengthAsInt(resizableContentDomStyle.height)
  }
  return resizableContentDom.offsetHeight
};
AdfDhtmlPanelWindowBasePeer._getResizableContentDom = function(component) {
  var clientId = component.getClientId();
  var resizableContentId = null;
  var resizableContentDom = null;
  if(component.getProperty("resize") == AdfDhtmlPanelWindowBasePeer._RESIZE_ON || component.getProperty("stretchChildren") == AdfDhtmlPanelWindowBasePeer._STRETCH_CHILDREN_FIRST) {
    resizableContentId = AdfRichUIPeer.createSubId(clientId, AdfDhtmlPanelWindowBasePeer._CONTENT_CENTER_SUBID);
    resizableContentDom = AdfAgent.AGENT.getElementById(resizableContentId);
    AdfAssert.assertDomElement(resizableContentDom, "DIV")
  }else {
    resizableContentId = AdfRichUIPeer.createSubId(clientId, AdfDhtmlPanelWindowBasePeer._CONTENT_SUBID);
    resizableContentDom = AdfAgent.AGENT.getElementById(resizableContentId);
    AdfAssert.assertDomElement(resizableContentDom, "TD")
  }
  return resizableContentDom
};
AdfDhtmlPanelWindowBasePeer.prototype._getPopupWindow = function(component) {
  var popupWindow = null;
  var popupParent = component.getParent();
  var popupParentPeer = popupParent ? popupParent.getPeer() : null;
  if(popupParentPeer) {
    popupParentPeer.bind(popupParent);
    if(popupParent instanceof AdfRichPopup) {
      popupWindow = popupParentPeer.getPopupWindow(popupParent, popupParent.getClientId())
    }else {
      var popups = popupParentPeer.getAllPopups(popupParent);
      for(var prop in popups) {
        var pw = popups[prop];
        if(pw instanceof AdfDhtmlSimpleFloat) {
          popupWindow = pw;
          break
        }
      }
    }
  }
  AdfAssert.assertPrototypeOrNull(popupWindow, AdfDhtmlSimpleFloat);
  return popupWindow
};
AdfDhtmlPanelWindowBasePeer.prototype.BindToComponent = function(component, domElement) {
  AdfDhtmlPanelWindowBasePeer.superclass.BindToComponent.call(this, component, domElement);
  var popupWindow = this._getPopupWindow(component);
  if(popupWindow) {
    popupWindow.handleBindToComponent()
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.ComponentRemoved = function(component) {
  var popupWindow = this._getPopupWindow(component);
  if(popupWindow) {
    popupWindow.handleComponentRemoved()
  }
};
AdfDhtmlPanelWindowBasePeer.prototype.calculateMinimumContentSize = function() {
  var component = this.getComponent();
  var clientId = component.getClientId();
  var agent = AdfAgent.AGENT;
  var sizableContentId = AdfRichUIPeer.createSubId(clientId, AdfDhtmlPanelWindowBasePeer._CONTENT_CENTER_SUBID);
  var sizableContentDom = agent.getElementById(sizableContentId);
  AdfAssert.assertDomElement(sizableContentDom, "DIV");
  if(agent.getExpandoProperty(sizableContentDom, AdfDhtmlPanelWindowBasePeer._CONTENT_SIZED_FOR_MINIMUMS_EXPANDO)) {
    return
  }
  var titleBarId = AdfRichUIPeer.createSubId(clientId, AdfDhtmlPanelWindowBasePeer._HEADER_CENTER_EDGE_SUBID);
  var titleBarContainerDom = agent.getElementById(titleBarId);
  AdfAssert.assertDomElement(titleBarContainerDom, "TD");
  var titleBarOffsetWidth = Math.max(1, titleBarContainerDom.offsetWidth);
  var titleBarTextId = AdfRichUIPeer.createSubId(clientId, AdfDhtmlPanelWindowBasePeer._HEADER_TITLE_BAR_SUBID);
  var titleBarDoms = titleBarContainerDom.getElementsByTagName("TD");
  var minTitleBarWidth = 0;
  for(var n = 0;n < titleBarDoms.length;n++) {
    var titleBarDom = titleBarDoms[n];
    var oldTitleWidth = null;
    if(titleBarDom.id && titleBarDom.id == titleBarTextId) {
      oldTitleWidth = titleBarDom.style.width;
      titleBarDom.style.width = "1px"
    }
    var children = AdfDomUtils.getChildElements(titleBarDom);
    for(var i = 0;i < children.length;i++) {
      var child = children[i];
      minTitleBarWidth += agent.getOuterWidth(child, child.offsetWidth)
    }
    if(titleBarDom.id && titleBarDom.id == titleBarTextId) {
      titleBarDom.style.width = oldTitleWidth
    }
  }
  var minWidth = AdfAgent.getCSSLengthAsInt(sizableContentDom.style.minWidth);
  minWidth = Math.max(minWidth, minTitleBarWidth);
  sizableContentDom.style.minWidth = minWidth + "px";
  var minHeight = AdfAgent.getCSSLengthAsInt(sizableContentDom.style.minHeight);
  var sizableContentHeight = Math.max(1, sizableContentDom.offsetHeight);
  var relativeMinHeight = Math.round(minTitleBarWidth / titleBarOffsetWidth * sizableContentHeight);
  minHeight = Math.max(minHeight, relativeMinHeight);
  sizableContentDom.style.minHeight = minHeight + "px";
  agent.setExpandoProperty(sizableContentDom, AdfDhtmlPanelWindowBasePeer._CONTENT_SIZED_FOR_MINIMUMS_EXPANDO, "1")
};
AdfDhtmlPanelWindowBasePeer.prototype.GetResizeGhostSelector = function() {
  return AdfDhtmlPanelWindowBasePeer._PANEL_WINDOW_RESIZE_GHOST_CLASS
};
AdfDhtmlPanelWindowBasePeer.prototype._startResizeDrag = function(popupWindow, nativeEvent, eventTargetSubId) {
  var page = AdfPage.PAGE;
  var agent = AdfAgent.AGENT;
  var targetNode = agent.getEventTarget(nativeEvent);
  var targetNodeStyle = targetNode.style;
  AdfAssert.assertString(eventTargetSubId);
  this._eventTargetSubId = eventTargetSubId;
  var containedComponentId = popupWindow.getContainedComponentClientId();
  AdfAssert.assertString(containedComponentId);
  this._popupWindow = popupWindow;
  AdfAssert.assertPrototype(popupWindow, AdfDhtmlSimpleFloat);
  this.calculateMinimumContentSize();
  var resizableContentId = AdfRichUIPeer.createSubId(containedComponentId, AdfDhtmlPanelWindowBasePeer._CONTENT_CENTER_SUBID);
  var resizableContentDom = this._resizableContentDom = agent.getElementById(resizableContentId);
  AdfAssert.assertDomElement(resizableContentDom, "DIV");
  var resizableContentDomStyle = resizableContentDom.style;
  var contentWidth = AdfAgent.getCSSLengthAsInt(resizableContentDomStyle.width);
  var contentHeight = AdfAgent.getCSSLengthAsInt(resizableContentDomStyle.height);
  var minContentWidth = AdfAgent.getCSSLengthAsInt(resizableContentDomStyle.minWidth);
  var minContentHeight = AdfAgent.getCSSLengthAsInt(resizableContentDomStyle.minHeight);
  this._initContentWidth = contentWidth = contentWidth > 0 ? contentWidth : resizableContentDom.offsetWidth;
  this._initContentHeight = contentHeight = contentHeight > 0 ? contentHeight : resizableContentDom.offsetHeight;
  resizableContentDomStyle.height = contentHeight + "px";
  resizableContentDomStyle.width = contentWidth + "px";
  var doc = resizableContentDom.ownerDocument;
  var ghost = this._ghost = doc.createElement("div");
  var ghostClassName = page.getLookAndFeel().getStyleClass(this.GetResizeGhostSelector());
  AdfDomUtils.addCSSClassName(ghost, ghostClassName);
  var ghostBorderWidth = 1;
  var ghostWidth = popupWindow.getWidth() - ghostBorderWidth * 2;
  var ghostHeight = popupWindow.getHeight() - ghostBorderWidth * 2;
  var contentToChromeDeltaX = this._contentToChromeDeltaX = ghostWidth - contentWidth;
  var contentToChromeDeltaY = this._contentToChromeDeltaY = ghostHeight - contentHeight;
  page.getZOrderManager().addElementToLayer(ghost, AdfDhtmlZOrderManager.FLOATINGTYPE_WINDOW);
  var ghostStyle = ghost.style;
  ghostStyle.cursor = targetNodeStyle.cursor;
  ghostStyle.top = popupWindow.getTop() + "px";
  ghostStyle.left = popupWindow.getLeft() + "px";
  ghostStyle.width = ghostWidth + "px";
  ghostStyle.height = ghostHeight + "px";
  ghostStyle.minWidth = minContentWidth + contentToChromeDeltaX + "px";
  ghostStyle.minHeight = minContentHeight + contentToChromeDeltaY + "px";
  popupWindow.setDragging(true);
  popupWindow.setShadowVisibility(false);
  AdfPage.PAGE.startDrag(nativeEvent, this._onResizeDrag, this._onResizeDrop, this._onResizeAbort, true)
};
AdfDhtmlPanelWindowBasePeer.prototype._handleResizeDrag = function(evt, deltaX, deltaY) {
  var agent = AdfAgent.AGENT;
  var scrollTop = agent.getBrowserViewportScrollTop();
  var scrollLeft = agent.getBrowserViewportScrollLeft();
  var maxWindowWidth = agent.getWindowWidth();
  var maxWindowHeight = agent.getWindowHeight();
  var eventTargetSubId = this._eventTargetSubId;
  AdfAssert.assertString(eventTargetSubId);
  var ghostDom = this._ghost;
  AdfAssert.assertDomElement(ghostDom, "DIV");
  var ghostDomStyle = ghostDom.style;
  var ghostWidth = AdfAgent.getCSSLengthAsInt(ghostDomStyle.width);
  var ghostHeight = AdfAgent.getCSSLengthAsInt(ghostDomStyle.height);
  var mousePos = agent.getMousePosition(evt);
  if(mousePos.x < scrollLeft || mousePos.x > maxWindowWidth + scrollLeft || mousePos.y < scrollTop || mousePos.y > maxWindowHeight + scrollTop) {
    return
  }
  var minGhostWidth = AdfAgent.getCSSLengthAsInt(ghostDomStyle.minWidth);
  var minGhostHeight = AdfAgent.getCSSLengthAsInt(ghostDomStyle.minHeight);
  var ghostTop = AdfAgent.getCSSLengthAsInt(ghostDomStyle.top);
  var ghostLeft = AdfAgent.getCSSLengthAsInt(ghostDomStyle.left);
  var prevTop = ghostTop;
  var prevLeft = ghostLeft;
  var prevGhostWidth = ghostWidth;
  var prevGhostHeight = ghostHeight;
  switch(eventTargetSubId) {
    case AdfDhtmlPanelWindowBasePeer._HEADER_START_EDGE_SUBID:
      ghostTop = mousePos.y;
      ghostHeight += prevTop - mousePos.y;
      ghostLeft = mousePos.x;
      ghostWidth += prevLeft - mousePos.x;
      if(ghostHeight < minGhostHeight) {
        ghostTop = prevTop;
        ghostHeight = prevGhostHeight
      }
      if(ghostWidth < minGhostWidth) {
        ghostLeft = prevLeft;
        ghostWidth = prevGhostWidth
      }
      break;
    case AdfDhtmlPanelWindowBasePeer._HEADER_CENTER_EDGE_SUBID:
      ghostTop = mousePos.y;
      ghostHeight += prevTop - mousePos.y;
      if(ghostHeight < minGhostHeight) {
        ghostTop = prevTop;
        ghostHeight = prevGhostHeight
      }
      break;
    case AdfDhtmlPanelWindowBasePeer._HEADER_END_EDGE_SUBID:
      ghostTop = mousePos.y;
      ghostHeight += prevTop - mousePos.y;
      ghostWidth = mousePos.x - prevLeft;
      if(ghostHeight < minGhostHeight) {
        ghostTop = prevTop;
        ghostHeight = prevGhostHeight
      }
      if(ghostWidth < minGhostWidth) {
        ghostWidth = prevGhostWidth
      }
      break;
    case AdfDhtmlPanelWindowBasePeer._CONTENT_START_EDGE_SUBID:
      ghostLeft = mousePos.x;
      ghostWidth += prevLeft - mousePos.x;
      if(ghostWidth < minGhostWidth) {
        ghostLeft = prevLeft;
        ghostWidth = prevGhostWidth
      }
      break;
    case AdfDhtmlPanelWindowBasePeer._CONTENT_END_EDGE_SUBID:
      ghostWidth = mousePos.x - prevLeft;
      if(ghostWidth < minGhostWidth) {
        ghostWidth = prevGhostWidth
      }
      break;
    case AdfDhtmlPanelWindowBasePeer._FOOTER_RESIZE_START_ICON_SUBID:
    ;
    case AdfDhtmlPanelWindowBasePeer._FOOTER_START_EDGE_SUBID:
      ghostLeft = mousePos.x;
      ghostWidth += prevLeft - mousePos.x;
      ghostHeight = mousePos.y - prevTop;
      if(ghostWidth < minGhostWidth) {
        ghostLeft = prevLeft;
        ghostWidth = prevGhostWidth
      }
      if(ghostHeight < minGhostHeight) {
        ghostHeight = prevGhostHeight
      }
      break;
    case AdfDhtmlPanelWindowBasePeer._FOOTER_CENTER_EDGE_SUBID:
      ghostHeight = mousePos.y - prevTop;
      if(ghostHeight < minGhostHeight) {
        ghostHeight = prevGhostHeight
      }
      break;
    case AdfDhtmlPanelWindowBasePeer._FOOTER_RESIZE_END_ICON_SUBID:
    ;
    case AdfDhtmlPanelWindowBasePeer._FOOTER_END_EDGE_SUBID:
      ghostHeight = mousePos.y - prevTop;
      ghostWidth = mousePos.x - prevLeft;
      if(ghostHeight < minGhostHeight) {
        ghostHeight = prevGhostHeight
      }
      if(ghostWidth < minGhostWidth) {
        ghostWidth = prevGhostWidth
      }
      break
  }
  if(prevTop != ghostTop) {
    ghostDomStyle.top = ghostTop + "px"
  }
  if(prevLeft != ghostLeft) {
    ghostDomStyle.left = ghostLeft + "px"
  }
  if(prevGhostHeight != ghostHeight) {
    ghostDomStyle.height = ghostHeight + "px"
  }
  if(prevGhostWidth != ghostWidth) {
    ghostDomStyle.width = ghostWidth + "px"
  }
};
AdfDhtmlPanelWindowBasePeer.prototype._handleResizeDrop = function(evt, deltaX, deltaY) {
  var page = AdfPage.PAGE;
  var ghost = this._ghost;
  AdfAssert.assertDomElement(ghost, "DIV");
  var ghostStyle = ghost.style;
  var popupWindow = this._popupWindow;
  AdfAssert.assertPrototype(popupWindow, AdfDhtmlSimpleFloat);
  var containedComponentId = popupWindow.getContainedComponentClientId();
  AdfAssert.assertString(containedComponentId);
  var initContentWidth = this._initContentWidth;
  AdfAssert.assertNumeric(initContentWidth);
  var initContentHeight = this._initContentHeight;
  AdfAssert.assertNumeric(initContentHeight);
  var resizableContentDom = this._resizableContentDom;
  AdfAssert.assertDomElement(resizableContentDom, "DIV");
  var contentToChromeDeltaX = this._contentToChromeDeltaX;
  AdfAssert.assertNumeric(contentToChromeDeltaX);
  var contentToChromeDeltaY = this._contentToChromeDeltaY;
  AdfAssert.assertNumeric(contentToChromeDeltaY);
  delete this._eventTargetSubId;
  delete this._popupWindow;
  delete this._initContentWidth;
  delete this._initContentHeight;
  delete this._resizableContentDom;
  delete this._contentToChromeDeltaX;
  delete this._contentToChromeDeltaY;
  delete this._ghost;
  var top = AdfAgent.getCSSLengthAsInt(ghostStyle.top);
  var left = AdfAgent.getCSSLengthAsInt(ghostStyle.left);
  var contentWidth = AdfAgent.getCSSLengthAsInt(ghostStyle.width) - contentToChromeDeltaX;
  var contentHeight = AdfAgent.getCSSLengthAsInt(ghostStyle.height) - contentToChromeDeltaY;
  var component = page.findComponent(containedComponentId);
  if(component && component.getContentWidth && component.getContentHeight) {
    var peer = component.getPeer();
    peer.bind(component);
    if(contentWidth != initContentWidth) {
      component.setProperty(AdfRichPanelWindow.CONTENT_WIDTH, contentWidth, true, true)
    }
    if(contentHeight != initContentHeight) {
      component.setProperty(AdfRichPanelWindow.CONTENT_HEIGHT, contentHeight, true, true)
    }
  }
  page.getZOrderManager().removeElement(ghost);
  popupWindow.autoSize();
  page.doResizeNotifyDom(resizableContentDom, false);
  popupWindow.setDragging(false);
  popupWindow.setShadowVisibility(true);
  popupWindow.setPosition(top, left)
};
AdfDhtmlPanelWindowBasePeer.prototype._handleResizeAbort = function() {
  var ghost = this._ghost;
  AdfAssert.assertDomElement(ghost, "DIV");
  delete this._eventTargetSubId;
  delete this._popupWindow;
  delete this._initContentWidth;
  delete this._initContentHeight;
  delete this._resizableContentDom;
  delete this._contentToChromeDeltaX;
  delete this._contentToChromeDeltaY;
  delete this._ghost;
  AdfPage.PAGE.getZOrderManager().removeElement(ghost)
};
AdfDhtmlPanelWindowBasePeer.prototype.isContentResized = function(component) {
  var peer = component.getPeer();
  peer.bind(component);
  var componentDom = peer.getDomElement();
  var resized = AdfAgent.AGENT.getExpandoProperty(componentDom, AdfDhtmlPanelWindowBasePeer._CONTENT_RESIZED_INDICATOR_EXPANDO);
  return resized && resized == "1"
};
AdfDhtmlPanelWindowBasePeer.prototype.getAnimationDurationSkinProperty = function() {
  return AdfDhtmlPanelWindowBasePeer._ANIMATION_DURATION_SKIN_PROPERTY
};
AdfDhtmlPanelWindowBasePeer.prototype.getAnimateSkinProperty = function() {
  return AdfDhtmlPanelWindowBasePeer._ANIMATE_SKIN_PROPERTY
};

AdfRichUIPeer.createPeerClass(AdfDhtmlPanelWindowBasePeer, "AdfDhtmlPanelWindowPeer");
AdfDhtmlPanelWindowPeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.MOUSE_DOWN_EVENT_TYPE)
};
AdfDhtmlPanelWindowPeer.prototype.HandleComponentMouseDown = function(componentEvent) {
  this._handleMouseDownTouchStart(componentEvent)
};

var AdfDhtmlPopupHints = {TYPE:"type", TYPE_MENU:"menu", FOCUS:"focus", AUTODISMISS:"autodismiss", AUTODISMISS_MENU:"autodismissMenu", SURROGATE_CLIENT_ID:"surrogateClientId", OPEN_TRANSITION:"openTransition", CLOSE_TRANSITION:"closeTransition", TRANSITION_AUTO:"auto", TRANSITION_VERTICAL:"vertically", TRANSITION_HORIZONTAL:"horizontally"};

AdfUIComponents.createComponentClass("AdfRichDialog", {componentType:"oracle.adf.RichDialog", propertyKeys:[{name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true, secured:true}, {name:"title", type:"String"}, {name:"titleIconSource", type:"String"}, {name:"closeIconVisible", type:"Boolean", "default":true}, {name:"helpTopicId", type:"String"}, {name:"contentHeight", 
type:"Number"}, {name:"contentWidth", type:"Number"}, {name:"stretchChildren", type:"String", "default":"none"}, {name:"resize", type:"String", "default":"off"}, {name:"initialFocus", type:"String", "default":"auto"}, {name:"affirmativeTextAndAccessKey", type:"String"}, {name:"cancelTextAndAccessKey", type:"String"}, {name:"noTextAndAccessKey", type:"String"}, {name:"type", type:"String", "default":"okCancel"}, {name:"modal", type:"Boolean", "default":true}, {name:"okVisible", type:"Boolean", "default":true}, 
{name:"cancelVisible", type:"Boolean", "default":true}], superclass:AdfUIDialog});

AdfRichUIPeer.createPeerClass(AdfDhtmlPanelWindowPeer, "AdfDhtmlDialogPeer");
AdfDhtmlDialogPeer.InitSubclass = function() {
  this._OK_ID = "ok";
  this._CANCEL_ID = "cancel";
  this._YES_ID = "yes";
  this._NO_ID = "no";
  this._OUTCOME_ATTR_NAME = "_afrPdO";
  this._BUTTON_IDS = [AdfDhtmlDialogPeer._OK_ID, AdfDhtmlDialogPeer._YES_ID, AdfDhtmlDialogPeer._NO_ID, AdfDhtmlDialogPeer._CANCEL_ID];
  this._BUTTON_OUTCOMES = [AdfDialogEvent.OUTCOME_OK, AdfDialogEvent.OUTCOME_YES, AdfDialogEvent.OUTCOME_NO, AdfDialogEvent.OUTCOME_CANCEL];
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.CLICK_EVENT_TYPE);
  this._DIALOG_RESIZE_GHOST_CLASS = "af|dialog::resize-ghost";
  this._ANIMATION_DURATION_SKIN_PROPERTY = "af|dialog-tr-open-animation-duration";
  this._ANIMATE_SKIN_PROPERTY = "af|dialog-tr-animate"
};
AdfDhtmlDialogPeer.prototype.Init = function(component, usage) {
  AdfDhtmlDialogPeer.superclass.Init.call(this, component, usage)
};
AdfDhtmlDialogPeer.prototype.InitDomElement = function(component, domElement) {
  AdfDhtmlDialogPeer.superclass.InitDomElement.call(this, component, domElement);
  var clientId = component.getClientId();
  AdfDhtmlDialogPeer._setOutcomeExpandos(clientId)
};
AdfDhtmlDialogPeer.hideDialogIfNoMessages = function(id) {
  var dialog = AdfPage.PAGE.findComponent(id);
  if(dialog == null || !(dialog instanceof AdfRichDialog)) {
    return
  }
  var page = AdfPage.PAGE;
  var messages = page.getAllMessages();
  var defaultId = page.getDefaultMessageHandlerComponentId();
  for(var msgId in messages) {
    var isDefault = msgId == defaultId;
    var isDescendent = false;
    if(!isDefault) {
      var currComponent = page.findComponent(msgId);
      if(currComponent != null) {
        isDescendent = currComponent.isDescendant(dialog)
      }
    }
    if(isDefault || isDescendent) {
      var msgArray = messages[msgId];
      for(var i = 0;i < msgArray.length;i++) {
        var msg = msgArray[i];
        if(msg.getSeverity() >= TrFacesMessage.SEVERITY_ERROR) {
          return
        }
      }
    }
  }
  var parent = dialog.getParent();
  if(parent instanceof AdfRichPopup) {
    parent.hide()
  }else {
    dialog.setVisible(false)
  }
};
AdfDhtmlDialogPeer.prototype.fireCancel = function() {
  var component = this.getComponent();
  var event = new AdfDialogEvent(component, AdfDialogEvent.OUTCOME_CANCEL);
  component.broadcast(event)
};
AdfDhtmlDialogPeer.prototype.HandleComponentClick = function(componentEvent) {
  var component = this.getComponent();
  if(this.IsBusy(component.getClientId())) {
    componentEvent.cancel();
    componentEvent.stopBubbling()
  }
  if(!componentEvent.isCanceled()) {
    if(componentEvent.isLeftButtonPressed()) {
      if(this._queueDialogOutcome(component, componentEvent, false)) {
        return
      }
    }
  }
  AdfDhtmlDialogPeer.superclass.HandleComponentClick.call(this, componentEvent)
};
AdfDhtmlDialogPeer.prototype.handleEscapeKey = function(event) {
  var component = this.getComponent();
  (new AdfDialogEvent(component, AdfDialogEvent.OUTCOME_CANCEL)).queue();
  AdfAgent.AGENT.eatEvent(event)
};
AdfDhtmlDialogPeer.prototype.HandleComponentKeyDown = function(componentEvent) {
  var component = this.getComponent();
  if(this.IsBusy(component.getClientId())) {
    componentEvent.cancel();
    componentEvent.stopBubbling()
  }
  if(!componentEvent.isCanceled()) {
    var keyCode = componentEvent.getKeyCode();
    if(keyCode == AdfKeyStroke.ENTER_KEY) {
      if(this._queueDialogOutcome(component, componentEvent, true)) {
        return
      }
      var nativeEventTarget = componentEvent.getNativeEventTarget();
      var nativeEventTargetTagName = nativeEventTarget.tagName;
      var dialogOutcome;
      var dialogClientId = component.getClientId();
      if(AdfDhtmlDialogPeer._isOKPresent(dialogClientId)) {
        dialogOutcome = AdfDialogEvent.OUTCOME_OK
      }else {
        if(AdfDhtmlDialogPeer._isYesPresent(dialogClientId)) {
          dialogOutcome = AdfDialogEvent.OUTCOME_YES
        }
      }
      if(nativeEventTargetTagName == "A" || nativeEventTargetTagName == "BUTTON" || nativeEventTargetTagName == "TEXTAREA") {
        dialogOutcome = null
      }else {
        if(nativeEventTargetTagName == "INPUT") {
          var nativeEventTargetType = nativeEventTarget.type;
          if(nativeEventTargetType == "button" || nativeEventTargetType == "submit" || nativeEventTargetType == "reset") {
            dialogOutcome = null
          }
        }
      }
      if(dialogOutcome) {
        componentEvent.cancel();
        componentEvent.stopBubbling();
        (new AdfDialogEvent(component, dialogOutcome)).queue();
        return
      }
    }
  }
  AdfDhtmlDialogPeer.superclass.HandleComponentKeyDown.call(this, componentEvent)
};
AdfDhtmlDialogPeer.prototype.HandleComponentKeyUp = function(componentEvent) {
  if(!componentEvent.isCanceled()) {
    var keyCode = componentEvent.getKeyCode();
    var component = this.getComponent();
    if(keyCode == AdfKeyStroke.SPACE_KEY) {
      if(this._queueDialogOutcome(component, componentEvent, false)) {
        return
      }
    }
  }
  AdfDhtmlDialogPeer.superclass.HandleComponentKeyUp.call(this, componentEvent)
};
AdfDhtmlDialogPeer.prototype.HandleComponentKeyPress = function(componentEvent) {
  if(!componentEvent.isCanceled()) {
    var keyCode = componentEvent.getKeyCode();
    if(keyCode == AdfKeyStroke.ENTER_KEY) {
      var target = componentEvent.getNativeEventTarget();
      var buttonOutcome = target.getAttribute(AdfDhtmlDialogPeer._OUTCOME_ATTR_NAME);
      if(buttonOutcome == AdfDialogEvent.OUTCOME_CANCEL) {
        componentEvent.cancel();
        componentEvent.stopBubbling();
        var component = this.getComponent();
        (new AdfDialogEvent(component, buttonOutcome)).queue();
        return
      }
    }
  }
  AdfDhtmlDialogPeer.superclass.HandleComponentKeyPress.call(this, componentEvent)
};
AdfDhtmlDialogPeer.prototype._queueDialogOutcome = function(component, componentEvent, ignoreCancelAndClose) {
  var buttonOutcome;
  if(this.IsClose(componentEvent)) {
    buttonOutcome = AdfDialogEvent.OUTCOME_CANCEL
  }else {
    var target = componentEvent.getNativeEventTarget();
    if(target.tagName == "SPAN" && target.parentNode.tagName == "BUTTON") {
      target = target.parentNode
    }
    buttonOutcome = target.getAttribute(AdfDhtmlDialogPeer._OUTCOME_ATTR_NAME);
    if(buttonOutcome && (target.disabled || AdfDomUtils.containsCSSClassName(target, AdfRichUIPeer.DISABLED_STYLECLASS))) {
      buttonOutcome = null
    }
  }
  if(ignoreCancelAndClose && buttonOutcome == AdfDialogEvent.OUTCOME_CANCEL) {
    buttonOutcome = false
  }else {
    if(buttonOutcome) {
      componentEvent.cancel();
      componentEvent.stopBubbling();
      (new AdfDialogEvent(component, buttonOutcome)).queue()
    }
  }
  return buttonOutcome
};
AdfDhtmlDialogPeer._isOKPresent = function(clientId) {
  return AdfDhtmlDialogPeer._getButtonDom(clientId, AdfDhtmlDialogPeer._OK_ID) != null
};
AdfDhtmlDialogPeer._isYesPresent = function(clientId) {
  return AdfDhtmlDialogPeer._getButtonDom(clientId, AdfDhtmlDialogPeer._YES_ID) != null
};
AdfDhtmlDialogPeer._getButtonDom = function(clientId, buttonId) {
  return AdfAgent.AGENT.getElementById(AdfRichUIPeer.CreateSubId(clientId, buttonId))
};
AdfDhtmlDialogPeer._setOutcomeExpandos = function(clientId) {
  var buttonIds = AdfDhtmlDialogPeer._BUTTON_IDS;
  var buttonOutcomes = AdfDhtmlDialogPeer._BUTTON_OUTCOMES;
  var buttonCount = buttonIds.length;
  for(var i = 0;i < buttonCount;i++) {
    var domNode = AdfDhtmlDialogPeer._getButtonDom(clientId, buttonIds[i]);
    if(domNode) {
      domNode.setAttribute(AdfDhtmlDialogPeer._OUTCOME_ATTR_NAME, buttonOutcomes[i])
    }
  }
};
AdfDhtmlDialogPeer._setButtonDisableState = function(clientId, disabled) {
  AdfAssert.assertString(clientId);
  AdfAssert.assertBoolean(disabled);
  var buttonIds = AdfDhtmlDialogPeer._BUTTON_IDS;
  var buttonCount = buttonIds.length;
  for(var i = 0;i < buttonCount;i++) {
    var buttonNode = AdfDhtmlDialogPeer._getButtonDom(clientId, buttonIds[i]);
    if(buttonNode) {
      AdfDhtmlButtonPeer.__setDisabled(buttonNode, disabled)
    }
  }
};
AdfDhtmlDialogPeer.prototype.IsBusy = function(clientId) {
  var buttonIds = AdfDhtmlDialogPeer._BUTTON_IDS;
  var buttonCount = buttonIds.length;
  var renderedButtons = 0;
  var disabledButtons = 0;
  for(var i = 0;i < buttonCount;i++) {
    var buttonNode = AdfDhtmlDialogPeer._getButtonDom(clientId, buttonIds[i]);
    if(buttonNode) {
      renderedButtons++;
      if(AdfDomUtils.containsCSSClassName(buttonNode, AdfRichUIPeer.DISABLED_STYLECLASS)) {
        disabledButtons++
      }
    }
  }
  return renderedButtons > 0 && renderedButtons == disabledButtons
};
AdfDhtmlDialogPeer.prototype.SetBusy = function(isBusy) {
  if(AdfPage.PAGE.isAttachmentMode()) {
    return
  }
  AdfDhtmlDialogPeer._setButtonDisableState(this.getComponent().getClientId(), isBusy)
};
AdfDhtmlDialogPeer.prototype.getDefaultButtonDom = function(clientId) {
  var buttonIds = AdfDhtmlDialogPeer._BUTTON_IDS;
  var buttonCount = buttonIds.length;
  for(var i = 0;i < buttonCount;i++) {
    var domNode = AdfDhtmlDialogPeer._getButtonDom(clientId, buttonIds[i]);
    if(domNode) {
      return domNode
    }
  }
  return null
};
AdfDhtmlDialogPeer.prototype.GetResizeGhostSelector = function() {
  return AdfDhtmlDialogPeer._DIALOG_RESIZE_GHOST_CLASS
};
AdfDhtmlDialogPeer.prototype.getAnimationDurationSkinProperty = function() {
  return AdfDhtmlDialogPeer._ANIMATION_DURATION_SKIN_PROPERTY
};
AdfDhtmlDialogPeer.prototype.getAnimateSkinProperty = function() {
  return AdfDhtmlDialogPeer._ANIMATE_SKIN_PROPERTY
};

AdfUIComponents.createComponentClass("AdfUISelectInput", {componentType:"org.apache.myfaces.trinidad.SelectInput", propertyKeys:[{name:"actionExpression", type:"Object", secured:true}, {name:"returnListener", type:"Object", secured:true}], eventNames:["action", "return"], superclass:AdfUIEditableValue});

AdfUIComponents.createComponentClass("AdfUIChoose", {componentType:"org.apache.myfaces.trinidad.Choose"});

AdfUIComponents.createComponentClass("AdfUISelectOne", {componentType:"org.apache.myfaces.trinidad.SelectOne", superclass:AdfUIEditableValue});

AdfUISelectOne.InitSubclass = function() {
  this.SELECT_ITEMS = "selectItems"
};
AdfUISelectOne.prototype.getSelectItems = function() {
  return this.getPropertyValue(AdfUISelectOne.SELECT_ITEMS)
};
AdfUISelectOne.prototype.GetRequiredKey = function() {
  return"org.apache.myfaces.trinidad.UIXSelectOne.REQUIRED"
};

AdfRichUIPeer.createPeerClass(AdfDhtmlEditableValuePeer, "AdfDhtmlSelectOnePeer");
AdfDhtmlSelectOnePeer.InitSubclass = function() {
  if(!AdfAgent.AGENT.isTouchFirstDevice()) {
    AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.MOUSE_IN_EVENT_TYPE)
  }
};
AdfDhtmlSelectOnePeer.prototype.HandleComponentMouseOver = function(componentEvent) {
  this.ShowNoteWindowMouseOver(componentEvent)
};
AdfDhtmlSelectOnePeer.prototype.GetSelectItemsParentDomElement = function(component) {
  return AdfDhtmlEditableValuePeer.getContentNode(component)
};

AdfRichUIPeer.createPeerClass(AdfDhtmlSelectOnePeer, "AdfDhtmlSelectOneListbasePeer");
AdfDhtmlSelectOneListbasePeer.InitSubclass = function() {
  this._ITEM_VALUE_EXPANDO = "_adfIV";
  this._DISABLED_STYLE_CLASS = "p_AFDisabled";
  this._SELECTED_STYLE_CLASS = "p_AFSelected"
};
AdfDhtmlSelectOneListbasePeer.prototype.GetSubmittedValue = function(component, domElement) {
  var domNode = AdfDhtmlEditableValuePeer.GetContentNode(component, domElement);
  var readOnly = component.getReadOnly();
  if(readOnly) {
    return domNode.getAttribute(AdfDhtmlSelectOneListbasePeer._ITEM_VALUE_EXPANDO)
  }else {
    return domNode.value
  }
};
AdfDhtmlSelectOneListbasePeer.prototype.IsItemEnabled = function(element) {
  return element.getAttribute(AdfDhtmlSelectOneListbasePeer._ITEM_VALUE_EXPANDO) != null && !AdfDomUtils.containsCSSClassName(element, AdfDhtmlSelectOneListbasePeer._DISABLED_STYLE_CLASS)
};
AdfDhtmlSelectOneListbasePeer.prototype.FindItemElementWithValue = function(component, itemValue) {
  var itemElementArray = this.GetItemElements(component);
  var rowCount = itemElementArray.length;
  var itemElement = null;
  for(var i = 0;i < rowCount;i++) {
    itemElement = itemElementArray[i];
    var value = itemElement.getAttribute(AdfDhtmlSelectOneListbasePeer._ITEM_VALUE_EXPANDO);
    if(value == itemValue) {
      return itemElement
    }
  }
  return null
};
AdfDhtmlSelectOneListbasePeer.prototype.GetItemElements = function(component) {
  var itemElements = new Array;
  var itemStatus = null;
  var parentElement = this.GetItemElementsParent(component);
  var item = AdfDomUtils.getFirstChildElement(parentElement);
  var j = 0;
  while(item) {
    itemValue = item.getAttribute(AdfDhtmlSelectOneListbasePeer._ITEM_VALUE_EXPANDO);
    if(itemValue != null) {
      itemElements[j++] = item
    }
    item = AdfDomUtils.getNextElement(item)
  }
  return itemElements
};
AdfDhtmlSelectOneListbasePeer.prototype.SelectItemElement = function(component, newSelectElement, oldSelectElement) {
  if(oldSelectElement != null) {
    if(oldSelectElement != newSelectElement) {
      AdfDomUtils.removeCSSClassName(oldSelectElement, AdfDhtmlSelectOneListbasePeer._SELECTED_STYLE_CLASS)
    }
  }
  if(newSelectElement != null && newSelectElement != oldSelectElement) {
    AdfDomUtils.addCSSClassName(newSelectElement, AdfDhtmlSelectOneListbasePeer._SELECTED_STYLE_CLASS);
    AdfDomUtils.scrollChildIntoViewY(newSelectElement)
  }
};
AdfDhtmlSelectOneListbasePeer.prototype.GetFirstEnabledItem = function(component) {
  var parentElement = this.GetItemElementsParent(component);
  var item = AdfDomUtils.getFirstChildElement(parentElement);
  if(this.IsItemEnabled(item)) {
    return item
  }else {
    return this.GetNextEnabledItem(item)
  }
};
AdfDhtmlSelectOneListbasePeer.prototype.GetPreviousEnabledItem = function(item) {
  if(item) {
    var prevItem = AdfDomUtils.getPreviousElement(item);
    while(prevItem) {
      if(this.IsItemEnabled(prevItem)) {
        return prevItem
      }
      prevItem = AdfDomUtils.getPreviousElement(prevItem)
    }
  }
  return item
};
AdfDhtmlSelectOneListbasePeer.prototype.GetNextEnabledItem = function(item) {
  if(item) {
    var nextItem = AdfDomUtils.getNextElement(item);
    while(nextItem) {
      if(this.IsItemEnabled(nextItem)) {
        return nextItem
      }
      nextItem = AdfDomUtils.getNextElement(nextItem)
    }
  }
  return item
};
AdfDhtmlSelectOneListbasePeer.prototype.GetComponentSelectItems = function(component, domElement) {
  var selectItems = new Array;
  var i;
  var tdArray = this.GetItemElements(component);
  var rowCount = tdArray.length;
  var tdElement = null;
  var disabled = null;
  var itemValue = null;
  for(i = 0;i < rowCount;i++) {
    tdElement = tdArray[i];
    selectItems[i] = new AdfSelectItem;
    itemValue = tdElement.getAttribute(AdfDhtmlSelectOneListbasePeer._ITEM_VALUE_EXPANDO);
    selectItems[i].setValue(itemValue);
    var textNode = tdElement.firstChild;
    selectItems[i].setLabel(textNode ? textNode.nodeValue : "");
    disabled = AdfDomUtils.containsCSSClassName(tdElement, AdfDhtmlSelectOneListbasePeer._DISABLED_STYLE_CLASS);
    if(disabled == true) {
      selectItems[i].setDisabled(true)
    }else {
      selectItems[i].setDisabled(false)
    }
  }
  return selectItems
};
AdfDhtmlSelectOneListbasePeer.prototype.GetItemElementsParent = function(component) {
  AdfAssert.failedInAbstractFunction()
};

AdfUIComponents.createComponentClass("AdfRichCommandLink", {componentType:"oracle.adf.RichCommandLink", propertyKeys:[{name:"accessKey", type:"String"}, {name:"blocking", type:"Boolean", "default":false, secured:true}, {name:"disabled", type:"Boolean", "default":false, secured:true}, {name:"partialSubmit", type:"Boolean", "default":false, secured:true}, {name:"text", type:"String"}, {name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", 
type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true}, {name:"useWindow", type:"Boolean", "default":false}, {name:"windowModalityType", type:"String", "default":"modeless"}, {name:"windowEmbedStyle", type:"String", "default":"window"}, {name:"windowHeight", type:"Number"}, {name:"windowWidth", type:"Number"}], superclass:AdfUICommand});

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlCommandLinkPeer");
AdfDhtmlCommandLinkPeer.InitSubclass = function() {
  AdfObject.ensureClassInitialization(AdfRichCommandLink);
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.CLICK_EVENT_TYPE);
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichCommandLink.TEXT);
  this._COMMAND_LINK_CONTEXT_KEY = "_adfClc";
  this._BUSY = "_busy"
};
AdfDhtmlCommandLinkPeer.prototype.HandleComponentClick = function(componentEvent) {
  var shouldProcess = true;
  if(componentEvent.getEventPhase() != AdfBaseEvent.AT_TARGET_PHASE) {
    var eventTarget = componentEvent.getNativeEventTarget();
    var contextDom = this._getParentWithAttr(this.getDomElement(), eventTarget, AdfDhtmlCommandLinkPeer._COMMAND_LINK_CONTEXT_KEY);
    if(contextDom) {
      shouldProcess = false
    }
  }
  if(shouldProcess) {
    var component = this.getComponent();
    var isBusy = component.getProperty(AdfDhtmlCommandLinkPeer._BUSY);
    if(componentEvent.isLeftButtonPressed() && !component.getDisabled() && !isBusy) {
      var event = new AdfActionEvent(component);
      var params = component.getProperty("_F_PARAMS");
      if(params) {
        AdfDhtmlPage.__addServerParamsToEvent(event, params)
      }
      event.queue(component.getPartialSubmit())
    }
  }
};
AdfDhtmlCommandLinkPeer.prototype.GetAccessibleName = function() {
  var component = this.getComponent();
  return component.getText()
};
AdfDhtmlCommandLinkPeer.prototype.GetInlineEditor = function(event) {
  return AdfDhtmlSimpleTextEditor.getInlineEditor()
};
AdfDhtmlCommandLinkPeer.prototype.ComponentTextChanged = AdfDomUtils.__componentTextChanged;
AdfDhtmlCommandLinkPeer.prototype.SetBusy = function(isBusy) {
  var component = this.getComponent();
  var domElement = this.getDomElement();
  var actionForm = AdfDomUtils.getFormElement(domElement);
  if(!actionForm) {
    return
  }
  var isMultipart = AdfDomUtils.getMultiPartForm(actionForm) != null;
  if(component.getDisabled() || isMultipart) {
    return
  }
  AdfDomUtils.addOrRemoveCSSClassName(isBusy, domElement, AdfRichUIPeer.DISABLED_STYLECLASS);
  AdfAgent.AGENT.setCursor(domElement, isBusy ? "wait" : "auto");
  component.setProperty(AdfDhtmlCommandLinkPeer._BUSY, isBusy, false, AdfUIComponent.PROPAGATE_NEVER)
};
AdfDhtmlCommandLinkPeer.prototype.isBusy = function() {
  var component = this.getComponent();
  return component && component.getProperty(AdfDhtmlCommandLinkPeer._BUSY)
};
AdfDhtmlCommandLinkPeer.prototype._getParentWithAttr = function(rootElement, domElem, attr) {
  var target = domElem;
  while(target && target != rootElement) {
    if(target.nodeType == 1 && AdfAgent.AGENT.getAttribute(target, attr)) {
      return target
    }else {
      target = target.parentNode
    }
  }
  return null
};

AdfUIComponents.createComponentClass("AdfUIShowDetail", {componentType:"org.apache.myfaces.trinidad.ShowDetail", propertyKeys:[{name:"disclosed", type:"Boolean", "default":false}, {name:"disclosedTransient", type:"Boolean", "default":false, secured:true}, {name:"immediate", type:"Boolean", "default":false, secured:true}, {name:"disclosureListener", type:"Object", secured:true}], eventNames:["disclosure"]});

AdfUIShowDetail.InitClass = function() {
  AdfUIComponent.InitClass.call(this);
  AdfUIComponent.SetDisconnectedProperty(AdfUIShowDetail, "disclosed")
};
AdfUIShowDetail.prototype.HandleEvent = function(event) {
  if(event.getType() == AdfDisclosureEvent.EVENT_TYPE && !event.isExpanded() && !event.propagatesToServer()) {
    var disclosureCounterpart = event.getDisclosureCounterpart();
    if(disclosureCounterpart) {
      var disclosureCounterpartEvent = new AdfDisclosureEvent(disclosureCounterpart, true);
      disclosureCounterpartEvent.setPartial(event.isPartial());
      disclosureCounterpartEvent.setRoot(disclosureCounterpart.getParent());
      disclosureCounterpartEvent.queue()
    }
  }
  AdfUIDialog.superclass.HandleEvent.call(this, event)
};

AdfUIComponents.createComponentClass("AdfUISelectBoolean", {componentType:"org.apache.myfaces.trinidad.SelectBoolean", propertyKeys:[{name:"selected", type:"Boolean", "default":false, secured:true}], superclass:AdfUIEditableValue});

AdfUIComponents.createComponentClass("AdfUISelectMany", {componentType:"org.apache.myfaces.trinidad.SelectMany", superclass:AdfUIEditableValue});

AdfUISelectMany.InitSubclass = function() {
  this.SELECT_ITEMS = "selectItems"
};
AdfUISelectMany.prototype.getSelectItems = function() {
  return this.getPropertyValue(AdfUISelectMany.SELECT_ITEMS)
};
AdfUISelectMany.prototype.GetRequiredKey = function() {
  return"org.apache.myfaces.trinidad.UIXSelectMany.REQUIRED"
};

AdfRichUIPeer.createPeerClass(AdfDhtmlEditableValuePeer, "AdfDhtmlSelectManyPeer");
AdfDhtmlSelectManyPeer.InitSubclass = function() {
  if(!AdfAgent.AGENT.isTouchFirstDevice()) {
    AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.MOUSE_IN_EVENT_TYPE)
  }
  this._SELECT_ALL_ID = "saId";
  this._ITEM_VALUE_EXPANDO = "_adfIV"
};
AdfDhtmlSelectManyPeer.prototype.HandleComponentMouseOver = function(componentEvent) {
  this.ShowNoteWindowMouseOver(componentEvent)
};
AdfDhtmlSelectManyPeer.prototype.GetComponentLabel = function(component, domElement) {
  var labelElement = AdfDomUtils.getChildElementByAttributeValue(domElement, "for", AdfRichUIPeer.createSubId(component.getClientId(), AdfDhtmlEditableValuePeer._CONTENT_ID), "LABEL");
  if(labelElement == null) {
    var labelElements = domElement.getElementsByTagName("LABEL");
    labelElement = labelElements.length ? labelElements[0] : null
  }
  if(labelElement != null) {
    var contentElement = AdfDhtmlEditableValuePeer.GetContentNode(component, domElement);
    var parentElement = labelElement.parentNode;
    while(parentElement && parentElement != domElement) {
      if(parentElement == contentElement) {
        return null
      }
      parentElement = parentElement.parentNode
    }
    return AdfAgent.AGENT.getTextContent(labelElement)
  }else {
    return null
  }
};
AdfDhtmlSelectManyPeer.prototype.getConvertedValue = function(component, submittedValue) {
  var newValue = submittedValue;
  if(component.getConverter != undefined) {
    var converter = component.getConverter();
    if(converter != null) {
      newValue = new Array;
      for(var i = 0;i < submittedValue.length;i++) {
        newValue[i] = converter.getAsObject(submittedValue[i], component.getProperty("label"));
        if(newValue[i] === undefined) {
          return undefined
        }
      }
    }
  }
  return newValue
};
AdfDhtmlSelectManyPeer.prototype.getConvertedObject = function(component, value) {
  if(value != null) {
    var valueAsString = value;
    if(component == null) {
      component = this.getComponent()
    }
    var converter = component.getConverter();
    if(converter != null) {
      valueAsString = new Array;
      for(var i = 0;i < value.length;i++) {
        valueAsString[i] = converter.getAsString(value[i], component.getProperty("label"));
        if(valueAsString[i] === undefined) {
          return undefined
        }
      }
    }
    return valueAsString
  }
  return null
};
AdfDhtmlSelectManyPeer.prototype.IsCheckbox = function(element) {
  if(element != null) {
    return AdfAgent.AGENT.getNodeName(element) == "INPUT" && element.type == "checkbox"
  }else {
    return false
  }
};
AdfDhtmlSelectManyPeer.prototype.GetCheckboxByEventTarget = function(element, componentEvent) {
  var agent = AdfAgent.AGENT;
  if(element && agent.getNodeName(element) != "INPUT") {
    var checkbox = element.getElementsByTagName("input")[0];
    if(checkbox && this.IsCheckbox(checkbox)) {
      if(!checkbox.disabled) {
        var checkboxStyle = agent.getComputedStyle(checkbox);
        var agentIsIE = agent.getPlatform() == AdfAgent.IE_PLATFORM;
        var agentIsGecko = agent.getPlatform() == AdfAgent.GECKO_PLATFORM;
        var nativeEvent = componentEvent.getNativeEvent();
        if(agent.getNodeName(element) != "LABEL" || agentIsIE && checkboxStyle.display == "none" || agentIsGecko && nativeEvent.ctrlKey) {
          if(checkboxStyle.display != "none") {
            checkbox.focus()
          }
          checkbox.checked = !checkbox.checked
        }
      }
      return checkbox
    }
  }
  return element
};
AdfDhtmlSelectManyPeer.prototype.GetNullDefault = function() {
  return AdfCollections.EMPTY_ARRAY
};
AdfDhtmlSelectManyPeer.prototype.GetSubmittedValue = function(component, domElement) {
  AdfAssert.assertDomElement(domElement);
  var readOnly = component.getReadOnly();
  if(readOnly) {
    var domNode = AdfDhtmlEditableValuePeer.GetContentNode(component, domElement);
    var itemValues = domNode.getAttribute(AdfDhtmlSelectManyPeer._ITEM_VALUE_EXPANDO);
    return eval(itemValues)
  }else {
    var boxes = this.GetCheckboxes(component, domElement);
    var values = new Array;
    if(boxes) {
      for(var i = 0;i < boxes.length;i++) {
        var cb = boxes[i];
        if(cb.checked) {
          values.push(cb.value)
        }
      }
    }
    return values
  }
};
AdfDhtmlSelectManyPeer.prototype.GetCheckboxes = function(component, domElement, containerName) {
  AdfAssert.assertDomElement(domElement);
  var form = AdfDomUtils.getFormElement(domElement);
  var cbName = component.getClientId();
  var boxes = form.elements[cbName];
  if(boxes) {
    if(boxes.length) {
      return boxes
    }
    var list = new Array;
    list.push(boxes);
    return list
  }
  return null
};
AdfDhtmlSelectManyPeer.prototype.GetComponentSelectItems = function(component, domElement) {
  AdfAssert.assertDomElement(domElement);
  var selectItems = new Array;
  var boxes = this.GetCheckboxes(component, domElement);
  if(boxes) {
    for(var i = 0;i < boxes.length;i++) {
      selectItems[i] = new AdfSelectItem;
      selectItems[i].setValue(boxes[i].value);
      var label = AdfDhtmlEditableValuePeer.GetLabelElement(boxes[i]).textContent;
      if(label) {
        selectItems[i].setLabel(label)
      }
      selectItems[i].setDisabled(boxes[i].disabled)
    }
  }
  return selectItems
};
AdfDhtmlSelectManyPeer.prototype.GetSelectAllCheckbox = function(component) {
  var selectAllID = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlSelectManyPeer._SELECT_ALL_ID);
  return AdfAgent.AGENT.getElementById(selectAllID)
};
AdfDhtmlSelectManyPeer.prototype.GetPreviousItem = function(component, domElement, item, ignoreAllCheckbox, containerName) {
  AdfAssert.assertDomElement(domElement);
  var boxes = this.GetCheckboxes(component, domElement, containerName);
  if(boxes) {
    var prevItem = null;
    if(!ignoreAllCheckbox) {
      prevItem = this.GetSelectAllCheckbox(component)
    }
    if(ignoreAllCheckbox || item != prevItem) {
      for(var i = 0;i < boxes.length;i++) {
        var cb = boxes[i];
        if(cb == item) {
          break
        }
        if(!cb.disabled) {
          prevItem = cb
        }
      }
      if(prevItem) {
        item = prevItem
      }
    }
  }
  return item
};
AdfDhtmlSelectManyPeer.prototype.GetNextItem = function(component, domElement, item, containerName) {
  AdfAssert.assertDomElement(domElement);
  var boxes = this.GetCheckboxes(component, domElement, containerName);
  if(boxes) {
    var nextItem = null;
    for(var i = boxes.length - 1;i >= 0;i--) {
      var cb = boxes[i];
      if(cb == item) {
        break
      }
      if(!cb.disabled) {
        nextItem = cb
      }
    }
    if(nextItem) {
      item = nextItem
    }
  }
  return item
};
AdfDhtmlSelectManyPeer.prototype.SelectRange = function(component, domElement, newItem, oldItem, containerName) {
  var boxes = this.GetCheckboxes(component, domElement, containerName);
  if(boxes) {
    var selectAllItem = this.GetSelectAllCheckbox(component);
    var nextItem = null;
    var started = false;
    var endItem;
    if(newItem == selectAllItem) {
      started = true;
      endItem = oldItem
    }else {
      if(oldItem == selectAllItem) {
        started = true;
        endItem = newItem
      }
    }
    for(var i = 0;i < boxes.length;i++) {
      var cb = boxes[i];
      if(!started) {
        if(cb == newItem) {
          started = true;
          endItem = oldItem
        }else {
          if(cb == oldItem) {
            started = true;
            endItem = newItem
          }
        }
      }
      if(started) {
        if(!cb.disabled) {
          cb.checked = true;
          this.UpdateSelectedStyle(cb)
        }
        if(cb == endItem) {
          break
        }
      }
    }
  }
};
AdfDhtmlSelectManyPeer.prototype.UpdateAll = function(component, domElement, isChecked, validate) {
  var boxes = this.GetCheckboxes(component, domElement);
  if(boxes) {
    for(var i = 0;i < boxes.length;i++) {
      var box = boxes[i];
      if(!box.disabled) {
        box.checked = isChecked
      }
    }
    if(validate) {
      var value = this.GetSubmittedValue(component, domElement);
      this.Validate(component, value)
    }
  }
};
AdfDhtmlSelectManyPeer.prototype.UpdateSelectedStyle = function(checkbox) {
  var parentElement = checkbox.parentNode.parentNode;
  if(checkbox) {
    if(checkbox.checked) {
      if(!AdfDomUtils.containsCSSClassName(checkbox.parentNode.parentNode, AdfDhtmlSelectManyPeer.SELECTED_STYLE)) {
        AdfDomUtils.addCSSClassName(checkbox.parentNode.parentNode, AdfDhtmlSelectManyPeer.SELECTED_STYLE);
        if(parentElement.getAttribute("role") == "option") {
          parentElement.setAttribute("aria-selected", "true")
        }
      }
    }else {
      if(AdfDomUtils.containsCSSClassName(checkbox.parentNode.parentNode, AdfDhtmlSelectManyPeer.SELECTED_STYLE)) {
        AdfDomUtils.removeCSSClassName(checkbox.parentNode.parentNode, AdfDhtmlSelectManyPeer.SELECTED_STYLE);
        if(parentElement.getAttribute("aria-selected")) {
          parentElement.removeAttribute("aria-selected")
        }
      }
    }
  }
};
AdfDhtmlSelectManyPeer.GetElementByAttributeValue = function(elementArr, attrName, attrValue) {
  AdfAssert.assertObject(elementArr);
  AdfAssert.assertNonEmptyString(attrName);
  AdfAssert.assertString(attrValue);
  var length = elementArr.length;
  for(var i = 0;i < length;i++) {
    var element = elementArr[i];
    if(element.getAttribute(attrName) == attrValue) {
      return element
    }
  }
  return null
};
AdfDhtmlSelectManyPeer.prototype.GetSelectItemsParentDomElement = function(component) {
  return AdfDhtmlEditableValuePeer.GetContentNode(component)
};
AdfDhtmlSelectManyPeer.HIGHLIGHTED_STYLE = "p_AFHighlighted";
AdfDhtmlSelectManyPeer.SELECTED_STYLE = "p_AFSelected";

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlDocumentPeer", false);
AdfDhtmlDocumentPeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentEventHandlers(this, AdfComponentEvent.BLUR_EVENT_TYPE, AdfComponentEvent.FOCUS_EVENT_TYPE, AdfDialogEvent.EVENT_TYPE, AdfUIInputEvent.CLICK_EVENT_TYPE, AdfUIInputEvent.KEY_UP_EVENT_TYPE, AdfComponentEvent.CONTEXT_MENU_EVENT_TYPE, AdfRedirectEvent.REDIRECT_EVENT_TYPE);
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichDocument.SHORT_DESC, AdfRichDocument.TITLE);
  this._ICON_CONTAINER_ID = "iconC";
  this._MESSAGE_DIALOG_ID = "msgDlg";
  this._MESSAGE_DIALOG_CONTAINER_ID = "msgCtr";
  this._SKIP_LINK_ID = "skip";
  this._INACTIVE_STYLECLASS = "p_AFInactive";
  this._ALERT_CONFIRM_DIALOG_CONTAINER_ID = "afr::UtilPopupCtnr";
  this._ALERT_CONFIRM_POPUP_ID_EXPANDO = "_pid";
  this._ALERT_CONFIRM_DIALOG_ID_EXPANDO = "_did";
  this._DIALOG_CONTENT_SUBID = "contentContainer";
  this._DIALOG_CANCEL_ID_SUBID = "cancel";
  this.__GLOBAL_LIVE_CONTAINER_ID = "liveCtr"
};
AdfDhtmlDocumentPeer.prototype.Init = function(component) {
  var page = AdfPage.PAGE;
  page.setDocumentClientId(component.getClientId());
  AdfDhtmlDocumentPeer.superclass.Init.call(this, component)
};
AdfDhtmlDocumentPeer.prototype.ComponentShortDescChanged = function(component, domElement, newValue, oldValue) {
  AdfAssert.assertStringOrNull(newValue);
  document.body.title = newValue;
  return true
};
AdfDhtmlDocumentPeer.prototype.ComponentTitleChanged = function(component, domElement, newValue, oldValue) {
  AdfAssert.assertStringOrNull(newValue);
  document.title = newValue;
  return true
};
AdfDhtmlDocumentPeer.prototype.isMessagesDialogShowable = function() {
  var page = AdfPage.PAGE;
  var messages = page.getAllMessages();
  var component = this.getComponent();
  var componentID = component.getClientId();
  var globalMessages = messages[componentID];
  var slaveComponent = this._getSlaveComponent();
  var globalOnly = false;
  if(slaveComponent != null) {
    globalOnly = slaveComponent.getGlobalOnly()
  }
  return AdfMessageUtils.isPageLevelBoxNeeded(page, globalMessages, globalOnly)
};
AdfDhtmlDocumentPeer.prototype.getMessageDialogId = function() {
  var documentClientId = this.getComponent().getClientId();
  return AdfRichUIPeer.CreateSubId(documentClientId, AdfDhtmlDocumentPeer._MESSAGE_DIALOG_ID)
};
AdfDhtmlDocumentPeer.prototype.setMessagesDialogShown = function(visible) {
  if(visible) {
    this.messageShow()
  }else {
    this._hideMessagePopup()
  }
};
AdfDhtmlDocumentPeer.prototype.HandleComponentFocus = function(componentEvent) {
  if(componentEvent.getEventPhase() == AdfBaseEvent.AT_TARGET_PHASE) {
    var skipLinkElement = this._getSkipLinkElement(this.getComponent());
    if(componentEvent.getNativeEventTarget() == skipLinkElement) {
      skipLinkElement.style.top = "0px"
    }
  }
};
AdfDhtmlDocumentPeer.prototype.HandleComponentBlur = function(componentEvent) {
  if(componentEvent.getEventPhase() == AdfBaseEvent.AT_TARGET_PHASE) {
    var skipLinkElement = this._getSkipLinkElement(this.getComponent());
    if(componentEvent.getNativeEventTarget() == skipLinkElement) {
      skipLinkElement.style.top = ""
    }
  }
};
AdfDhtmlDocumentPeer.prototype.HandleComponentClick = function(componentEvent) {
  if(componentEvent.getEventPhase() == AdfBaseEvent.AT_TARGET_PHASE) {
    var skipLinkElement = this._getSkipLinkElement(this.getComponent());
    if(componentEvent.getNativeEventTarget() == skipLinkElement) {
      this._skipToContent();
      componentEvent.cancel()
    }
  }
};
AdfDhtmlDocumentPeer.prototype.HandleComponentContextMenu = function(componentEvent) {
  if(AdfDhtmlDocumentPeer.__ACTION_LINK_BROWSER_CONTEXT_SUPPRESSION_OFF) {
    return
  }
  AdfDomUtils.suppressActionLinkBrowserContextMenu(componentEvent)
};
AdfDhtmlDocumentPeer.prototype.HandleComponentKeyUp = function(componentEvent) {
  if(!componentEvent.isCanceled() && AdfPage.PAGE.getDefaultMessageHandlerComponentId() == this.getComponent().getClientId()) {
    var keyCode = componentEvent.getKeyCode();
    if(componentEvent.ctrlKey && componentEvent.altKey) {
      if(keyCode == 79) {
        this.setMessagesDialogShown(false);
        componentEvent.cancel()
      }
    }else {
      if(componentEvent.ctrlKey && componentEvent.shiftKey) {
        if(keyCode == 87) {
          this.setMessagesDialogShown(true);
          componentEvent.cancel()
        }
      }
    }
  }
  if(!componentEvent.isCanceled()) {
    var evt = componentEvent.getNativeEvent();
    var keyCode = componentEvent.getKeyCode();
    if(evt.ctrlKey && evt.altKey && keyCode == 87) {
      var dialogManager = AdfDhtmlDialogManager.getInstance();
      dialogManager.focusNextModelessDialog(componentEvent.getNativeEventTarget())
    }
  }
};
AdfDhtmlDocumentPeer.prototype.HandleComponentDialog = function(componentEvent) {
  var targetId = componentEvent.getSource().getClientId();
  var documentClientId = this.getComponent().getClientId();
  var dialogId = AdfRichUIPeer.CreateSubId(documentClientId, AdfDhtmlDocumentPeer._MESSAGE_DIALOG_ID);
  if(targetId == dialogId) {
    var dialogOutcome = componentEvent.getOutcome();
    componentEvent.cancel();
    this.hidePopup(this.getComponent());
    if(dialogOutcome == AdfDialogEvent.OUTCOME_OK) {
      var page = AdfPage.PAGE;
      var slaveComponent = this._getSlaveComponent();
      var globalOnly = false;
      if(slaveComponent != null) {
        globalOnly = slaveComponent.getGlobalOnly()
      }
      if(!globalOnly) {
        var jumpComponentClientId;
        var allMessages = page.getAllMessages();
        for(var id in allMessages) {
          if(id != documentClientId) {
            var compMessages = allMessages[id];
            if(compMessages != null && compMessages["compId"] != null) {
              jumpComponentClientId = id;
              break
            }
          }
        }
        if(jumpComponentClientId != null) {
          AdfMessageUtils.messageGroupFocus(jumpComponentClientId)
        }
      }
    }
  }
};
AdfDhtmlDocumentPeer.prototype.HandleComponentRedirect = function(componentEvent) {
  var url = componentEvent.getURL();
  var page = AdfPage.PAGE;
  page.doRedirect(url, componentEvent.getNavigationSuppressed())
};
AdfDhtmlDocumentPeer.prototype.PopupClosed = function(component, contentDom) {
  AdfDhtmlDocumentPeer.superclass.PopupClosed.call(this, component, contentDom);
  AdfDomUtils.removeCSSClassName(contentDom, AdfRichUIPeer.HOVER_TARGET_STYLECLASS);
  AdfDomUtils.removeCSSClassName(contentDom, AdfDhtmlDocumentPeer._INACTIVE_STYLECLASS);
  var clientId = component.getClientId();
  var containerId = AdfRichUIPeer.CreateSubId(clientId, AdfDhtmlDocumentPeer._MESSAGE_DIALOG_CONTAINER_ID);
  var containerNode = AdfAgent.AGENT.getElementById(containerId);
  if(containerNode) {
    containerNode.appendChild(contentDom)
  }
};
AdfDhtmlDocumentPeer.prototype.InitDomElement = function(component, domElement) {
  var page = AdfPage.PAGE;
  AdfDhtmlDocumentPeer.superclass.InitDomElement.call(this, component, domElement);
  var loadEvent = new AdfComponentEvent(component, "load");
  if(page.isPageOnloadCalled()) {
    loadEvent.queue()
  }else {
    var queueCallback = loadEvent.createCallback(loadEvent.queue);
    page.setOnLoadCallback(queueCallback)
  }
  if(!page.isScreenReaderMode()) {
    var focusId = component.getInitialFocusId();
    if(focusId) {
      this._activateFocusCallback = this.createCallback(this._activateFocus);
      this._focusTimerId = window.setTimeout(this._activateFocusCallback, 50)
    }
  }
  this._globalMessageCount = 0;
  this._initSkipLink(component);
  this._setDocumentTitle(component);
  this._setUncommittedDataWarning(component)
};
AdfDhtmlDocumentPeer.prototype.ReplaceDomElement = function(newElement, oldElement) {
  var documentClientId = this.getComponent().getClientId();
  var iconContainerId = AdfRichUIPeer.CreateSubId(documentClientId, AdfDhtmlDocumentPeer._ICON_CONTAINER_ID);
  if(newElement.id == iconContainerId) {
    var agent = AdfAgent.AGENT;
    var currChild = newElement.firstChild;
    while(currChild) {
      var nextChild = currChild.nextSibling;
      if(currChild.nodeType == 1) {
        var id = currChild.id;
        if(id && !agent.getElementById(id)) {
          oldElement.appendChild(currChild);
          agent.elementsAdded(currChild)
        }
      }
      currChild = nextChild
    }
  }else {
    AdfDhtmlDocumentPeer.superclass.ReplaceDomElement.call(this, newElement, oldElement)
  }
};
AdfDhtmlDocumentPeer.prototype.MessageShow = function(maxType, messages) {
  this._messageUpdate(maxType, messages, true)
};
AdfDhtmlDocumentPeer.prototype.MessageNotify = function(maxType, messages) {
  this._messageUpdate(maxType, messages, false)
};
AdfDhtmlDocumentPeer.prototype._messageUpdate = function(maxType, messages, alwaysShow) {
  var page = AdfPage.PAGE;
  var slaveComponent = this._getSlaveComponent();
  var globalOnly = false;
  if(slaveComponent != null) {
    globalOnly = slaveComponent.getGlobalOnly()
  }
  var component = this.getComponent();
  var clientId = component.getClientId();
  var allMessages = page.getAllMessages();
  var globalMessages = allMessages[clientId];
  var globalMessageCount = 0;
  if(globalMessages != null) {
    globalMessageCount = globalMessages.length
  }
  var clientIdsWithMessagesCount = page.getClientIdsWithMessages().length;
  if(!alwaysShow && !AdfMessageUtils.hasMessages(page, globalMessageCount, globalOnly)) {
    AdfMessageUtils.HideMessagesDialog()
  }else {
    if(alwaysShow && !AdfMessageUtils.isPageLevelBoxNeeded(page, globalMessages, globalOnly)) {
      AdfMessageUtils.HideMessagesDialog();
      for(var clientId in allMessages) {
        var compMessages = allMessages[clientId];
        if(compMessages != null && compMessages["compId"] != null) {
          AdfMessageUtils.messageGroupFocus(clientId)
        }
      }
    }else {
      if(alwaysShow || this.isPopupVisible(component) || this._globalMessageCount < globalMessageCount) {
        var agent = AdfAgent.AGENT;
        var message = null;
        var text = null;
        var shortDesc = null;
        var styleClass = null;
        if(slaveComponent != null) {
          message = slaveComponent.getMessage();
          text = slaveComponent.getText();
          shortDesc = slaveComponent.getShortDesc();
          styleClass = slaveComponent.getStyleClass()
        }
        var dialogId = AdfRichUIPeer.CreateSubId(clientId, AdfDhtmlDocumentPeer._MESSAGE_DIALOG_ID);
        var dialogComponent = page.findComponent(dialogId);
        var root = this.getDomElement();
        var div;
        var realMaxType = 0;
        if(maxType != null) {
          realMaxType = maxType
        }
        if(globalOnly) {
          realMaxType = globalMessages["maxType"]
        }else {
          for(var clientId2 in allMessages) {
            var tempMaxType = allMessages[clientId2]["maxType"];
            if(tempMaxType > realMaxType) {
              realMaxType = tempMaxType
            }
          }
        }
        var oldType = agent.getExpandoProperty(root, AdfRichUIPeer.__TYPE_ATTR);
        if(oldType != realMaxType) {
          agent.setExpandoProperty(root, AdfRichUIPeer.__TYPE_ATTR, realMaxType);
          var titleIcon;
          if(styleClass != null) {
            titleIcon = AdfMessageUtils.getIconWithPrefix(realMaxType, "." + styleClass + " ", true);
            if(titleIcon == null) {
              AdfLogger.LOGGER.warning("Icon not found with style class " + styleClass + ".  Make sure that skin contains class prefixed the message styleCalss: ." + styleClass)
            }
          }
          if(!titleIcon) {
            titleIcon = AdfMessageUtils.getIcon(realMaxType, true)
          }
          dialogComponent.setTitleIconSource(titleIcon.src);
          if(!text) {
            dialogComponent.setTitle(AdfMessageUtils.getString(realMaxType))
          }else {
            dialogComponent.setTitle(text)
          }
        }
        var dialogContent = AdfRichUIPeer.CreateSubId(dialogId, "_cnt");
        div = agent.getElementById(dialogContent);
        if(div) {
          var wrapper = AdfMessageUtils.getCombinedMessagesDom(clientId, message, globalOnly);
          if(shortDesc != null) {
            wrapper.title = shortDesc
          }
          if(div.hasChildNodes()) {
            div.replaceChild(wrapper, div.firstChild)
          }else {
            div.appendChild(wrapper)
          }
        }
        var containerId = AdfRichUIPeer.CreateSubId(clientId, AdfDhtmlDocumentPeer._MESSAGE_DIALOG_CONTAINER_ID);
        var dialog = agent.getElementById(dialogId);
        if(dialog && dialog.parentNode.id == containerId) {
          this.UpdateMessageType(dialog, realMaxType);
          if(styleClass != null && div && AdfAgent.AGENT.getAttribute(div, "data-afr-msg-apply-class")) {
            AdfDomUtils.addCSSClassName(dialog, styleClass)
          }
          var hints = {};
          hints[AdfDhtmlPopupWindow.HINT_TOP_POSITION] = 0.25;
          this.showPopup(component, dialog, hints)
        }
      }
    }
  }
  this._globalMessageCount = globalMessageCount
};
AdfDhtmlDocumentPeer.prototype._getSlaveComponent = function() {
  var page = AdfPage.PAGE;
  var slaveClientId = page.getMessageHandlerSlaveComponentId();
  if(slaveClientId != null) {
    return page.findComponent(slaveClientId)
  }
  return null
};
AdfDhtmlDocumentPeer.prototype._hideMessagePopup = function() {
  var component = this.getComponent();
  this.hidePopup(component)
};
AdfDhtmlDocumentPeer.prototype._activateFocus = function() {
  var focusId = this.getComponent().getInitialFocusId();
  if(focusId) {
    var focusComp = AdfPage.PAGE.findComponent(focusId);
    if(focusComp) {
      focusComp.focus()
    }else {
      AdfLogger.LOGGER.warning("Invalid component id referenced by document initialFocusId: " + focusId + ". You may need to set clientComponent to true for the desired focus component.")
    }
  }
  window.clearTimeout(this._focusTimerId);
  this._activateFocusCallback = null;
  this._focusTimerId = null
};
AdfDhtmlDocumentPeer.prototype._getSkipLinkElement = function(component) {
  AdfAssert.assert(component);
  var documentId = component.getClientId();
  var skipLinkId = AdfRichUIPeer.CreateSubId(documentId, AdfDhtmlDocumentPeer._SKIP_LINK_ID);
  return AdfAgent.AGENT.getElementById(skipLinkId)
};
AdfDhtmlDocumentPeer._getSkipLinkTargetId = function(component) {
  return component.getProperty("_afrSkpLnk")
};
AdfDhtmlDocumentPeer.prototype._initSkipLink = function(component) {
  var hideSkipLink = false;
  var skipLinkTargetId = AdfDhtmlDocumentPeer._getSkipLinkTargetId(component);
  if(!skipLinkTargetId) {
    hideSkipLink = true
  }else {
    if(AdfAgent.AGENT.getElementById(skipLinkTargetId) == null) {
      hideSkipLink = true;
      AdfLogger.LOGGER.warning("Unable to locate skip link target: " + skipLinkTargetId + ".  Make sure that af:skipLinkTarget is contained within " + "a parent that generates content (and an id).")
    }
  }
  if(hideSkipLink) {
    var skipLinkElement = this._getSkipLinkElement(component);
    if(skipLinkElement) {
      skipLinkElement.style.display = "none"
    }
  }
};
AdfDhtmlDocumentPeer.prototype._skipToContent = function() {
  var page = AdfPage.PAGE;
  var targetId = AdfDhtmlDocumentPeer._getSkipLinkTargetId(this.getComponent());
  var targetElement = AdfAgent.AGENT.getElementById(targetId);
  AdfAssert.assertDomElement(targetElement);
  var matchFunc = page.isScreenReaderMode() ? AdfDhtmlDocumentPeer._isPotentiallyFocusable : AdfFocusUtils.isTabStop;
  var matchElement = AdfDomUtils.getNextElementMatch(targetElement, null, false, matchFunc);
  AdfAssert.assertDomElement(matchElement);
  if(matchElement) {
    if(!AdfFocusUtils.isFocusable(matchElement)) {
      matchElement.tabIndex = -1
    }
    AdfFocusUtils.focusElement(matchElement)
  }
};
AdfDhtmlDocumentPeer._isPotentiallyFocusable = function(element) {
  if(AdfFocusUtils.isFocusable(element)) {
    return true
  }
  var potentiallyFocusable = false;
  var nodeName = element.nodeName.toLowerCase();
  switch(nodeName) {
    case "div":
    ;
    case "span":
    ;
    case "h1":
    ;
    case "h2":
    ;
    case "h3":
    ;
    case "h4":
    ;
    case "h5":
    ;
    case "h6":
      potentiallyFocusable = true;
      break
  }
  return potentiallyFocusable ? AdfFocusUtils.isConnectedAndVisible(element) : false
};
AdfDhtmlDocumentPeer.prototype._setDocumentTitle = function(component) {
  var title = component.getTitle();
  if(title) {
    var doc = this.getDomDocument();
    if(doc.title != title) {
      var callback = this.createCallback(this._delayedSetDocumentTitle);
      setTimeout(callback, 0)
    }
  }
};
AdfDhtmlDocumentPeer.prototype._delayedSetDocumentTitle = function() {
  var doc = this.getDomDocument();
  var comp = this.getComponent();
  if(comp) {
    doc.title = comp.getTitle()
  }
};
AdfDhtmlDocumentPeer.prototype._setUncommittedDataWarning = function(component) {
  var opt = component.getUncommittedDataWarning();
  var enabled = opt && opt.toLowerCase() == "on";
  AdfPage.PAGE.__initUncommittedDataWarningForDocument(enabled)
};
AdfDhtmlDocumentPeer.prototype.__showAlertConfirm = function(isAlert, title, message, callback, timeout) {
  AdfAssert.assertString(title, "confirm title");
  AdfAssert.assertString(message, "confirm message");
  AdfAssert.assertFunction(callback, "confirm callback");
  if(timeout) {
    AdfAssert.assertNumber(timeout, "confirm timeout")
  }
  var agent = AdfAgent.AGENT;
  var page = AdfPage.PAGE;
  var popupUtilContainer = agent.getElementById(AdfDhtmlDocumentPeer._ALERT_CONFIRM_DIALOG_CONTAINER_ID);
  AdfAssert.assertDomElement(popupUtilContainer, "DIV");
  var dialogId = popupUtilContainer.getAttribute(AdfDhtmlDocumentPeer._ALERT_CONFIRM_DIALOG_ID_EXPANDO);
  AdfAssert.assertString(dialogId, "alert/confirm dialog id");
  var dialog = page.findComponent(dialogId);
  AdfAssert.assertPrototype(dialog, AdfRichDialog);
  var popup = dialog.getParent();
  AdfAssert.assertPrototype(popup, AdfRichPopup);
  if(popup.isPopupVisible()) {
    return false
  }
  dialog.setTitle(title);
  AdfDhtmlDocumentPeer._setAlertConfirmMessage(dialogId, message);
  var cancelButtonId = AdfRichUIPeer.createSubId(dialogId, AdfDhtmlDocumentPeer._DIALOG_CANCEL_ID_SUBID);
  var cancelButtonDom = agent.getElementById(cancelButtonId);
  AdfAssert.assertDomElement(cancelButtonDom, "BUTTON");
  AdfDomUtils.setVisible(cancelButtonDom, !isAlert);
  dialog.addEventListener(AdfDialogEvent.EVENT_TYPE, AdfDhtmlDocumentPeer._alertConfirmCallback);
  popup.addEventListener(AdfPopupOpenedEvent.POPUP_OPENED_EVENT_TYPE, AdfDhtmlDocumentPeer._alertPopupOpenedCallback);
  var state = {callback:callback, dialogId:dialogId};
  if(timeout) {
    state.timerId = page.scheduleTimer(this, AdfDhtmlDocumentPeer._alertConfirmTimeoutCallback, dialogId, timeout)
  }
  page.setPageProperty(dialogId, state);
  var hints = new Object;
  popup.show(hints);
  return true
};
AdfDhtmlDocumentPeer._alertPopupOpenedCallback = function(event) {
  if(AdfPage.PAGE.getPageProperty("oracle$adfinternal$pagePageExpired")) {
    var modalityManager = AdfPage.PAGE.getModalityManager();
    var glassPane = modalityManager.__peekModalGlass();
    if(glassPane) {
      AdfAgent.AGENT.setOpacity(glassPane, 100)
    }
  }
};
AdfDhtmlDocumentPeer._alertConfirmTimeoutCallback = function(dialogId) {
  var dialog = AdfPage.PAGE.findComponent(dialogId);
  var peer = dialog.getPeer();
  peer.bind(dialog);
  peer.fireCancel()
};
AdfDhtmlDocumentPeer._alertConfirmCallback = function(event) {
  event.cancel();
  var dialog = event.getSource();
  var dialogId = dialog.getClientId();
  var popup = dialog.getParent();
  AdfAssert.assertPrototype(popup, AdfRichPopup);
  popup.cancel();
  var page = AdfPage.PAGE;
  var state = page.getPageProperty(dialogId);
  AdfAssert.assertObject(state, "alert/confirm state token invalid");
  page.setPageProperty(dialogId, null);
  if(state.timerId) {
    page.cancelTimer(state.timerId)
  }
  var callback = state.callback;
  try {
    callback(event)
  }catch(e) {
    AdfLogger.LOGGER.logErrorAsWarning(e, "exception caught calling alert/confirm dialog event callback")
  }
  dialog.setTitle("");
  AdfDhtmlDocumentPeer._setAlertConfirmMessage(dialogId, "");
  dialog.removeEventListener(AdfDialogEvent.EVENT_TYPE, AdfDhtmlDocumentPeer._alertConfirmCallback);
  popup.removeEventListener(AdfPopupOpenedEvent.POPUP_OPENED_EVENT_TYPE, AdfDhtmlDocumentPeer._alertPopupOpenedCallback)
};
AdfDhtmlDocumentPeer._setAlertConfirmMessage = function(dialogId, message) {
  var agent = AdfAgent.AGENT;
  var contentId = AdfRichUIPeer.createSubId(dialogId, AdfDhtmlDocumentPeer._DIALOG_CONTENT_SUBID);
  var contentDom = agent.getElementById(contentId);
  AdfAssert.assertDomElement(contentDom, "TD");
  agent.setTextContent(contentDom, message)
};

function AdfCheckUncommittedDataBehavior() {
  this.Init()
}
AdfObject.createSubclass(AdfCheckUncommittedDataBehavior, AdfClientBehavior);
AdfCheckUncommittedDataBehavior.prototype.initialize = function(component) {
  component.addEventListener("action", this.fire, this)
};
AdfCheckUncommittedDataBehavior.prototype.fire = function(event) {
  if(!AdfPage.PAGE.checkUncommittedData()) {
    event.cancel()
  }
};

function AdfDialogServicePopupContainerRemoveEvent(source, popupId, contentWidth, contentHeight) {
  this.Init(source, popupId, contentWidth, contentHeight)
}
AdfObject.createSubclass(AdfDialogServicePopupContainerRemoveEvent, AdfComponentEvent);
AdfDialogServicePopupContainerRemoveEvent.REMOVE_EVENT_TYPE = "popupRemove";
AdfDialogServicePopupContainerRemoveEvent.prototype.Init = function(source, popupId, contentWidth, contentHeight) {
  this._popupId = popupId;
  this._contentWidth = contentWidth;
  this._contentHeight = contentHeight;
  AdfDialogServicePopupContainerRemoveEvent.superclass.Init.call(this, source, AdfDialogServicePopupContainerRemoveEvent.REMOVE_EVENT_TYPE);
  this.setRoot(source)
};
AdfDialogServicePopupContainerRemoveEvent.prototype.isCancelable = function() {
  return false
};
AdfDialogServicePopupContainerRemoveEvent.prototype.propagatesToServer = function() {
  return true
};
AdfDialogServicePopupContainerRemoveEvent.prototype.AddMarshalledProperties = function(properties) {
  properties.popupId = this._popupId;
  var contentWidth = this._contentWidth;
  if(contentWidth) {
    properties.contentWidth = contentWidth
  }
  var contentHeight = this._contentHeight;
  if(contentHeight) {
    properties.contentHeight = contentHeight
  }
};
AdfDialogServicePopupContainerRemoveEvent.prototype.IsDeleveryDiscrete = function() {
  return true
};
AdfDialogServicePopupContainerRemoveEvent.prototype.getPopupId = function() {
  return this._popupId
};
AdfDialogServicePopupContainerRemoveEvent.queue = function(component, popupId, contentWidth, contentHeight) {
  AdfAssert.assertPrototype(component, AdfUIComponent);
  AdfAssert.assertString(popupId);
  (new AdfDialogServicePopupContainerRemoveEvent(component, popupId, contentWidth, contentHeight)).queue(true)
};
AdfDialogServicePopupContainerRemoveEvent.prototype.getClearMessages = function() {
  return false
};

AdfUIComponents.createComponentClass("AdfDialogServicePopupContainer", {componentType:"oracle.adfinternal.DialogServicePopupContainer", superclass:AdfUIObject});

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlDialogServicePopupContainerPeer", true);
AdfDhtmlDialogServicePopupContainerPeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentEventHandlers(this, AdfPopupClosedEvent.POPUP_CLOSED_EVENT_TYPE);
  this._SELECTED_RTN_ID_EXPANDO = "srid"
};
AdfDhtmlDialogServicePopupContainerPeer.prototype.ReplaceDomElement = function(newElement, oldElement) {
  var agent = AdfAgent.AGENT;
  var component = this.getComponent();
  var subId = AdfRichUIPeer.CreateSubId(component.getClientId(), "content");
  if(subId == newElement.id) {
    var childNodes = AdfDomUtils.getChildElements(newElement);
    for(var i = childNodes.length - 1;i > -1;i--) {
      var childNode = childNodes[i];
      newElement.removeChild(childNode);
      oldElement.appendChild(childNode);
      agent.elementsAdded(childNode)
    }
  }else {
    AdfDhtmlDialogServicePopupContainerPeer.superclass.ReplaceDomElement.call(this, newElement, oldElement)
  }
};
AdfDhtmlDialogServicePopupContainerPeer.prototype.HandleComponentPopupClosed = function(componentEvent) {
  componentEvent.cancel();
  var popup = componentEvent.getSource();
  var popupId = popup.getClientId();
  var popupPeer = popup.getPeer();
  popupPeer.bind(popup);
  var popupDom = popupPeer.getDomElement();
  var panelWindowId = popup.getProperty("_panelWindowId");
  var panelWindow = AdfPage.PAGE.findComponent(panelWindowId);
  AdfAssert.assertPrototype(panelWindow, AdfRichPanelWindow);
  var contentWidth = null;
  var contentHeight = null;
  if(panelWindow.getPeer().isContentResized(panelWindow)) {
    contentWidth = panelWindow.getContentWidth();
    contentHeight = panelWindow.getContentHeight()
  }
  var component = this.getComponent();
  AdfDialogServicePopupContainerRemoveEvent.queue(component, popupId, contentWidth, contentHeight);
  AdfDhtmlRichDialogService.__unloadDocument(popup);
  AdfPage.PAGE.removeComponentsInSubtree(popupDom);
  popupDom.parentNode.removeChild(popupDom)
};
AdfDhtmlDialogServicePopupContainerPeer.prototype._getStateLast = function(state) {
  if(state && state.rtnId) {
    this._selectedState = state
  }
};
AdfDhtmlDialogServicePopupContainerPeer.prototype._getState = function(state) {
  if(state && state.rtnId && state.rtnId == this._selectedRtnId) {
    this._selectedState = state
  }
};
AdfDhtmlDialogServicePopupContainerPeer.prototype._getAllIds = function(state) {
  if(state && state.rtnId) {
    this._ids.push(state.rtnId)
  }
};
AdfDhtmlDialogServicePopupContainerPeer.prototype.getStateLast = function() {
  var visitor = this.createCallback(this._getStateLast);
  AdfDhtmlRichDialogService.getInstance().__visitWindows(visitor);
  var selectedState = this._selectedState;
  delete this._selectedState;
  if(selectedState) {
    var domElement = this.getDomElement();
    var rtnId = selectedState.rtnId;
    AdfAgent.AGENT.setExpandoProperty(domElement, AdfDhtmlDialogServicePopupContainerPeer._SELECTED_RTN_ID_EXPANDO, rtnId)
  }
  return selectedState
};
AdfDhtmlDialogServicePopupContainerPeer.prototype.getState = function(rtnId) {
  var visitor = this.createCallback(this._getState);
  this._selectedRtnId = rtnId;
  AdfDhtmlRichDialogService.getInstance().__visitWindows(visitor);
  var selectedState = this._selectedState;
  delete this._selectedState;
  delete this._selectedRtnId;
  if(selectedState) {
    var domElement = this.getDomElement();
    AdfAgent.AGENT.setExpandoProperty(domElement, AdfDhtmlDialogServicePopupContainerPeer._SELECTED_RTN_ID_EXPANDO, rtnId)
  }
  return selectedState
};
AdfDhtmlDialogServicePopupContainerPeer.prototype.getAllIds = function() {
  var visitor = this.createCallback(this._getAllIds);
  this._ids = [];
  AdfDhtmlRichDialogService.getInstance().__visitWindows(visitor);
  var ids = this._ids;
  delete this._ids;
  return ids
};
AdfDhtmlDialogServicePopupContainerPeer.prototype.GetSubIdDomElement = function(subElementIdLocator) {
  AdfAssert.assertNonEmptyString(subElementIdLocator);
  var subIdElement;
  var subElementId = subElementIdLocator;
  var nestedSubElementId;
  var startIndex = subElementIdLocator.indexOf("#");
  if(startIndex > -1) {
    subElementId = subElementIdLocator.substring(0, startIndex);
    AdfAssert.assertNonEmptyString(subElementId);
    nestedSubElementId = subElementIdLocator.substring(startIndex + 1)
  }
  var subComponent = AdfPage.PAGE.findComponent(subElementId);
  if(subComponent) {
    var peer = subComponent.getPeer();
    if(nestedSubElementId) {
      subIdElement = peer.getSubIdDomElement(subComponent, nestedSubElementId)
    }else {
      peer.bind(subComponent);
      subIdElement = peer.getDomElement()
    }
  }
  if(!subIdElement) {
    AdfLogger.LOGGER.warning("Sub Id doesn't exist for this component:", subElementIdLocator)
  }
  return subIdElement
};
AdfPage.PAGE.getLookAndFeel().registerPeerConstructor("oracle.adfinternal.DialogServicePopupContainer", "AdfDhtmlDialogServicePopupContainerPeer");

AdfUIComponents.createComponentClass("AdfRichCommandButton", {componentType:"oracle.adf.RichCommandButton", propertyKeys:[{name:"iconDelivery", type:"String", "default":"auto"}, {name:"text", type:"String"}, {name:"disabled", type:"Boolean", "default":false, secured:true}, {name:"accessKey", type:"String"}, {name:"partialSubmit", type:"Boolean", "default":false, secured:true}, {name:"blocking", type:"Boolean", "default":false, secured:true}, {name:"icon", type:"String"}, {name:"iconPosition", type:"String", 
"default":"leading"}, {name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true}, {name:"useWindow", type:"Boolean", "default":false}, {name:"windowModalityType", type:"String", "default":"modeless"}, {name:"windowEmbedStyle", type:"String", "default":"window"}, {name:"windowHeight", type:"Number"}, {name:"windowWidth", type:"Number"}], superclass:AdfUICommand});

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlButtonPeer", true);
AdfDhtmlButtonPeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.CLICK_EVENT_TYPE);
  AdfRichUIPeer.addComponentPropertyChanges(this, AdfRichCommandButton.TEXT);
  this._BUSY = "_busy"
};
AdfDhtmlButtonPeer.prototype.HandleComponentClick = function(componentEvent) {
  var component = this.getComponent();
  var isBusy = component.getProperty(AdfDhtmlButtonPeer._BUSY);
  if(!component.getDisabled() && componentEvent.isLeftButtonPressed() && !isBusy) {
    AdfActionEvent.queue(component, component.getPartialSubmit())
  }
  if(AdfAgent.AGENT.getCapabilities()[AdfAgent.CAP_TOUCH_SCREEN] != AdfAgent.CAP_TOUCH_SCREEN_NONE) {
  }else {
    var nativeEvent = componentEvent.getNativeEvent();
    AdfAgent.AGENT.eatEvent(nativeEvent)
  }
};
AdfDhtmlButtonPeer.prototype.GetAccessibleName = function() {
  var component = this.getComponent();
  return component.getText()
};
AdfDhtmlButtonPeer.prototype.GetInlineEditor = function(event) {
  return AdfDhtmlSimpleTextEditor.getInlineEditor()
};
AdfDhtmlButtonPeer.__setDisabled = function(buttonElement, disabled) {
  AdfAssert.assertDomElement(buttonElement, "BUTTON");
  AdfAssert.assertBoolean(disabled);
  AdfDomUtils.addOrRemoveCSSClassName(disabled, buttonElement, AdfRichUIPeer.DISABLED_STYLECLASS)
};
AdfDhtmlButtonPeer.prototype.SetBusy = function(isBusy) {
  var component = this.getComponent();
  var domElement = this.getDomElement();
  var actionForm = AdfDomUtils.getFormElement(domElement);
  if(!actionForm) {
    return
  }
  var multipart = this._isMultipart(actionForm);
  if(!component.getDisabled() && !multipart) {
    AdfDhtmlButtonPeer.__setDisabled(domElement, isBusy);
    component.setProperty(AdfDhtmlButtonPeer._BUSY, isBusy, false, AdfUIComponent.PROPAGATE_NEVER)
  }
};
AdfDhtmlButtonPeer.prototype.isBusy = function() {
  var component = this.getComponent();
  return component && component.getProperty(AdfDhtmlButtonPeer._BUSY)
};
AdfDhtmlButtonPeer.prototype._isMultipart = function(actionForm) {
  var multiPartForm = AdfDomUtils.getMultiPartForm(actionForm);
  return multiPartForm != null
};
AdfDhtmlButtonPeer.prototype.ComponentTextChanged = AdfDomUtils.__componentTextChanged;

function AdfShowPopupBehavior(popupId, align, alignId, type, tail) {
  this.Init(popupId, align, alignId, type, tail)
}
AdfObject.createSubclass(AdfShowPopupBehavior, AdfClientBehavior);
AdfShowPopupBehavior.prototype.initialize = function(component) {
  var type = this._type;
  if(!type) {
    type = AdfActionEvent.ACTION_EVENT_TYPE
  }else {
    if(type == "mouseHover") {
      type = AdfUIInputEvent.MOUSE_IN_EVENT_TYPE
    }
  }
  component.addEventListener(type, this.fire, this)
};
AdfShowPopupBehavior.prototype._fireCancel = function(event) {
  var page = AdfPage.PAGE;
  var popupId = this._popupId;
  var source = event.getSource();
  var launchSourceId = source.getClientId();
  var popup = source.findComponent(popupId);
  var delayedActivationState = popup._delayedActivationState;
  if(delayedActivationState) {
    if(delayedActivationState.launchSourceId == launchSourceId) {
      page.cancelTimer(delayedActivationState.timerId);
      delete popup._delayedActivationState;
      source.removeEventListener(AdfUIInputEvent.MOUSE_OUT_EVENT_TYPE, this._fireCancel, this);
      event.cancel()
    }
  }
};
AdfShowPopupBehavior.prototype.fire = function(event) {
  event.cancel();
  var page = AdfPage.PAGE;
  var type = this._type;
  var source = event.getSource();
  var launchSourceId = source.getClientId();
  var popupId = this._popupId;
  var popup = source.findComponent(popupId);
  if(AdfPage.PAGE.isScreenReaderMode()) {
    if(type == "mouseHover" || type == "mouseMove" || type == "mouseOver" || type == "mouseOut") {
      AdfLogger.LOGGER.fine("showPopupBehavior trigger type " + type + " suppressed in screen reader mode for launch source id: " + launchSourceId);
      return
    }
  }
  if(!popup) {
    AdfLogger.LOGGER.severe("Could not find popup ", this._popupId, " from component ", source);
    return
  }
  var delayedActivationState = popup._delayedActivationState;
  if(delayedActivationState) {
    if(delayedActivationState.launchSourceId == launchSourceId) {
      return
    }else {
      page.cancelTimer(delayedActivationState.timerId);
      delete popup._delayedActivationState
    }
  }
  if(popup.isPopupVisible()) {
    var popupElement = this._getPopupWindow(popup);
    if(popupElement == null) {
      return
    }
    var isInlineSelector = this._isInlinePopupSelector(popupElement);
    var wasOpendFromSameSource = this._wasOpendedFromSameSource(popupElement, launchSourceId);
    if(isInlineSelector) {
      popup.hide();
      if(wasOpendFromSameSource) {
        return
      }
    }else {
      if(!wasOpendFromSameSource) {
        popup.hide()
      }
    }
  }
  var align = this._align;
  var alignId = this._alignId;
  var tail = this._tail;
  var hints = {};
  hints[AdfRichPopup.HINT_LAUNCH_ID] = launchSourceId;
  var isContextMenu = this._type == AdfComponentEvent.CONTEXT_MENU_EVENT_TYPE;
  if(alignId || align || isContextMenu) {
    if(align) {
      hints[AdfRichPopup.HINT_ALIGN] = align;
      if(!alignId) {
        alignId = source.getClientId();
        var lastIndex = alignId.lastIndexOf(":");
        if(lastIndex != -1) {
          alignId = alignId.substring(lastIndex + 1)
        }
      }
    }
    if(alignId) {
      var alignComponent = source.findComponent(alignId);
      if(alignComponent) {
        hints[AdfRichPopup.HINT_ALIGN_ID] = alignComponent.getClientId()
      }else {
        AdfLogger.LOGGER.warning("Unable to find align component: ", alignId)
      }
    }
    if(isContextMenu) {
      hints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_MENU;
      hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_MENU;
      if(!alignId) {
        var pos = AdfAgent.AGENT.getMousePosition(event.getNativeEvent());
        hints[AdfDhtmlPopupWindow.HINT_MOUSEPOSITION] = pos
      }
    }
    if(type == "mouseHover") {
      hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT;
      var mouseOutId = hints[AdfRichPopup.HINT_ALIGN_ID] ? hints[AdfRichPopup.HINT_ALIGN_ID] : hints[AdfRichPopup.HINT_LAUNCH_ID];
      hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS_MOUSEOUT_ID] = mouseOutId
    }
  }
  if(this._tail) {
    hints[AdfRichPopup.HINT_TAIL] = this._tail
  }
  if(event.getType() == AdfUIInputEvent.MOUSE_IN_EVENT_TYPE) {
    var state = {hints:hints, popup:popup, source:source};
    var timerId = page.scheduleTimer(this, this._onMouseOverTimeout, state, 500);
    popup._delayedActivationState = {timerId:timerId, launchSourceId:launchSourceId};
    source.addEventListener(AdfUIInputEvent.MOUSE_OUT_EVENT_TYPE, this._fireCancel, this)
  }else {
    popup.show(hints)
  }
};
AdfShowPopupBehavior.prototype._onMouseOverTimeout = function(state) {
  var popup = state.popup;
  var hints = state.hints;
  var source = state.source;
  if(!popup.isPopupVisible()) {
    popup.show(hints)
  }
  source.removeEventListener(AdfUIInputEvent.MOUSE_OUT_EVENT_TYPE, this._fireCancel, this);
  delete popup._delayedActivationState
};
AdfShowPopupBehavior.prototype._isInlinePopupSelector = function(popupElement) {
  if(popupElement && popupElement instanceof AdfDhtmlPopupSelector && !(popupElement instanceof AdfDhtmlNoteWindowPopupSelector)) {
    return true
  }
  return false
};
AdfShowPopupBehavior.prototype._getPopupWindow = function(component) {
  var popupId = component.getClientId();
  var peer = component.getPeer();
  peer.bind(component);
  var popupList = peer.getAllPopups(component);
  if(popupList == null) {
    return null
  }
  var popupElement = popupList[popupId];
  return popupElement
};
AdfShowPopupBehavior.prototype._wasOpendedFromSameSource = function(popupElement, launchSourceId) {
  var oldLaunchSourceId = popupElement.getLaunchSourceId();
  if(oldLaunchSourceId && oldLaunchSourceId == launchSourceId) {
    return true
  }
  return false
};
AdfShowPopupBehavior.prototype.Init = function(popupId, align, alignId, type, tail) {
  AdfShowPopupBehavior.superclass.Init.call(this);
  AdfAssert.assert(popupId != null);
  this._popupId = popupId;
  this._align = align;
  this._alignId = alignId;
  this._type = type;
  this._tail = tail
};
