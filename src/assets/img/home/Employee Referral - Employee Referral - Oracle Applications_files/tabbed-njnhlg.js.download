AdfUIComponents.createComponentClass("AdfUIShowOne", {componentType:"org.apache.myfaces.trinidad.ShowOne"});

AdfUIComponents.createComponentClass("AdfRichPanelTabbed", {componentType:"oracle.adf.RichPanelTabbed", propertyKeys:[{name:"inlineStyle", type:"String"}, {name:"styleClass", type:"String"}, {name:"shortDesc", type:"String"}, {name:"unsecure", type:"Object", secured:true}, {name:"visible", type:"Boolean", "default":true}, {name:"contentDelivery", type:"String", "default":"lazyUncached"}, {name:"dimensionsFrom", type:"String", "default":"parent"}, {name:"verticalTabMode", type:"String", "default":"iconOnly"}, 
{name:"position", type:"String", "default":"above"}, {name:"tabRemoval", type:"String", "default":"none"}], eventNames:["item"], superclass:AdfUIShowOne});

AdfRichUIPeer.createPeerClass(AdfRichUIPeer, "AdfDhtmlPanelTabbedPeer", false);
AdfDhtmlPanelTabbedPeer.InitSubclass = function() {
  AdfRichUIPeer.addComponentPropertyChanges(this, "verticalTabMode");
  AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.KEY_UP_EVENT_TYPE, AdfUIInputEvent.CLICK_EVENT_TYPE, AdfUIInputEvent.FOCUS_EVENT_TYPE, AdfUIInputEvent.BLUR_EVENT_TYPE, AdfUIInputEvent.MOUSE_DOWN_EVENT_TYPE, AdfUIInputEvent.MOUSE_UP_EVENT_TYPE);
  if(!AdfAgent.AGENT.isTouchFirstDevice()) {
    AdfRichUIPeer.addComponentEventHandlers(this, AdfUIInputEvent.MOUSE_IN_EVENT_TYPE, AdfUIInputEvent.MOUSE_OUT_EVENT_TYPE)
  }
  this._TAB_HEADER = "tabh";
  this._TAB_FOOTER = "tabf";
  this._TAB_VERTICAL_CONTAINER = "tabp";
  this._TAB_VERTICAL = "tabv";
  this._TAB_BODY_OUTER = "tabb";
  this._TAB_BODY_INNER = "tabbc";
  this.TAB_SUB_ID_ABOVE = "ti";
  this.TAB_SUB_ID_BELOW = "tiB";
  this.TAB_SUB_ID_ICON = "icon";
  this.TAB_SUB_ID_ICON_BELOW = "iconB";
  this._EXPANDO_ROWKEY_ATTRIBUTE = "_afrPtKey";
  this._TAB_SUB_ID_TOGGLE_ICON = "tb";
  this._TAB_ID_CONVEYOR_SUFFIX = "Cnvr";
  this._EXPANDO_COMPRESSED_LAYOUT_LINK = "_afrOfwLnk";
  this._EXPANDO_DISCLOSED_TAB_ID = "_afrDisTab";
  this._ANCHOR_SUB_ID_ABOVE = "disAcr";
  this._ANCHOR_SUB_ID_BELOW = "disAcrBlw";
  this._ANCHOR_SUB_ID_BELOW_LENGTH = this._ANCHOR_SUB_ID_BELOW.length;
  this._REMOVE_ICON_ABOVE_ID = "rmAbv";
  this._REMOVE_ICON_BELOW_ID = "rmBlw";
  this._HIGHLIGHTED_STYLE_CLASS = "p_AFHighlighted";
  this._INVERTED_POSITION_MAP = {"above":"below", "below":"above", "start":"end", "end":"start", "left":"right", "right":"left"};
  this._compressedLayoutMode = "notSupported";
  var lookAndFeel = AdfPage.PAGE.getLookAndFeel();
  var layoutType = lookAndFeel.getSkinProperty("af|panelTabbed-tr-layout-type");
  var agent = AdfAgent.AGENT;
  var isIE7 = agent.getPlatform() == AdfAgent.IE_PLATFORM && Math.floor(agent.getVersion()) == 7;
  if(AdfPage.PAGE.isScreenReaderMode()) {
    this._compressedLayoutMode = "notSupported"
  }else {
    if(layoutType == "overflow") {
      this._compressedLayoutMode = "overflow"
    }else {
      if(layoutType == "overflow-droplist" || isIE7) {
        this._compressedLayoutMode = "overflow-droplist"
      }else {
        this._compressedLayoutMode = "conveyorBelt"
      }
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype.InitDomElement = function(component, domElement) {
  AdfDhtmlPanelTabbedPeer.superclass.InitDomElement.call(this, component, domElement);
  var agent = AdfAgent.getAgent();
  var headerId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_HEADER);
  this._headerDiv = agent.getElementById(headerId);
  var footerId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_FOOTER);
  this._footerDiv = agent.getElementById(footerId);
  var vertId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_VERTICAL);
  this._vertDiv = agent.getElementById(vertId);
  var tabsParentId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_VERTICAL_CONTAINER);
  this._tabsParentDiv = agent.getElementById(tabsParentId);
  this._toggleTextIconId = AdfRichUIPeer.CreateSubId(vertId, AdfDhtmlPanelTabbedPeer._TAB_SUB_ID_TOGGLE_ICON);
  var headerContentId = AdfDhtmlPanelTabbedPeer._compressedLayoutMode == "conveyorBelt" ? AdfRichUIPeer.CreateSubId(headerId, "cbc") : AdfRichUIPeer.CreateSubId(headerId, "oc");
  this._headerTabsDiv = AdfAgent.AGENT.getElementById(headerContentId);
  var footerContentId = AdfDhtmlPanelTabbedPeer._compressedLayoutMode == "conveyorBelt" ? AdfRichUIPeer.CreateSubId(footerId, "cbc") : AdfRichUIPeer.CreateSubId(footerId, "oc");
  this._footerTabsDiv = AdfAgent.AGENT.getElementById(footerContentId);
  var tabBodyOuterId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_BODY_OUTER);
  this._bodyOuterDiv = agent.getElementById(tabBodyOuterId);
  var tabBodyInnerId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_BODY_INNER);
  this._bodyInnerDiv = agent.getElementById(tabBodyInnerId);
  var verticalContentId = AdfRichUIPeer.CreateSubId(vertId, "cbc");
  this._verticalTabsDiv = this.IsVerticalConveyorSupported() ? AdfAgent.AGENT.getElementById(verticalContentId) : this._vertDiv;
  AdfPage.PAGE.__registerDescendantResizeNotifyComponent(component)
};
AdfDhtmlPanelTabbedPeer.prototype.BindToComponent = function(component, rootElement) {
  AdfDhtmlPanelTabbedPeer.superclass.BindToComponent.call(this, component, rootElement);
  var justDisclosed = AdfDhtmlPanelTabbedPeer.GetRecentTabClientId();
  if(justDisclosed != null) {
    var onTheBelowBar = AdfDhtmlPanelTabbedPeer.IsRecentTabOnTheBelowBar();
    var firstChoice, secondChoice;
    if(true == onTheBelowBar) {
      firstChoice = AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_BELOW;
      secondChoice = AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_ABOVE
    }else {
      firstChoice = AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_ABOVE;
      secondChoice = AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_BELOW
    }
    this._selectedChildId = justDisclosed;
    var anchorSubId = AdfRichUIPeer.CreateSubId(justDisclosed, firstChoice);
    var anchor = AdfAgent.AGENT.getElementById(anchorSubId);
    if(anchor == null) {
      anchorSubId = AdfRichUIPeer.CreateSubId(justDisclosed, secondChoice);
      anchor = AdfAgent.AGENT.getElementById(anchorSubId)
    }
    if(anchor != null) {
      AdfFocusUtils.focusElement(anchor)
    }
    AdfDhtmlPanelTabbedPeer._recentTabClientId = null;
    AdfDhtmlPanelTabbedPeer._recentTabOnTheBelowBar = null
  }
};
AdfDhtmlPanelTabbedPeer.prototype.HandleComponentMouseOver = function(componentEvent) {
  this._handleIcon(componentEvent, true, false)
};
AdfDhtmlPanelTabbedPeer.prototype.HandleComponentMouseDown = function(componentEvent) {
  this._handleIcon(componentEvent, false, true)
};
AdfDhtmlPanelTabbedPeer.prototype.HandleComponentMouseUp = function(componentEvent) {
  this._handleIcon(componentEvent, false, false)
};
AdfDhtmlPanelTabbedPeer.prototype.HandleComponentMouseOut = function(componentEvent) {
  this._handleIcon(componentEvent, false, false)
};
AdfDhtmlPanelTabbedPeer.prototype.HandleComponentKeyUp = function(componentEvent) {
  var evt = componentEvent.getNativeEvent();
  var keyCode = componentEvent.getKeyCode();
  if(evt.ctrlKey && evt.altKey && keyCode == AdfKeyStroke.F4_KEY) {
    var target = componentEvent.getNativeEventTarget();
    var childId = this._getCurrencyFromDomElement(target, this.getDomElement());
    if(childId == null) {
      return
    }
    var clickedItem = AdfPage.PAGE.findComponent(childId);
    if(clickedItem.getDisabled()) {
      return
    }
    if(this._canRemove(childId)) {
      this._saveAndRemoveCompressedLayout();
      AdfFocusUtils.focusNextTabStop(target, null, true);
      AdfItemEvent.queueItemRemoveEvent(clickedItem)
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype.HandleComponentClick = function(componentEvent) {
  if(!componentEvent.isCanceled() && componentEvent.isLeftButtonPressed()) {
    var component = this.getComponent();
    var target = componentEvent.getNativeEventTarget();
    if(AdfAgent.AGENT.getExpandoProperty(target, AdfDhtmlPanelTabbedPeer._EXPANDO_COMPRESSED_LAYOUT_LINK) == "1") {
      this._selectTab(target);
      componentEvent.cancel();
      return
    }
    if(this._isOnTabTextToggleButton(target)) {
      this.toggleTabText();
      componentEvent.cancel();
      return
    }
    var childId = this._getCurrencyFromDomElement(target, this.getDomElement());
    if(childId == null) {
      return
    }
    componentEvent.cancel();
    var clickedItem = AdfPage.PAGE.findComponent(childId);
    if(clickedItem.getDisabled()) {
      return
    }
    if(this._isOnRemoveButton(childId, target)) {
      if(this._canRemove(childId)) {
        this.hideAllPopups(component);
        this._saveAndRemoveCompressedLayout();
        if(!(target.parentNode.className && target.parentNode.className != AdfDhtmlPanelTabbedPeer._compressedLayoutElementStyleClass)) {
          AdfFocusUtils.focusNextTabStop(target, null, true)
        }
        AdfItemEvent.queueItemRemoveEvent(clickedItem)
      }
      return
    }
    var oldDisclosed = this.GetOldDisclosedChild(component);
    if(clickedItem != oldDisclosed) {
      var targetId = target.id;
      var belowIndex = targetId.length - AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_BELOW_LENGTH;
      var onTheBelowBar = false;
      if(belowIndex >= 0) {
        onTheBelowBar = belowIndex == targetId.lastIndexOf(AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_BELOW, belowIndex)
      }
      AdfDhtmlPanelTabbedPeer.SetRecentTabInfo(childId, onTheBelowBar);
      this._saveAndRemoveCompressedLayout();
      this.QueueClientDisclosureChanges(oldDisclosed, clickedItem);
      this.NewTabSelected(component)
    }else {
      this.TabReselected(component, clickedItem)
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype.HandleComponentFocus = function(componentEvent) {
  this._handleTabFocusOrBlur(componentEvent, true)
};
AdfDhtmlPanelTabbedPeer.prototype.HandleComponentBlur = function(componentEvent) {
  this._handleTabFocusOrBlur(componentEvent, false)
};
AdfDhtmlPanelTabbedPeer.prototype.TabReselected = function(component, child) {
};
AdfDhtmlPanelTabbedPeer.prototype.NewTabSelected = function(component) {
};
AdfDhtmlPanelTabbedPeer.prototype.GetBodyOuterElement = function() {
  return this._bodyOuterDiv
};
AdfDhtmlPanelTabbedPeer.prototype.GetBodyInnerElement = function() {
  return this._bodyInnerDiv
};
AdfDhtmlPanelTabbedPeer.prototype.GetVertTabsElement = function() {
  return this._vertDiv
};
AdfDhtmlPanelTabbedPeer.prototype._getRenderingPosition = function(component) {
  var position = component.getPosition();
  var invertPosition = this.UseInvertedRenderingPosition();
  if(invertPosition) {
    return AdfDhtmlPanelTabbedPeer._INVERTED_POSITION_MAP[position]
  }
  return position
};
AdfDhtmlPanelTabbedPeer.prototype.UseInvertedRenderingPosition = function() {
  return false
};
AdfDhtmlPanelTabbedPeer.prototype._hasSubIdInId = function(target, subId1, subId2) {
  var id = target.id;
  if(id == null) {
    return false
  }
  var tokens = id.split("::");
  if(tokens.length <= 1) {
    return false
  }
  var subId = tokens[tokens.length - 1];
  if(subId) {
    if(subId == subId1 || subId == subId2) {
      return true
    }
  }
  return false
};
AdfDhtmlPanelTabbedPeer.prototype._findChildFromSubId = function(target, subId1, subId2) {
  var idFound = this._hasSubIdInId(target, subId1, subId2);
  if(idFound) {
    var childId = this._getCurrencyFromDomElement(target, this.getDomElement());
    if(childId != null) {
      return AdfPage.PAGE.findComponent(childId)
    }
  }
  return null
};
AdfDhtmlPanelTabbedPeer.prototype._displayIcon = function(target, component, icon) {
  if(!icon) {
    icon = component.getIcon()
  }
  if(icon) {
    target.src = icon
  }
};
AdfDhtmlPanelTabbedPeer.prototype._handleIcon = function(componentEvent, isHover, isDepressed) {
  var target = componentEvent.getNativeEventTarget();
  var child = this._findChildFromSubId(target, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ICON);
  if(child == null) {
    child = this._findChildFromSubId(target, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ICON_BELOW)
  }
  if(child) {
    if(!child.getDisabled() && !AdfRichUIPeer.isInlineSVGIcon(child)) {
      if(isHover) {
        this._displayIcon(target, child, child.getHoverIcon())
      }else {
        if(isDepressed) {
          this._displayIcon(target, child, child.getDepressedIcon())
        }else {
          if(child.getDisclosed()) {
            this._displayIcon(target, child, child.getDepressedIcon())
          }else {
            this._displayIcon(target, child, child.getIcon())
          }
        }
      }
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype._handleTabFocusOrBlur = function(componentEvent, isFocus) {
  componentEvent.cancel();
  var target = componentEvent.getNativeEventTarget();
  var id = target.id;
  if(id == null) {
    return
  }
  var tokens = id.split("::");
  if(tokens.length <= 1) {
    return
  }
  var subId = tokens[tokens.length - 1];
  if(subId != AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_ABOVE && subId != AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_BELOW) {
    return
  }
  var childId = this._getCurrencyFromDomElement(target, this.getDomElement());
  if(childId == null) {
    return
  }
  var tabSubId = subId == AdfDhtmlPanelTabbedPeer._ANCHOR_SUB_ID_ABOVE ? AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ABOVE : AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_BELOW;
  var tabId = AdfRichUIPeer.createSubId(childId, tabSubId);
  var tabElement = AdfAgent.getAgent().getElementById(tabId);
  if(tabElement == null) {
    return
  }
  if(isFocus) {
    AdfDomUtils.addCSSClassName(tabElement, AdfDhtmlPanelTabbedPeer._HIGHLIGHTED_STYLE_CLASS)
  }else {
    AdfDomUtils.removeCSSClassName(tabElement, AdfDhtmlPanelTabbedPeer._HIGHLIGHTED_STYLE_CLASS)
  }
};
AdfDhtmlPanelTabbedPeer.prototype.needsResizeNotify = function(component) {
  return true
};
AdfDhtmlPanelTabbedPeer.prototype.ResizeNotify = function(oldWidth, oldHeight, newWidth, newHeight) {
  if(AdfDhtmlPanelTabbedPeer._compressedLayoutMode == "notSupported") {
    return
  }
  var component = this.getComponent();
  if(this._isVertical(component)) {
    if(oldHeight != newHeight) {
      this._resizeVerticalTabs();
      this._updateOverflow(newHeight)
    }
  }else {
    if(oldWidth != newWidth) {
      this._updateOverflow(newWidth)
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype.ComponentVerticalTabModeChanged = function(component, domElement, newValue, oldValue) {
  var verticalTabContainerId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_VERTICAL_CONTAINER);
  var verticalTabContainer = AdfAgent.AGENT.getElementById(verticalTabContainerId);
  if(!verticalTabContainer) {
    return true
  }
  AdfDomUtils.addOrRemoveCSSClassName(newValue == "iconOnly", this.getDomElement(), "p_AFIconified");
  AdfDomUtils.addOrRemoveCSSClassName(newValue == "iconOnly", verticalTabContainer, "p_AFIconified");
  var toggleIcon = AdfAgent.AGENT.getElementById(this._toggleTextIconId);
  if(toggleIcon) {
    var tipKey = newValue == "iconOnly" ? "af_panelTabbed.TIP_SHOW_TAB_TEXT" : "af_panelTabbed.TIP_HIDE_TAB_TEXT";
    toggleIcon.title = AdfPage.PAGE.getLookAndFeel().getTranslatedString(tipKey)
  }
  this._resizeVerticalTabs(true);
  return true
};
AdfDhtmlPanelTabbedPeer.prototype._updateOverflow = function(newSize) {
  var component = this.getComponent();
  var position = this._getRenderingPosition(component);
  if(position == "above" || position == "both") {
    var headerElementId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_HEADER);
    var headerChildren = this._getChildElements(headerElementId, this._headerTabsDiv);
    this._resizeOverflow(headerElementId, headerChildren, newSize, true)
  }
  if(position == "below" || position == "both") {
    var footerElementId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_FOOTER);
    var footerChildren = this._getChildElements(footerElementId, this._footerTabsDiv);
    this._resizeOverflow(footerElementId, footerChildren, newSize, false)
  }
  if(this._isVertical(component)) {
    var cbButtonContainerId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_VERTICAL);
    var children = this._getChildElements(cbButtonContainerId, this._verticalTabsDiv);
    this._resizeVerticalConveyor(cbButtonContainerId, children, newSize)
  }
};
AdfDhtmlPanelTabbedPeer.prototype._resizeVerticalTabs = function(forceResize) {
  var position = this._getRenderingPosition(this.getComponent());
  var body = this.GetBodyOuterElement();
  if(!body.style.width || forceResize) {
    var tabsOnLeft = false;
    var rtl = AdfPage.PAGE.getLocaleContext().isRightToLeft();
    if(position == "left" || position == "start" && !rtl || position == "end" && rtl) {
      tabsOnLeft = true
    }
    var vertTabs = this.GetVertTabsElement();
    if(tabsOnLeft) {
      body.style.left = vertTabs.offsetWidth + "px"
    }else {
      body.style.right = vertTabs.offsetWidth + "px"
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype.ComponentRemoved = function(component) {
  this._removeCompressedLayoutSupport();
  delete this._headerDiv;
  delete this._headerTabsDiv;
  delete this._footerDiv;
  delete this._footerTabsDiv;
  delete this._bodyOuterDiv;
  delete this._bodyInnerDiv;
  AdfPage.PAGE.__unregisterDescendantResizeNotifyComponent(component);
  AdfDhtmlPanelTabbedPeer.superclass.ComponentRemoved.call(this, component)
};
AdfDhtmlPanelTabbedPeer.prototype._getOverflowSupport = function(subId, children, position) {
  var overflowSupport = new AdfOverflowSupport(subId, this, "both", position);
  for(var i = 0;i < children.length;i++) {
    var child = children[i];
    if(child.nodeType == 1) {
      overflowSupport.createStep();
      overflowSupport.addElement(child);
      overflowSupport.addOverflowElement(this._createCompressedLayoutPopupElement(child))
    }
  }
  return overflowSupport
};
AdfDhtmlPanelTabbedPeer.prototype._getOverflowDroplistSupport = function(containerId, children, position) {
  var overflowSupport = new AdfOverflowSupport(containerId, this, "droplist", position);
  var droplistItems = [];
  for(var i = 0;i < children.length;i++) {
    var child = children[i];
    if(child.nodeType == 1) {
      overflowSupport.createStep();
      overflowSupport.addElement(child);
      if(child.style.display != "none") {
        overflowSupport.addOverflowElement(this._createCompressedLayoutPopupElement(child));
        droplistItems.push(this._createCompressedLayoutPopupElement(child))
      }
    }
  }
  overflowSupport.addDropListElements(droplistItems);
  return overflowSupport
};
AdfDhtmlPanelTabbedPeer.prototype._createHorizontalConveyorBeltSupport = function(containerId, children) {
  var conveyorBeltSupport = AdfConveyorBeltSupport.createHorizontalSupport(containerId, this);
  var droplistItems = [];
  var cbSpacerId = AdfRichUIPeer.CreateSubId(containerId, "cbs");
  for(var i = 0;i < children.length;i++) {
    var child = children[i];
    if(child.nodeType == 1) {
      var childId = child.getAttribute("id");
      if(childId == cbSpacerId) {
        continue
      }
      if(child.style.display != "none") {
        droplistItems.push(this._createCompressedLayoutPopupElement(child))
      }
    }
  }
  conveyorBeltSupport.addDropListElements(droplistItems);
  var conveyorBeltFirstItem = AdfDhtmlPanelTabbedPeer._conveyorBeltFirstItem;
  if(conveyorBeltFirstItem) {
    conveyorBeltSupport.setFirstItemDisplayed(conveyorBeltFirstItem);
    AdfDhtmlPanelTabbedPeer._conveyorBeltFirstItem = null
  }
  return conveyorBeltSupport
};
AdfDhtmlPanelTabbedPeer.GetRecentTabClientId = function() {
  return AdfDhtmlPanelTabbedPeer._recentTabClientId
};
AdfDhtmlPanelTabbedPeer.IsRecentTabOnTheBelowBar = function() {
  return AdfDhtmlPanelTabbedPeer._recentTabOnTheBelowBar
};
AdfDhtmlPanelTabbedPeer.SetRecentTabInfo = function(clientId, onTheBelowBar) {
  AdfDhtmlPanelTabbedPeer._recentTabClientId = clientId;
  AdfDhtmlPanelTabbedPeer._recentTabOnTheBelowBar = onTheBelowBar
};
AdfDhtmlPanelTabbedPeer.prototype._changeSelected = function(child, tabClientId, subId, iconSubid, isSelected) {
  var tabId = AdfRichUIPeer.CreateSubId(tabClientId, subId);
  var tabElement = AdfAgent.getAgent().getElementById(tabId);
  if(tabElement) {
    AdfDomUtils.addOrRemoveCSSClassName(isSelected, tabElement, "p_AFSelected");
    var iconId = AdfRichUIPeer.CreateSubId(tabClientId, iconSubid);
    var iconElement = AdfAgent.getAgent().getElementById(iconId);
    if(iconElement && !AdfRichUIPeer.isInlineSVGIcon(child)) {
      if(isSelected) {
        this._displayIcon(iconElement, child, child.getDepressedIcon())
      }else {
        this._displayIcon(iconElement, child, child.getIcon())
      }
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype.QueueClientDisclosureChanges = function(oldDisclosed, newDisclosed) {
  var oldDisclosedExists = oldDisclosed != null;
  if(!oldDisclosedExists && !this.IsDisclosedTabRequired() || oldDisclosed.getDisclosed() == true) {
    var component = this.getComponent();
    if(component.getContentDelivery() == "immediate") {
      if(!AdfPage.PAGE.isAttachmentMode()) {
        AdfLogger.LOGGER.warning("PanelTabbed contentDelivery=immediate is not supported outside of attachment mode. Disclose ability is disabled while in this state.");
        return
      }
      if(oldDisclosedExists) {
        var oldClientId = oldDisclosed.getClientId();
        this._changeSelected(oldDisclosed, oldClientId, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ABOVE, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ICON, false);
        this._changeSelected(oldDisclosed, oldClientId, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_BELOW, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ICON_BELOW, false);
        var oldPeer = oldDisclosed.getPeer();
        oldPeer.bind(oldDisclosed);
        oldPeer.getDomElement().parentNode.style.display = "none";
        oldDisclosed.setDisclosed(false);
        this._setOldDisclosedChild(component, null)
      }
      if(newDisclosed) {
        var newPeer = newDisclosed.getPeer();
        newPeer.bind(newDisclosed);
        newPeer.getDomElement().parentNode.style.display = "";
        var newClientId = newDisclosed.getClientId();
        this._changeSelected(newDisclosed, newClientId, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ABOVE, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ICON, true);
        this._changeSelected(newDisclosed, newClientId, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_BELOW, AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ICON_BELOW, true);
        newDisclosed.setDisclosed(true);
        this._setOldDisclosedChild(component, newDisclosed.getClientId())
      }
      AdfPage.PAGE.doResizeNotify(component)
    }else {
      if(oldDisclosedExists) {
        var oldItemPeer = oldDisclosed.getPeer();
        oldItemPeer.bind(oldDisclosed);
        oldItemPeer.queueDisclosureEvent(false, true, newDisclosed)
      }else {
        var newItemPeer = newDisclosed.getPeer();
        newItemPeer.bind(newDisclosed);
        newItemPeer.queueDisclosureEvent(true, true)
      }
    }
  }else {
    AdfLogger.LOGGER.severe("Unexpected panelTabbed showDetailItem disclosure state for queueing client events")
  }
};
AdfDhtmlPanelTabbedPeer.prototype.IsDisclosedTabRequired = function(element) {
  return true
};
AdfDhtmlPanelTabbedPeer.prototype.IsVerticalConveyorSupported = function(element) {
  return true
};
AdfDhtmlPanelTabbedPeer.prototype._createCompressedLayoutPopupElement = function(element) {
  var agent = AdfAgent.AGENT;
  var rowKey = agent.getAttribute(element, AdfDhtmlPanelTabbedPeer._EXPANDO_ROWKEY_ATTRIBUTE);
  var textLinkElement = element.getElementsByTagName("a")[0];
  var removeButton = element.getElementsByTagName("a")[1];
  var customIcon = element.getElementsByTagName("img")[0];
  var laf = AdfPage.PAGE.getLookAndFeel();
  var itemClassName;
  if(customIcon) {
    customIcon = customIcon.cloneNode(true);
    if(customIcon.id) {
      customIcon.id = customIcon.id + AdfDhtmlPanelTabbedPeer._TAB_ID_CONVEYOR_SUFFIX
    }
  }
  if(textLinkElement && textLinkElement.className.indexOf("p_AFDisabled") == -1) {
    textLinkElement = textLinkElement.cloneNode(true);
    if(textLinkElement.id) {
      textLinkElement.id = textLinkElement.id + AdfDhtmlPanelTabbedPeer._TAB_ID_CONVEYOR_SUFFIX
    }
    textLinkElement._rowKey = rowKey;
    agent.setExpandoProperty(textLinkElement, AdfDhtmlPanelTabbedPeer._EXPANDO_COMPRESSED_LAYOUT_LINK, "1");
    itemClassName = AdfDhtmlPanelTabbedPeer._compressedLayoutElementStyleClass;
    if(itemClassName == null) {
      itemClassName = AdfDhtmlPanelTabbedPeer._compressedLayoutMode == "conveyorBelt" ? laf.getStyleClass("AFConveyorBeltElement") : laf.getStyleClass("AFOverflowElement");
      AdfDhtmlPanelTabbedPeer._compressedLayoutElementStyleClass = itemClassName
    }
    if(removeButton) {
      removeButton = removeButton.cloneNode(true);
      if(removeButton.id) {
        removeButton.id = removeButton.id + AdfDhtmlPanelTabbedPeer._TAB_ID_CONVEYOR_SUFFIX
      }
    }
  }else {
    var linkName = textLinkElement.innerHTML;
    textLinkElement = element.ownerDocument.createElement("div");
    textLinkElement.innerHTML = linkName;
    itemClassName = AdfDhtmlPanelTabbedPeer._compressedLayoutElementDisabledStyleClass;
    if(itemClassName == null) {
      itemClassName = AdfDhtmlPanelTabbedPeer._compressedLayoutMode == "conveyorBelt" ? laf.getStyleClass("AFConveyorBeltElementDisabled") : laf.getStyleClass("AFOverflowElementDisabled");
      AdfDhtmlPanelTabbedPeer._compressedLayoutElementDisabledStyleClass = itemClassName
    }
    if(removeButton) {
      removeButton = removeButton.cloneNode(true);
      if(removeButton.id) {
        removeButton.id = removeButton.id + AdfDhtmlPanelTabbedPeer._TAB_ID_CONVEYOR_SUFFIX
      }
    }
  }
  var table = element.ownerDocument.createElement("table");
  table.cellPadding = 0;
  table.cellSpacing = 0;
  table.style.width = "100%";
  var row = table.insertRow(-1);
  agent.setAttribute(row, AdfDhtmlPanelTabbedPeer._EXPANDO_ROWKEY_ATTRIBUTE, rowKey);
  var customIconCell = row.insertCell(-1);
  if(customIcon) {
    customIconCell.appendChild(customIcon)
  }
  var textCell = row.insertCell(-1);
  textCell.style.width = "100%";
  var wrapper = element.ownerDocument.createElement("div");
  wrapper.className = itemClassName;
  textCell.appendChild(wrapper);
  wrapper.appendChild(textLinkElement);
  var removeIconCell = row.insertCell(-1);
  if(removeButton) {
    var removeIconWrapper = element.ownerDocument.createElement("div");
    removeIconWrapper.className = itemClassName;
    removeIconCell.appendChild(removeIconWrapper);
    removeIconWrapper.appendChild(removeButton)
  }
  return table
};
AdfDhtmlPanelTabbedPeer.prototype._selectTab = function(target) {
  var component = this.getComponent();
  this.hideAllPopups(component);
  var tabId = target._rowKey;
  if(tabId) {
    var newDisclosed = AdfPage.PAGE.findComponent(tabId);
    var oldDisclosed = this.GetOldDisclosedChild(component);
    if(newDisclosed.getDisabled()) {
      return
    }
    if(newDisclosed == oldDisclosed) {
      if(this._hasConveyorBeltSupport()) {
        this._handleConveyorBeltNewSelection(newDisclosed.getClientId())
      }
    }else {
      AdfDhtmlPanelTabbedPeer.SetRecentTabInfo(tabId, null);
      this._saveAndRemoveCompressedLayout();
      this.QueueClientDisclosureChanges(oldDisclosed, newDisclosed)
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype._saveAndRemoveCompressedLayout = function() {
  var cbSupport = this._getConveyorBeltSupport();
  if(cbSupport) {
    AdfDhtmlPanelTabbedPeer._conveyorBeltFirstItem = cbSupport.getFirstItemDisplayed()
  }
  this._removeCompressedLayoutSupport()
};
AdfDhtmlPanelTabbedPeer.prototype._hasConveyorBeltSupport = function() {
  return this._headerConveyorBeltSupport != null || this._footerConveyorBeltSupport != null || this._verticalConveyorBeltSupport != null
};
AdfDhtmlPanelTabbedPeer.prototype._getConveyorBeltSupport = function() {
  if(this._headerConveyorBeltSupport != null) {
    return this._headerConveyorBeltSupport
  }else {
    if(this._footerConveyorBeltSupport != null) {
      return this._footerConveyorBeltSupport
    }else {
      if(this._verticalConveyorBeltSupport != null) {
        return this._verticalConveyorBeltSupport
      }
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype._handleConveyorBeltNewSelection = function(newSelectionId) {
  if(!this._hasConveyorBeltSupport()) {
    return
  }
  var tabSubId = this._headerConveyorBeltSupport || this._verticalConveyorBeltSupport ? AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_ABOVE : AdfDhtmlPanelTabbedPeer.TAB_SUB_ID_BELOW;
  var tabId = AdfRichUIPeer.createSubId(newSelectionId, tabSubId);
  var tabElement = AdfAgent.getAgent().getElementById(tabId);
  var conveyorBeltSupport = this._getConveyorBeltSupport();
  var tabNumber = 0;
  var children = this._getChildElements(tabId, this._getTabsDiv());
  for(var x = 0;x < children.length;x++) {
    var child = children[x];
    if(child.nodeType == 1) {
      if(children[x] == tabElement) {
        conveyorBeltSupport.scrollNewSelectedItemIntoView(tabNumber);
        if(this._headerConveyorBeltSupport && this._footerConveyorBeltSupport) {
          this._footerConveyorBeltSupport.scrollNewSelectedItemIntoView(tabNumber)
        }
        return
      }
      tabNumber++
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype._getTabsDiv = function() {
  if(this._cbTabsDiv) {
    return this._cbTabsDiv
  }
  if(this._headerConveyorBeltSupport) {
    this._cbTabsDiv = this._headerTabsDiv
  }else {
    if(this._footerConveyorBeltSupport) {
      this._cbTabsDiv = this._footerTabsDiv
    }else {
      if(this._verticalConveyorBeltSupport) {
        this._cbTabsDiv = this._vertDiv
      }
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype._getChildren = function() {
  var agent = AdfAgent.getAgent();
  var component = this.getComponent();
  var children = [];
  var position = this._getRenderingPosition(component);
  var childContainer = position == "above" || position == "both" ? this._headerTabsDiv : this._footerTabsDiv;
  var containerId = position == "above" || position == "both" ? AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_HEADER) : AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_FOOTER);
  if(this.getDomElement()) {
    var childElems = this._getChildElements(containerId, childContainer);
    for(var i = 0;i < childElems.length;i++) {
      if(childElems[i].nodeType == 1) {
        var clientId = agent.getAttribute(childElems[i], AdfDhtmlPanelTabbedPeer._EXPANDO_ROWKEY_ATTRIBUTE);
        var childComponent = AdfPage.PAGE.findComponent(clientId);
        if(childComponent) {
          children.push(childComponent)
        }
      }
    }
  }
  return children
};
AdfDhtmlPanelTabbedPeer.prototype._getChildElements = function(containerId, childContainer) {
  var childElements = childContainer.childNodes;
  var children = [];
  var isManagedByConveyorBelt = AdfDhtmlPanelTabbedPeer._compressedLayoutMode == "conveyorBelt";
  var cbSpacerId = isManagedByConveyorBelt ? AdfRichUIPeer.CreateSubId(containerId, "cbs") : null;
  var childElementsLength = childElements.length;
  for(var i = 0;i < childElementsLength;i++) {
    var childElement = childElements[i];
    if(childElement.nodeType == 1) {
      if(isManagedByConveyorBelt) {
        var childId = childElement.getAttribute("id");
        if(childId == cbSpacerId) {
          continue
        }
      }
      children.push(childElement)
    }
  }
  return children
};
AdfDhtmlPanelTabbedPeer.prototype._getCurrencyFromDomElement = function(domElement, rootDomElement) {
  AdfAssert.assertDomElement(domElement);
  var currElement = domElement;
  var agent = AdfAgent.getAgent();
  if(currElement == null || currElement.nodeType != 1) {
    return null
  }
  var rowKey = agent.getAttribute(currElement, AdfDhtmlPanelTabbedPeer._EXPANDO_ROWKEY_ATTRIBUTE);
  while(rowKey == null) {
    if(currElement == null || currElement == rootDomElement) {
      return null
    }
    currElement = currElement.parentNode;
    if(currElement == null || currElement.nodeType != 1) {
      return null
    }
    rowKey = agent.getAttribute(currElement, AdfDhtmlPanelTabbedPeer._EXPANDO_ROWKEY_ATTRIBUTE)
  }
  return rowKey
};
AdfDhtmlPanelTabbedPeer.prototype.GetOldDisclosedChild = function(component) {
  var agent = AdfAgent.getAgent();
  var disclosedId = null;
  if(this._vertDiv) {
    disclosedId = agent.getAttribute(this._vertDiv, AdfDhtmlPanelTabbedPeer._EXPANDO_DISCLOSED_TAB_ID)
  }else {
    disclosedId = agent.getAttribute(this._headerDiv, AdfDhtmlPanelTabbedPeer._EXPANDO_DISCLOSED_TAB_ID);
    if(disclosedId == null) {
      disclosedId = agent.getAttribute(this._footerDiv, AdfDhtmlPanelTabbedPeer._EXPANDO_DISCLOSED_TAB_ID)
    }
  }
  return AdfPage.PAGE.findComponent(disclosedId)
};
AdfDhtmlPanelTabbedPeer.prototype._setOldDisclosedChild = function(component, newDisclosedId) {
  var agent = AdfAgent.getAgent();
  if(this._vertDiv) {
    agent.setAttribute(this._vertDiv, AdfDhtmlPanelTabbedPeer._EXPANDO_DISCLOSED_TAB_ID, newDisclosedId)
  }else {
    var disclosedId = agent.getAttribute(this._headerDiv, AdfDhtmlPanelTabbedPeer._EXPANDO_DISCLOSED_TAB_ID);
    if(disclosedId == null) {
      agent.setAttribute(this._footerDiv, AdfDhtmlPanelTabbedPeer._EXPANDO_DISCLOSED_TAB_ID, newDisclosedId)
    }else {
      agent.setAttribute(this._headerDiv, AdfDhtmlPanelTabbedPeer._EXPANDO_DISCLOSED_TAB_ID, newDisclosedId)
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype._canRemove = function(childId) {
  var tabItem = AdfPage.PAGE.findComponent(childId);
  var disabled = tabItem.getDisabled();
  if(disabled) {
    return false
  }
  if(tabItem.getRemove) {
    var itemRemoveType = tabItem.getRemove();
    if(itemRemoveType && (itemRemoveType == "no" || itemRemoveType == "disabled")) {
      return false
    }
  }
  var component = this.getComponent();
  var tabRemovalType = component.getTabRemoval();
  if(tabRemovalType == "none") {
    return false
  }
  if(tabRemovalType == "all") {
    return true
  }
  if(tabRemovalType == "allExceptLast") {
    var numChildren = this._getChildren().length;
    return numChildren > 1
  }else {
    AdfLogger.LOGGER.warning("Unexpected panelTabbed tabRemoval type: " + tabRemovalType);
    return false
  }
};
AdfDhtmlPanelTabbedPeer.prototype._isOnRemoveButton = function(childId, target) {
  var removeTopId = AdfRichUIPeer.createSubId(childId, AdfDhtmlPanelTabbedPeer._REMOVE_ICON_ABOVE_ID);
  var removeBottomId = AdfRichUIPeer.createSubId(childId, AdfDhtmlPanelTabbedPeer._REMOVE_ICON_BELOW_ID);
  if(target.id && target.id.lastIndexOf(removeTopId) > -1 || target.id.lastIndexOf(removeBottomId) > -1) {
    return true
  }
  var parentNode = target.parentNode;
  var parentId = parentNode && parentNode.id;
  return parentId && (parentId.lastIndexOf(removeTopId) > -1 || parentId.lastIndexOf(removeBottomId) > -1)
};
AdfDhtmlPanelTabbedPeer.prototype._isOnTabTextToggleButton = function(target) {
  if(target.id && target.id == this._toggleTextIconId) {
    return true
  }
  var parentNode = target.parentNode;
  var parentId = parentNode && parentNode.id;
  return parentId && parentId.id == this._toggleTextIconId
};
AdfDhtmlPanelTabbedPeer.prototype.toggleTabText = function() {
  var comp = this.getComponent();
  var mode = comp.getProperty("verticalTabMode");
  if(mode == "iconOnly") {
    comp.setProperty("verticalTabMode", "iconAndText")
  }else {
    comp.setProperty("verticalTabMode", "iconOnly")
  }
};
AdfDhtmlPanelTabbedPeer.prototype._resizeVerticalConveyor = function(cbButtonContainerId, children, newSize) {
  if(!this._verticalConveyorBeltSupport && this.IsVerticalConveyorSupported()) {
    var component = this.getComponent();
    var cbContainerId = AdfRichUIPeer.CreateSubId(component.getClientId(), AdfDhtmlPanelTabbedPeer._TAB_VERTICAL_CONTAINER);
    this._verticalConveyorBeltSupport = AdfConveyorBeltSupport.createVerticalSupport(cbContainerId, cbButtonContainerId, this);
    var conveyorBeltFirstItem = AdfDhtmlPanelTabbedPeer._conveyorBeltFirstItem;
    if(conveyorBeltFirstItem) {
      this._verticalConveyorBeltSupport.setFirstItemDisplayed(conveyorBeltFirstItem);
      AdfDhtmlPanelTabbedPeer._conveyorBeltFirstItem = null
    }
  }
  if(this._verticalConveyorBeltSupport) {
    this._verticalConveyorBeltSupport.handleResize()
  }
};
AdfDhtmlPanelTabbedPeer.prototype._resizeOverflow = function(containerId, children, newSize, above) {
  var compressedLayoutMode = AdfDhtmlPanelTabbedPeer._compressedLayoutMode;
  if(compressedLayoutMode == "overflow") {
    if(above) {
      if(!this._headerOverflowSupport) {
        this._headerOverflowSupport = this._getOverflowSupport(containerId, children, "after")
      }
      if(this._headerOverflowSupport) {
        this._headerOverflowSupport.handleResize()
      }
    }else {
      if(!this._footerOverflowSupport) {
        this._footerOverflowSupport = this._getOverflowSupport(containerId, children, "before")
      }
      if(this._footerOverflowSupport) {
        this._footerOverflowSupport.handleResize()
      }
    }
  }else {
    if(compressedLayoutMode == "overflow-droplist") {
      if(above) {
        if(!this._headerOverflowSupport) {
          this._headerOverflowSupport = this._getOverflowDroplistSupport(containerId, children, "after")
        }
        if(this._headerOverflowSupport) {
          this._headerOverflowSupport.handleResize()
        }
      }else {
        if(!this._footerOverflowSupport) {
          this._footerOverflowSupport = this._getOverflowDroplistSupport(containerId, children, "before")
        }
        if(this._footerOverflowSupport) {
          this._footerOverflowSupport.handleResize()
        }
      }
    }else {
      if(compressedLayoutMode == "conveyorBelt") {
        if(above) {
          if(!this._headerConveyorBeltSupport) {
            this._headerConveyorBeltSupport = this._createHorizontalConveyorBeltSupport(containerId, children, newSize);
            if(this._footerConveyorBeltSupport) {
              this._footerConveyorBeltSupport.registerAdditionalConveyorBeltSupport(this._headerConveyorBeltSupport);
              this._headerConveyorBeltSupport.registerAdditionalConveyorBeltSupport(this._footerConveyorBeltSupport)
            }
          }
          if(this._headerConveyorBeltSupport) {
            this._headerConveyorBeltSupport.handleResize()
          }
        }else {
          if(!this._footerConveyorBeltSupport) {
            this._footerConveyorBeltSupport = this._createHorizontalConveyorBeltSupport(containerId, children, newSize);
            if(this._headerConveyorBeltSupport) {
              this._footerConveyorBeltSupport.registerAdditionalConveyorBeltSupport(this._headerConveyorBeltSupport);
              this._headerConveyorBeltSupport.registerAdditionalConveyorBeltSupport(this._footerConveyorBeltSupport)
            }
          }
          if(this._footerConveyorBeltSupport) {
            this._footerConveyorBeltSupport.handleResize()
          }
        }
      }
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype._hideOverflow = function() {
  var compressedLayoutMode = AdfDhtmlPanelTabbedPeer._compressedLayoutMode;
  var component = this.getComponent();
  if(this._isVertical(component)) {
    if(this._verticalConveyorBeltSupport) {
      this._verticalConveyorBeltSupport.handleResize()
    }
  }
  if(compressedLayoutMode == "conveyorBelt") {
    if(this._headerConveyorBeltSupport) {
      this._headerConveyorBeltSupport.handleResize()
    }
    if(this._footerConveyorBeltSupport) {
      this._footerConveyorBeltSupport.handleResize()
    }
  }else {
    if(this._headerOverflowSupport) {
      this._headerOverflowSupport.removeAllItemsFromOverflow()
    }
    if(this._footerOverflowSupport) {
      this._footerOverflowSupport.removeAllItemsFromOverflow()
    }
  }
};
AdfDhtmlPanelTabbedPeer.prototype._removeCompressedLayoutSupport = function() {
  if(this._headerOverflowSupport) {
    this._headerOverflowSupport.removeOverflowSupport();
    this._headerOverflowSupport = null
  }
  if(this._footerOverflowSupport) {
    this._footerOverflowSupport.removeOverflowSupport();
    this._footerOverflowSupport = null
  }
  if(this._headerConveyorBeltSupport) {
    this._headerConveyorBeltSupport.removeConveyorBeltSupport();
    this._headerConveyorBeltSupport = null
  }
  if(this._footerConveyorBeltSupport) {
    this._footerConveyorBeltSupport.removeConveyorBeltSupport();
    this._footerConveyorBeltSupport = null
  }
  if(this._verticalConveyorBeltSupport) {
    this._verticalConveyorBeltSupport.removeConveyorBeltSupport();
    this._verticalConveyorBeltSupport = null
  }
};
AdfDhtmlPanelTabbedPeer.prototype.getContainerId = function(aligningElement) {
  return AdfRichUIPeer.createSubId(this.getComponent().getClientId(), AdfDhtmlPanelTabbedPeer._TAB_BODY_INNER)
};
AdfDhtmlPanelTabbedPeer.prototype._isVertical = function(component) {
  var position = this._getRenderingPosition(component);
  return position == "start" || position == "end" || position == "left" || position == "right"
};
AdfDhtmlPanelTabbedPeer.prototype._isHorizontal = function(component) {
  return!this._isVertical(component)
};

function AdfConveyorBeltSupport(conveyorBeltId, peer) {
  this.Init(conveyorBeltId, peer)
}
AdfObject.createSubclass(AdfConveyorBeltSupport);
AdfConveyorBeltSupport.InitClass = function() {
  AdfConveyorBeltSupport.CONVEYOR_BELT_STYLE_CLASS = "p_AFConveyorBelt";
  AdfConveyorBeltSupport.DEPRESSED_STYLE_CLASS = "p_AFDepressed";
  AdfConveyorBeltSupport.SELECTED_STYLE_CLASS = "p_AFSelected";
  AdfConveyorBeltSupport.DROPLIST_ID = "_afrCbDl"
};
AdfConveyorBeltSupport.prototype.Init = function(conveyorBeltId, peer) {
  AdfConveyorBeltSupport.superclass.Init.call(this);
  this._peer = peer;
  this._container = AdfAgent.AGENT.getElementById(conveyorBeltId)
};
AdfConveyorBeltSupport.createHorizontalSupport = function(conveyorBeltId, peer) {
  return new AdfConveyorBeltHorizontal(conveyorBeltId, peer)
};
AdfConveyorBeltSupport.createVerticalSupport = function(conveyorBeltId, buttonContainerId, peer) {
  return new AdfConveyorBeltVertical(conveyorBeltId, buttonContainerId, peer)
};
AdfConveyorBeltSupport.prototype.removeConveyorBeltSupport = function() {
  delete this._peer;
  delete this._container
};
AdfConveyorBeltSupport.prototype.registerAdditionalConveyorBeltSupport = function(otherCBSupport) {
  AdfAssert.failedInAbstractFunction()
};
AdfConveyorBeltSupport.prototype.handleResize = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfConveyorBeltSupport.prototype.addDropListElements = function(elementArray) {
  AdfAssert.failedInAbstractFunction()
};
AdfConveyorBeltSupport.prototype.scrollNewSelectedItemIntoView = function(newSelectedItemIndex) {
  AdfAssert.failedInAbstractFunction()
};
AdfConveyorBeltSupport.prototype.getFirstItemDisplayed = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfConveyorBeltSupport.prototype.setFirstItemDisplayed = function(firstItemDisplayed) {
  AdfAssert.failedInAbstractFunction()
};
AdfConveyorBeltSupport.prototype.handleFocusChange = function() {
  AdfAssert.failedInAbstractFunction()
};
AdfConveyorBeltSupport.prototype.GetPeer = function() {
  return this._peer
};
AdfConveyorBeltSupport.prototype.GetContainer = function() {
  return this._container
};

function AdfConveyorBeltVertical(conveyorBeltId, buttonContainerId, peer) {
  this.Init(conveyorBeltId, buttonContainerId, peer)
}
AdfObject.createSubclass(AdfConveyorBeltVertical, AdfConveyorBeltSupport);
AdfConveyorBeltVertical.prototype.Init = function(conveyorBeltId, buttonContainerId, peer) {
  AdfConveyorBeltVertical.superclass.Init.call(this, conveyorBeltId, peer);
  var tcbiId = AdfRichUIPeer.CreateSubId(buttonContainerId, "tcbi");
  this._topIndicator = AdfAgent.AGENT.getElementById(tcbiId);
  this._initTopButtonEventHandling();
  var bcbiId = AdfRichUIPeer.CreateSubId(buttonContainerId, "bcbi");
  this._bottomIndicator = AdfAgent.AGENT.getElementById(bcbiId);
  this._initBottomButtonEventHandling();
  var cbcId = AdfRichUIPeer.CreateSubId(buttonContainerId, "cbc");
  this._contentContainer = AdfAgent.AGENT.getElementById(cbcId);
  var unfilteredChildren = AdfDomUtils.getChildElements(this._contentContainer);
  var children = [];
  for(var x = 0;x < unfilteredChildren.length;x++) {
    var child = unfilteredChildren[x];
    if(child.nodeType == 1) {
      if(child.style.display != "none") {
        children.push(child)
      }
    }
  }
  this._itemOffsetTopArray = [];
  for(var y = 0;y < children.length;y++) {
    this._itemOffsetTopArray[y] = children[y].offsetTop;
    if(AdfDomUtils.containsCSSClassName(children[y], AdfConveyorBeltSupport.SELECTED_STYLE_CLASS)) {
      this._selectedItem = y
    }
  }
  var lastChild = children[children.length - 1];
  if(lastChild == null) {
    this._contentHeight = 0
  }else {
    this._contentHeight = lastChild.offsetTop + lastChild.offsetHeight
  }
  this._initialRender = true;
  this._firstItemDisplayed = 0;
  this._buttonHeight = this._getButtonHeight(buttonContainerId);
  this._toggleButtonHeight = 0;
  var toggleId = AdfRichUIPeer.CreateSubId(buttonContainerId, "toggle");
  var toggleButton = AdfAgent.AGENT.getElementById(toggleId);
  if(toggleButton) {
    this._toggleButtonHeight = toggleButton.offsetHeight
  }
  this._keepRollingUp = false;
  this._keepRollingDown = false
};
AdfConveyorBeltVertical.prototype.removeConveyorBeltSupport = function() {
  AdfConveyorBeltVertical.superclass.removeConveyorBeltSupport.call(this);
  var agent = AdfAgent.AGENT;
  var topIndicator = this._topIndicator;
  agent.removeBubbleEventListener(topIndicator, "mousedown", this._topButtonCall);
  agent.removeBubbleEventListener(topIndicator, "keydown", this._topButtonCall);
  agent.removeBubbleEventListener(topIndicator, "mouseup", this._topButtonMouseUpCall);
  agent.removeBubbleEventListener(topIndicator, "mouseout", this._topButtonMouseOutCall);
  var bottomIndicator = this._bottomIndicator;
  agent.removeBubbleEventListener(bottomIndicator, "mousedown", this._bottomButtonCall);
  agent.removeBubbleEventListener(bottomIndicator, "keydown", this._bottomButtonCall);
  agent.removeBubbleEventListener(bottomIndicator, "mouseup", this._bottomButtonMouseUpCall);
  agent.removeBubbleEventListener(bottomIndicator, "mouseout", this._bottomButtonMouseOutCall);
  delete this._topIndicator;
  delete this._bottomIndicator;
  delete this._contentContainer;
  delete this._itemOffsetTopArray;
  delete this._selectedItem;
  delete this._contentHeight;
  delete this._initialRender;
  delete this._firstItemDisplayed;
  delete this._buttonHeight;
  delete this._toggleButtonHeight;
  delete this._keepRollingUp;
  delete this._keepRollingDown
};
AdfConveyorBeltVertical.prototype.registerAdditionalConveyorBeltSupport = function(otherCBSupport) {
  AdfAssert.assert(1, "Method not supported for vertical conveyor belt.")
};
AdfConveyorBeltVertical.prototype.handleResize = function() {
  this._contentContainer.removeAttribute("style");
  var container = AdfConveyorBeltVertical.superclass.GetContainer.call(this);
  var containerHeight = AdfConveyorBeltVertical._getInnerHeight(container);
  var contentHeight = this._contentContainer.offsetHeight;
  if(contentHeight > containerHeight) {
    var newContentContainerHeight = containerHeight - this._buttonHeight - this._toggleButtonHeight;
    if(newContentContainerHeight < 0) {
      newContentContainerHeight = 0
    }
    var scrollTop = this._contentContainer.scrollTop;
    this._contentContainer.setAttribute("style", "height: " + newContentContainerHeight + "px;");
    if(!this._areConveyorBeltIconsDisplayed()) {
      this._setButtonDisplay(true);
      if(this._initialRender) {
        this._firstItemDisplayed = this._calculateFirstItemToDisplay()
      }
      this._rollConveyor(true)
    }else {
      AdfAgent.AGENT.scrollToPos(this._contentContainer, null, scrollTop)
    }
    this._setButtonState()
  }else {
    this._setButtonDisplay(false);
    AdfAgent.AGENT.scrollToPos(this._contentContainer, null, 0)
  }
  if(this._initialRender) {
    this._initialRender = false
  }
};
AdfConveyorBeltVertical.prototype.addDropListElements = function(elementArray) {
  AdfAssert.assert(1, "Method not supported for vertical conveyor belt.")
};
AdfConveyorBeltVertical.prototype.scrollNewSelectedItemIntoView = function(newSelectedItemIndex) {
  AdfAssert.assert(1, "Method not supported for vertical conveyor belt.")
};
AdfConveyorBeltVertical.prototype.getFirstItemDisplayed = function() {
  return this._firstItemDisplayed
};
AdfConveyorBeltVertical.prototype.setFirstItemDisplayed = function(firstItemDisplayed) {
  AdfAssert.assert(firstItemDisplayed && firstItemDisplayed >= 0 && firstItemDisplayed < this._itemOffsetTopArray.length, "Must set the first item displayed to a valid number within the child range!");
  this._firstItemDisplayed = firstItemDisplayed
};
AdfConveyorBeltVertical.prototype.handleFocusChange = function() {
  this._setButtonState()
};
AdfConveyorBeltVertical._getInnerHeight = function(element) {
  var cbStyle = AdfAgent.AGENT.getComputedStyle(element);
  var extraPadding = AdfAgent.getCSSLengthAsInt(cbStyle.paddingTop) + AdfAgent.getCSSLengthAsInt(cbStyle.paddingBottom);
  return element.offsetHeight - extraPadding
};
AdfConveyorBeltVertical.prototype._getButtonHeight = function(buttonContainerId) {
  var buttonContainer = AdfAgent.AGENT.getElementById(buttonContainerId);
  var style = this._contentContainer.getAttribute("style");
  AdfAssert.assert(style == null || style == "");
  var container = AdfConveyorBeltVertical.superclass.GetContainer.call(this);
  AdfAssert.assert(!AdfDomUtils.containsCSSClassName(container, AdfConveyorBeltSupport.CONVEYOR_BELT_STYLE_CLASS));
  var containerHeight = buttonContainer.offsetHeight;
  this._setButtonDisplay(true);
  var containerHeigthWithButtons = buttonContainer.offsetHeight;
  this._setButtonDisplay(false);
  return containerHeigthWithButtons - containerHeight
};
AdfConveyorBeltVertical.prototype._areConveyorBeltIconsDisplayed = function() {
  var container = AdfConveyorBeltVertical.superclass.GetContainer.call(this);
  return AdfDomUtils.containsCSSClassName(container, AdfConveyorBeltSupport.CONVEYOR_BELT_STYLE_CLASS)
};
AdfConveyorBeltVertical.prototype._setButtonDisplay = function(isVisible) {
  var container = AdfConveyorBeltVertical.superclass.GetContainer.call(this);
  if(!isVisible) {
    AdfDomUtils.removeCSSClassName(container, AdfConveyorBeltSupport.CONVEYOR_BELT_STYLE_CLASS);
    return
  }
  AdfDomUtils.addCSSClassName(container, AdfConveyorBeltSupport.CONVEYOR_BELT_STYLE_CLASS)
};
AdfConveyorBeltVertical.prototype._setButtonState = function() {
  if(this._doesContentRollUp()) {
    AdfDomUtils.removeCSSClassName(this._topIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
    this._topIndicator.removeAttribute("aria-disabled")
  }else {
    AdfDomUtils.addCSSClassName(this._topIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
    this._topIndicator.setAttribute("aria-disabled", "true")
  }
  if(this._doesContentRollDown()) {
    if(this._firstItemDisplayed + 1 < this._itemOffsetTopArray.length) {
      AdfDomUtils.removeCSSClassName(this._bottomIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
      this._bottomIndicator.removeAttribute("aria-disabled")
    }else {
      AdfDomUtils.addCSSClassName(this._bottomIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
      this._bottomIndicator.setAttribute("aria-disabled", "true")
    }
  }else {
    AdfDomUtils.addCSSClassName(this._bottomIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
    this._bottomIndicator.setAttribute("aria-disabled", "true")
  }
};
AdfConveyorBeltVertical.prototype._doesContentRollUp = function() {
  return this._contentContainer.scrollTop > 0
};
AdfConveyorBeltVertical.prototype._doesContentRollDown = function() {
  var contentNotScrolledUpHeight = this._contentHeight - this._contentContainer.scrollTop;
  var containerHeight = this._getContainerHeightMinusButtons();
  return contentNotScrolledUpHeight > containerHeight
};
AdfConveyorBeltVertical.prototype._getContainerHeightMinusButtons = function() {
  var container = AdfConveyorBeltVertical.superclass.GetContainer.call(this);
  var containerHeight = AdfConveyorBeltVertical._getInnerHeight(container);
  return containerHeight - this._buttonHeight - this._toggleButtonHeight
};
AdfConveyorBeltVertical.prototype._calculateFirstItemToDisplay = function() {
  if(this._selectedItem == undefined) {
    return this._firstItemDisplayed
  }
  if(this._selectedItem <= this._firstItemDisplayed) {
    return this._selectedItem
  }
  var selectedItemTop = this._itemOffsetTopArray[this._selectedItem];
  var childNode = AdfDomUtils.getChildElementByPosition(this._contentContainer, 1, this._selectedItem);
  var selectedItemBottom = selectedItemTop + childNode.offsetHeight;
  var containerHeight = this._getContainerHeightMinusButtons();
  if(selectedItemBottom - selectedItemTop > containerHeight) {
    return this._selectedItem
  }
  var scrollDown = containerHeight;
  for(var x = 1;x <= this._firstItemDisplayed;x++) {
    var itemHeightX = this._itemOffsetTopArray[x] - this._itemOffsetTopArray[x - 1];
    scrollDown += itemHeightX
  }
  if(selectedItemBottom <= scrollDown) {
    return this._firstItemDisplayed
  }
  scrollDown = containerHeight;
  for(var y = 1;y < this._itemOffsetTopArray.length;y++) {
    var itemHeightY = this._itemOffsetTopArray[y] - this._itemOffsetTopArray[y - 1];
    scrollDown += itemHeightY;
    if(selectedItemBottom <= scrollDown) {
      return y
    }
  }
  AdfAssert.assert(true, "Code unreachable, all cases handled");
  return 0
};
AdfConveyorBeltVertical.prototype._rollConveyor = function(immediate) {
  var agent = AdfAgent.AGENT;
  var newScrollTop;
  newScrollTop = this._itemOffsetTopArray[this._firstItemDisplayed];
  if(immediate || !AdfPage.PAGE.isAnimationEnabled()) {
    agent.scrollToPos(this._contentContainer, null, newScrollTop);
    this._setButtonState()
  }else {
    this._animateRollConveyor(newScrollTop)
  }
};
AdfConveyorBeltVertical.prototype._animateRollConveyor = function(newScrollTop) {
  var animationItemArray = [{"element":this._contentContainer, "properties":{"scrollTop":newScrollTop}}];
  var oldScrollTop = this._contentContainer.scrollTop;
  var totalRoll = Math.abs(oldScrollTop - newScrollTop);
  var rollTimeMs = totalRoll * 2;
  AdfDhtmlElementAnimator.animate(AdfDhtmlElementAnimator.FRAME_METHOD_SLOW_FAST_SLOW, rollTimeMs, animationItemArray, null, AdfConveyorBeltVertical._animateRollConveyorComplete, this, null)
};
AdfConveyorBeltVertical._animateRollConveyorComplete = function(myInstance) {
  if(myInstance._keepRollingUp) {
    myInstance._rollUp()
  }else {
    if(myInstance._keepRollingDown) {
      myInstance._rollDown()
    }
  }
  myInstance._setButtonState()
};
AdfConveyorBeltVertical.prototype._rollUp = function() {
  if(!this._doesContentRollUp()) {
    this._stopRollingUp();
    return
  }
  this._firstItemDisplayed = this._firstItemDisplayed > 0 ? this._firstItemDisplayed - 1 : 0;
  this._rollConveyor()
};
AdfConveyorBeltVertical.prototype._rollDown = function() {
  if(!this._doesContentRollDown()) {
    this._stopRollingDown();
    return
  }
  this._firstItemDisplayed = this._firstItemDisplayed + 1 >= this._itemOffsetTopArray.length ? this._itemOffsetTopArray.length - 1 : this._firstItemDisplayed + 1;
  this._rollConveyor()
};
AdfConveyorBeltVertical.prototype._stopRollingUp = function() {
  this._keepRollingUp = false;
  if(this._rollUpTimer) {
    clearInterval(this._rollUpTimer)
  }
  this._rollUpTimer = null
};
AdfConveyorBeltVertical.prototype._stopRollingDown = function() {
  this._keepRollingDown = false;
  if(this._rollDownTimer) {
    clearInterval(this._rollDownTimer)
  }
  this._rollDownTimer = null
};
AdfConveyorBeltVertical.prototype._initTopButtonEventHandling = function() {
  var agent = AdfAgent.AGENT;
  var topIndicator = this._topIndicator;
  this._topButtonCall = this.createCallback(this._topConveyorBeltButtonPressed);
  agent.addBubbleEventListener(topIndicator, "mousedown", this._topButtonCall);
  this._topButtonMouseUpCall = this.createCallback(this._topConveyorBeltButtonMouseUp);
  agent.addBubbleEventListener(topIndicator, "mouseup", this._topButtonMouseUpCall);
  this._topButtonMouseOutCall = this.createCallback(this._topConveyorBeltButtonMouseOut);
  agent.addBubbleEventListener(topIndicator, "mouseout", this._topButtonMouseOutCall)
};
AdfConveyorBeltVertical.prototype._initBottomButtonEventHandling = function() {
  var agent = AdfAgent.AGENT;
  var bottomIndicator = this._bottomIndicator;
  this._bottomButtonCall = this.createCallback(this._bottomConveyorBeltButtonPressed);
  var bottomButtonCall = this._bottomButtonCall;
  agent.addBubbleEventListener(bottomIndicator, "mousedown", bottomButtonCall);
  this._bottomButtonMouseUpCall = this.createCallback(this._bottomConveyorBeltButtonMouseUp);
  agent.addBubbleEventListener(bottomIndicator, "mouseup", this._bottomButtonMouseUpCall);
  this._bottomButtonMouseOutCall = this.createCallback(this._bottomConveyorBeltButtonMouseOut);
  agent.addBubbleEventListener(bottomIndicator, "mouseout", this._bottomButtonMouseOutCall)
};
AdfConveyorBeltVertical.prototype._topConveyorBeltButtonPressed = function(event) {
  var agent = AdfAgent.AGENT;
  var eventType = event.type;
  if(eventType == "mousedown" && event.button && event.button != AdfUIInputEvent.LEFT_BUTTON_FLAG) {
    agent.eatEvent(event);
    return
  }
  var targetElement = agent.getEventTarget(event);
  if(AdfDomUtils.containsCSSClassName(targetElement, AdfRichUIPeer.DISABLED_STYLECLASS)) {
    agent.eatEvent(event);
    return
  }
  if(eventType == "mousedown") {
    this._setDepressedStyle(targetElement, true)
  }
  this._keepRollingUp = true;
  this._rollUp();
  if(!AdfPage.PAGE.isAnimationEnabled()) {
    var rollUpCallback = this.createCallback(this._rollUp);
    this._rollUpTimer = setInterval(rollUpCallback, 200)
  }
  agent.eatEvent(event)
};
AdfConveyorBeltVertical.prototype._topConveyorBeltButtonMouseUp = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false);
  this._stopRollingUp()
};
AdfConveyorBeltVertical.prototype._topConveyorBeltButtonMouseOut = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false);
  this._stopRollingUp()
};
AdfConveyorBeltVertical.prototype._bottomConveyorBeltButtonPressed = function(event) {
  var agent = AdfAgent.AGENT;
  var eventType = event.type;
  if(eventType == "mousedown" && event.button && event.button != AdfUIInputEvent.LEFT_BUTTON_FLAG) {
    agent.eatEvent(event);
    return
  }
  var targetElement = agent.getEventTarget(event);
  if(AdfDomUtils.containsCSSClassName(targetElement, AdfRichUIPeer.DISABLED_STYLECLASS)) {
    agent.eatEvent(event);
    return
  }
  if(eventType == "mousedown") {
    this._setDepressedStyle(targetElement, true)
  }
  this._keepRollingDown = true;
  this._rollDown();
  if(!AdfPage.PAGE.isAnimationEnabled()) {
    var rollDownCallback = this.createCallback(this._rollDown);
    this._rollDownTimer = setInterval(rollDownCallback, 200)
  }
  agent.eatEvent(event)
};
AdfConveyorBeltVertical.prototype._bottomConveyorBeltButtonMouseUp = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false);
  this._stopRollingDown()
};
AdfConveyorBeltVertical.prototype._bottomConveyorBeltButtonMouseOut = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false);
  this._stopRollingDown()
};
AdfConveyorBeltVertical.prototype._setDepressedStyle = function(targetElement, depressed) {
  var className = AdfConveyorBeltSupport.DEPRESSED_STYLE_CLASS;
  if(depressed) {
    AdfDomUtils.addCSSClassName(targetElement, className)
  }else {
    AdfDomUtils.removeCSSClassName(targetElement, className)
  }
};

function AdfConveyorBeltHorizontal(conveyorBeltId, peer) {
  this.Init(conveyorBeltId, peer)
}
AdfObject.createSubclass(AdfConveyorBeltHorizontal, AdfConveyorBeltSupport);
AdfConveyorBeltHorizontal.prototype.Init = function(conveyorBeltId, peer) {
  AdfConveyorBeltHorizontal.superclass.Init.call(this, conveyorBeltId, peer);
  var scbiId = AdfRichUIPeer.CreateSubId(conveyorBeltId, "scbi");
  this._startIndicator = AdfAgent.AGENT.getElementById(scbiId);
  this._initStartButtonEventHandling();
  var ecbiId = AdfRichUIPeer.CreateSubId(conveyorBeltId, "ecbi");
  this._endIndicator = AdfAgent.AGENT.getElementById(ecbiId);
  this._initEndButtonEventHandling();
  var cbcId = AdfRichUIPeer.CreateSubId(conveyorBeltId, "cbc");
  this._contentContainer = AdfAgent.AGENT.getElementById(cbcId);
  var unfilteredChildren = AdfDomUtils.getChildElements(this._contentContainer);
  var children = [];
  var cbSpacerId = AdfRichUIPeer.CreateSubId(conveyorBeltId, "cbs");
  for(var x = 0;x < unfilteredChildren.length;x++) {
    var child = unfilteredChildren[x];
    if(child.nodeType == 1) {
      var childId = child.getAttribute("id");
      if(childId == cbSpacerId) {
        continue
      }
      if(child.style.display != "none") {
        children.push(child)
      }
    }
  }
  var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
  var contentContainerWidth = this._contentContainer.offsetWidth + this._contentContainer.offsetLeft;
  this._itemOffsetLeftArray = [];
  for(var y = 0;y < children.length;y++) {
    if(isRTL) {
      var itemOffsetRight = children[y].offsetLeft + children[y].offsetWidth;
      this._itemOffsetLeftArray[y] = contentContainerWidth - itemOffsetRight
    }else {
      this._itemOffsetLeftArray[y] = children[y].offsetLeft
    }
    if(AdfDomUtils.containsCSSClassName(children[y], AdfConveyorBeltSupport.SELECTED_STYLE_CLASS)) {
      this._selectedItem = y
    }
  }
  var lastChild = children[children.length - 1];
  if(lastChild == null) {
    this._contentWidth = 0
  }else {
    if(isRTL) {
      this._contentWidth = contentContainerWidth - lastChild.offsetLeft
    }else {
      this._contentWidth = lastChild.offsetLeft + lastChild.offsetWidth
    }
  }
  this._initialRender = true;
  this._firstItemDisplayed = 0;
  var dliId = AdfRichUIPeer.CreateSubId(conveyorBeltId, "cbdli");
  this._droplistIndicator = AdfAgent.AGENT.getElementById(dliId);
  var dlcId = AdfRichUIPeer.CreateSubId(conveyorBeltId, "dlc");
  this._droplistContainer = AdfAgent.AGENT.getElementById(dlcId);
  this._initDroplistButtonEventHandling();
  this._conveyorBeltButtonWidth = this._getConveyorBeltButtonWidth();
  this._keepRollingLeft = false;
  this._keepRollingRight = false
};
AdfConveyorBeltHorizontal.prototype.removeConveyorBeltSupport = function() {
  AdfConveyorBeltHorizontal.superclass.removeConveyorBeltSupport.call(this);
  var agent = AdfAgent.AGENT;
  var startIndicator = this._startIndicator;
  agent.removeBubbleEventListener(startIndicator, "mousedown", this._startButtonCall);
  agent.removeBubbleEventListener(startIndicator, "keydown", this._startButtonCall);
  agent.removeBubbleEventListener(startIndicator, "mouseup", this._startButtonMouseUpCall);
  agent.removeBubbleEventListener(startIndicator, "mouseout", this._startButtonMouseOutCall);
  var endIndicator = this._endIndicator;
  agent.removeBubbleEventListener(endIndicator, "mousedown", this._endButtonCall);
  agent.removeBubbleEventListener(endIndicator, "keydown", this._endButtonCall);
  agent.removeBubbleEventListener(endIndicator, "mouseup", this._endButtonMouseUpCall);
  agent.removeBubbleEventListener(endIndicator, "mouseout", this._endButtonMouseOutCall);
  var droplistIndicator = this._droplistIndicator;
  agent.removeBubbleEventListener(droplistIndicator, "mousedown", this._droplistShowCall);
  agent.removeBubbleEventListener(droplistIndicator, "keydown", this._droplistShowCall);
  agent.removeBubbleEventListener(droplistIndicator, "mouseup", this._droplistButtonMouseUpCall);
  agent.removeBubbleEventListener(droplistIndicator, "mouseout", this._droplistButtonMouseOutCall);
  delete this._startIndicator;
  delete this._endIndicator;
  delete this._contentContainer;
  delete this._itemOffsetLeftArray;
  delete this._selectedItem;
  delete this._contentWidth;
  delete this._initialRender;
  delete this._firstItemDisplayed;
  delete this._droplistIndicator;
  delete this._droplistContainer;
  delete this._otherCBSupport;
  delete this._hideDroplistContainerCallback;
  delete this._droplistHints;
  delete this._conveyorBeltButtonWidth;
  delete this._keepRollingLeft;
  delete this._keepRollingRight
};
AdfConveyorBeltHorizontal.prototype.registerAdditionalConveyorBeltSupport = function(otherCBSupport) {
  this._otherCBSupport = otherCBSupport
};
AdfConveyorBeltHorizontal.prototype.handleResize = function() {
  var conveyorBeltNeeded = this._isConveyorBeltNeeded();
  var conveyorBeltIconsDisplayed = this._areConveyorBeltIconsDisplayed();
  if(conveyorBeltNeeded) {
    if(!conveyorBeltIconsDisplayed) {
      this._setButtonDisplay(true);
      if(this._initialRender) {
        this._firstItemDisplayed = this._calculateFirstItemToDisplay()
      }
      this._rollConveyor(true)
    }
    this._setButtonState()
  }else {
    this._setButtonDisplay(false);
    AdfAgent.AGENT.scrollToPos(this._contentContainer, 0)
  }
  if(this._initialRender) {
    this._initialRender = false
  }
};
AdfConveyorBeltHorizontal.prototype.addDropListElements = function(elementArray) {
  var droplistContainer = this._droplistContainer;
  for(var i = 0;i < elementArray.length;i++) {
    var child = elementArray[i];
    droplistContainer.appendChild(child)
  }
};
AdfConveyorBeltHorizontal.prototype.scrollNewSelectedItemIntoView = function(newSelectedItemIndex) {
  AdfAssert.assert(newSelectedItemIndex >= 0 && newSelectedItemIndex < this._itemOffsetLeftArray.length, "New selected item should be within known valid range of conveyor belt support");
  this._selectedItem = newSelectedItemIndex;
  this._firstItemDisplayed = this._calculateFirstItemToDisplay();
  this._rollConveyor(true)
};
AdfConveyorBeltHorizontal.prototype.getFirstItemDisplayed = function() {
  return this._firstItemDisplayed
};
AdfConveyorBeltHorizontal.prototype.setFirstItemDisplayed = function(firstItemDisplayed) {
  AdfAssert.assert(firstItemDisplayed && firstItemDisplayed >= 0 && firstItemDisplayed < this._itemOffsetLeftArray.length, "Must set the first item displayed to a valid number within the child range!");
  this._firstItemDisplayed = firstItemDisplayed
};
AdfConveyorBeltHorizontal.prototype.handleFocusChange = function() {
  this._setButtonState()
};
AdfConveyorBeltHorizontal._getInnerWidth = function(element) {
  var cbStyle = AdfAgent.AGENT.getComputedStyle(element);
  var extraPadding = AdfAgent.getCSSLengthAsInt(cbStyle.paddingLeft) + AdfAgent.getCSSLengthAsInt(cbStyle.paddingRight);
  return element.offsetWidth - extraPadding
};
AdfConveyorBeltHorizontal.prototype._getConveyorBeltButtonWidth = function() {
  var container = AdfConveyorBeltHorizontal.superclass.GetContainer.call(this);
  var buttonsCurrentlyDisplayed = this._areConveyorBeltIconsDisplayed();
  if(buttonsCurrentlyDisplayed) {
    this._setButtonDisplay(false)
  }
  var containerWidth = AdfConveyorBeltHorizontal._getInnerWidth(container);
  this._setButtonDisplay(true);
  var containerWidthWithButtons = AdfConveyorBeltHorizontal._getInnerWidth(container);
  if(!buttonsCurrentlyDisplayed) {
    this._setButtonDisplay(false)
  }
  return containerWidth - containerWidthWithButtons
};
AdfConveyorBeltHorizontal.prototype._isConveyorBeltNeeded = function() {
  var container = AdfConveyorBeltHorizontal.superclass.GetContainer.call(this);
  var containerWidth = AdfConveyorBeltHorizontal._getInnerWidth(container);
  if(this._areConveyorBeltIconsDisplayed()) {
    containerWidth += this._conveyorBeltButtonWidth
  }
  return this._contentWidth >= containerWidth
};
AdfConveyorBeltHorizontal.prototype._areConveyorBeltIconsDisplayed = function() {
  var container = AdfConveyorBeltHorizontal.superclass.GetContainer.call(this);
  return AdfDomUtils.containsCSSClassName(container, AdfConveyorBeltSupport.CONVEYOR_BELT_STYLE_CLASS)
};
AdfConveyorBeltHorizontal.prototype._setButtonDisplay = function(isVisible) {
  var container = AdfConveyorBeltHorizontal.superclass.GetContainer.call(this);
  if(!isVisible) {
    AdfDomUtils.removeCSSClassName(container, AdfConveyorBeltSupport.CONVEYOR_BELT_STYLE_CLASS);
    return
  }
  AdfDomUtils.addCSSClassName(container, AdfConveyorBeltSupport.CONVEYOR_BELT_STYLE_CLASS)
};
AdfConveyorBeltHorizontal.prototype._setButtonState = function() {
  if(this._doesContentRollLeft()) {
    AdfDomUtils.removeCSSClassName(this._startIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
    this._startIndicator.removeAttribute("aria-disabled")
  }else {
    AdfDomUtils.addCSSClassName(this._startIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
    this._startIndicator.setAttribute("aria-disabled", "true")
  }
  if(this._doesContentRollRight()) {
    if(this._firstItemDisplayed + 1 < this._itemOffsetLeftArray.length) {
      AdfDomUtils.removeCSSClassName(this._endIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
      this._endIndicator.removeAttribute("aria-disabled")
    }else {
      AdfDomUtils.addCSSClassName(this._endIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
      this._endIndicator.setAttribute("aria-disabled", "true")
    }
  }else {
    AdfDomUtils.addCSSClassName(this._endIndicator, AdfRichUIPeer.DISABLED_STYLECLASS);
    this._endIndicator.setAttribute("aria-disabled", "true")
  }
};
AdfConveyorBeltHorizontal.prototype._doesContentRollLeft = function() {
  var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
  var agent = AdfAgent.AGENT;
  var allowance = 10;
  if(isRTL && agent.getPlatform() != AdfAgent.IE_PLATFORM) {
    if(agent.getPlatform() == AdfAgent.GECKO_PLATFORM) {
      return this._contentContainer && this._contentContainer.scrollLeft < 0
    }else {
      var contentNotScrolledLeftWidth = this._contentWidth - this._contentContainer.scrollLeft;
      var container = AdfConveyorBeltHorizontal.superclass.GetContainer.call(this);
      var containerWidth = AdfConveyorBeltHorizontal._getInnerWidth(container);
      return contentNotScrolledLeftWidth > containerWidth + allowance
    }
  }else {
    return this._contentContainer && this._contentContainer.scrollLeft > 0
  }
};
AdfConveyorBeltHorizontal.prototype._doesContentRollRight = function() {
  var allowance = 10;
  var agent = AdfAgent.AGENT;
  var contentNotScrolledLeftWidth;
  var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
  if(isRTL && agent.getPlatform() != AdfAgent.IE_PLATFORM) {
    if(agent.getPlatform() == AdfAgent.GECKO_PLATFORM) {
      contentNotScrolledLeftWidth = this._contentWidth + this._contentContainer.scrollLeft
    }else {
      return this._contentContainer && this._contentContainer.scrollLeft > 0
    }
  }else {
    contentNotScrolledLeftWidth = this._contentWidth - this._contentContainer.scrollLeft
  }
  var container = AdfConveyorBeltHorizontal.superclass.GetContainer.call(this);
  var containerWidth = AdfConveyorBeltHorizontal._getInnerWidth(container);
  return contentNotScrolledLeftWidth > containerWidth + allowance
};
AdfConveyorBeltHorizontal.prototype._calculateFirstItemToDisplay = function() {
  if(this._selectedItem == undefined) {
    return this._firstItemDisplayed
  }
  if(this._selectedItem <= this._firstItemDisplayed) {
    return this._selectedItem
  }
  var selectedItemLeft = this._itemOffsetLeftArray[this._selectedItem];
  var childNode = AdfDomUtils.getChildElementByPosition(this._contentContainer, 1, this._selectedItem);
  var selectedItemRight = selectedItemLeft + childNode.offsetWidth;
  var container = AdfConveyorBeltHorizontal.superclass.GetContainer.call(this);
  var containerWidth = AdfConveyorBeltHorizontal._getInnerWidth(container);
  var scrollRight = containerWidth;
  if(selectedItemRight - selectedItemLeft > scrollRight) {
    return this._selectedItem
  }
  for(var x = 1;x <= this._firstItemDisplayed;x++) {
    var itemWidthX = this._itemOffsetLeftArray[x] - this._itemOffsetLeftArray[x - 1];
    scrollRight += itemWidthX
  }
  if(selectedItemRight <= scrollRight) {
    return this._firstItemDisplayed
  }
  scrollRight = containerWidth;
  for(var y = 1;y < this._itemOffsetLeftArray.length;y++) {
    var itemWidthY = this._itemOffsetLeftArray[y] - this._itemOffsetLeftArray[y - 1];
    scrollRight += itemWidthY;
    if(selectedItemRight <= scrollRight) {
      return y
    }
  }
  AdfAssert.assert(true, "Code unreachable, all cases handled");
  return 0
};
AdfConveyorBeltHorizontal.prototype._rollConveyor = function(immediate) {
  var isRTL = AdfPage.PAGE.getLocaleContext().isRightToLeft();
  var agent = AdfAgent.AGENT;
  var newScrollLeft;
  if(isRTL && agent.getPlatform() != AdfAgent.IE_PLATFORM) {
    if(agent.getPlatform() == AdfAgent.GECKO_PLATFORM) {
      newScrollLeft = -this._itemOffsetLeftArray[this._firstItemDisplayed]
    }else {
      newScrollLeft = this._contentContainer.scrollWidth - this._contentContainer.offsetWidth - this._itemOffsetLeftArray[this._firstItemDisplayed]
    }
  }else {
    newScrollLeft = this._itemOffsetLeftArray[this._firstItemDisplayed]
  }
  if(immediate || !AdfPage.PAGE.isAnimationEnabled()) {
    agent.scrollToPos(this._contentContainer, newScrollLeft);
    this._setButtonState()
  }else {
    this._animateRollConveyor(newScrollLeft)
  }
};
AdfConveyorBeltHorizontal.prototype._animateRollConveyor = function(newScrollLeft) {
  var animationItemArray = [{"element":this._contentContainer, "properties":{"scrollLeft":newScrollLeft}}];
  var oldScrollLeft = this._contentContainer.scrollLeft;
  var totalRoll = Math.abs(oldScrollLeft - newScrollLeft);
  var rollTimeMs = totalRoll * 2;
  AdfDhtmlElementAnimator.animate(AdfDhtmlElementAnimator.FRAME_METHOD_SLOW_FAST_SLOW, rollTimeMs, animationItemArray, null, AdfConveyorBeltHorizontal._animateRollConveyorComplete, this, null)
};
AdfConveyorBeltHorizontal._animateRollConveyorComplete = function(myInstance) {
  if(myInstance._keepRollingLeft) {
    if(myInstance._otherCBSupport) {
      myInstance._rollMultipleLeft()
    }else {
      myInstance._rollLeft()
    }
  }else {
    if(myInstance._keepRollingRight) {
      if(myInstance._otherCBSupport) {
        myInstance._rollMultipleRight()
      }else {
        myInstance._rollRight()
      }
    }
  }
  myInstance._setButtonState()
};
AdfConveyorBeltHorizontal.prototype._rollLeft = function() {
  if(!this._doesContentRollLeft()) {
    this._stopRollingLeft();
    return
  }
  this._firstItemDisplayed = this._firstItemDisplayed > 0 ? this._firstItemDisplayed - 1 : 0;
  this._rollConveyor()
};
AdfConveyorBeltHorizontal.prototype._rollMultipleLeft = function() {
  AdfAssert.assert(this._otherCBSupport != null, "Method should only be called if there are multiple conveyors.");
  this._rollLeft();
  this._otherCBSupport._rollLeft()
};
AdfConveyorBeltHorizontal.prototype._rollRight = function() {
  if(!this._doesContentRollRight()) {
    this._stopRollingRight();
    return
  }
  this._firstItemDisplayed = this._firstItemDisplayed + 1 >= this._itemOffsetLeftArray.length ? this._itemOffsetLeftArray.length - 1 : this._firstItemDisplayed + 1;
  this._rollConveyor()
};
AdfConveyorBeltHorizontal.prototype._rollMultipleRight = function() {
  AdfAssert.assert(this._otherCBSupport != null, "Method should only be called if there are multiple conveyors.");
  this._rollRight();
  this._otherCBSupport._rollRight()
};
AdfConveyorBeltHorizontal.prototype._stopRollingLeft = function() {
  this._keepRollingLeft = false;
  if(this._rollLeftTimer) {
    clearInterval(this._rollLeftTimer)
  }
  this._rollLeftTimer = null
};
AdfConveyorBeltHorizontal.prototype._stopRollingRight = function() {
  this._keepRollingRight = false;
  if(this._rollRightTimer) {
    clearInterval(this._rollRightTimer)
  }
  this._rollRightTimer = null
};
AdfConveyorBeltHorizontal.prototype._initStartButtonEventHandling = function() {
  var agent = AdfAgent.AGENT;
  var startIndicator = this._startIndicator;
  this._startButtonCall = this.createCallback(this._startConveyorBeltButtonPressed);
  agent.addBubbleEventListener(startIndicator, "mousedown", this._startButtonCall);
  this._startButtonMouseUpCall = this.createCallback(this._startConveyorBeltButtonMouseUp);
  agent.addBubbleEventListener(startIndicator, "mouseup", this._startButtonMouseUpCall);
  this._startButtonMouseOutCall = this.createCallback(this._startConveyorBeltButtonMouseOut);
  agent.addBubbleEventListener(startIndicator, "mouseout", this._startButtonMouseOutCall)
};
AdfConveyorBeltHorizontal.prototype._initEndButtonEventHandling = function() {
  var agent = AdfAgent.AGENT;
  var endIndicator = this._endIndicator;
  this._endButtonCall = this.createCallback(this._endConveyorBeltButtonPressed);
  var endButtonCall = this._endButtonCall;
  agent.addBubbleEventListener(endIndicator, "mousedown", endButtonCall);
  this._endButtonMouseUpCall = this.createCallback(this._endConveyorBeltButtonMouseUp);
  agent.addBubbleEventListener(endIndicator, "mouseup", this._endButtonMouseUpCall);
  this._endButtonMouseOutCall = this.createCallback(this._endConveyorBeltButtonMouseOut);
  agent.addBubbleEventListener(endIndicator, "mouseout", this._endButtonMouseOutCall)
};
AdfConveyorBeltHorizontal.prototype._startConveyorBeltButtonPressed = function(event) {
  var agent = AdfAgent.AGENT;
  var eventType = event.type;
  if(eventType == "mousedown" && event.button && event.button != AdfUIInputEvent.LEFT_BUTTON_FLAG) {
    agent.eatEvent(event);
    return
  }
  var targetElement = agent.getEventTarget(event);
  if(AdfDomUtils.containsCSSClassName(targetElement, AdfRichUIPeer.DISABLED_STYLECLASS)) {
    agent.eatEvent(event);
    return
  }
  if(eventType == "mousedown") {
    this._setDepressedStyle(targetElement, true)
  }
  this._keepRollingLeft = true;
  if(this._otherCBSupport) {
    this._rollMultipleLeft()
  }else {
    this._rollLeft()
  }
  if(!AdfPage.PAGE.isAnimationEnabled()) {
    var rollLeftCallback = this._otherCBSupport ? this.createCallback(this._rollMultipleLeft) : this.createCallback(this._rollLeft);
    this._rollLeftTimer = setInterval(rollLeftCallback, 200)
  }
  agent.eatEvent(event)
};
AdfConveyorBeltHorizontal.prototype._startConveyorBeltButtonMouseUp = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false);
  this._stopRollingLeft()
};
AdfConveyorBeltHorizontal.prototype._startConveyorBeltButtonMouseOut = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false);
  this._stopRollingLeft()
};
AdfConveyorBeltHorizontal.prototype._endConveyorBeltButtonPressed = function(event) {
  var agent = AdfAgent.AGENT;
  var eventType = event.type;
  if(eventType == "mousedown" && event.button && event.button != AdfUIInputEvent.LEFT_BUTTON_FLAG) {
    agent.eatEvent(event);
    return
  }
  var targetElement = agent.getEventTarget(event);
  if(AdfDomUtils.containsCSSClassName(targetElement, AdfRichUIPeer.DISABLED_STYLECLASS)) {
    agent.eatEvent(event);
    return
  }
  if(eventType == "mousedown") {
    this._setDepressedStyle(targetElement, true)
  }
  this._keepRollingRight = true;
  if(this._otherCBSupport) {
    this._rollMultipleRight()
  }else {
    this._rollRight()
  }
  if(!AdfPage.PAGE.isAnimationEnabled()) {
    var rollRightCallback = this._otherCBSupport ? this.createCallback(this._rollMultipleRight) : this.createCallback(this._rollRight);
    this._rollRightTimer = setInterval(rollRightCallback, 200)
  }
  agent.eatEvent(event)
};
AdfConveyorBeltHorizontal.prototype._endConveyorBeltButtonMouseUp = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false);
  this._stopRollingRight()
};
AdfConveyorBeltHorizontal.prototype._endConveyorBeltButtonMouseOut = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false);
  this._stopRollingRight()
};
AdfConveyorBeltHorizontal.prototype._setDepressedStyle = function(targetElement, depressed) {
  var className = AdfConveyorBeltSupport.DEPRESSED_STYLE_CLASS;
  if(depressed) {
    AdfDomUtils.addCSSClassName(targetElement, className)
  }else {
    AdfDomUtils.removeCSSClassName(targetElement, className)
  }
};
AdfConveyorBeltHorizontal.prototype._initDroplistButtonEventHandling = function() {
  var agent = AdfAgent.AGENT;
  var droplistIndicator = this._droplistIndicator;
  var droplistHints = this._createConveyorBeltPopupHints();
  droplistHints[AdfDhtmlPopupWindow.HINT_ALIGN_ELEMENT] = droplistIndicator;
  droplistHints[AdfRichPopup.HINT_ALIGN] = AdfRichPopup["ALIGN_AFTER_END"];
  this._droplistHints = droplistHints;
  this._droplistShowCall = this.createCallback(this._droplistButtonPressed);
  var droplistShowCall = this._droplistShowCall;
  agent.addBubbleEventListener(droplistIndicator, "mousedown", droplistShowCall);
  agent.addBubbleEventListener(droplistIndicator, "keydown", droplistShowCall);
  this._droplistButtonMouseUpCall = this.createCallback(this._droplistButtonMouseUp);
  agent.addBubbleEventListener(droplistIndicator, "mouseup", this._droplistButtonMouseUpCall);
  this._droplistButtonMouseOutCall = this.createCallback(this._droplistButtonMouseOut);
  agent.addBubbleEventListener(droplistIndicator, "mouseout", this._droplistButtonMouseOutCall)
};
AdfConveyorBeltHorizontal.prototype._createConveyorBeltPopupHints = function() {
  var hints = new Object;
  hints[AdfDhtmlPopupWindow.HINT_AUTODISMISS] = AdfDhtmlPopupWindow.HINT_AUTODISMISS_ALWAYS;
  hints[AdfDhtmlPopupWindow.HINT_FOCUS] = true;
  hints[AdfDhtmlPopupWindow.HINT_TYPE] = AdfDhtmlPopupWindow.HINT_TYPE_MENU;
  hints[AdfDhtmlPopupWindow.HINT_CLOSE_ON_ESCAPE] = true;
  return hints
};
AdfConveyorBeltHorizontal.prototype._droplistButtonPressed = function(event) {
  var agent = AdfAgent.AGENT;
  var eventType = event.type;
  var keyCode = event.keyCode;
  if(eventType == "keydown" && keyCode != AdfKeyStroke.ENTER_KEY && keyCode != AdfKeyStroke.ARROWDOWN_KEY) {
    return
  }else {
    if(eventType == "mousedown" && event.button && event.button != AdfUIInputEvent.LEFT_BUTTON_FLAG) {
      agent.eatEvent(event);
      return
    }
  }
  if(this._hideDroplistContainerCallback == null) {
    this._hideDroplistContainerCallback = this.createCallback(this._hideDroplistContainer);
    AdfObject.ensureClassInitialization(AdfDhtmlPopupWindow);
    this._droplistHints[AdfDhtmlPopupWindow.HINT_CLOSE_HANDLER] = this._hideDroplistContainerCallback;
    this._droplistContainerParent = this._droplistContainer.parentNode
  }
  var peer = AdfConveyorBeltHorizontal.superclass.GetPeer.call(this);
  var component = peer.getComponent();
  var droplistId = AdfConveyorBeltSupport.DROPLIST_ID;
  if(peer.isPopupVisible(component, droplistId)) {
    peer.hidePopup(component, droplistId)
  }else {
    peer.showPopup(component, this._droplistContainer, this._droplistHints, droplistId)
  }
  if(eventType == "mousedown") {
    var targetElement = agent.getEventTarget(event);
    this._setDepressedStyle(targetElement, true)
  }
  agent.eatEvent(event)
};
AdfConveyorBeltHorizontal.prototype._droplistButtonMouseUp = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false)
};
AdfConveyorBeltHorizontal.prototype._droplistButtonMouseOut = function(event) {
  var targetElement = AdfAgent.AGENT.getEventTarget(event);
  this._setDepressedStyle(targetElement, false)
};
AdfConveyorBeltHorizontal.prototype._hideDroplistContainer = function() {
  if(this._droplistContainer) {
    this._droplistContainerParent.appendChild(this._droplistContainer)
  }
};
